<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine unveränderliche Auflistung von Schlüssel-Wert-Paaren dar.  

 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Die Art der Schlüssel im Wörterbuch</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Die Art der Werte im Wörterbuch</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">Fügt dem Wörterbuch ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value" vsli:raw="The value of the element to add.">Der Wert des hinzuzufügenden Elements.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">Der angegebene Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Ein neues unveränderliches Wörterbuch, das das zusätzliche Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">Fügt dem Wörterbuch die angegebenen Schlüssel-Wert-Paare hinzu.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Die Schlüssel-Wert-Paare, die hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Einer der angegebenen Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Ein neues unveränderliches Wörterbuch, das die zusätzlichen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Ruft ein leeres Wörterbuch ab, das über dieselben Sortier- und Schlüssel-Wert-Vergleichsregeln wie diese Wörterbuchinstanz verfügt.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Ein leeres Wörterbuch mit äquivalenten Sortier- und Schlüssel-Wert-Vergleichsregeln.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">Bestimmt, ob das unveränderliche Wörterbuch das angegebene Schlüssel-Wert-Paar enthält.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Das Schlüssel-Wert-Paar, das gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Schlüssel-Wert-Paar im Wörterbuch gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Wörterbuch.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Ein neues unveränderliches Wörterbuch, aus dem das angegebene Element entfernt wurde, oder diese Instanz, wenn der angegebene Schlüssel im Wörterbuch nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Entfernt die Elemente mit den angegebenen Schlüsseln aus dem unveränderlichen Wörterbuch.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Die Schlüssel der zu entfernenden Elemente.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Ein neues unveränderliches Wörterbuch, aus dem die angegebenen Schlüssel entfernt wurden, oder diese Instanz, wenn die angegebenen Schlüssel im Wörterbuch nicht gefunden wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Legt den angegebenen Schlüssel und Wert im unveränderlichen Wörterbuch fest, wobei ein vorhandener Wert für den Schlüssel überschrieben werden kann.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Der Schlüssel des hinzuzufügenden Eintrags.</param>
      <param name="value" vsli:raw="The key value to set.">Der Schlüsselwert, der festgelegt werden soll.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Ein neues unveränderliches Wörterbuch, das das angegebene Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Legt die angegebenen Schlüssel-Wert-Paare im unveränderlichen Wörterbuch fest, wobei vorhandene Werte für die Schlüssel überschrieben werden können.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Die Schlüssel-Wert-Paare, die im Wörterbuch festgelegt werden sollen. Falls ein Schlüssel bereits im Wörterbuch vorhanden ist, überschreibt diese Methode dessen vorherigen Wert.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Ein neues unveränderliches Wörterbuch, das die angegebenen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Liste von Elementen dar, die nicht geändert werden kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Der Typ der Elemente in der Liste</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">Erstellt eine Kopie der Liste und fügt das angegebene Objekt am Ende der kopierten Liste hinzu.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Das Objekt, das der Liste hinzugefügt werden soll.</param>
      <returns vsli:raw="A new list with the object added.">Eine neue Liste, der das Objekt hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">Erstellt eine Kopie der Liste und fügt die angegebenen Objekte am Ende der kopierten Liste hinzu.</summary>
      <param name="items" vsli:raw="The objects to add to the list.">Die Objekte, die der Liste hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new list with the elements added.">Eine neue Liste, der die Elemente hinzugefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">Erstellt eine Liste, aus der alle Elemente entfernt wurden, aber mit derselben Sortierungs- und Reihenfolgensemantik wie diese Liste.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Eine leere Liste, die dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">Das im <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zu suchende Objekt. Dieser Wert kann für Verweistypen NULL sein.</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">Die nullbasierten Startindizes für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">Der Gleichheitsvergleich, der zum Suchen von <paramref name="item" /> verwendet werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">Der nullbasierte Index des ersten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in <see cref="T:System.Collections.Immutable.IImmutableList`1" />, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Fügt das angegebene Element am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">Der nullbasierte Index, an dem der Wert eingefügt werden soll.</param>
      <param name="element" vsli:raw="The object to insert.">Das einzufügende Objekt.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Eine neue unveränderliche Liste, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Fügt die angegebenen Elemente am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Der nullbasierte Index, an dem neue Elemente eingefügt werden sollen.</param>
      <param name="items" vsli:raw="The elements to insert.">Die einzufügenden Elemente.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Eine neue unveränderliche Liste, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">Der Gleichheitsvergleich, mit dem <paramref name="item" /> abgeglichen werden soll.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Gibt <see cref="T:System.Int32" />zurück.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">Entfernt das erste Vorkommen eines angegebenen Objekts aus dieser unveränderlichen Liste.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Das Objekt, das aus der Liste entfernt werden soll.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">Der Gleichheitsvergleich, der zum Suchen von <paramref name="value" /> verwendet werden soll.</param>
      <returns vsli:raw="A new list with the specified object removed.">Eine neue Liste, aus der das angegebene Objekt entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Entfernt das Element am angegebenen Index der unveränderlichen Liste.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Der Index des zu entfernenden Elements.</param>
      <returns vsli:raw="A new list with the element removed.">Eine neue Liste, aus der das Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">Entfernt das angegebene Objekt aus der Liste.</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">Die Objekte, die aus der Liste entfernt werden sollen.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">Der Gleichheitsvergleich, mit dem bestimmt wird, ob <paramref name="items" /> mit Objekten in der Liste übereinstimmen.</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">Eine neue unveränderliche Liste, aus der die angegebenen Objekte entfernt wurden, wenn <paramref name="items" /> mit Objekten in der Liste übereingestimmt haben.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">Entfernt einen Bereich von Elementen aus der <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">Der nullbasierte Startindex des zu entfernenden Bereichs von Elementen.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Die Anzahl der zu entfernenden Elemente.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">Gibt eine neue Liste zurück, wobei das erste übereinstimmende Element in der Liste durch das angegebene Element ersetzt wurde.</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">Das zu ersetzende Element.</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Das Element, durch das das erste Vorkommen von <paramref name="oldValue" /> ersetzt werden soll.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">Der Gleichheitsvergleich, der für den Abgleich mit <paramref name="oldValue" /> verwendet werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">
        <paramref name="oldValue" /> ist nicht in der Liste vorhanden.</exception>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">Eine neue Liste, die selbst dann <paramref name="newValue" /> enthält, wenn <paramref name="oldvalue" /> und <paramref name="newValue" /> gleich sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Ersetzt ein Element an einer bestimmten Position in der Liste durch das angegebene Element.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Die Position des zu ersetzenden Elements in der Liste.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Das durch ein Element zu ersetzende alte Element.</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">Eine neue Liste, die das neue Element selbst dann enthält, wenn das Element an der angegebenen Position und das neue Element gleich sind.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine unveränderliche FIFO-Auflistung (First-In-First-Out) von Objekten dar.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Der Typ der Elemente in der Warteschlange.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">Gibt eine neue Warteschlange zurück, deren Elemente entfernt wurden.</summary>
      <returns vsli:raw="An empty immutable queue.">Eine leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">Entfernt das erste Element in der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Die Warteschlange ist leer.</exception>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">Die neue unveränderliche Warteschlange, aus der das erste Element entfernt wurde. Dieser Wert ist nie <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Fügt ein Element am Ende der unveränderlichen Warteschlange hinzu und gibt die neue Warteschlange zurück.</summary>
      <param name="value" vsli:raw="The element to add.">Das hinzuzufügende Element.</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">Die neue unveränderliche Warteschlange mit dem angegebenen hinzugefügten Element.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Gibt das Element am Anfang der unveränderlichen Warteschlange zurück, ohne es zu entfernen.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Die Warteschlange ist leer.</exception>
      <returns vsli:raw="The element at the beginning of the queue.">Das Element am Anfang der Warteschlange.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">Ruft einen Wert ab, der angibt, ob diese unveränderliche Warteschlange leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Warteschlange leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Gruppe von Elementen dar, die nur durch Erstellen einer neuen Instanz der Gruppe geändert werden kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">Der Typ des in der Gruppe gespeicherten Elements.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="value" vsli:raw="The element to add.">Das hinzuzufügende Element.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Eine neue Gruppe mit dem hinzugefügten Element oder diese Gruppe, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Ruft eine leere unveränderliche Gruppe ab, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Eine leere unveränderliche Gruppe, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">Ermittelt, ob diese unverändertliche Gruppe ein bestimmtes Element enthält.</summary>
      <param name="value" vsli:raw="The element to locate in the set.">Das Element, das in der Gruppe gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Gruppe den angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Entfernt die Elemente in der angegebenen Auflistung aus der aktuellen unveränderlichen Gruppe.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Die Auflistung der Elemente, die aus dieser Gruppe entfernt werden sollen.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Eine neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">Erstellt eine unveränderliche Gruppe, die nur Elemente enthält, die in dieser Gruppe und der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">Die Auflistung, die mit der aktuellen <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> verglichen werden soll.</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">Eine neue unverändertliche Gruppe, die Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">Bestimmt, ob die aktuelle unverändertliche Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">Bestimmt, ob die aktuelle unveränderliche Gruppe eine echte (strikte) Teilmenge der angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">Bestimmt, ob die aktuelle unveränderliche Gruppe eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">Bestimmt, ob die aktuelle unveränderliche Gruppe eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">Bestimmt, ob sich die aktuelle unveränderliche Gruppe und die angegebene Auflistung überschneiden.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe und die angegebene Auflistung über mindestens ein gemeinsames Element verfügen; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="value" vsli:raw="The element to remove.">Das zu entfernende Element.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Eine neue Gruppe, aus der das angegebene Element entfernt wurde, oder die aktuelle Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">Bestimmt, ob die aktuelle unveränderliche Gruppe und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Gruppen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Erstellt eine unveränderliche Gruppe, die nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Eine neue Gruppe mit den Elementen, die nur in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">Bestimmt, ob die Liste einen bestimmten Wert enthält.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Der zu suchende Wert.</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">Der übereinstimmende Wert aus der Gruppe, wenn gefunden, oder <c>equalvalue</c>, wenn keine Übereinstimmungen vorhanden sind.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, Wenn ein entsprechender Wert gefunden wurde; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Erstellt eine unveränderliche Gruppe, die alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Die Auflistung, aus der Elemente hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Eine neue unveränderliche Gruppe mit den hinzugefügten Elementen; oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine unveränderliche LIFO (Last-In-First-Out)-Auflistung dar.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">Der Typ der Elemente in dem Stapel.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Entfernt alle Objekte aus dem unveränderlichen Stapel.</summary>
      <returns vsli:raw="An empty immutable stack.">Ein leerer unveränderlicher Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">Gibt das Element am Anfang des unveränderlichen Stapels zurück, ohne ihn zu entfernen.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Der Stapel ist leer.</exception>
      <returns vsli:raw="The element at the top of the stack.">Das Element oben im Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Entfernt das Element am Anfang des unveränderlichen Stapels und gibt den neuen Stapel zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Der Stapel ist leer.</exception>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Der neue Stapel, niemals <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Fügt ein Element am Anfang des unveränderlichen Stapels ein und gibt den neuen Stapel zurück.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Das Element, das auf dem Stapel abgelegt werden soll.</param>
      <returns vsli:raw="The new stack.">Der neue Stapel.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">Ruft einen Wert ab, der angibt, ob dieser unveränderliche Stapel leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieser Stapel leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt Methoden zum Erstellen eines Arrays bereit, das unveränderlich ist. Dies bedeutet, dass es nach der Erstellung nicht mehr geändert werden kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">Durchsucht mithilfe des Standardvergleichs das sortierte unveränderliche Array nach einem angegebenen Element und gibt den nullbasierten Index des Elements zurück, wenn es gefunden wird.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Das sortierte Array, das durchsucht werden soll.</param>
      <param name="value" vsli:raw="The object to search for.">Das Objekt, nach dem gesucht werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Der Typ des im Array gespeicherten Elements.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> implementiert <see cref="T:System.IComparable" /> nicht, oder bei der Suche wird ein Element gefunden, das <see cref="T:System.IComparable" /> nicht implementiert.</exception>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Der nullbasierte Index des Elements im Array, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="value" /> ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Durchsucht ein sortiertes unveränderliches Array nach einem angegebenen Element und gibt den nullbasierten Index des Elements zurück, wenn es gefunden wird.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Das sortierte Array, das durchsucht werden soll.</param>
      <param name="value" vsli:raw="The object to search for.">Das Objekt, nach dem gesucht werden soll.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">Die Vergleichsimplementierung, die beim Vergleichen von Elementen verwendet werden soll, oder NULL, wenn der Standardvergleich verwendet werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Der Typ des im Array gespeicherten Elements.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> ist NULL, und <paramref name="value" /> implementiert <see cref="T:System.IComparable" /> nicht, oder bei der Suche wird ein Element gefunden, das <see cref="T:System.IComparable" /> nicht implementiert.</exception>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Der nullbasierte Index des Elements im Array, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="value" /> ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Durchsucht ein sortiertes unveränderliches Array nach einem angegebenen Element und gibt den nullbasierten Index des Elements zurück, wenn es gefunden wird.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Das sortierte Array, das durchsucht werden soll.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Der Startindex des zu durchsuchenden Bereichs.</param>
      <param name="length" vsli:raw="The length of the range to search.">Die Länge des zu durchsuchenden Bereichs.</param>
      <param name="value" vsli:raw="The object to search for.">Das Objekt, nach dem gesucht werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Der Typ des im Array gespeicherten Elements.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> implementiert <see cref="T:System.IComparable" /> nicht, oder bei der Suche wird ein Element gefunden, das <see cref="T:System.IComparable" /> nicht implementiert.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> und <paramref name="length" /> geben keinen gültigen Bereich im <paramref name="array" /> an.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> ist kleiner als die untere <paramref name="array" />-Grenze.
        
- oder -

<paramref name="length" /> ist kleiner als Null.</exception>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Der nullbasierte Index des Elements im Array, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="value" /> ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">Durchsucht ein sortiertes unveränderliches Array nach einem angegebenen Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Das sortierte Array, das durchsucht werden soll.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Der Startindex des zu durchsuchenden Bereichs.</param>
      <param name="length" vsli:raw="The length of the range to search.">Die Länge des zu durchsuchenden Bereichs.</param>
      <param name="value" vsli:raw="The object to search for.">Das Objekt, nach dem gesucht werden soll.</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Der Vergleich, der beim Vergleichen von Elementen auf Gleichheit verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Der Typ des im Array gespeicherten Elements.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> ist NULL, und <paramref name="value" /> implementiert <see cref="T:System.IComparable" /> nicht, oder bei der Suche wird ein Element gefunden, das <see cref="T:System.IComparable" /> nicht implementiert.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> und <paramref name="length" /> geben keinen gültigen Bereich im <paramref name="array" /> an.
        
- oder -

<paramref name="comparer" /> ist <see langword="null" /> und <paramref name="value" /> verfügt über einen Typ, der nicht mit den Elementen von <paramref name="array" /> kompatibel ist.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> ist kleiner als die untere <paramref name="array" />-Grenze.

- oder -

<paramref name="length" /> ist kleiner als Null.</exception>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Der nullbasierte Index des Elements im Array, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="value" /> ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">Erstellt ein leeres unveränderliches Array.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An empty immutable array.">Ein leeres unveränderliches Array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">Erstellt ein unveränderliches Array, das das angegebene Objekt enthält.</summary>
      <param name="item" vsli:raw="The object to store in the array.">Das Objekt, das im Array gespeichert werden soll.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">Ein unveränderliches Array, das das angegebene Objekt enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Erstellt ein unveränderliches Array, das die angegebenen Objekte enthält.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Das erste Objekt, das im Array gespeichert werden soll.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Das zweite Objekt, das im Array gespeichert werden soll.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Ein unveränderliches Array, das die angegebenen Objekte enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Erstellt ein unveränderliches Array, das die angegebenen Objekte enthält.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Das erste Objekt, das im Array gespeichert werden soll.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Das zweite Objekt, das im Array gespeichert werden soll.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Das dritte Objekt, das im Array gespeichert werden soll.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Ein unveränderliches Array, das die angegebenen Objekte enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Erstellt ein unveränderliches Array, das die angegebenen Objekte enthält.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Das erste Objekt, das im Array gespeichert werden soll.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Das zweite Objekt, das im Array gespeichert werden soll.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Das dritte Objekt, das im Array gespeichert werden soll.</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">Das vierte Objekt, das im Array gespeichert werden soll.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Ein unveränderliches Array, das die angegebenen Objekte enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">Erstellt ein unveränderliches Array aus dem angegebenen Objektarray.</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">Das Array von Objekten, mit denen das Array aufgefüllt werden soll.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">Ein unveränderliches Array, das das Array von Elementen enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">Erstellt ein unveränderliches Array mit den angegebenen Objekten aus einem anderen Array.</summary>
      <param name="items" vsli:raw="The source array of objects.">Das Quellarray von Objekten.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Der Index des ersten aus <paramref name="items" /> zu kopierenden Elements.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Die Anzahl der Elemente von <paramref name="items" />, die in dieses unveränderliche Array eingeschlossen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Ein unveränderliches Array, das die angegebenen Objekte aus dem Quellarray enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">Erstellt ein unveränderliches Array mit den angegebenen Objekten aus einem anderen unveränderlichen Array.</summary>
      <param name="items" vsli:raw="The source array of objects.">Das Quellarray von Objekten.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Der Index des ersten aus <paramref name="items" /> zu kopierenden Elements.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Die Anzahl der Elemente von <paramref name="items" />, die in dieses unveränderliche Array eingeschlossen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Ein unveränderliches Array, das die angegebenen Objekte aus dem Quellarray enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Erstellt ein änderbares Array, das in <see cref="T:System.Collections.Immutable.ImmutableArray" /> konvertiert werden kann, ohne neuen Arbeitsspeicher zu belegen.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Der Typ der im Generator gespeicherten Elemente.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Ein änderbares Array des angegebenen Typs, das effizient in ein unveränderliches Array konvertiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Erstellt ein änderbares Array, das in <see cref="T:System.Collections.Immutable.ImmutableArray" /> konvertiert werden kann, ohne neuen Arbeitsspeicher zu belegen.</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">Die Anfangskapazität des Generators.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Der Typ der im Generator gespeicherten Elemente.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Ein änderbares Array des angegebenen Typs, das effizient in ein unveränderliches Array konvertiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">Erstellt ein neues <see cref="T:System.Collections.Immutable.ImmutableArray`1" />, das mit den angegebenen Elementen aufgefüllt ist.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Die Elemente, die zum Array hinzugefügt werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Der Typ des im Array gespeicherten Elements.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Ein unveränderliches Array, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Das Quellarray, mit dem das resultierende Array initialisiert wird.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Die Funktion, die aus dem Quellarray auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array.">Der Typ des im Quell Array gespeicherten Elements.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array.">Der Typ des Elements, das im Zielarray gespeichert werden soll.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Ein unveränderliches Array, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Das Quellarray, mit dem das resultierende Array initialisiert wird.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Der Index des ersten Elements im Quellarray, das in das resultierende Array eingeschlossen werden soll.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Die Anzahl von Elementen aus dem Quellarray, die in das sich ergebende Array eingeschlossen werden sollen.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Die Funktion, die auf jedes Element vom Quellarray, das im resultierenden Array enthalten ist, angewendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array.">Der Typ des im Quell Array gespeicherten Elements.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array.">Der Typ des Elements, das im Zielarray gespeichert werden soll.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Ein unveränderliches Array, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Das Quellarray, mit dem das resultierende Array initialisiert wird.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Die Funktion, die aus dem Quellarray auf jedes Element angewendet werden soll.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Ein Argument, das an die Zuordnungsfunktion des Selektors übergeben werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array.">Der Typ des im Quell Array gespeicherten Elements.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function.">Der Argumenttyp, der an die Selector-Zuordnungs Funktion übergeben werden soll.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array.">Der Typ des Elements, das im Zielarray gespeichert werden soll.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Ein unveränderliches Array, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Das Quellarray, mit dem das resultierende Array initialisiert wird.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Der Index des ersten Elements im Quellarray, das in das resultierende Array eingeschlossen werden soll.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Die Anzahl von Elementen aus dem Quellarray, die in das sich ergebende Array eingeschlossen werden sollen.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Die Funktion, die auf jedes Element vom Quellarray, das im resultierenden Array enthalten ist, angewendet werden soll.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Ein Argument, das an die Zuordnungsfunktion des Selektors übergeben werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array.">Der Typ des im Quell Array gespeicherten Elements.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function.">Der Argumenttyp, der an die Selector-Zuordnungs Funktion übermittelt werden soll.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array.">Der Typ des Elements, das im Zielarray gespeichert werden soll.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Ein unveränderliches Array, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">Erstellt ein unveränderliches Array aus der angegebenen Auflistung.</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">Die Auflistung von Objekten, die in das unveränderliche Array kopiert werden sollen.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">Der Typ der in <paramref name="items" /> enthaltenen Elemente.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">Ein unveränderliches Array, das die angegebene Auflistung von Objekten enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">Erstellt ein unveränderliches Array aus dem aktuellen Inhalt des Arrays des Generators.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">Der Generator, aus dem das unveränderliche Array erstellt werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">Der Typ der Elemente, die im unveränderlichen Array enthalten sind.</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">Ein unveränderliches Array, das den aktuellen Inhalt des Arrays des Generators enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt ein Array dar, das unveränderlich ist; was bedeutet, dass es nach Erstellung nicht mehr geändert werden kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Der Typ des Elements, das durch das Array gespeichert wird.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">Ruft ein leeres unveränderliches Array auf.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Gibt eine Kopie des ursprünglichen Arrays mit dem angegebenen, am Ende hinzugefügten, Element zurück.</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">Das Element, das zum Ende des Arrays hinzugefügt werden soll.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Ein neues Array mit dem am Ende hinzugefügten angegebenen Element.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Gibt eine Kopie des ursprünglichen Arrays mit den angegebenen, zum Ende des Arrays hinzugefügten, Elementen zurück.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Die Elemente, die zum Array hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new array with the elements added.">Ein neues Array mit den hinzugefügten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Gibt eine Kopie des ursprünglichen Arrays mit den angegebenen, zum Ende des Arrays hinzugefügten, Elementen zurück.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Die Elemente, die zum Array hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new array with the elements added.">Ein neues Array mit den hinzugefügten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">Gibt ein neues unveränderliches Array zurück, das die Elemente dieses Arrays enthält und zu einem anderen Typ umgewandelt wurde.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">Der Typ des zurückzugebenden Array-Elements.</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Ein unveränderliches Array, das die Elemente dieses Arrays enthält und zu einem anderen Typ umgewandelt wurde. Wenn die Umwandlung fehlschlägt, gibt es ein Array zurück, dessen <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> Eigenschaft <see langword="true" /> zurückgibt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">Erstellt eine neue schreibgeschützte Speicherregion über diesem unveränderlichen Array.</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">Die schreibgeschützte Speicherdarstellung dieses unveränderlichen Arrays.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">Erstellt einen neue schreibgeschützten Bereich über diesem unveränderlichen Array.</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">Die schreibgeschützte Bereichsdarstellung dieses unveränderlichen Arrays.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur, indem das zugrunde liegende Array in ein Array des Typs <typeparamref name="TOther" /> umgewandelt wird.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">Der Typ des zurückzugebenden Array-Elements.</typeparam>
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">Wird ausgelöst, wenn die Umwandlung nicht zulässig ist.</exception>
      <returns vsli:raw="An immutable array instance with elements cast to the new type.">Dies ist eine unveränderliche Arrayinstanz mit Elementen, die in den neuen Typ umgewandelt werden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">Hiermit wird eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur basierend auf den Inhalten einer vorhandenen Instanz initialisiert, wodurch eine kovariante, statische Umwandlung das vorhandene Array effizient wiederverwenden kann.</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">Das Array, mit dem das Array initialisiert werden soll. Es wird keine Kopie erstellt.</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return.">Der Typ des zurückzugebenden Array-Elements.</typeparam>
      <returns vsli:raw="An immutable array instance with elements cast to the new type.">Dies ist eine unveränderliche Arrayinstanz mit Elementen, die in den neuen Typ umgewandelt werden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Gibt ein Array zurück, dessen Elemente entfernt wurden.</summary>
      <returns vsli:raw="An array with all of the elements removed.">Ein Array, dessen Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">Bestimmt, ob das angegebene Element im Array vorhanden ist.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Element im Array gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">Kopiert den Inhalt dieses Arrays in ein angegebenes Array.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">Kopiert den Inhalt dieses Arrays in das angegebene Array, wobei am angegebenen Zielindex begonnen wird.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">Der Index im <paramref name="array" />, bei dem mit dem Kopieren begonnen wird.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">Kopiert die angegebenen Elemente in diesem Array in das angegebene Array am angegebenen Startindex.</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">Der Index dieses Arrays, bei dem mit dem Kopieren begonnen wird.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">Der Index im <paramref name="array" />, bei dem mit dem Kopieren begonnen wird.</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">Die Anzahl von Elementen, die von diesem Array kopiert werden.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">Gibt an, ob eine angegebenes Array diesem Array entspricht.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">Ein Objekt, das mit diesem Objekt verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="other" /> mit diesem Array identisch ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">Bestimmt, ob dieses Array dem angegebenen Objekt entspricht.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">Das <see cref="T:System.Object" />, das mit diesem Array verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Array mit <paramref name="obj" /> identisch ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">Gibt einen Enumerator zurück, der den Inhalt des Arrays durchläuft.</summary>
      <returns vsli:raw="An enumerator.">Ein Enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">Gibt einen Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">Ein Hashcode für diese Instanz, der zur Verwendung in Hashalgorithmen und Hashdatenstrukturen, z. B. einer Hashtabelle, geeignet ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Gibt ein neues Array mit dem angegebenen Wert zurück, der an der angegebenen Position eingefügt wurde.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Der nullbasierte Index im Array, an dem das neue Element hinzugefügt werden soll.</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">Das am Anfang des Arrays einzufügende Element.</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">Ein neues Array mit dem Element , das am angegebenen Index eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Fügt die angegebenen Werte am angegebenen Index ein.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Der Index, an dem der Wert eingefügt werden soll.</param>
      <param name="items" vsli:raw="The elements to insert.">Die einzufügenden Elemente.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Ein neues unveränderliches Array mit den Elementen, die am angegebenen Index eingefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Fügt die angegebenen Werte am angegebenen Index ein.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Der Index, an dem der Wert eingefügt werden soll.</param>
      <param name="items" vsli:raw="The elements to insert.">Die einzufügenden Elemente.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Ein neues unveränderliches Array mit den Elementen, die am angegebenen Index eingefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Ruft einen schreibgeschützten Verweis auf das Element am angegebenen <paramref name="index" /> in der schreibgeschützten Liste ab.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">Der nullbasierte Index des Elements, auf das ein Verweis abgerufen werden soll.</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Ein schreibgeschützter Verweis auf das Element am angegebenen <paramref name="index" /> in der schreibgeschützten Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Durchsucht das Array nach dem angegebenen Element; beginnt am Ende des Arrays.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Durchsucht das Array nach dem angegebenen Element; beginnt am Ende des Arrays.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Durchsucht das Array nach dem angegebenen Element; beginnt am Ende des Arrays.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Durchsucht das Array nach dem angegebenen Element; beginnt am Ende des Arrays.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">Filtert die Elemente dieses Arrays zu denen, die dem angegebenen Typ zugewiesen werden.</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">Ein <see cref="T:System.Collections.IEnumerable" />, das Elemente aus der Eingabesequenz vom Typ <paramref name="TResult" /> enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Gibt einen Wert zurück, der angibt, ob zwei Arrays gleich sind.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Das Array, das links vom Operator steht.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Das Array, das rechts vom Operator steht.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> bei Gleichheit der Arrays, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Gibt einen Wert zurück, der angibt, ob zwei Arrays gleich sind.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Das Array, das links vom Operator steht.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Das Array, das rechts vom Operator steht.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> bei Gleichheit der Arrays, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">Gibt einen Wert zurück, der angibt, ob zwei Arrays ungleich sind.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Das Array, das links vom Operator steht.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Das Array, das rechts vom Operator steht.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Arrays nicht gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">Prüft auf Ungleichheit zwischen zwei Arrays.</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">Das Objekt, das links vom Operator steht.</param>
      <param name="right" vsli:raw="The object to the right of the operator.">Das Objekt, das rechts vom Operator steht.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die beiden Arrays nicht gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">Gibt ein Array mit dem ersten Vorkommen des angegebenen Elements zurück, das aus dem Array entfernt wurde. Wenn keine Übereinstimmung gefunden wird, wird das aktuelle Array zurückgegeben.</summary>
      <param name="item" vsli:raw="The item to remove.">Das zu entfernende Element.</param>
      <returns vsli:raw="A new array with the item removed.">Ein neues Array, bei dem das Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">Gibt ein Array mit dem ersten Vorkommen des angegebenen Elements zurück, das aus dem Array entfernt wurde.  
  
 Wenn keine Übereinstimmung gefunden wird, wird das aktuelle Array zurückgegeben.</summary>
      <param name="item" vsli:raw="The item to remove.">Das zu entfernende Element.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="A new array with the specified item removed.">Ein neues Array, bei dem das angegebene Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Entfernt alle Elemente aus dem Array, die die angegebene Bedingung erfüllen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Ein neues Array mit Elementen, die die angegebenen Bedingung erfüllen und entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Gibt ein Array mit dem Element zurück, das von angegebener Position entfernt wurde.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Der 0-basierte Index des Elements, das aus dem zurückgegebenen Array entfernt werden soll.</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">Ein neues Array mit dem Element , das am angegebenen Index entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Entfernt die angegebenen Elemente aus diesem Array.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <returns vsli:raw="A new array with the elements removed.">Ein neues Array mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Entfernt die angegebenen Elemente aus diesem Array.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="A new array with the elements removed.">Ein neues Array mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Entfernt die angegebenen Werte aus dieser Liste.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <returns vsli:raw="A new list with the elements removed.">Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">Entfernt die angegebenen Elemente aus der Liste.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="A new array with the elements removed.">Ein neues Array mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Gibt ein Array mit den Elementen zurück, die von angegebener Position entfernt wurde.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Der 0-basierte Index des Startelements, das aus dem Array entfernt werden soll.</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">Die Anzahl der aus dem Array zu entfernenden Elemente.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Ein neues Array, bei dem die angegebenen Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Findet das erste Element im Array, das mit dem angegebenen Wert übereinstimmt und den Wert mit dem angegebenen neuen Wert ersetzt.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Der Wert, der im Array gesucht und ersetzt werden soll.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Der Wert, durch den <c>oldvalue</c> ersetzt wird.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> konnte im Array nicht gefunden werden.</exception>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Ein neues Array mit <paramref name="newValue" />, selbst wenn die alten und neuen Werte identisch sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Findet das erste Element im Array, das mit dem angegebenen Wert übereinstimmt und den Wert mit dem angegebenen neuen Wert ersetzt.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Der Wert, der im Array gesucht und ersetzt werden soll.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Der Wert, durch den <c>oldvalue</c> ersetzt wird.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Der Gleichheitsvergleich zum Vergleichen von Werten.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> konnte im Array nicht gefunden werden.</exception>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Ein neues Array mit <paramref name="newValue" />, selbst wenn die alten und neuen Werte identisch sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Ersetzt das Element im angegebenen Index durch ein angegebenes Element.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Der Index des zu ersetzenden Elements.</param>
      <param name="item" vsli:raw="The item to add to the list.">Das Element, das der Liste hinzugefügt werden soll.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Das neue Array, mit <paramref name="item" /> am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">Sortiert die Elemente im unveränderlichen Array mithilfe des Standardvergleichs.</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Ein neues unveränderliches Array, das die Elemente in diesem Array in sortierter Reihenfolge enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">Sortiert die Elemente im unveränderlichen Array mithilfe des angegebenen Vergleichs.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Ein neues unveränderliches Array, das die Elemente in diesem Array in sortierter Reihenfolge enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Sortiert die Elemente i, gesamten <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Objekt mithilfe des angegebenen <see cref="T:System.Comparison`1" />-Objekts.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">Die <see cref="T:System.Comparison`1" />, die beim Vergleich von Elementen verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> ist NULL.</exception>
      <returns vsli:raw="The sorted list.">Die sortierte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">Sortiert die angegebenen Elemente im unveränderlichen Array mithilfe des angegebenen Vergleichs.</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">Der Index des ersten zu sortierenden Elements.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Die Anzahl von Elementen, die in die Sortierung eingeschlossen werden sollen.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Ein neues unveränderliches Array, das die Elemente in diesem Array in sortierter Reihenfolge enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">Das Element, das dem Ende des Arrays hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="item" vsli:raw="The object to remove from the array.">Das Objekt, das aus dem Array entfernt werden soll.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Gibt einen Enumerator zurück, der das Array durchläuft.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Die <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" />-Eigenschaft gibt <see langword="true" /> zurück.</exception>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Ein Enumerator, mit dem das Array durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">Der Index der Position, an der das Element eingefügt werden soll.</param>
      <param name="item" vsli:raw="The item to insert.">Das einzufügende Element.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="index" vsli:raw="The index.">Der Index.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">Kopiert dieses Array in ein anderes Array, wobei am angegebenen Index begonnen wird.</summary>
      <param name="array" vsli:raw="The array to copy this array to.">Das Array, in das das Array kopiert werden soll.</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">Der Index im Zielarray, um den Kopiervorgang zu beginnen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">Gibt einen Enumerator zurück, der das unveränderliche Array durchläuft.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Die <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" />-Eigenschaft gibt <see langword="true" /> zurück.</exception>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">Ein Enumerator, der das unveränderliche Array durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="value" vsli:raw="The value to add to the array.">Der Wert, der dem Array hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Ausgelöst in allen Fällen.</exception>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="value" vsli:raw="The value to check for.">Der zu suchende Wert.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">Ruft den Wert beim angegebenen Index ab.</summary>
      <param name="value" vsli:raw="The value to return the index of.">Der Wert, dessen Index zurückgegeben werden soll.</param>
      <returns vsli:raw="The value of the element at the specified index.">Der Wert des Elements am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">Der Index, der angibt, an welcher Position das Element eingefügt werden soll.</param>
      <param name="value" vsli:raw="The value to insert.">Der einzufügende Wert.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Der Wert, der aus dem Array entfernt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="index" vsli:raw="The index of the item to remove.">Der Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Gibt eine Kopie des ursprünglichen Arrays mit dem angegebenen, am Ende hinzugefügten, Element zurück.</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">Der Wert, der am Ende des Arrays hinzugefügt werden soll.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Ein neues Array mit dem am Ende hinzugefügten angegebenen Element.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Gibt eine Kopie des ursprünglichen Arrays mit den angegebenen, zum Ende des Arrays hinzugefügten, Elementen zurück.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">Die Elemente, die dem Ende des Arrays hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new array with the elements added to the end.">Ein neues Array mit den am Ende hinzugefügten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Gibt ein Array zurück, dessen Elemente entfernt wurden.</summary>
      <returns vsli:raw="An array with all the elements removed.">Ein Array, dessen Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Gibt ein neues Array mit dem angegebenen Wert zurück, der an der angegebenen Position eingefügt wurde.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Der nullbasierte Index im Array, an dem das neue Element hinzugefügt werden soll.</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">Das am Anfang des Arrays einzufügende Element.</param>
      <returns vsli:raw="A new array with the specified value inserted.">Ein neues Array, bei dem der angegebene Wert eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Fügt die angegebenen Werte am angegebenen Index ein.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Der Index, an dem der Wert eingefügt werden soll.</param>
      <param name="items" vsli:raw="The elements to insert.">Die einzufügenden Elemente.</param>
      <returns vsli:raw="A new array with the specified values inserted.">Ein neues Array, bei dem die angegebenen Werte entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">Gibt ein Array mit dem ersten Vorkommen des angegebenen Elements zurück, das aus dem Array entfernt wurde. Wenn keine Übereinstimmung gefunden wird, wird das aktuelle Array zurückgegeben.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Der Wert, der aus dem Array entfernt werden soll.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="A new array with the value removed.">Ein neues Array, bei dem der Wert entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Entfernt alle Elemente aus dem Array, die die angegebene Bedingung erfüllen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Ein neues Array mit Elementen, die die angegebenen Bedingung erfüllen und entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Gibt ein Array mit dem Element zurück, das von angegebener Position entfernt wurde.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Der 0-basierte Index des Elements, das aus dem zurückgegebenen Array entfernt werden soll.</param>
      <returns vsli:raw="A new array with the specified item removed.">Ein neues Array, bei dem das angegebene Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Entfernt die angegebenen Elemente aus diesem Array.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="A new array with the elements removed.">Ein neues Array mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Gibt ein Array mit den Elementen zurück, die von angegebener Position entfernt wurde.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Der 0-basierte Index des Startelements, das aus dem Array entfernt werden soll.</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">Die Anzahl der aus dem Array zu entfernenden Elemente.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Ein neues Array, bei dem die angegebenen Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Findet das erste Element im Array, das mit dem angegebenen Wert übereinstimmt und den Wert mit dem angegebenen neuen Wert ersetzt.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Der Wert, der im Array gesucht und ersetzt werden soll.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Der Wert, durch den <c>oldvalue</c> ersetzt wird.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Der Gleichheitsvergleich zum Vergleichen von Werten.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> konnte im Array nicht gefunden werden.</exception>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Ein neues Array mit <paramref name="newValue" />, selbst wenn die alten und neuen Werte identisch sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Ersetzt das Element im angegebenen Index durch ein angegebenes Element.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Der Index des zu ersetzenden Elements.</param>
      <param name="value" vsli:raw="The value to add to the list.">Der Wert, der der Liste hinzugefügt werden soll.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Das neue Array, mit <paramref name="item" /> am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">Bestimmt, ob das aktuelle Auflistungselement in der Sortierreihenfolge vor oder nach einem anderen Element oder an derselben Position auftritt.</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">Das Element, das mit der aktuellen Instanz verglichen werden soll.</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">Das Objekt, mit dem Mitglieder des aktuellen Arrays mit den entsprechenden Mitgliedern von anderen Arrays verglichen werden.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">Die Arrays haben nicht dieselbe Länge.</exception>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">Eine ganze Zahl, die angibt, ob das aktuelle Element vorangestellt oder in der gleichen Position ist oder dem anderen Element folgt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">Bestimmt, ob dieses Array und das angegebene Array strukturell übereinstimmen.</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">Das Array, das mit der aktuellen Instanz verglichen werden soll.</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">Ein Objekt, das bestimmt, ob die aktuelle Instanz und andere strukturell übereinstimmen.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die beiden Arrays strukturell übereinstimmen, anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">Gibt einen Hashcode für die aktuelle Instanz zurück.</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">Ein Objekt, das den Hashcode des aktuellen Objekts berechnet.</param>
      <returns vsli:raw="The hash code for the current instance.">Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">Erstellt ein veränderbares Array, das den gleichen Inhalt wie dieses Array hat und über mehrere Vorgänge mithilfe von Standardschnittstellen effizient verändert werden kann.</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">Der neue Generator mit dem gleichen Inhalt wie dieses Array.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">Ruft einen Wert ab, der angibt, ob dieses Array deklariert, aber nicht initialisiert wurde.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="T:System.Collections.Immutable.ImmutableArray`1" /><see langword="null" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">Ruft einen Wert ab, der angibt, ob dieser <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> leer ist oder nicht initialisiert wurde.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> , wenn <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> oder ist, <see langword="null" /><see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /> andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">Ruft einen Wert ab, der angibt, ob dieser <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">Ruft das Element am angegebenen Index im unveränderlichen Array ab.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Der nullbasierte Index des abzurufenden Elements.</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">Das Element am angegebenen Index im unveränderlichen Array.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">Ruft die Anzahl der Elemente im Array ab.</summary>
      <returns vsli:raw="The number of elements in the array.">Die Anzahl der Elemente im Array.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
      <returns vsli:raw="Number of items in the collection.">Anzahl der Elemente in der Auflistung.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz schreibgeschützt ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">Ruft das Element am angegebenen Index in der schreibgeschützten Liste ab oder legt es fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Der nullbasierte Index des abzurufenden Elements.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Wird immer vom Setter ausgelöst.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
      <returns vsli:raw="The element at the specified index in the read-only list.">Das Element am angegebenen Index in der schreibgeschützten Liste.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
      <returns vsli:raw="The number of items in the collection.">Die Anzahl der Elemente in der Auflistung.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">Ruft das Element am angegebenen Index ab.</summary>
      <param name="index" vsli:raw="The index.">Der Index.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
      <returns vsli:raw="The element.">Das Element.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">Ruft die Größe des Arrays ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
      <returns vsli:raw="The number of items in the collection.">Die Anzahl der Elemente in der Auflistung.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">Siehe Schnittstelle <see cref="T:System.Collections.ICollection" />. Es wird immer <see langword="true" /> zurückgegeben, da unveränderliche Auflistungen immer threadsicher sind.</summary>
      <returns vsli:raw="Boolean value determining whether the collection is thread-safe.">Boolescher Wert, der bestimmt, ob die Auflistung Thread sicher ist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">Ruft den Synchronisierungsstamm ab.</summary>
      <returns vsli:raw="An object for synchronizing access to the collection.">Ein Objekt zum Synchronisieren des Zugriffs auf die Auflistung.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">Ruft einen Wert ab, der angibt, ob diese Instanz eine festgelegte Größe hat.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> , wenn diese Instanz eine Festgröße hat. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz schreibgeschützt ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Ruft die <see cref="T:System.Object" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The index.">Der Index.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Wird immer vom Setter ausgelöst.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
      <returns vsli:raw="The object at the specified index.">Das Objekt am angegebenen Index.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Eine beschreibbare Arrayzugriffsmethode, der in eine <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Instanz konvertiert werden kann, ohne zusätzlichen Speicher zu belegen.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">Fügt dem Array das angegebene Element hinzu.</summary>
      <param name="item" vsli:raw="The object to add to the array.">Das Objekt, das dem Array hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Das Element, das der Liste hinzugefügt werden soll.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Die Anzahl der aus dem Quellarray hinzuzufügenden Elemente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Das Element, das der Liste hinzugefügt werden soll.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Die Anzahl der aus dem Quellarray hinzuzufügenden Elemente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Fügt die angegebenen Elemente, die vom derzeit im Array angegebenen Typ abgeleitet werden, am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">Die Elemente, die dem Ende des Arrays hinzugefügt werden sollen.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Der Typ, der von dem bereits im Array vorhandenen Elementtyp abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Fügt die angegebenen Elemente, die vom derzeit im Array angegebenen Typ abgeleitet werden, am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Die Elemente, die dem Ende des Arrays hinzugefügt werden sollen.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Der Typ, der von dem bereits im Array vorhandenen Elementtyp abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Fügt die angegebenen Elemente, die vom derzeit im Array angegebenen Typ abgeleitet werden, am Ende des Arrays hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Die Elemente, die dem Ende des Arrays hinzugefügt werden sollen.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Der Typ, der von dem bereits im Array vorhandenen Elementtyp abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">Entfernt alle Elemente aus dem Array.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">Bestimmt, ob das Array einen bestimmten Wert enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the array.">Das Objekt, das im Array gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">Kopiert den aktuellen Inhalt in das angegebene Array.</summary>
      <param name="array" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="index" vsli:raw="The index to start the copy operation.">Der Index, an dem der Kopiervorgang gestartet werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">Ruft ein Objekt ab, das zum Durchlaufen der Auflistung verwendet werden kann.</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">Ein Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">Bestimmt den Index eines bestimmten Elements im Array.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Das Element, das im Array gesucht werden soll.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Bestimmt den Index des angegebenen Elements.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Das Element, das im Array gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Die Anfangsposition der Suche.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Bestimmt den Index des angegebenen Elements.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Das Element, das im Array gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Die Anfangsposition der Suche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">Bestimmt den Index des angegebenen Elements.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Das Element, das im Array gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count" vsli:raw="The starting position of the search.">Die Anfangsposition der Suche.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">Fügt ein Element am angegebenen Index in das Array ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="item" vsli:raw="The object to insert into the array.">Das Objekt, das in das Array eingefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">Ruft einen schreibgeschützten Verweis auf das Element am angegebenen Index ab.</summary>
      <param name="index" vsli:raw="The item index.">Der Elementindex.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" /> ist größer oder gleich der Arrayzahl.</exception>
      <returns vsli:raw="The read-only reference to the element at the specified index.">Der schreibgeschützte Verweis auf das Element am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Bestimmt den nullbasierten Index des letzten Vorkommens des angegebenen Elements in diesem Array.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">Der nullbasierte Index, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Bestimmt den nullbasierten Index des letzten Vorkommens des angegebenen Elements in diesem Array.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Die Anfangsposition der Suche.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Bestimmt den nullbasierten Index des letzten Vorkommens des angegebenen Elements in diesem Array.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Die Anfangsposition der Suche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Bestimmt den nullbasierten Index des letzten Vorkommens des angegebenen Elements in diesem Array.</summary>
      <param name="item" vsli:raw="The item to search for.">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Die Anfangsposition der Suche.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">Extrahiert das interne Array als <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> und ersetzt es durch ein Array, das eine Länge von 0 (null) hat.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">Wenn <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> nicht <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" /> entspricht.</exception>
      <returns vsli:raw="An immutable array containing the elements of the builder.">Ein unveränderliches Array, das die Elemente des Generators enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">Entfernt das angegebene Element.</summary>
      <param name="element" vsli:raw="The item to remove.">Das zu entfernende Element.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="element" /> gefunden und entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">Entfernt das Element am angegebenen Index aus dem Array.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">Kehrt die Reihenfolge der Elemente in der Auflistung um.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">Sortiert den Inhalt des Arrays.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Sortiert den Inhalt des Arrays.</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Der Vergleich, der für die Sortierung verwendet wird. Wenn der Vergleich <see langword="null" /> ist, wird der Standardvergleich für den Elementtyp im Array verwendet.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Sortiert die Elemente im gesamten Array mithilfe des angegebenen <see cref="T:System.Comparison`1" />-Objekts.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">Die <see cref="T:System.Comparison`1" />, die beim Vergleich von Elementen verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> ist NULL.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Sortiert den Inhalt des Arrays.</summary>
      <param name="index" vsli:raw="The starting index for the sort.">Der Startindex für die Sortierung.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Die Anzahl von Elementen, die in die Sortierung eingeschlossen werden sollen.</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Der Vergleich, der für die Sortierung verwendet wird. Wenn der Vergleich <see langword="null" /> ist, wird der Standardvergleich für den Elementtyp im Array verwendet.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Gibt einen Enumerator zurück, der das Array durchläuft.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Ein Enumerator, der das Array durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Gibt einen Enumerator zurück, der das Array durchläuft.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Ein Enumerator, der das Array durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Erstellt ein neues Array mit dem aktuellen Inhalt dieses <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Ein neues Array mit dem Inhalt dieses <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Gibt ein unveränderliches Array mit dem aktuellen Inhalt dieses <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> zurück.</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Ein unveränderliches Array mit dem aktuellen Inhalt dieses <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">Ruft die Länge des internen Arrays ab bzw. legt sie fest. Wenn sie festgelegt wird, wird das interne Array der angegebenen Kapazität neu zugeordnet, wenn es nicht bereits in der angegebenen Länge vorhanden ist.</summary>
      <returns vsli:raw="The length of the internal array.">Die Länge des internen Arrays.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">Ruft die Anzahl der Elemente im Array ab oder legt sie fest.</summary>
      <returns vsli:raw="The number of items in the array.">Die Anzahl der Elemente im Array.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">Ruft das Element am angegebenen Index ab oder legt es fest.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Der Index des abzurufenden oder festzulegenden Elements.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">Der angegebene Index befindet sich nicht im Array.</exception>
      <returns vsli:raw="The item at the specified index.">Das Element am angegebenen Index.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Ein Array-Enumerator.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">Wechselt zum nächsten Wert im Array.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn ein anderes Element im Array vorhanden ist; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">Ruft das aktuelle Element ab.</summary>
      <returns vsli:raw="The current item.">Das aktuelle Element.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> Klasse bereit.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">Bestimmt, ob das angegebene unveränderliche Wörterbuch das angegebene Schlüssel-Wert-Paar enthält.</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">Das zu durchsuchende unveränderliche Wörterbuch.</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">Der im unveränderlichen Wörterbuch zu suchende Schlüssel.</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">Der Wert, der auf dem angegebenen Schlüssel zu finden ist, wenn der Schlüssel gefunden wurde.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">Der Typ der Schlüssel im unveränderlichen Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">Der Typ der Werte im unveränderlichen Wörterbuch.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Zuordnung das angegebene Schlüssel-Wert-Paar enthält; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">Erstellt ein leeres unveränderliches Wörterbuch.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Ein leeres unveränderliches Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">Erstellt ein leeres unveränderliches Wörterbuch, das den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Die Implementierung zum Bestimmen der Gleichheit der Schlüssel im Wörterbuch.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Ein leeres unveränderliches Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">Erstellt ein leeres unveränderliches Wörterbuch, das den angegebenen Schlüssel- und Wertevergleich verwendet.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Die Implementierung zum Bestimmen der Gleichheit der Schlüssel im Wörterbuch.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Die Implementierung zum Bestimmen der Gleichheit der Werte im Wörterbuch.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Ein leeres unveränderliches Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Erstellt einen neuen unveränderlichen Wörterbuch-Generator.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="The new builder.">Der neue Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Erstellt einen neuen unveränderlichen Wörterbuch-Generator.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Der Schlüsselvergleich.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="The new builder.">Der neue Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Erstellt einen neuen unveränderlichen Wörterbuch-Generator.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Der Schlüsselvergleich.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Der Wertevergleich.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="The new builder.">Der neue Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">Erstellt ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält.</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">Die Elemente, die zum Auffüllen des Wörterbuchs vor dessen Unveränderlichkeit verwendet werden.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Die Art der Schlüssel im Wörterbuch</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Die Art der Werte im Wörterbuch</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">Ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Erstellt ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Die zu verwendete Vergleichs-Implementierung zum Vergleich von Schlüsseln auf ihre Gleichheit.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Die Elemente, die zum Wörterbuch vor dessen Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Die Art der Schlüssel im Wörterbuch</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Die Art der Werte im Wörterbuch</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Erstellt ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Die zu verwendete Vergleichs-Implementierung zum Vergleich von Schlüsseln auf ihre Gleichheit.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Die Vergleichs-Implementierung zum Vergleich von Werten auf ihre Gleichheit.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Die Elemente, die zum Wörterbuch vor dessen Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Die Art der Schlüssel im Wörterbuch</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Die Art der Werte im Wörterbuch</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Ruft den Wert für einen bestimmten Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Das Wörterbuch zum Abrufen des Werts.</param>
      <param name="key" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Der Typ des Schlüssels.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Der Typ des Werts.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Der Wert für den Schlüssel oder <c>default(TValue)</c>, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Ruft den Wert für einen bestimmten Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Das Wörterbuch zum Abrufen des Werts.</param>
      <param name="key" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Der zurückzugebende Standardwert, wenn kein übereinstimmender Schlüssel im Wörterbuch gefunden wurde.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Der Typ des Schlüssels.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Der Typ des Werts.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Der Wert für den Schlüssel oder <paramref name="defaultValue" />, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">Erstellt ein unveränderliches Wörterbuch aus einer bestehenden Kollektion von Elementen, mit der Anwendung einer Transformationsfunktion zum Quellschlüssel.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Die Quellauflistung, die zum Generieren des unveränderlichen Wörterbuchs verwandt wurde.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Die Funktion, die zum Transformieren der Schlüssel für das unveränderliche Wörterbuch verwandt wurde.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Der Typ des Elements in der Quellauflistung.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Der Typ des Schlüssels im resultierenden unveränderlichen Wörterbuch.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Das unveränderliche Wörterbuch, das Elemente von <paramref name="source" /> enthält, mit Schlüsseln, die durch die Anwendung von <paramref name="keySelector" /> transformiert wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">Erstellt ein unveränderliches Wörterbuch basierend auf einer Sequenztransformation.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Die Quellauflistung, die zum Generieren des unveränderlichen Wörterbuchs verwandt wurde.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Die Funktion, die zum Transformieren der Schlüssel für das unveränderliche Wörterbuch verwandt wurde.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Der Typ des Elements in der Quellauflistung.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Der Typ des Schlüssels im resultierenden unveränderlichen Wörterbuch.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Das unveränderliche Wörterbuch, das Elemente von <paramref name="source" /> enthält, mit Schlüsseln, die durch die Anwendung von <paramref name="keySelector" /> transformiert wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Ein unveränderliches Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Der Schlüsselvergleich, der beim Erstellen des unveränderlichen Wörterbuchs verwendet wird.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Ein unveränderliches Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Der Schlüsselvergleich, der beim Erstellen des unveränderlichen Wörterbuchs verwendet wird.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Der Wertevergleich für die Verwendung des unveränderlichen Wörterbuchs.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Ein unveränderliches Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">Erstellt ein unveränderlich Wörterbuch aus dem aktuellen Inhalt des Wörterbuchs des Generators.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">Der Generator, aus dem das unveränderlich Wörterbuch erstellt werden soll.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">Ein unveränderliches sortiertes Wörterbuch, das den aktuellen Inhalt des Wörterbuchs des Generators enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">Listet eine Sequenz auf und transformiert sie; und erzeugt ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Ein unveränderliches Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">Listet eine Sequenz auf und transformiert sie; und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Ein unveränderliches Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">Listet eine Sequenz auf und transformiert sie; und erzeugt mithilfe des angegebenen Schlüssel- und Wertevergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Der Wertevergleich für die Verwendung des Wörterbuchs.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Ein unveränderliches Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine unveränderliche unsortierte Auflistung von Schlüsseln und Werten dar.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">Ruft ein leeres unveränderliches Wörterbuch ab.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">Fügt ein Element mit dem angegebenen Schlüssel und Wert zum unveränderlichen Wörterbuch hinzu.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value" vsli:raw="The value of the element to add.">Der Wert des hinzuzufügenden Elements.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">Der angegebene Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Ein neues unveränderliches Wörterbuch, das das zusätzliche Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">Fügt dem unveränderlichen Wörterbuch die angegebenen Schlüssel-Wert-Paare hinzu.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Die Schlüssel-Wert-Paare, die hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Einer der angegebenen Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Ein neues unveränderliches Wörterbuch, das die zusätzlichen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Ruft ein leeres unveränderliches Wörterbuch ab, das über dieselben Sortier- und Schlüssel-Wert-Vergleichsregeln wie diese Wörterbuchinstanz verfügt.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Ein leeres Wörterbuch mit äquivalenten Sortier- und Schlüssel-Wert-Vergleichsregeln.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">Bestimmt, ob dieses unveränderliche Wörterbuch das angegebene Schlüssel-Wert-Paar enthält.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Das Schlüssel-Wert-Paar, das gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Schlüssel-Wert-Paar im Wörterbuch gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">Bestimmt, ob das unveränderliche Wörterbuch ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key" vsli:raw="The key to locate.">Der zu suchende Schlüssel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das unveränderliche Wörterbuch ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">Bestimmt, ob das unveränderliche Wörterbuch ein Element enthält, das über den angegebenen Wert verfügt.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Der zu suchende Wert. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Gibt einen Enumerator zurück, der das unveränderliche Wörterbuch durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Ein Enumerator, mit dem das Wörterbuch durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Wörterbuch.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Ein neues unveränderliches Wörterbuch, aus dem das angegebene Element entfernt wurde, oder diese Instanz, wenn der angegebene Schlüssel im Wörterbuch nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Entfernt die Elemente mit den angegebenen Schlüsseln aus dem unveränderlichen Wörterbuch.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Die Schlüssel der zu entfernenden Elemente.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Ein neues unveränderliches Wörterbuch, aus dem die angegebenen Schlüssel entfernt wurden, oder diese Instanz, wenn die angegebenen Schlüssel im Wörterbuch nicht gefunden wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Legt den angegebenen Schlüssel und Wert im unveränderlichen Wörterbuch fest, wobei ein vorhandener Wert für den Schlüssel überschrieben werden kann.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Der Schlüssel des hinzuzufügenden Eintrags.</param>
      <param name="value" vsli:raw="The key value to set.">Der Schlüsselwert, der festgelegt werden soll.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Ein neues unveränderliches Wörterbuch, das das angegebene Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Legt die angegebenen Schlüssel-Wert-Paare im unveränderlichen Wörterbuch fest, wobei vorhandene Werte für die Schlüssel überschrieben werden können.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Die Schlüssel-Wert-Paare, die im Wörterbuch festgelegt werden sollen. Falls ein Schlüssel bereits im Wörterbuch vorhanden ist, überschreibt diese Methode dessen vorherigen Wert.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Ein neues unveränderliches Wörterbuch, das die angegebenen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Fügt der <see cref="T:System.Collections.Generic.ICollection`1" /> ein Element hinzu.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Das Objekt, das <see cref="T:System.Collections.Generic.ICollection`1" /> hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Entfernt alle Elemente aus <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Kopiert die Elemente der <see cref="T:System.Collections.Generic.ICollection`1" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Collections.Generic.ICollection`1" /> kopierten Elemente ist. Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Entfernt das erste Vorkommen eines angegebenen Objekts aus der <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Das aus der <see cref="T:System.Collections.Generic.ICollection`1" /> zu entfernende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus der <see cref="T:System.Collections.Generic.ICollection`1" /> entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="item" /> nicht in der ursprünglichen <see cref="T:System.Collections.Generic.ICollection`1" /> gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary.">Fügt dem unveränderlichen Wörterbuch ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Das Objekt, das als Schlüssel des hinzuzufügenden Elements verwendet werden soll.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Das Objekt, das als Wert des hinzuzufügenden Elements verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">In <see cref="T:System.Collections.Generic.IDictionary`2" /> ist bereits ein Element mit demselben Schlüssel enthalten.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the generic dictionary.">Entfernt das Element mit dem angegebenen Schlüssel aus dem generischen Wörterbuch.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> ist schreibgeschützt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original generic dictionary.">
        <see langword="true" />, wenn das Element erfolgreich entfernt wurde, andernfalls <see langword="false" />.  Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="key" /> nicht im ursprünglichen generischen Wörterbuch gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Kopiert die Elemente des Wörterbuchs in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Das eindimensionale Array, welches das Ziel der aus dem Wörterbuch kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">Fügt dem unveränderlichen Dictionary-Objekt ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Das Objekt, das als Schlüssel des hinzuzufügenden Elements verwendet werden soll.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Das Objekt, das als Wert des hinzuzufügenden Elements verwendet werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Löscht diese Instanz.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">Das Wörterbuchobjekt ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Bestimmt, ob das unveränderliche Dictionary-Objekt ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Der im Dictionary-Objekt zu suchende Schlüssel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Gibt ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das unveränderliche Dictionary-Objekt zurück.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Ein Enumeratorobjekt für das Dictionary-Objekt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Dictionary-Objekt.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /></summary>
      <param name="key" vsli:raw="Key of the entry to be added.">Dies ist der Schlüssel des Eintrags, der hinzugefügt werden soll.</param>
      <param name="value" vsli:raw="Value of the entry to be added.">Dies ist der Wert des Eintrags, der hinzugefügt werden soll.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Ein neues unveränderliches Wörterbuch, das das zusätzliche Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /></summary>
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary.">Dies ist die Sequenz der Schlüssel-Wert-Paare, die zum Wörterbuch hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Ein neues unveränderliches Wörterbuch, das die zusätzlichen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key-value comparison rules as this dictionary instance.">Ruft ein leeres Wörterbuch ab, das über dieselben Sortier- und Schlüssel-Wert-Vergleichsregeln wie diese Wörterbuchinstanz verfügt.</summary>
      <returns vsli:raw="The immutable dictionary instance.">Die Instanz des unveränderlichen Wörterbuchs.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /></summary>
      <param name="key" vsli:raw="Key of the entry to be removed.">Dies ist der Schlüssel des Eintrags, der entfernt werden soll.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Ein neues unveränderliches Wörterbuch, aus dem das angegebene Element entfernt wurde, oder diese Instanz, wenn der angegebene Schlüssel im Wörterbuch nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /></summary>
      <param name="keys" vsli:raw="Sequence of keys to be removed.">Dies ist die Sequenz der Schlüssel, die entfernt werden sollen.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Ein neues unveränderliches Wörterbuch, aus dem die angegebenen Schlüssel entfernt wurden, oder diese Instanz, wenn die angegebenen Schlüssel im Wörterbuch nicht gefunden wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" /></summary>
      <param name="key" vsli:raw="Key of entry to be added.">Dies ist der Schlüssel des Eintrags, der hinzugefügt werden soll.</param>
      <param name="value" vsli:raw="Value of the entry to be added.">Dies ist der Wert des Eintrags, der hinzugefügt werden soll.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Ein neues unveränderliches Wörterbuch, das das angegebene Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Applies a given set of key-value pairs to an immutable dictionary, replacing any conflicting keys in the resulting dictionary.">Wendet einen bestehenden Satz von Schlüssel-Wert-Paaren auf ein unveränderliches Wörterbuch an und ersetzt dabei alle im Konflikt stehenden Schlüssel im resultierenden Wörterbuch.</summary>
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values.">Die Schlüssel-Wert-Paare, die auf der Karte festgelegt werden sollen. Alle Schlüssel, die mit vorhandenen Schlüsseln in Konflikt stehen, ersetzen die vorherigen Werte.</param>
      <returns vsli:raw="A copy of the immutable dictionary with updated key-value pairs.">Eine Kopie des unveränderlichen Wörterbuchs mit aktualisierten Schlüssel-Wert-Paaren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Erstellt ein unveränderliches Wörterbuch, das den gleichen Inhalt wie dieses Wörterbuch aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Eine Auflistung, die den gleichen Inhalt wie dieses Wörterbuch aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Der Schlüssel, dessen Wert abgerufen wird.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode den Wert, der dem angegebenen Schlüssel zugeordnet ist (wenn der Schlüssel gefunden wurde), oder andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> ist NULL.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt, das das Wörterbuch implementiert, ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">Ruft eine Instanz des unveränderlichen Wörterbuchs ab, die den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Der zu verwendende Schlüsselvergleich.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Eine Instanz des unveränderlichen Wörterbuchs, die den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">Ruft eine Instanz des unveränderlichen Wörterbuchs ab, die die angegebenen Schlüssel- und Wertevergleiche verwendet.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Der zu verwendende Schlüsselvergleich.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Der zu verwendende Wertevergleich.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Eine Instanz des unveränderlichen Wörterbuchs, die die angegebenen Vergleiche verwendet.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">Ruft die Anzahl der Schlüssel-Wert-Paare im unveränderlichen Wörterbuch ab.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Die Anzahl der Schlüssel-Wert-Paare im Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">Ruft einen Wert ab, der angibt, ob diese Instanz des unveränderlichen Wörterbuchs leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Ruft den <paramref name="TValue" />-Wert ab, der dem angegebenen Schlüssel zugeordnet ist.</summary>
      <param name="key" vsli:raw="The type of the key.">Der Typ des Schlüssels.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Der dem angegebenen Schlüssel zugeordnete Wert. Wenn keine Ergebnisse gefunden werden, löst der Vorgang eine Ausnahme aus.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">Ruft den Schlüsselvergleich für das unveränderliche Wörterbuch ab.</summary>
      <returns vsli:raw="The key comparer.">Der Schlüsselvergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">Ruft die Schlüssel im unveränderlichen Wörterbuch ab.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Die Schlüssel im unveränderlichen Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary vsli:raw="Gets or sets the &lt;typeparamref name=&quot;TValue&quot; /&gt; with the specified key.">Ruft das <typeparamref name="TValue" /> mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key" vsli:raw="The type of the key.">Der Typ des Schlüssels.</param>
      <returns vsli:raw="An object of type &lt;typeparamref name=&quot;TValue&quot; /&gt; associated with the &lt;paramref name=&quot;key&quot; /&gt;.">Ein Objekt vom Typ, <typeparamref name="TValue" /> das dem zugeordnet ist <paramref name="key" /> .</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets the keys.">Ruft die Schlüssel ab.</summary>
      <returns vsli:raw="A collection containing the keys.">Eine Auflistung, die die Schlüssel enthält.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets the values.">Ruft die Werte ab.</summary>
      <returns vsli:raw="A collection containing the values.">Eine Auflistung, die die Werte enthält.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ein Objekt, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key" vsli:raw="The key.">Der Schlüssel.</param>
      <returns vsli:raw="The value stored under the specified key.">Der unter dem angegebenen Schlüssel gespeicherte Wert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Ruft den Wertevergleich ab, mit dem bestimmt wird, ob Werte identisch sind.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Der Wertevergleich, mit dem bestimmt wird, ob Werte identisch sind.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">Ruft die Werte im unveränderlichen Wörterbuch ab.</summary>
      <returns vsli:raw="The values in the immutable dictionary.">Die Werte im unveränderlichen Wörterbuch.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Hashzuordnung dar, die mit wenigen oder gar keinen Speicherbelegungen geändert wird und sehr effizient unveränderliche Hashzuordnungsinstanzen produzieren oder erstellen kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">Fügt ein Element mit dem angegebenem Schlüssel und Wert zum unveränderlichen Wörterbuch hinzu.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value" vsli:raw="The value of the element to add.">Der Wert des hinzuzufügenden Elements.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">Ein Element mit demselben Schlüssel ist im Wörterbuch bereits vorhanden.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Das Wörterbuch ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">Fügt dem unveränderlichen Wörterbuch das angegebene Element hinzu.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Das Objekt, das dem Wörterbuch hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Das Wörterbuch ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">Fügt dieser Auflistung eine Sequenz von Werten hinzu.</summary>
      <param name="items" vsli:raw="The items to add to this collection.">Die Elemente, die dieser Auflistung hinzugefügt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">Entfernt alle Elemente aus dem unveränderlichen Wörterbuch.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Das Wörterbuch ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">Ermittelt, ob das unveränderliche Wörterbuch einen bestimmten Wert enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Das Objekt, das im Wörterbuch gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn sich <paramref name="item" /> im Wörterbuch befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">Bestimmt, ob das unveränderliche Wörterbuch ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Der im Wörterbuch zu suchende Schlüssel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> ist NULL.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">Bestimmt, ob das unveränderliche Wörterbuch ein Element enthält, das über den angegebenen Wert verfügt.</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Der im unveränderlichen Wörterbuch zu suchende Wert. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Gibt einen Enumerator zurück, der das unveränderliche Wörterbuch durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Ruft den Wert für einen bestimmten Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist.</summary>
      <param name="key" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Der Wert für den Schlüssel oder <c>default(TValue)</c>, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Ruft den Wert für einen bestimmten Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist.</summary>
      <param name="key" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Der zurückzugebende Standardwert, wenn kein übereinstimmender Schlüssel im Wörterbuch gefunden wurde.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Der Wert für den Schlüssel oder <paramref name="defaultValue" />, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Wörterbuch.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> ist NULL.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Das Wörterbuch ist schreibgeschützt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">
        <see langword="true" />, wenn das Element erfolgreich entfernt wurde, andernfalls <see langword="false" />.  Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="key" /> nicht im Wörterbuch gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">Entfernt das erste Vorkommen eines bestimmten Objekts aus dem unveränderlichen Wörterbuch.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Das Objekt, das aus dem Wörterbuch entfernt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Das Wörterbuch ist schreibgeschützt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus dem Wörterbuch entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann false zurück, wenn <paramref name="item" /> nicht in dem Wörterbuch gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">Entfernt alle Einträge mit Schlüsseln, die mit denen übereinstimmen, die in der angegebenen Reihenfolge des unveränderlichen Wörterbuch gefunden wurden.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Die Schlüssel für Einträge, die aus dem Wörterbuch entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Kopiert die Elemente des Wörterbuchs in ein Array des Typs <see cref="T:System.Collections.Generic.KeyValuePair`2" /> , wobei am angegebenen Arrayindex begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Das eindimensionale Array, welches das Ziel der aus dem Wörterbuch kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Kopiert die Elemente des Wörterbuchs in ein Array des Typs <see cref="T:System.Collections.Generic.KeyValuePair`2" /> , wobei am angegebenen Arrayindex begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Ein eindimensionales Array vom Typ <see cref="T:System.Collections.Generic.KeyValuePair`2" />, der das Ziel der kopierten Elemente aus dem Wörterbuch ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Fügt dem Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value" vsli:raw="The value of the element to add.">Der Wert des hinzuzufügenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Ermittelt, ob das Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel enthält.</summary>
      <param name="key" vsli:raw="The key to locate.">Der zu suchende Schlüssel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Gibt ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das Wörterbuch zurück.</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Entfernt das Element mit dem angegebenen Schlüssel aus dem Wörterbuch.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">Erstellt ein unveränderlich Wörterbuch basierend auf dem Inhalt dieser Instanz.</summary>
      <returns vsli:raw="An immutable dictionary.">Ein unveränderliches Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Der Schlüssel, dessen Wert abgerufen wird.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Wenn diese Methode zurückgegeben wird, enthält sie den dem angegebenen Schlüssel zugeordneten Wert, wenn der Schlüssel gefunden wurde; oder andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> ist NULL.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt, das das unveränderliche Wörterbuch implementiert, ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">Ruft die Anzahl der Elemente in dem unverändertlichen Wörterbuch ab.</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">Ruft die Anzahl der Elemente in dem unverändertlichen Wörterbuch ab.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key" vsli:raw="The element to get or set.">Das Element, das abgerufen oder festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">Die Eigenschaft wird abgerufen, und <paramref name="key" /> wird nicht gefunden.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">Die Eigenschaft wird festgelegt, und <see cref="T:System.Collections.Generic.IDictionary`2" /> ist schreibgeschützt.</exception>
      <returns vsli:raw="The element that has the specified key.">Das Element mit dem angegebenen Schlüssel.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Ruft den Schlüsselvergleich ab oder legt ihn fest.</summary>
      <returns vsli:raw="The key comparer.">Der Schlüsselvergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">Ruft eine Auflistung ab, die die Schlüssel des unveränderlichen Wörterbuchs enthält.</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">Eine Auflistung, die die Schlüssel des Objekts enthält, mit dem das unveränderliche Wörterbuch implementiert wird.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the collection is read-only.">Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys of the generic dictionary.">Ruft eine Auflistung ab, die die Schlüssel des generischen Wörterbuchs enthält.</summary>
      <returns vsli:raw="A collection containing the keys of the object that implements the generic dictionary.">Eine Auflistung, die die Schlüssel des Objekts enthält, das das generische Wörterbuch implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values in the generic dictionary.">Ruft eine Auflistung ab, die die Werte im generischen Wörterbuch enthält.</summary>
      <returns vsli:raw="A collection containing the values in the object that implements the generic dictionary.">Eine Auflistung, die die Werte im Objekt enthält, das das generische Wörterbuch implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key" vsli:raw="The key.">Der Schlüssel.</param>
      <returns vsli:raw="Value stored under specified key.">Wert, der unter dem angegebenen Schlüssel gespeichert wird.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Ruft den Wertevergleich ab bzw. legt ihn fest.</summary>
      <returns vsli:raw="The value comparer.">Der Wertevergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">Ruft eine Auflistung ab, die die Werte des unveränderlichen Wörterbuchs enthält.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Eine Sammlung, die die Werte des Objekts enthält, mit dem das Wörterbuch implementiert wird.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Listet den Inhalt des unveränderlichen Wörterbuchs auf, ohne Arbeitsspeicher zuzuweisen.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">Setzt den Enumerator auf das nächste Element des unveränderlichen Wörterbuchs.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">Das Wörterbuch wurde nach der Erstellung des Enumerators geändert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende des Wörterbuchs überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">Setzt den Enumerator auf seine anfängliche Position, die vor dem ersten Element im Wörterbuch liegt.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">Das Wörterbuch wurde nach der Erstellung des Enumerators geändert.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">Das Element an der aktuellen Position des Enumerators im Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Ruft das aktuelle Element ab.</summary>
      <returns vsli:raw="Current element in enumeration.">Aktuelles Element in der Enumeration.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> Klasse bereit.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">Erstellt eine leeres unveränderliches Hashset.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">Der Typ der Elemente, die im unveränderlichen Hashset gespeichert werden sollen.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Ein leeres unveränderliches Hashset.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">Erstellt ein neues unveränderliches Hashset, das das angegebene Element enthält.</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Das Element, mit dem das Hashset vorab aufgefüllt wird.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Der Typ der Elemente im unveränderlichen Hashset.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Ein neues unveränderliches Hashset, das das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">Erstellt ein neues unveränderliches Hashset, das das angegebene Array von Elementen enthält.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Ein Array, das die Elemente enthält, um das Hashset vorab aufzufüllen.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Der Typ der Elemente im unveränderlichen Hashset.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Ein neues unveränderliches Hashset, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">Erstellt ein leeres unveränderliches Hashset, das den angegebenen Gleichheitsvergleich verwendet.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Der Typ der Elemente im unveränderlichen Hashset.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Ein leeres unveränderliches Hashset.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">Erstellt ein neues unveränderliches Hashset, das das angegebene Element enthält, und verwendet für den Settyp den angegebenen Gleichheitsvergleich.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Das Element, mit dem das Hashset vorab aufgefüllt wird.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Der Typ der Elemente im unveränderlichen Hashset.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Ein neues unveränderliches Hashset, das das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">Erstellt ein neues unveränderliches Hashset, das die in der Auflistung angegebenen Elemente enthält, und verwendet für den Settyp den angegebenen Gleichheitsvergleich.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Ein Array, das die Elemente enthält, um das Hashset vorab aufzufüllen.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">Der Typ der Elemente, die im unveränderlichen Hashset gespeichert sind.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Ein neues unveränderliches Hashset, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">Erstellt einen neuen unveränderlichen Hashset-Generator.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The immutable hash set builder.">Der unveränderliche Hashset-Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">Erstellt einen neuen unveränderlichen Hashset-Generator.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">Der neue unveränderliche Hashset-Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">Erstellt ein neues unveränderliches Hashset, das mit den angegebenen Elementen vorab ausgefüllt ist.</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">Die Elemente, die dem Hashset hinzugefügt werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">Das neue unveränderliche Hashset, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">Erstellt ein neues unveränderliches Hashset, das die angegebene Elemente enthält, und verwendet für den Settyp den angegebenen Gleichheitsvergleich.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">Die Elemente, die der Auflistung hinzugefügt werden solle, bevor Unveränderlichkeit angewendet wird.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The new immutable hash set.">Das neue unveränderliche Hashset.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">Listet eine Sequenz auf und erzeugt ein unveränderliches Hashset ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Die Sequenz, die aufgelistet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">Ein unveränderliches Hashset, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">Listet eine Sequenz auf, erzeugt ein unveränderliches Hashset ihres Inhalts und verwendet den angegebenen Gleichheitsvergleich für den Settyp.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Die Sequenz, die aufgelistet werden soll.</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">Ein unveränderliches Hashset, das die Elemente in der angegebenen Sequenz enthält, und das den angegebenen Gleichheitsvergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">Erstellt einen unveränderlichen Hashsatz aus dem aktuellen Inhalt des Satzes des Generators.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">Der Generator, aus dem der unveränderliche Hashsatz erstellt werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">Der Typ der Elemente im HashSet.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">Ein unveränderlicher Hashsatz, der den aktuellen Inhalt der Sammlung des Generators enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt ein unveränderliches unsortiertes Hashset dar.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">Der Typ der Elemente im Hashset.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Ruft ein unveränderliches Hashset für diesen Typ ab, der den standardmäßigen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verwendet.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">Fügt dem Hashset das angegebene Element hinzu.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Der Element, das zur Menge hinzugefügt wird.</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">Ein Hashset, das den hinzugefügten Wert sowie Werte, die zuvor im <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />-Objekt enthalten waren, enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">Ruft ein leeres unveränderliches Hashset ab, das dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">Ein leeres Hashset, das dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">Ermittelt, ob dieses unveränderliche Hashset das angegebene Element enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">Das Objekt, das im unveränderlichen Hashset gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <paramref name="item" /> in der <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">Entfernt die Elemente in der angegebenen Auflistung aus dem aktuellen unveränderlichen Hashset.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Die Auflistung der Elemente, die aus dieser Gruppe entfernt werden sollen.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Eine neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">Erstellt ein unveränderliches Hashset, das Elemente enthält, die sowohl in dieser Gruppe als auch in der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Eine neue unveränderliche Gruppe, die alle Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">Bestimmt, ob das aktuelle unveränderliche Hashset eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">Bestimmt, ob das aktuelle unveränderliche Hashset eine echte (strikte) Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">Bestimmt, ob das aktuelle unveränderliche Hashset eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">Bestimmt, ob das aktuelle unveränderliche Hashset eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">Bestimmt, ob sich das aktuelle unveränderliche Hashset und die angegebene Auflistung überschneiden.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe und die angegebene Auflistung über mindestens ein gemeinsames Element verfügen; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">Entfernt das angegebene Element aus diesem unveränderlichen Hashset.</summary>
      <param name="item" vsli:raw="The element to remove.">Das zu entfernende Element.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Eine neue Gruppe, aus der das angegebene Element entfernt wurde, oder die aktuelle Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">Bestimmt, ob das aktuelle unveränderliche Hashset und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Gruppen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">Erstellt ein unveränderliches Hashset, das nur Elemente enthält, die entweder im aktuellen Hashset oder in der angegebenen Auflistung, jedoch nicht in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Eine neue Gruppe mit den Elementen, die nur in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">Fügt der Gruppe ein Element hinzu.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Das Objekt, das der Gruppe hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Die Gruppe ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">Entfernt alle Elemente aus dieser Gruppe.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Die Gruppe ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Kopiert die Elemente der Gruppe in ein Array, wobei an einem bestimmten Index begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Das eindimensionale Array, das das Ziel der aus der Gruppe kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der Gruppe.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Das aus der Gruppe zu entfernende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Element erfolgreich entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">Ein Enumerator, der die Auflistung durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">Fügt der aktuellen Gruppe ein Element hinzu und gibt einen Wert zurück, der angibt, ob das Element erfolgreich hinzugefügt wurde.</summary>
      <param name="item" vsli:raw="The element to add to the collection.">Das zur Auflistung hinzuzufügende Element.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" />, wenn das Element der Gruppe hinzugefügt wurde. <see langword="false" />, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Entfernt alle Elemente in der angegebenen Auflistung aus der aktuellen Gruppe.</summary>
      <param name="other" vsli:raw="The collection of items to remove.">Die Auflistung der Elemente, die entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die in einer angegebenen Auflistung ebenfalls enthalten sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">Die Auflistung, die mit der aktuellen Auflistung verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">Ändert die aktuelle Gruppe, sodass sie alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Kopiert die Elemente der Gruppe in ein Array, wobei an einem bestimmten Index begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Das eindimensionale Array, das das Ziel der aus der Gruppe kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">Gibt einen Enumerator zurück, der eine Gruppe durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Ein Enumerator, der zum Durchlaufen der Gruppe verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="item" vsli:raw="The element to add.">Das hinzuzufügende Element.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Eine neue Gruppe mit dem hinzugefügten Element oder diese Gruppe, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">Ruft eine leere Gruppe ab, die dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">Eine leere Gruppe, die dieselbe Sortierungs- oder Reihenfolgensemantik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">Entfernt die Elemente in der angegebenen Auflistung aus der aktuellen Gruppe.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Die Auflistung der Elemente, die aus dieser Gruppe entfernt werden sollen.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Eine neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Erstellt eine unveränderliche Gruppe, die Elemente enthält, die sowohl in dieser Gruppe als auch in der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Eine neue unveränderliche Gruppe, die alle Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="item" vsli:raw="The element to remove.">Das zu entfernende Element.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Eine neue Gruppe, aus der das angegebene Element entfernt wurde, oder die aktuelle Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Erstellt eine unveränderliche Gruppe, die nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Eine neue Gruppe mit den Elementen, die nur in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Erstellt eine unveränderliche Gruppe, die alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Die Auflistung, aus der Elemente hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Eine neue unveränderliche Gruppe mit den hinzugefügten Elementen; oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">Erstellt ein unveränderliches Hashset, das den gleichen Inhalt wie diese Gruppe aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Eine Gruppe, die den gleichen Inhalt wie diese Gruppe aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Durchsucht die Gruppe nach einem angegebenen Wert und gibt ggf. den identischen Wert zurück, sofern vorhanden.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Der zu suchende Wert.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Der bei der Suche in der Gruppe gefundene Wert, oder der ursprüngliche Wert, wenn die Suche keine Übereinstimmung ergeben hat.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Ein Wert, der angibt, ob die Suche erfolgreich war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">Erstellt ein neues unveränderliches Hashset, das alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Die Auflistung, aus der Elemente hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">Ein neues unveränderliches Hashset mit den hinzugefügten Elementen oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">Ruft eine Instanz des unveränderlichen Hashsets ab, die den angegebenen Gleichheitsvergleich für ihre Suchmethoden verwendet.</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">Der zu verwendende Gleichheitsvergleich.</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">Eine Instanz dieses unveränderlichen Hashsets, die den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">Ruft die Anzahl der Elemente im unveränderlichen Hashset ab.</summary>
      <returns vsli:raw="The number of elements in the hash set.">Die Anzahl der Elemente im Hashset.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">Ruft einen Wert ab, der angibt, ob das aktuelle unveränderliche Hashset leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">Ruft das Objekt ab, das zum Abrufen der Hashcodes für die Schlüssel und zum Überprüfen der Werte im unveränderlichen Hashset auf Gleichheit verwendet wird.</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">Der Vergleich, der zum Abrufen der Hashcodes für die Schlüssel und für Gleichheitsprüfungen verwendet wird.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Siehe <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt ein Hashset dar, das mit wenigen oder gar keinen Speicherbelegungen geändert wird und sehr effizient Instanzen unveränderlicher Hashsets erzeugen oder darauf aufbauen kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">Fügt dem unveränderlichen Hashset das angegebene Element hinzu.</summary>
      <param name="item" vsli:raw="The item to add.">Das Element, das hinzugefügt werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Element nicht bereits Teil der Auflistung war, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">Entfernt alle Elemente aus dem unveränderlichen Hashset.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">Das Hashset ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">Bestimmt, ob das unveränderliche Hashset einen bestimmten Wert enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">Das Objekt, das im Hashset gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="item" /> im Hashset gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">Entfernt alle Elemente in der angegebenen Auflistung aus dem aktuellen Hashset.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Die Auflistung der Elemente, die aus der Gruppe entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">Gibt einen Enumerator zurück, der das unveränderliche Hashset durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Ein Enumerator, der zum Durchlaufen der Gruppe verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die in einer angegebenen Auflistung ebenfalls enthalten sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Bestimmt, ob die aktuelle Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Bestimmt, ob die aktuelle Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Bestimmt, ob die aktuelle Gruppe eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Bestimmt, ob die aktuelle Gruppe eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Bestimmt, ob sich die aktuelle Gruppe und die angegebene Auflistung überschneiden.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Auflistung und <paramref name="other" /> über mindestens ein gemeinsames Element verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">Entfernt das erste Vorkommen eines bestimmten Objekts aus dem unveränderlichen Hashset.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Das aus der Gruppe zu entfernende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Die Gruppe ist schreibgeschützt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus der Gruppe entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="item" /> nicht in der ursprünglichen Gruppe gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Bestimmt, ob die aktuelle Gruppe und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe und <paramref name="other" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">Fügt dem Hashset ein Element hinzu.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Das Objekt, das der Gruppe hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Die Gruppe ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">Kopiert die Elemente des Hashsets in ein Array, beginnend an einem bestimmten Arrayindex.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">Das eindimensionale Array, das als Ziel der aus dem Hashset kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">Erstellt ein unveränderliches Hashset basierend auf dem Inhalt dieser Instanz.</summary>
      <returns vsli:raw="An immutable set.">Eine unveränderliche Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Durchsucht die Gruppe nach einem angegebenen Wert und gibt ggf. den identischen Wert zurück, sofern vorhanden.</summary>
      <param name="equalValue" vsli:raw="The value for which to search.">Der zu suchende Wert.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Der bei der Suche in der Gruppe gefundene Wert, oder der ursprüngliche Wert, wenn die Suche keine Übereinstimmung ergeben hat.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Ein Wert, der angibt, ob die Suche erfolgreich war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Ändert die aktuelle Gruppe, sodass sie alle Elemente enthält, die sowohl in der aktuellen Gruppe als auch in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">Ruft die Anzahl der Elemente im unveränderlichen Hashset ab.</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">Die Anzahl der Elemente im unveränderlichen Hashset.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Ruft den Schlüsselvergleich ab oder legt ihn fest.</summary>
      <returns vsli:raw="The key comparer.">Der Schlüsselvergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Listet den Inhalt des unveränderlichen Hashsets auf, ohne Arbeitsspeicher zuzuweisen.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">Setzt den Enumerator auf das nächste Element des unveränderlichen Hashsets.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">Das Hashset wurde nach dem Erstellen des Enumerators geändert.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende des Hashsets überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element im Hashset.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">Das Hashset wurde nach dem Erstellen des Enumerators geändert.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Ruft das aktuelle Element ab.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enthält ineinandergreifende Austauschmechanismen für unveränderliche Auflistungen.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Ruft den Wert aus einem Wörterbuch ab, nachdem er hinzugefügt oder ein vorhandener Eintrag aktualisiert wurde.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Der Schlüssel für den hinzuzufügenden oder zu aktualisierenden Wert.</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">Der zu verwendende Wert, wenn kein vorheriger Wert vorhanden ist.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Die Funktion, die den Schlüssel und vorherigen Wert empfängt und einen neuen Wert zurückgibt, mit dem das Wörterbuch aktualisiert wird.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Der Typ des Schlüssels, der vom Wörterbuch gespeichert wird.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">Der Typ des Werts, der vom Wörterbuch gespeichert wird.</typeparam>
      <returns vsli:raw="The added or updated value.">Der hinzugefügte oder aktualisierte Wert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Ruft den Wert aus einem Wörterbuch ab, nachdem er hinzugefügt oder ein vorhandener Eintrag aktualisiert wurde.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Der Schlüssel für den hinzuzufügenden oder zu aktualisierenden Wert.</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">Die Funktion, die den Schlüssel empfängt und einen neuen Wert zurückgibt, der dem Wörterbuch hinzugefügt wird, wenn noch kein Wert vorhanden ist.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Die Funktion, die den Schlüssel und vorherigen Wert empfängt und einen neuen Wert zurückgibt, mit dem das Wörterbuch aktualisiert wird.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Der Typ des Schlüssels, der vom Wörterbuch gespeichert wird.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">Der Typ des Werts, der vom Wörterbuch gespeichert wird.</typeparam>
      <returns vsli:raw="The added or updated value.">Der hinzugefügte oder aktualisierte Wert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">Fügt ein Element automatisch am Ende einer Warteschlange an.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird.</param>
      <param name="value" vsli:raw="The value to enqueue.">Der in die Warteschlange einzureihende Wert.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">Der Typ der in der Auflistung enthaltenen Elemente.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn der angegebene Schlüssel nicht im Wörterbuch enthalten ist.</param>
      <param name="key" vsli:raw="The key for the value to get or add.">Der Schlüssel für den Wert, der abgerufen oder hinzugefügt werden soll.</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">Der zum Wörterbuch hinzuzufügende Wert, wenn der Schlüssel nicht gefunden werden kann.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Der Schlüssel für den abzurufenden oder hinzuzufügenden Wert.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">Die Funktion, die ausgeführt werden soll, um den in das Wörterbuch einzufügenden Wert abzurufen, wenn der Schlüssel nicht gefunden werden kann. Dieser Delegat wird nicht mehr als einmal aufgerufen.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">Die Variable oder das Feld, die bzw. das aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Der Schlüssel für den abzurufenden oder hinzuzufügenden Wert.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">Die Funktion, die ausgeführt werden soll, um den in das Wörterbuch einzufügenden Wert abzurufen, wenn der Schlüssel nicht gefunden werden kann.</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">Das an die Wertzuordnungsinstanz zu übergebende Argument.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">Der Typ des Arguments, das für die wertefactory bereitgestellt wird.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">Vergleicht zwei unveränderliche Arrays auf Gleichheit und ersetzt eines der Arrays, wenn sie gleich sind.</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">Das Ziel, dessen Wert mit <paramref name="comparand" /> verglichen und möglicherweise ersetzt wird.</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">Der Wert, der den Zielwert ersetzt, wenn der Vergleich Gleichheit ergibt.</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">Der Wert, der mit dem Wert bei <paramref name="location" /> verglichen wird.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Der Typ des Elements, das durch das Array gespeichert wird.</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">Der ursprüngliche Wert in <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">Legt ein Array auf das angegebene Array fest und gibt einen Verweis auf das ursprüngliche Array als atomarer Vorgang zurück.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Das Array, das auf den angegebenen Wert festgelegt werden soll.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">Der Wert, auf den der <paramref name="location" />-Parameter festgelegt ist.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Der Typ des Elements, das durch das Array gespeichert wird.</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">Der ursprüngliche Wert von <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">Legt ein Array auf das angegebene Array fest, wenn das Array nicht initialisiert wurde.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Das Array, das auf den angegebenen Wert festgelegt werden soll.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">Der Wert, auf den der <paramref name="location" />-Parameter festgelegt wird, wenn er nicht initialisiert wird.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Der Typ des Elements, das durch das Array gespeichert wird.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dem Array der angegebenen Wert zugewiesen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">Legt ein neues Element auf dem Stapel ab.</summary>
      <param name="location" vsli:raw="The stack to update.">Der zu aktualisierende Stapel.</param>
      <param name="value" vsli:raw="The value to push on the stack.">Der Wert, der auf dem Stapel abgelegt werden soll.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Der Typ der Elemente im Stapel.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">Fügt den angegebenen Schlüssel und Wert dem Wörterbuch hinzu, wenn der Schlüssel nicht im Wörterbuch enthalten ist.</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">Das Wörterbuch, das mit dem angegebenen Schlüssel und Wert aktualisiert werden soll.</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">Der hinzuzufügende Schlüssel, wenn er noch nicht im Wörterbuch definiert ist.</param>
      <param name="value" vsli:raw="The value to add.">Der hinzuzufügende Wert.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Schlüssel nicht im Wörterbuch enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">Entfernt das angegebene Element automatisch und setzt es an den Anfang der Warteschlange zurück, wenn die Warteschlange nicht leer ist.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird.</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">Wird auf den Wert am Anfang der Warteschlange festgelegt, wenn die Warteschlange nicht leer ist.</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">Der Typ der Elemente in der Warteschlange.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Warteschlange nicht leer ist und das Anfangselement entfernt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">Entfernt ein Element von der obersten Position im Stapel, wenn ein zu entfernendes Element vorhanden ist.</summary>
      <param name="location" vsli:raw="The stack to update.">Der zu aktualisierende Stapel.</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">Empfängt den aus dem Stapel entfernten Wert, wenn der Stapel nicht leer ist.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Der Typ der Elemente im Stapel.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn ein Element aus dem Stapel entfernt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">Entfernt das Element mit dem angegebenen Schlüssel, wenn der Schlüssel vorhanden ist.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Das zu aktualisierende Wörterbuch.</param>
      <param name="key" vsli:raw="The key to remove.">Der zu entfernende Schlüssel.</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">Empfängt den Wert des entfernten Elements, wenn das Wörterbuch nicht leer ist.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Schlüssel gefunden und entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">Legt den angegebenen Schlüssel auf den angegebenen Wert fest, wenn für den angegebenen Schlüssel bereits ein bestimmter Wert festgelegt ist.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Das zu aktualisierende Wörterbuch.</param>
      <param name="key" vsli:raw="The key to update.">Der zu aktualisierende Schlüssel.</param>
      <param name="newValue" vsli:raw="The new value to set.">Der neue Wert, der festzulegen ist.</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">Der aktuelle Wert für <paramref name="key" />, damit die Aktualisierung erfolgreich ausgeführt werden kann.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="key" /> und <paramref name="comparisonValue" /> im Wörterbuch vorhanden sind und der Vergleich in <paramref name="newValue" /> aktualisiert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Mutiert einen Wert direkt mit der Transaktionssemantik eingeschränkter Sperren über eine angegebene Transaktionsfunktion.             Es wird solange wiederholt versucht, die Transformation durchzuführen, bis das Rennen um die optimistische Sperre gewonnen ist.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Die Variable oder das Feld, die bzw. das geändert werden soll; mehrere Threads können darauf zugreifen.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Eine Funktion, die den Wert mutiert. Diese Funktion sollte keine Nebeneffekte haben, da sie mehrere Male ausgeführt werden kann, wenn Rennen mit anderen Threads auftreten.</param>
      <typeparam name="T" vsli:raw="The type of data.">Die Art der Daten.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" />, wenn der Wert des Speicherorts durch Anwenden des Ergebnisses der Funktion <paramref name="transformer" /> geändert wird. <see langword="false" />, wenn der Wert des Speicherorts derselbe bleibt, da der letzte Aufruf von <paramref name="transformer" /> den vorhandenen Wert zurückgegeben hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0}})">
      <summary vsli:raw="Mutates an immutable array in-place with optimistic locking transaction semantics via a specified transformation function.&#xA; The transformation is retried as many times as necessary to win the optimistic locking race.">Mutiert ein unveränderliches Array direkt mit einer Transaktions Semantik mit optimistischer Sperre über eine angegebene Transformations Funktion.
Es wird solange wiederholt versucht, die Transformation durchzuführen, bis das Rennen um die optimistische Sperre gewonnen ist.</summary>
      <param name="location" vsli:raw="The immutable array to be changed.">Das unveränderliche Array, das geändert werden soll.</param>
      <param name="transformer" vsli:raw="A function that produces the new array from the old. This function should be side-effect free, as it may run multiple times when races occur with other threads.">Eine Funktion, die das neue Array aus der alten erzeugt. Diese Funktion sollte Nebeneffekte frei sein, da Sie möglicherweise mehrmals ausgeführt wird, wenn die Ausführung von Races mit anderen Threads erfolgt.</param>
      <typeparam name="T" vsli:raw="The type of data in the immutable array.">Der Typ der Daten im unveränderlichen Array.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" />, wenn der Wert des Speicherorts durch Anwenden des Ergebnisses der Funktion <paramref name="transformer" /> geändert wird. <see langword="false" />, wenn der Wert des Speicherorts derselbe bleibt, da der letzte Aufruf von <paramref name="transformer" /> den vorhandenen Wert zurückgegeben hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Mutiert einen Wert direkt mit der Transaktionssemantik eingeschränkter Sperren über eine angegebene Transaktionsfunktion.             Es wird solange wiederholt versucht, die Transformation durchzuführen, bis das Rennen um die optimistische Sperre gewonnen ist.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Die Variable oder das Feld, die bzw. das geändert werden soll; mehrere Threads können darauf zugreifen.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Eine Funktion, die den Wert mutiert. Diese Funktion sollte keine Nebeneffekte haben, da sie mehrere Male ausgeführt werden kann, wenn Rennen mit anderen Threads auftreten.</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">Das an <paramref name="transformer" /> zu übergebende Argument.</param>
      <typeparam name="T" vsli:raw="The type of data.">Die Art der Daten.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">Der Argumenttyp <paramref name="transformer" /> , der an das-Argument übermittelt wird</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" />, wenn der Wert des Speicherorts durch Anwenden des Ergebnisses der Funktion <paramref name="transformer" /> geändert wird. <see langword="false" />, wenn der Wert des Speicherorts derselbe bleibt, da der letzte Aufruf von <paramref name="transformer" /> den vorhandenen Wert zurückgegeben hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},``1,System.Collections.Immutable.ImmutableArray{``0}},``1)">
      <summary vsli:raw="Mutates an immutable array in-place with optimistic locking transaction semantics via a specified transformation function.&#xA; The transformation is retried as many times as necessary to win the optimistic locking race.">Mutiert ein unveränderliches Array direkt mit einer Transaktions Semantik mit optimistischer Sperre über eine angegebene Transformations Funktion.
Es wird solange wiederholt versucht, die Transformation durchzuführen, bis das Rennen um die optimistische Sperre gewonnen ist.</summary>
      <param name="location" vsli:raw="The immutable array to be changed.">Das unveränderliche Array, das geändert werden soll.</param>
      <param name="transformer" vsli:raw="A function that produces the new array from the old. This function should be side-effect free, as it may run multiple times when races occur with other threads.">Eine Funktion, die das neue Array aus der alten erzeugt. Diese Funktion sollte Nebeneffekte frei sein, da Sie möglicherweise mehrmals ausgeführt wird, wenn die Ausführung von Races mit anderen Threads erfolgt.</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">Das an <paramref name="transformer" /> zu übergebende Argument.</param>
      <typeparam name="T" vsli:raw="The type of data in the immutable array.">Der Typ der Daten im unveränderlichen Array.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">Der Argumenttyp <paramref name="transformer" /> , der an das-Argument übermittelt wird</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" />, wenn der Wert des Speicherorts durch Anwenden des Ergebnisses der Funktion <paramref name="transformer" /> geändert wird. <see langword="false" />, wenn der Wert des Speicherorts derselbe bleibt, da der letzte Aufruf von <paramref name="transformer" /> den vorhandenen Wert zurückgegeben hat.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableList`1" /> Klasse bereit.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">Erstellt eine leere unveränderlichen Liste.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">Der Typ der in gespeicherten Elemente.</typeparam>
      <returns vsli:raw="An empty immutable list.">Eine leere unveränderliche Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">Erstellt eine neue unveränderlichen Liste, die das angegebene Element enthält.</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">Das Element, mit dem die Liste vorab aufgefüllt wird.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Der Typ der Elemente im .</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">Eine neue , die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">Erstellt eine neue unveränderliche Liste, die das angegebene Array von Elementen enthält.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">Ein Array, das die Elemente enthält, um die Liste vorab aufzufüllen.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Der Typ der Elemente im .</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">Erstellt eine neue unveränderlichen Liste, die die angegebenen Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">Erstellt einen neuen unveränderlichen Listen-Builder.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">Erstellt eine neue unveränderlichen Liste, die die angegebenen Elemente enthält.</summary>
      <param name="items" vsli:raw="The items to add to the list.">Das Element, das der Liste hinzugefügt werden soll.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Der Typ der Elemente im .</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">Eine unveränderliche Liste, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb der Liste zurück.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Das Objekt, das in der Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der Liste, der sich vom Index bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb der Liste zurück.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom Index bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom angegebenen Index bis zum letzten Element erstreckt.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom Index bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom angegebenen Index bis zum letzten Element erstreckt.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom Index bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb der gesamten unveränderlichen Liste zurück.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommens des Elements in der gesamten unveränderlichen Liste, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb der gesamten unveränderlichen Liste zurück.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommens des Elements in der gesamten unveränderlichen Liste, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom ersten Element bis zum angegebenen Index erstreckt.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom ersten Element bis zum Index erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom ersten Element bis zum angegebenen Index erstreckt.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom ersten Element bis zum Index erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">Entfernt den angegebenen Wert aus der Liste.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="value" vsli:raw="The value to remove.">Der zu entfernende Wert.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">Eine neue unveränderliche Liste mit dem entfernten Element oder diese Liste, wenn das Element nicht in dieser Liste ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">Entfernt die angegebenen Werte aus dieser Liste.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">Ersetzt das erste gleiche Element in der Liste mit dem angegebenen Element.</summary>
      <param name="list" vsli:raw="The list to search.">Die zu durchsuchende Liste.</param>
      <param name="oldValue" vsli:raw="The element to replace.">Das zu ersetzende Element.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Das durch ein Element zu ersetzende alte Element.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Wird ausgelöst, wenn der alte Wert nicht in der Liste vorhanden ist.</exception>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">Die neue Liste – selbst wenn der zu ersetzende Wert dem neuen Wert für diese Position entspricht.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">Listet eine Sequenz auf und erzeugt eine unveränderliche Liste ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Die Sequenz, die aufgelistet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">Eine unveränderliche Liste, die die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">Erstellt eine unveränderliche Liste aus dem aktuellen Inhalt der Sammlung des Generators.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">Der Generator, aus dem die unveränderliche Liste erstellt werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">Der Typ der in der Auflistung enthaltenen Elemente</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">Eine unveränderliche Liste, die den aktuellen Inhalt der Sammlung des Generators enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine unveränderliche Liste dar, bei der es sich um eine stark typisierte Liste von Objekten handelt, auf die über einen Index zugegriffen werden kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Der Typ der Elemente in der Liste</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">Ruft einen leeren Satz mit dem Standardvergleich für die Sortierung ab.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">Fügt das angegebene Objekt am Ende der unveränderlichen Liste hinzu.</summary>
      <param name="value" vsli:raw="The object to add.">Das hinzuzufügende Objekt.</param>
      <returns vsli:raw="A new immutable list with the object added.">Eine neue unveränderliche Liste, der das Objekt hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">Fügt die Elemente der angegebenen Auflistung am Ende der unveränderlichen Liste hinzu.</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">Die Sammlung, deren Elemente am Ende der Liste hinzugefügt werden.</param>
      <returns vsli:raw="A new immutable list with the elements added.">Eine neue unveränderliche Liste, der die Elemente hinzugefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">Durchsucht mithilfe des Standardcomparers die gesamte sortierte Liste nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das zu suchende Objekt. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">Der Standardcomparer kann keine Comparerimplementierung für Typ T finden.</exception>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Der nullbasierte Index des Elements in der sortierten Liste, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als das Element ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.ICollection.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">Durchsucht mithilfe des angegebenen Vergleichs die gesamte sortierte Liste nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Das zu suchende Objekt. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">Die Vergleichsimplementierung, die beim Vergleichen von Elementen verwendet werden soll, oder null, wenn der Standardvergleich verwendet werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">„comparer“ ist <see langword="null" />, und der Standardcomparer kann keine Comparerimplementierung für Typ T finden.</exception>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Der nullbasierte Index des Elements in der sortierten Liste, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als das Element ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.ICollection.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">Durchsucht mithilfe des angegebenen Vergleichs einen Bereich von Elementen in der sortierten Liste nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Der nullbasierte Startindex des zu durchsuchenden Bereichs.</param>
      <param name="count" vsli:raw="The length of the range to search.">Die Länge des zu durchsuchenden Bereichs.</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Das zu suchende Objekt. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Die Vergleichsimplementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">„index“ ist kleiner als 0, oder <paramref name="count" /> ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">„index“ und <paramref name="count" /> geben keinen gültigen Bereich in der Liste an.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" /> ist <see langword="null" />, und der Standardcomparer kann keine Comparerimplementierung für Typ T finden.</exception>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">Der nullbasierte Index des Elements in der sortierten Liste, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als das Element ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <paramref name="count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">Entfernt alle Elemente aus der unveränderlichen Liste.</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">Eine leere Liste, die die gleiche Sortierung oder ungeordnete Semantik dieser Instanz beibehält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">Ermittelt, ob diese unveränderliche Liste den angegebenen Wert enthält.</summary>
      <param name="value" vsli:raw="The value to locate.">Der zu suchende Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste den angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">Konvertiert die Elemente in der aktuellen unveränderlichen Liste in einen anderen Typ und gibt eine Liste der konvertierten Elemente zurück.</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">Ein Delegat, der jedes Element von einem Typ in einen anderen Typ konvertiert.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">Der Typ der Elemente des Zielarrays.</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">Eine Liste des Zieltyps, die die konvertierten Elemente aus der aktuellen <see cref="T:System.Collections.Immutable.ImmutableList`1" />-Klasse enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am Anfang des Zielarrays begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am angegebenen Index im Zielarray begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Kopiert einen Bereich von Elementen aus der unveränderlichen Liste in ein kompatibles eindimensionales Array, beginnend am angegebenen Index im Zielarray.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Der nullbasierte Index in der unveränderlichen Quellliste, bei dem mit dem Kopieren begonnen wird.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Der nullbasierte Index im Array, ab dem kopiert wird.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Die Anzahl der zu kopierenden Elemente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Bestimmt, ob die unveränderliche Liste Elemente enthält, die mit den vom angegebenen Prädikat definierten Bedingungen übereinstimmen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Der Delegat, der die Bedingungen für die Elemente definiert, nach denen gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die unveränderliche Liste ein oder mehr Elemente enthält, die die durch das angegebene Prädikat definierten Bedingungen erfüllen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt das erste Vorkommen in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Das erste Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, sofern vorhanden, andernfalls der Standardwert für den Typ <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Ruft alle Elemente ab, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Der Delegat, der die Bedingungen für die Elemente definiert, nach denen gesucht werden soll.</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Eine unveränderliche Liste mit allen Elementen, die die durch das angegebene Prädikat angegebenen Bedingungen erfüllen, sofern gefunden, andernfalls eine leere Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen umfasst.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Der nullbasierte Startindex für die Suche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Der nullbasierte Index des ersten Vorkommnisses eines Elements, das mit den durch die Übereinstimmung definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der vom angegebenen Index bis zum letzten Element reicht.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Der nullbasierte Startindex für die Suche.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Der nullbasierte Index des ersten Vorkommnisses eines Elements, das mit den durch die Übereinstimmung definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommnisses eines Elements, das mit den durch die Übereinstimmung definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt das letzte Vorkommen in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Das letzte Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, sofern vorhanden, andernfalls der Standardwert für den Typ <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der die angegebene Anzahl von Elementen umfasst und am angegebenen Index endet.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der vom ersten Element bis zum angegebenen Index reicht.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">Führt die angegebene Aktion für jedes Element der unveränderlichen Liste aus.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">Der Delegat, der für jedes Element der unveränderlichen Liste ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Gibt einen Enumerator zurück, der die unveränderliche Liste durchläuft.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">Ein Enumerator, mit dem die Elemente in der unveränderlichen Liste durchlaufen werden können.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Erstellt eine flache Kopie eines Bereichs von Elementen in der unveränderlichen Quellliste.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Der nullbasierte Index, an dem der Bereich beginnt.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Die Anzahl der Elemente im Bereich.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Eine flache Kopie eines Bereichs von Elementen in der unveränderlichen Quellliste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb der gesamten unveränderlichen Liste zurück.</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">Der nullbasierte Index des ersten Vorkommens von <paramref name="value" /> in der gesamten unveränderlichen Liste, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der Liste zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">Das in der Liste zu suchende Objekt. Der Wert kann für Verweistypen null sein.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der Liste, die am Index beginnt und eine Anzahl von Elementen enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">Fügt das angegebene Objekt am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">Der nullbasierte Index, an dem das Objekt eingefügt werden soll.</param>
      <param name="item" vsli:raw="The object to insert.">Das einzufügende Objekt.</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">Die neue unveränderliche Liste, nachdem das Objekt eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Fügt die Elemente einer Auflistung am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">Der nullbasierte Index, an dem die Elemente eingefügt werden sollen.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">Die Auflistung, deren Elemente eingefügt werden sollen.</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">Die neue unveränderliche Liste, nachdem die Elemente eingefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Ruft einen schreibgeschützten Verweis auf das Element der Gruppe am angegebenen <paramref name="index" /> ab.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Der nullbasierte Index des Elements in der Gruppe, die zurückgegeben werden soll.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> ist negativ oder nicht kleiner als <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <returns vsli:raw="A read-only reference to the element at the given position.">Ein schreibgeschützter Verweis auf das Element an der angegebenen Position.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der Liste zurück, die die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Das Objekt, das in der Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommens des Elements innerhalb des Bereichs von Elementen in der Liste, die die Anzahl von Elementen enthält und am Index endet, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">Entfernt das erste Vorkommen des angegebenen Objekts aus dieser unveränderlichen Liste.</summary>
      <param name="value" vsli:raw="The object to remove.">Das zu entfernende Objekt.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Eine neue Liste mit entferntem Objekt, oder diese Liste, wenn das angegebene Objekt nicht in dieser Liste enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">Entfernt das erste Vorkommen des Objekts, das mit dem angegebenen Wert in dieser unveränderlichen Liste übereinstimmt.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Der Wert des Elements, das aus der Liste entfernt wird.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Eine neue Liste mit entferntem Objekt, oder diese Liste, wenn das angegebene Objekt nicht in dieser Liste enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns vsli:raw="The new list with the elements removed.">Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">Entfernt das Element am angegebenen Index.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
      <returns vsli:raw="A new list with the element removed.">Eine neue Liste, aus der das Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">Entfernt einen Bereich von Elementen aus dieser unveränderlichen Liste.</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">Die Auflistung, deren Elemente entfernt werden sollen, wenn in dieser Liste Übereinstimmungen gefunden werden.</param>
      <returns vsli:raw="A new list with the elements removed.">Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Entfernt die angegebenen Werte aus dieser Liste.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <returns vsli:raw="A new list with the elements removed.">Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">Entfernt einen Bereich von Elementen, beginnend beim angegebenen Index und mit der angegebenen Anzahl von Elementen, aus dieser unveränderlichen Liste.</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">Der Startindex, beim dem mit dem Entfernen begonnen werden soll.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Die Anzahl der zu entfernenden Elemente.</param>
      <returns vsli:raw="A new list with the elements removed.">Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Ersetzt das angegebene Element in der unveränderlichen Liste durch ein neues Element.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Das zu ersetzende Element.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Das zu Element, das durch <paramref name="oldValue" /> ersetzt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">
        <paramref name="oldValue" /> ist nicht in der unveränderlichen Liste vorhanden.</exception>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">Die neue Liste mit dem ersetzten Element, auch wenn es dem alten Element entspricht.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Ersetzt das angegebene Element in der unveränderlichen Liste durch ein neues Element.</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">Das in der Liste zu ersetzende Element.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Das zu Element, das durch <paramref name="oldValue" /> ersetzt werden soll.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">Der Vergleich. der für die Gleichheitsprüfung verwendet werden soll.</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">Eine neue Liste mit dem ersetzten Objekt, oder diese Liste, wenn das angegebene Objekt nicht in dieser Liste enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Kehrt die Reihenfolge der Elemente in der gesamten unveränderlichen Liste um.</summary>
      <returns vsli:raw="The reversed list.">Die umgekehrte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Kehrt die Reihenfolge der Elemente im angegebenen Bereich der unveränderlichen Liste um.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Der nullbasierte Startindex des Bereichs, in dem die Reihenfolge umgekehrt werden soll.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Die Anzahl der Elemente im Bereich, in dem die Reihenfolge umgekehrt werden soll.</param>
      <returns vsli:raw="The reversed list.">Die umgekehrte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">Ersetzt ein Element an einer bestimmten Position in der unveränderliche Liste mit dem angegebenen Element.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Die Position des zu ersetzenden Elements in der Liste.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Das durch ein Element zu ersetzende alte Element.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">Die neue Liste mit dem ersetzten Element, auch wenn es dem alten Element an dieser Position entspricht.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des Standardvergleichs.</summary>
      <returns vsli:raw="The sorted list.">Die sortierte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) verwendet werden soll.</param>
      <returns vsli:raw="The sorted list.">Die sortierte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">Der Delegat, der beim Vergleich von Elementen verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The sorted list.">Die sortierte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">Sortiert einen Bereich von Elementen in der unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Der nullbasierte Startindex des zu sortierenden Bereichs.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Die Länge des zu sortierenden Bereichs.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) verwendet werden soll.</param>
      <returns vsli:raw="The sorted list.">Die sortierte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">Fügt der unveränderlichen Liste das angegebene Element hinzu.</summary>
      <param name="item" vsli:raw="The item to add.">Das Element, das hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Entfernt alle Elemente aus der unveränderlichen Liste.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der unveränderlichen Liste.</summary>
      <param name="item" vsli:raw="The object to remove.">Das zu entfernende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Wird immer ausgelöst.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus der Liste entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="item" /> nicht in der ursprünglichen Liste gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Gibt einen Enumerator zurück, der die unveränderliche Liste durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Ein Enumerator, der zum Durchlaufen der Liste verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">Fügt ein Objekt am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="item" /> eingefügt werden soll.</param>
      <param name="item" vsli:raw="The object to insert.">Das einzufügende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">Entfernt den Wert am angegebenen Index.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, beginnend am angegebenen Index des Arrays.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">Das eindimensionale Array, bei dem es sich um das Ziel der aus der unveränderlichen Liste kopierten Elemente handelt.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Gibt einen Enumerator zurück, der die unveränderliche Liste durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Ein Enumerator, der zum Durchlaufen der Liste verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">Fügt der unveränderlichen Liste ein Element hinzu.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Das Objekt, das der Liste hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Wird immer ausgelöst.</exception>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">Die Position, an der das neue Element eingefügt wurde, oder -1, um anzugeben, dass das Element nicht in die Liste eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Entfernt alle Elemente aus der unveränderlichen Liste.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Bestimmt, ob die unveränderliche Liste einen bestimmten Wert enthält.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Das Objekt, das in der Liste gesucht werden soll.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt in der Liste gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">Bestimmt den Index eines bestimmten Elements in der unveränderlichen Liste.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Das Objekt, das in der Liste gesucht werden soll.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">Fügt ein Element am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Das Objekt, das in die Liste eingefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der unveränderlichen Liste.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Das Objekt, das aus der Liste entfernt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Entfernt das Element am angegebenen Index aus der unveränderlichen Liste.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">Fügt dieser unveränderlichen Liste den angegebenen Wert hinzu.</summary>
      <param name="value" vsli:raw="The value to add.">Der hinzuzufügende Wert.</param>
      <returns vsli:raw="A new list with the element added.">Eine neue Liste, der das Element hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">Fügt die angegebenen Werte dieser unveränderliche Liste hinzu.</summary>
      <param name="items" vsli:raw="The values to add.">Die hinzuzufügenden Werte.</param>
      <returns vsli:raw="A new list with the elements added.">Eine neue Liste, der die Elemente hinzugefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">Ruft eine leere Liste ab, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Eine leere Liste, die dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Fügt das angegebene Element am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Der Index, an dem der Wert eingefügt werden soll.</param>
      <param name="item" vsli:raw="The element to insert.">Das einzufügende Element.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Eine neue unveränderliche Liste, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Fügt die angegebenen Elemente am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">Der Index, an dem die Elemente eingefügt werden sollen.</param>
      <param name="items" vsli:raw="The elements to insert.">Die einzufügenden Elemente.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Eine neue unveränderliche Liste, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">Entfernt das Element mit dem angegebenen Wert aus der Liste.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Der Wert des Elements, das aus der Liste entfernt wird.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">Der zu verwendende Vergleich zum Vergleichen von Elementen auf Gleichheit.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">Ein neues <see cref="T:System.Collections.Immutable.ImmutableList`1" />-Objekt, aus dem das angegebenen Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Entfernt das Element am angegebenen Index der unveränderlichen Liste.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Der Index des zu entfernenden Elements.</param>
      <returns vsli:raw="A new list with the element removed.">Eine neue Liste, aus der das Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">Entfernt einen Bereich von Elementen aus dieser unveränderliche Liste, die die angegebenen Elementen entsprechen.</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">Der Bereich von Elementen, die aus der Liste entfernt werden sollen, falls gefunden.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">Der Gleichheitsvergleich zum Vergleichen von Elementen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="items" /> oder <paramref name="equalityComparer" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="An immutable list with the items removed.">Eine unveränderliche Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">Entfernt die angegebene Anzahl von Elementen an der angegebenen Position aus dieser Liste.</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">Der Startindex für den Bereich der zu entfernenden Elemente.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Die Anzahl der zu entfernenden Elemente.</param>
      <returns vsli:raw="A new list with the elements removed.">Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">Ersetzt ein Element in der Liste durch das angegebene Element.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Das zu ersetzende Element.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Das durch ein Element zu ersetzende alte Element.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Der Gleichheitsvergleich für die Suche.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Wird ausgelöst, wenn der alte Wert nicht in der Liste vorhanden ist.</exception>
      <returns vsli:raw="The new list.">Die neue Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Ersetzt ein Element an einer bestimmten Position in der Liste durch das angegebene Element.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Die Position des zu ersetzenden Elements in der Liste.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Das durch ein Element zu ersetzende alte Element.</param>
      <returns vsli:raw="The new list.">Die neue Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">Erstellt eine Liste mit dem gleichen Inhalt der Liste und kann über mehrere Vorgänge mithilfe von Standardschnittstellen effizient verändert werden kann.</summary>
      <returns vsli:raw="The created list with the same contents as this list.">Die erstellte Liste mit dem gleichen Inhalt wie diese Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Bestimmt, ob jedes Element in der unveränderlichen Liste die vom angegebenen Prädikat definierten Bedingungen erfüllt.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Der Delegat, der die Bedingungen definiert, auf die die Elemente geprüft werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn jedes Element in der unveränderlichen Liste die vom angegebenen Prädikat definierten Bedingungen erfüllt; andernfalls <see langword="false" />. Wenn die Liste über keine Elemente verfügt, ist der Rückgabewert <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">Ruft die Anzahl der Elemente ab, die in der Liste enthalten sind.</summary>
      <returns vsli:raw="The number of elements in the list.">Die Anzahl von Elementen in der Liste.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">Ruft einen Wert ab, der angibt, ob diese Liste leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Liste leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">Ruft das Element am angegebenen Index der Liste ab.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">Der Index des abzurufenden Elements.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Bei einem GET-Vorgang ist <paramref name="index" /> negativ oder kleiner als <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <returns vsli:raw="The element at the specified index.">Das Element am angegebenen Index.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">Ruft den Wert am angegebenen Index ab oder legt diesen fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access.">Dies ist der nullbasierte Index des Elements, auf das zugegriffen werden soll.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Wird vom Getter ausgelöst, wenn <paramref name="index" /> negativ oder weniger als <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> ist.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Wird immer vom Setter ausgelöst.</exception>
      <returns vsli:raw="Value stored in the specified index.">Im angegebenen Index gespeicherter Wert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Dieser Typ ist unveränderlich und daher immer threadsicher. Siehe Schnittstelle <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="Boolean value determining whether the collection is thread-safe.">Boolescher Wert, der bestimmt, ob die Auflistung Thread sicher ist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Siehe <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="Object used for synchronizing access to the collection.">Objekt, das zum Synchronisieren des Zugriffs auf die Auflistung verwendet wird.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Ist <see langword="true" />, wenn die <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Ruft die <see cref="T:System.Object" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The index.">Der Index.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Wird vom Getter ausgelöst, wenn <paramref name="index" /> negativ oder weniger als <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> ist.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Wird immer vom Setter ausgelöst.</exception>
      <returns vsli:raw="The value at the specified index.">Der Wert am angegebenen Index.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Liste dar, die mit wenigen oder gar keinen Speicherbelegungen geändert wird und sehr effizient Instanzen unveränderlicher Listen erzeugen oder darauf aufbauen kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">Fügt der unveränderlichen Liste ein Element hinzu.</summary>
      <param name="item" vsli:raw="The item to add to the list.">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">Fügt am Ende dieser Liste eine Reihe von Elementen hinzu.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">Die Elemente, die am Ende der Liste hinzugefügt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">Durchsucht <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> mithilfe des Standardvergleichs vollständig nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Das zu suchende Objekt. Der Wert kann für Verweistypen NULL sein.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">Die Standardvergleicheigenschaft <see cref="P:System.Collections.Generic.Comparer`1.Default" /> kann keine Implementierung der generischen <see cref="T:System.IComparable`1" />-Schnittstelle oder der <see cref="T:System.IComparable" />-Schnittstelle für Typ „T“ finden.</exception>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Der nullbasierte Index des Elements in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="item" /> ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Durchsucht <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> mithilfe des angegebenen Vergleichs vollständig nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Das zu suchende Objekt. Dieser Wert kann für Verweistypen NULL sein.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> ist <see langword="null" />, und die Standardvergleicheigenschaft <see cref="P:System.Collections.Generic.Comparer`1.Default" /> kann keine Implementierung der generischen <see cref="T:System.IComparable`1" />-Schnittstelle oder der <see cref="T:System.IComparable" />-Schnittstelle für den Typ „T“ finden.</exception>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Der nullbasierte Index des Elements in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="item" /> ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Durchsucht den angegebenen Bereich von <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> mithilfe des angegebenen Vergleichs nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Der nullbasierte Startindex des zu durchsuchenden Bereichs.</param>
      <param name="count" vsli:raw="The length of the range to search.">Die Länge des zu durchsuchenden Bereichs.</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Das zu suchende Objekt. Dieser Wert kann für Verweistypen NULL sein.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> ist kleiner als 0.
- oder -

<paramref name="count" /> ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> und <paramref name="count" /> geben keinen gültigen Bereich in der <see cref="T:System.Collections.Generic.List`1" /> an.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> ist <see langword="null" />, und die Standardvergleicheigenschaft <see cref="P:System.Collections.Generic.Comparer`1.Default" /> kann keine Implementierung der generischen <see cref="T:System.IComparable`1" />-Schnittstelle oder der <see cref="T:System.IComparable" />-Schnittstelle für den Typ „T“ finden.</exception>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Der nullbasierte Index des Elements in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="item" /> ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Entfernt alle Elemente aus der unveränderlichen Liste.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Bestimmt, ob die unveränderliche Liste einen bestimmten Wert enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the list.">Das Objekt, das in der Liste gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn sich das Element in der Liste befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">Erstellt eine neue unveränderliche Liste aus der durch diesen Generator dargestellten Liste mithilfe der Konverterfunktion.</summary>
      <param name="converter" vsli:raw="The converter function.">Die Konverterfunktion.</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">Der Typ der Ausgabe der Delegatkonverterfunktion.</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">Eine neue unveränderliche Liste aus der Liste, die durch diesen Generator dargestellt wird.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am Anfang des Zielarrays begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am angegebenen Index im Zielarray begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Der nullbasierte Index im Array, ab dem kopiert wird.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am angegebenen Index im Zielarray begonnen wird.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Der nullbasierte Index in der unveränderlichen Quellliste, bei dem mit dem Kopieren begonnen wird.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Die Anzahl der zu kopierenden Elemente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Bestimmt, ob die unveränderliche Liste Elemente enthält, die mit den vom angegebenen Prädikat definierten Bedingungen übereinstimmen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Der Delegat, der die Bedingungen für die Elemente definiert, nach denen gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die unveränderliche Liste ein oder mehr Elemente enthält, die die durch das angegebene Prädikat definierten Bedingungen erfüllen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt das erste Vorkommen in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Das erste Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, sofern vorhanden, andernfalls der Standardwert für den Typ <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Ruft alle Elemente ab, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Der Delegat, der die Bedingungen für die Elemente definiert, nach denen gesucht werden soll.</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Eine unveränderliche Liste mit allen Elementen, die die durch das angegebene Prädikat angegebenen Bedingungen erfüllen, sofern gefunden, andernfalls eine leere unveränderliche Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen umfasst.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Der nullbasierte Startindex für die Suche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden; andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der vom angegebenen Index bis zum letzten Element reicht.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Der nullbasierte Startindex für die Suche.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden; andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden; andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt das letzte Vorkommen in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Das letzte Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, sofern vorhanden, andernfalls der Standardwert für den Typ <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der die angegebene Anzahl von Elementen umfasst und am angegebenen Index endet.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der vom ersten Element bis zum angegebenen Index reicht.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">Führt die angegebene Aktion für jedes Element der Liste aus.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">Der Delegat, der für jedes Element der Liste ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Ein Enumerator, der zum Durchlaufen der Liste verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Erstellt eine flache Kopie eines Bereichs von Elementen in der unveränderlichen Quellliste.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Der nullbasierte Index, an dem der Bereich beginnt.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Die Anzahl der Elemente im Bereich.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Eine flache Kopie eines Bereichs von Elementen in der unveränderlichen Quellliste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in der unveränderlichen Liste, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom angegebenen Index bis zum letzten Element erstreckt.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich von <paramref name="index" /> bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Der Wertevergleich, der zum Vergleichen von Elementen auf Gleichheit verwendet werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">Fügt ein Element am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="item" /> eingefügt werden soll.</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">Das Objekt, das in die unveränderliche Liste eingefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Fügt die Elemente einer Auflistung am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Der nullbasierte Index, an dem neue Elemente eingefügt werden sollen.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">Die Auflistung, deren Elemente in die unveränderliche Liste eingefügt werden sollen. Die Auflistung an sich kann nicht <see langword="null" /> sein, sie kann jedoch Elemente enthalten, die NULL sind, wenn der Typ <c>T</c> einen Verweistyp darstellt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">Ruft einen schreibgeschützten Verweis auf den Wert für einen angegebenen <paramref name="index" /> in der Liste ab.</summary>
      <param name="index" vsli:raw="The index of the desired element.">Der Index des gewünschten Elements.</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">Ein schreibgeschützter Verweis auf den Wert am angegebenen <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb der gesamten unveränderlichen Liste zurück.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommens von <paramref name="item" /> in der gesamten unveränderlichen Liste, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom ersten Element bis zum angegebenen Index erstreckt.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom ersten Element bis zum <paramref name="index" /> erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Der nullbasierte Index des letzten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der eine Anzahl von Elementen (<paramref name="count" />) enthält und am <paramref name="index" /> endet, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count" vsli:raw="The number of elements to search.">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Der Wertevergleich, der zum Vergleichen von Elementen auf Gleichheit verwendet werden soll.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der unveränderlichen Liste.</summary>
      <param name="item" vsli:raw="The object to remove from the list.">Das Objekt, das aus der Liste entfernt werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">
        <see langword="true" />, wenn das Element erfolgreich aus der Liste entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn das Element nicht in der Liste gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">Die Anzahl der aus der unveränderlichen Liste entfernten Elemente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Entfernt das Element am angegebenen Index aus der unveränderlichen Liste.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">Der nullbasierte Index des Elements, das aus der Liste entfernt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Kehrt die Reihenfolge der Elemente in der gesamten unveränderlichen Liste um.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Kehrt die Reihenfolge der Elemente im angegebenen Bereich der unveränderlichen Liste um.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Der nullbasierte Startindex des Bereichs, in dem die Reihenfolge umgekehrt werden soll.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Die Anzahl der Elemente im Bereich, in dem die Reihenfolge umgekehrt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des Standardvergleichs.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) verwendet werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des angegebenen Vergleichsobjekts.</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">Das Objekt, das beim Vergleichen von Elementen verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">Sortiert die Elemente in einem Bereich von Elementen in der unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Der nullbasierte Startindex des zu sortierenden Bereichs.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Die Länge des zu sortierenden Bereichs.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) verwendet werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">Kopiert die Elemente der Liste in ein Array, beginnend an einem bestimmten Arrayindex.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">Das eindimensionale Array, das das Ziel der aus der Liste kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">Fügt der Liste ein Element hinzu.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Das Objekt, das der Liste hinzugefügt werden soll.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">Die Position, an der das neue Element eingefügt wurde, oder -1, um anzugeben, dass das Element nicht in die Auflistung eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">Entfernt alle Elemente aus der Liste.</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">Bestimmt, ob die Liste einen bestimmten Wert enthält.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Das Objekt, das in der Liste gesucht werden soll.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="T:System.Object" /> in der Liste vorhanden ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">Bestimmt den Index eines bestimmten Elements in der Liste.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Das Objekt, das in der Liste gesucht werden soll.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">Fügt ein Element am angegebenen Index in die Liste ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Das Objekt, das in die Liste eingefügt werden soll.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der Liste.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Das Objekt, das aus der Liste entfernt werden soll.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">Erstellt eine unveränderliche Liste basierend auf dem Inhalt dieser Instanz.</summary>
      <returns vsli:raw="An immutable list.">Eine unveränderliche Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Bestimmt, ob jedes Element in der unveränderlichen Liste die vom angegebenen Prädikat definierten Bedingungen erfüllt.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Der Delegat, der die Bedingungen definiert, auf die die Elemente geprüft werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn jedes Element in der unveränderlichen Liste die vom angegebenen Prädikat definierten Bedingungen erfüllt; andernfalls <see langword="false" />. Wenn die Liste über keine Elemente verfügt, ist der Rückgabewert <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">Ruft die Anzahl von Elementen in dieser unveränderlichen Liste ab.</summary>
      <returns vsli:raw="The number of elements in this list.">Die Anzahl von Elementen in der Liste.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">Ruft den Wert für einen angegebenen Index in der Liste ab oder legt ihn fest.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Der Index des abzurufenden oder festzulegenden Elements.</param>
      <returns vsli:raw="The value at the specified index.">Der Wert am angegebenen Index.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Immer <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ein Objekt, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.IList" /> eine feste Größe hat.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Ist <see langword="true" />, wenn die <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Ruft die <see cref="T:System.Object" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The index.">Der Index.</param>
      <returns vsli:raw="The object at the specified index.">Das Objekt am angegebenen Index.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Listet den Inhalt einer binären Struktur auf.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">Setzt den Enumerator auf das nächste Element der unveränderlichen Liste.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Liste überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der unveränderlichen Liste.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Das aktuelle Element.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> Klasse bereit.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">Erstellt eine leere unveränderliche Warteschlange.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">Der Typ der in der unveränderlichen Warteschlange zu speichernden Elemente.</typeparam>
      <returns vsli:raw="An empty immutable queue.">Eine leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">Erstellt eine neue unveränderliche Warteschlange, die das angegebene Element enthält.</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">Das Element, mit dem die Warteschlange vorab aufgefüllt wird.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Der Typ der Elemente in der unveränderlichen Warteschlange.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">Eine neue unveränderliche Warteschlange, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">Erstellt eine neue unveränderliche Warteschlange, die das angegebene Array von Elementen enthält.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">Ein Array, das die Elemente enthält, um die Warteschlange vorab aufzufüllen.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Der Typ der Elemente in der unveränderlichen Warteschlange.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">Eine neue unveränderliche Warteschlange, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">Erstellt eine neue unveränderliche Warteschlange, die die angegebenen Elemente enthält.</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">Das zur Warteschlange hinzuzufügende Element, bevor die Unveränderlichkeit angewendet wird.</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Der Typ der Elemente in der Warteschlange.</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">Eine neue unveränderliche Warteschlange, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Entfernt das Element am Anfang der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">Die Warteschlange, aus der das Element entfernt werden soll.</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">Wenn diese Methode zurückgegeben wird, enthält sie das Element vom Anfang der Warteschlange.</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">Der Typ der Elemente in der unveränderlichen Warteschlange.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Der Stapel ist leer.</exception>
      <returns vsli:raw="The new queue with the item removed.">Die neue Warteschlange mit dem entfernten Element.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine unveränderliche Warteschlange dar.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Der Typ der Elemente in der Warteschlange.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">Entfernt alle Objekte aus der unveränderlichen Warteschlange.</summary>
      <returns vsli:raw="The empty immutable queue.">Die leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Entfernt das Element am Anfang der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Die Warteschlange ist leer.</exception>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Die neue unveränderliche Warteschlange, niemals <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Entfernt das Element am Anfang der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">Wenn diese Methode zurückgegeben wird, enthält sie das Element vom Anfang der Warteschlange.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Die Warteschlange ist leer.</exception>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">Die neue unveränderliche Warteschlange, aus der das Anfangselement entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Fügt ein Element am Ende der unveränderlichen Warteschlange hinzu und gibt die neue Warteschlange zurück.</summary>
      <param name="value" vsli:raw="The element to add.">Das hinzuzufügende Element.</param>
      <returns vsli:raw="The new immutable queue.">Die neue unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">Gibt einen Enumerator zurück, der die unveränderliche Warteschlange durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">Ein Enumerator, der zum Durchlaufen der Warteschlange verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Gibt das Element am Anfang der unveränderlichen Warteschlange zurück, ohne es zu entfernen.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Die Warteschlange ist leer.</exception>
      <returns vsli:raw="The element at the beginning of the queue.">Das Element am Anfang der Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">Ruft einen schreibgeschützten Verweis auf das Element an vorderster Position der Warteschlange ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Die Warteschlange ist leer.</exception>
      <returns vsli:raw="Read-only reference to the element at the front of the queue.">Dies ist ein schreibgeschützter Verweis auf das Element an vorderster Position der Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">Entfernt alle Elemente aus der unveränderlichen Warteschlange.</summary>
      <returns vsli:raw="The empty immutable queue.">Die leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Entfernt das Element am Anfang der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Wird ausgelöst, wenn die Warteschlange leer ist.</exception>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Die neue unveränderliche Warteschlange, niemals <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Fügt ein Element am Ende der unveränderlichen Warteschlange hinzu und gibt die neue Warteschlange zurück.</summary>
      <param name="value" vsli:raw="The element to add.">Das hinzuzufügende Element.</param>
      <returns vsli:raw="The new immutable queue.">Die neue unveränderliche Warteschlange.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">Ruft eine leere unveränderliche Warteschlange ab.</summary>
      <returns vsli:raw="An empty immutable queue.">Eine leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Ruft einen Wert ab, der angibt, ob diese unveränderliche Warteschlange leer ist.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Warteschlange leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Listet den Inhalt von einer unveränderlichen Warteschlange auf, ohne Arbeitsspeicher zuzuweisen.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">Setzt den Enumerator auf das nächste Element der unveränderlichen Warteschlange.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Warteschlange überschritten hat.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> Klasse bereit.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">Erstellt ein leeres unveränderliches sortiertes Wörterbuch.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Ein leeres unveränderliches sortiertes Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">Erstellt ein leeres unveränderliches sortiertes Wörterbuch, das den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Die Implementierung zum Bestimmen der Gleichheit der Schlüssel im Wörterbuch.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Ein leeres unveränderliches sortiertes Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">Erstellt ein leeres unveränderliches sortiertes Wörterbuch, das den angegebenen Schlüssel- und Wertevergleich verwendet.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Die Implementierung zum Bestimmen der Gleichheit der Schlüssel im Wörterbuch.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Die Implementierung zum Bestimmen der Gleichheit der Werte im Wörterbuch.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Ein leeres unveränderliches sortiertes Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Erstellt einen Generator für ein neues unveränderliches sortiertes Wörterbuch.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Erstellt einen Generator für ein neues unveränderliches sortiertes Wörterbuch.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Der Schlüsselvergleich.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Erstellt einen Generator für ein neues unveränderliches sortiertes Wörterbuch.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Der Schlüsselvergleich.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Der Wertevergleich.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">Erstellt ein neues unveränderliches sortiertes Wörterbuch aus dem angegebenen Bereich von Elementen mit dem angegebenen Schlüsselvergleich.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">Die Vergleichsimplementierung, die zum Auswerten von Schlüsseln auf Gleichheit und Sortierreihenfolge verwendet wird.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">Die Elemente, die dem sortierten Wörterbuch hinzugefügt werden.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Der Typ der im Wörterbuch gespeicherten Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Der Typ der im Wörterbuch gespeicherten Werte.</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">Das neue unveränderliche sortierte Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Schlüsselvergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">Erstellt ein neues unveränderliches sortiertes Wörterbuch aus dem angegebenen Bereich von Elementen mit dem angegebenen Schlüssel- und Wertevergleich.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">Die Vergleichsimplementierung, die zum Vergleichen von Schlüsseln auf Gleichheit und Sortierreihenfolge verwendet wird.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Die Vergleichsimplementierung, die zum Vergleichen von Werten auf Gleichheit und Sortierreihenfolge verwendet wird.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Die Elemente, die dem sortierten Wörterbuch hinzugefügt werden, bevor es unveränderlich wird.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Der Typ der im Wörterbuch gespeicherten Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Der Typ der im Wörterbuch gespeicherten Werte.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">Ein unveränderliches sortiertes Wörterbuch, das die angegebenen Elemente enthält und die angegebenen Vergleiche verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">Erstellt ein unveränderliches sortiertes Wörterbuch, das die angegebenen Elemente enthält und den Standardvergleich verwendet.</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Die Elemente, die dem sortierten Wörterbuch hinzugefügt werden, bevor es unveränderlich wird.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Der Typ der im Wörterbuch gespeicherten Schlüssel.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Der Typ der im Wörterbuch gespeicherten Werte.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">Ein unveränderliches sortiertes Wörterbuch, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Ein unveränderliches sortiertes Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Der Schlüsselvergleich, der beim Erstellen des unveränderlichen Wörterbuchs verwendet wird.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Ein unveränderliches sortiertes Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt mithilfe des angegebenen Schlüssel- und Wertevergleichs ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Der Schlüsselvergleich, der beim Erstellen des unveränderlichen Wörterbuchs verwendet wird.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Der Wertevergleich für die Verwendung des unveränderlichen Wörterbuchs.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Ein unveränderliches sortiertes Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">Erstellt ein unveränderliches sortiertes Wörterbuch aus dem aktuellen Inhalt des Wörterbuchs des Generators.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">Der Generator, aus dem das unveränderlich sortierte Wörterbuch erstellt werden soll.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">Ein unveränderliches sortiertes Wörterbuch, das den aktuellen Inhalt des Wörterbuchs des Generators enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">Listet eine Sequenz auf, transformiert sie und erzeugt ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Ein unveränderliches sortiertes Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">Listet eine Sequenz auf, transformiert sie und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Ein unveränderliches Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Listet eine Sequenz auf, transformiert sie und erzeugt mithilfe des angegebenen Schlüssel- und Wertevergleichs ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Der Wertevergleich für die Verwendung des Wörterbuchs.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Ein unveränderliches sortiertes Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt ein unveränderlich sortiertes Wörterbuch dar.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">Der Typ des im Wörterbuch enthaltenen Schlüssels.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">Der Typ des im Wörterbuch enthaltenen Werts.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">Ruft ein leeres unveränderlich sortiertes Wörterbuch ab.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">Fügt ein Element mit dem angegebenen Schlüssel und Wert zum unveränderlich sortierten Wörterbuch hinzu.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Der Schlüssel des hinzuzufügenden Eintrags.</param>
      <param name="value" vsli:raw="The value of entry to add.">Der Wert des hinzuzufügenden Eintrags.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">Der angegebene Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">Ein neues unveränderlich sortiertes Wörterbuch, das das zusätzliche Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">Fügt dem unveränderlich sortierten Wörterbuch die angegebenen Schlüssel-Wert-Paare hinzu.</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">Die Schlüssel-Wert-Paare, die hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Einer der angegebenen Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Ein neues unveränderliches Wörterbuch, das die zusätzlichen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Ruft ein leeres unveränderlich sortiertes Wörterbuch ab, das über dieselben Sortier- und Schlüssel-Wert-Vergleichsregeln wie diese Wörterbuchinstanz verfügt.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Ein leeres Wörterbuch mit äquivalenten Sortier- und Schlüssel-Wert-Vergleichsregeln.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">Bestimmt, ob dieses unveränderlich sortierte Wörterbuch das angegebene Schlüssel-Wert-Paar enthält.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Das Schlüssel-Wert-Paar, das gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Schlüssel-Wert-Paar im Wörterbuch gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">Ermittelt, ob diese unveränderlich sortierte Zuordnung den angegebenen Schlüssel enthält.</summary>
      <param name="key" vsli:raw="The key to locate.">Der zu suchende Schlüssel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das unveränderliche Wörterbuch den angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Ermittelt, ob das unveränderlich sortierte Wörterbuch ein Element mit dem angegebenen Wert enthält.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Der zu suchende Wert. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Gibt einen Enumerator zurück, der das unveränderlich sortierte Wörterbuch durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Ein Enumerator, mit dem das Wörterbuch durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">Entfernt das Element mit dem angegebenen Wert aus dem unveränderlich sortierten Wörterbuch.</summary>
      <param name="value" vsli:raw="The value of the element to remove.">Der Wert des zu entfernenden Elements.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">Ein neues unveränderliches Wörterbuch, aus dem das angegebene Element entfernt wurde, oder diese Instanz, wenn der angegebene Wert im Wörterbuch nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">Entfernt die Elemente mit den angegebenen Schlüsseln aus dem unveränderlich sortierten Wörterbuch.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Die Schlüssel der zu entfernenden Elemente.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Ein neues unveränderliches Wörterbuch, aus dem die angegebenen Schlüssel entfernt wurden, oder diese Instanz, wenn die angegebenen Schlüssel im Wörterbuch nicht gefunden wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">Legt den angegebenen Schlüssel und Wert im unveränderlich sortierten Wörterbuch fest, wobei ein vorhandener Wert für den Schlüssel überschrieben werden kann.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Der Schlüssel des hinzuzufügenden Eintrags.</param>
      <param name="value" vsli:raw="The key value to set.">Der Schlüsselwert, der festgelegt werden soll.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">Ein neues unveränderlich sortiertes Wörterbuch, das das angegebene Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">Legt die angegebenen Schlüssel-Wert-Paare im unveränderlich sortierten Wörterbuch fest, wobei vorhandene Werte für die Schlüssel überschrieben werden können.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Die Schlüssel-Wert-Paare, die im Wörterbuch festgelegt werden sollen. Falls ein Schlüssel bereits im Wörterbuch vorhanden ist, überschreibt diese Methode dessen vorherigen Wert.</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">Ein unveränderliches Wörterbuch, das die angegebenen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Fügt der <see cref="T:System.Collections.Generic.ICollection`1" /> ein Element hinzu.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Das Objekt, das <see cref="T:System.Collections.Generic.ICollection`1" /> hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Entfernt alle Elemente aus <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Kopiert die Elemente der <see cref="T:System.Collections.Generic.ICollection`1" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Collections.Generic.ICollection`1" /> kopierten Elemente ist. Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Entfernt das erste Vorkommen eines angegebenen Objekts aus der <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">Das aus der <see cref="T:System.Collections.Generic.ICollection`1" /> zu entfernende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus der <see cref="T:System.Collections.Generic.ICollection`1" /> entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="item" /> nicht in der ursprünglichen <see cref="T:System.Collections.Generic.ICollection`1" /> gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary vsli:raw="Adds an element with the provided key and value to the generic dictionary.">Fügt dem generischen Wörterbuch ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Das Objekt, das als Schlüssel des hinzuzufügenden Elements verwendet werden soll.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Das Objekt, das als Wert des hinzuzufügenden Elements verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">In <see cref="T:System.Collections.Generic.IDictionary`2" /> ist bereits ein Element mit demselben Schlüssel enthalten.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the generic dictionary.">Entfernt das Element mit dem angegebenen Schlüssel aus dem generischen Wörterbuch.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> ist schreibgeschützt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original generic dictionary.">
        <see langword="true" />, wenn das Element erfolgreich entfernt wurde, andernfalls <see langword="false" />.  Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="key" /> nicht im ursprünglichen generischen Wörterbuch gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Kopiert die Elemente des Wörterbuchs in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Das eindimensionale Array, welches das Ziel der aus dem Wörterbuch kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Fügt dem Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Das Objekt, das als Schlüssel des hinzuzufügenden Elements verwendet werden soll.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Das Objekt, das als Wert des hinzuzufügenden Elements verwendet werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Löscht diese Instanz.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">Das Wörterbuchobjekt ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Bestimmt, ob das unveränderliche Dictionary-Objekt ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Der im Dictionary-Objekt zu suchende Schlüssel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Gibt ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das unveränderliche Dictionary-Objekt zurück.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Ein Enumeratorobjekt für das Dictionary-Objekt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Dictionary-Objekt.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key" vsli:raw="Key of the entry to be added.">Dies ist der Schlüssel des Eintrags, der hinzugefügt werden soll.</param>
      <param name="value" vsli:raw="Value of the entry to be added.">Dies ist der Wert des Eintrags, der hinzugefügt werden soll.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; instance.">Die <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />-Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added.">Dies ist die Sequenz der Schlüssel-Wert-Paare, die hinzugefügt werden sollen.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; instance.">Die <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />-Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; instance.">Die <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />-Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key" vsli:raw="Key of entry to be removed.">Dies ist der Schlüssel des Eintrags, der entfernt werden soll.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; instance.">Die <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />-Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="keys" vsli:raw="Sequence of keys to be removed.">Dies ist die Sequenz der Schlüssel, die entfernt werden sollen.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; instance.">Die <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />-Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key" vsli:raw="Key of entry to be updated.">Dies ist der Schlüssel des Eintrags, der aktualisiert werden soll.</param>
      <param name="value" vsli:raw="Value of entry to be updated.">Dies ist der Wert des Eintrags, der aktualisiert werden soll.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; instance.">Die <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />-Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Applies a given set of key-value pairs to an immutable dictionary, replacing any conflicting keys in the resulting dictionary.">Wendet einen bestehenden Satz von Schlüssel-Wert-Paaren auf ein unveränderliches Wörterbuch an und ersetzt dabei alle im Konflikt stehenden Schlüssel im resultierenden Wörterbuch.</summary>
      <param name="items" vsli:raw="A set of key-value pairs to set on the map.">Ein Satz von Schlüssel-Wert-Paaren, die auf der Karte festgelegt werden sollen.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableDictionary`2&quot; /&gt; instance.">Die <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />-Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Erstellt ein unveränderlich sortiertes Wörterbuch, das den gleichen Inhalt wie dieses Wörterbuch aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">Eine Auflistung mit dem gleichen Inhalt wie dieses Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Der Schlüssel, dessen Wert abgerufen wird.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Enthält nach dem Beenden dieser Methode den Wert, der dem angegebenen Schlüssel zugeordnet ist (wenn der Schlüssel gefunden wurde), oder andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Gibt einen schreibgeschützten Verweis auf den mit dem angegebenen <paramref name="key" /> verknüpften Wert zurück.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up.">Dies ist der Schlüssel des Eintrags, der gesucht werden soll.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">Der <paramref name="key" /> ist nicht vorhanden.</exception>
      <returns vsli:raw="A read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Dies ist ein schreibgeschützter Verweis auf den Wert, der mit dem bereitgestellten <paramref name="key" /> verknüpft ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">Ruft eine Instanz des unveränderlich sortierten Wörterbuchs ab, die den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Der zu verwendende Schlüsselvergleich.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Eine Instanz des unveränderlichen Wörterbuchs, die den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">Ruft eine Instanz des unveränderlich sortierten Wörterbuchs ab, die die angegebenen Schlüssel- und Wertevergleiche verwendet.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Der zu verwendende Schlüsselvergleich.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Der zu verwendende Wertevergleich.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Eine Instanz des unveränderlichen Wörterbuchs, die die angegebenen Vergleiche verwendet.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">Ruft die Anzahl der Schlüssel-Wert-Paare im unveränderlich sortierten Wörterbuch ab.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Die Anzahl der Schlüssel-Wert-Paare im Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">Ruft einen Wert ab, der angibt, ob diese Instanz des unveränderlich sortierten Wörterbuchs leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Ruft den <paramref name="TValue" />-Wert ab, der dem angegebenen Schlüssel zugeordnet ist.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Der Schlüssel, dessen Wert abgerufen werden soll.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Der dem angegebenen Schlüssel zugeordnete Wert. Wenn keine Ergebnisse gefunden werden, löst der Vorgang eine Ausnahme aus.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">Ruft den Schlüsselvergleich für das unveränderlich sortierte Wörterbuch ab.</summary>
      <returns vsli:raw="The key comparer for the dictionary.">Der Schlüsselvergleich für das Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">Ruft die Schlüssel im unveränderlich sortierten Wörterbuch ab.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Die Schlüssel im unveränderlichen Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary vsli:raw="Gets or sets the &lt;typeparamref name=&quot;TValue&quot; /&gt; with the specified key.">Ruft das <typeparamref name="TValue" /> mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to access.">Dies ist das Objekt, das als Schlüssel des Elements verwendet werden soll, auf das zugegriffen wird.</param>
      <returns vsli:raw="An object of type &lt;typeparamref name=&quot;TValue&quot; /&gt; associated with the &lt;paramref name=&quot;key&quot; /&gt;.">Ein Objekt vom Typ, <typeparamref name="TValue" /> das dem zugeordnet ist <paramref name="key" /> .</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets the keys.">Ruft die Schlüssel ab.</summary>
      <returns vsli:raw="A collection containing the keys.">Eine Auflistung, die die Schlüssel enthält.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets the values.">Ruft die Werte ab.</summary>
      <returns vsli:raw="A collection containing the values.">Eine Auflistung, die die Werte enthält.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ein Objekt, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">Der Schlüssel eines Elements, auf das zugegriffen werden soll.</param>
      <returns vsli:raw="Value stored under the specified key.">Der unter dem angegebenen Schlüssel gespeicherte Wert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Ruft den Wertevergleich ab, mit dem bestimmt wird, ob Werte identisch sind.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Der Wertevergleich, mit dem bestimmt wird, ob Werte identisch sind.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">Ruft die Werte im unveränderlich sortierten Wörterbuch ab.</summary>
      <returns vsli:raw="The values in the dictionary.">Die Werte im Wörterbuch.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt ein sortiertes Wörterbuch dar, das mit wenigen oder gar keinen Speicherbelegungen geändert wird und das sehr effizient unveränderlich sortierte Wörterbuch-Instanzen produzieren oder auf ihnen aufbauen kann.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">Fügt ein Element mit dem angegebenem Schlüssel und Wert zum unveränderlich sortierten Wörterbuch hinzu.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value" vsli:raw="The value of the element to add.">Der Wert des hinzuzufügenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">Ein angegebenes Element wird zum unveränderlich sortierten Wörterbuch hinzugefügt.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Das Objekt, das dem Wörterbuch hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">Fügt eine Sequenz von Werten zum unveränderlich sortierten Wörterbuch hinzu.</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">Die Elemente, die dem Wörterbuch hinzugefügt werden.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">Entfernt alle Elemente aus dem unveränderlich sortierten Wörterbuch.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">Ermittelt, ob das unveränderlich sortierte Wörterbuch einen bestimmten Wert enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Das Objekt, das im Wörterbuch gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn sich <paramref name="item" /> im Wörterbuch befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">Bestimmt, ob das unveränderlich sortierte Wörterbuch ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Der im Wörterbuch zu suchende Schlüssel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Ermittelt, ob das unveränderlich sortierte Wörterbuch ein Element mit dem angegebenen Wert enthält.</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Der Wert, der im Wörterbuch gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das unveränderlich sortierte Wörterbuch ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Gibt einen Enumerator zurück, der das unveränderlich sortierte Wörterbuch durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Ein Enumerator, mit dem das Wörterbuch durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Ruft den Wert für einen angegebenen Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist, andernfalls ist es der Standardwert.</summary>
      <param name="key" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Der Wert für den Schlüssel oder <c>default(TValue)</c>, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Ruft den Wert für einen angegebenen Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist, andernfalls ist es der Standardwert.</summary>
      <param name="key" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Der zurückzugebende Standardwert, wenn kein übereinstimmender Schlüssel im Wörterbuch gefunden wurde.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Der Wert für den Schlüssel oder <paramref name="defaultValue" />, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlich sortierten Wörterbuch.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">
        <see langword="true" />, wenn das Element erfolgreich entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="key" /> nicht im ursprünglichen Wörterbuch gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">Entfernt das erste Vorkommen eines bestimmten Objekts aus dem unveränderlich sortierten Wörterbuch.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Das Objekt, das aus dem Wörterbuch entfernt werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus dem Wörterbuch entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="item" /> nicht im Wörterbuch gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">Entfernt alle Einträge mit Schlüsseln, die mit denen übereinstimmen, die in der angegebenen Reihenfolge des unveränderlichen sortierte Wörterbuch gefunden wurden.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Die Schlüssel für Einträge, die aus dem Wörterbuch entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Siehe <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Das eindimensionale Array, welches das Ziel der aus dem Wörterbuch kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Siehe <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Kopiert die Elemente des Wörterbuchs in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Das eindimensionale Array, welches das Ziel der aus dem Wörterbuch kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Fügt dem Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value" vsli:raw="The value of the element to add.">Der Wert des hinzuzufügenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Ermittelt, ob das Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel enthält.</summary>
      <param name="key" vsli:raw="The key to locate.">Der zu suchende Schlüssel.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Gibt ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das Wörterbuch zurück.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Entfernt das Element mit dem angegebenen Schlüssel aus dem Wörterbuch.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">Erstellt ein unveränderlich sortiertes Wörterbuch basierend auf dem Inhalt dieser Instanz.</summary>
      <returns vsli:raw="An immutable sorted dictionary.">Ein unveränderliche sortiertes Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Der zu suchende Schlüssel.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Der Schlüssel, dessen Wert abgerufen wird.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode den Wert, der dem angegebenen Schlüssel zugeordnet ist (wenn der Schlüssel gefunden wurde), oder andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt, das das Wörterbuch implementiert, ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Gibt einen schreibgeschützten Verweis auf den mit dem angegebenen <paramref name="key" /> verknüpften Wert zurück.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up.">Dies ist der Schlüssel des Eintrags, der gesucht werden soll.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">Der <paramref name="key" /> ist nicht vorhanden.</exception>
      <returns vsli:raw="A read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Dies ist ein schreibgeschützter Verweis auf den Wert, der mit dem bereitgestellten <paramref name="key" /> verknüpft ist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">Ruft die Anzahl der Elemente in diesem unveränderlich sortierten Wörterbuch ab.</summary>
      <returns vsli:raw="The number of elements in this dictionary.">Die Anzahl der Elemente in diesem Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">Ruft den Wert für einen angegebenen Schlüssel im unveränderlich sortierten Wörterbuch ab oder legt ihn an.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Der Schlüssel, dessen Wert abgerufen werden soll.</param>
      <returns vsli:raw="The value associated with the given key.">Der Wert, der dem angegebenen Schlüssel zugeordnet ist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Ruft den Schlüsselvergleich ab oder legt ihn fest.</summary>
      <returns vsli:raw="The key comparer.">Der Schlüsselvergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">Ruft eine stark typisierte, schreibgeschützte Auflistung von Elementen ab.</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">Eine stark typisierte, schreibgeschützte Auflistung von Elementen.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Immer <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Returns a collection containing all keys stored in the dictionary. See &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Hiermit wird eine Auflistung zurückgegeben, die alle im Wörterbuch gespeicherten Schlüssel enthält. Siehe <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing all keys stored in the dictionary.">Eine Auflistung, die alle im Wörterbuch gespeicherten Schlüssel enthält.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Returns a collection containing all values stored in the dictionary. See &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Hiermit wird eine Auflistung zurückgegeben, die alle im Wörterbuch gespeicherten Werte enthält. Siehe <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="A collection containing all values stored in the dictionary.">Eine Auflistung, die alle im Wörterbuch gespeicherten Werte enthält.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key" vsli:raw="The key.">Der Schlüssel.</param>
      <returns vsli:raw="The value associated with the specified key.">Der dem angegebenen Schlüssel zugeordnete Wert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Ruft den Wertevergleich ab bzw. legt ihn fest.</summary>
      <returns vsli:raw="The value comparer.">Der Wertevergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">Ruft eine Auflistung ab, die die Werte des unveränderlich sortierten Wörterbuchs enthält.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Eine Sammlung, die die Werte des Objekts enthält, mit dem das Wörterbuch implementiert wird.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Listet den Inhalt einer binären Struktur auf.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">Setzt den Enumerator auf das nächste Element des unveränderlich sortierten Wörterbuchs.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende des sortierten Wörterbuchs überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element im unveränderlich sortierten Wörterbuch.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Das aktuelle Element.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> Klasse bereit.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">Erstellt eine leere unveränderliche Gruppe.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">Der Typ der Elemente, die in der unveränderlichen Gruppe gespeichert werden sollen.</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">Eine leere unveränderlich sortierte Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">Erstellt eine neue unveränderlich sortierte Gruppe, die das angegebene Element enthält.</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Das Element, mit dem die Gruppe vorab aufgefüllt wird.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Der Typ der Elemente in der unveränderlichen Gruppe.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Eine neue unveränderliche Gruppe, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">Erstellt eine neue unveränderlich sortierte Gruppe, die das angegebene Array von Elementen enthält.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Ein Array, das die Elemente enthält, um die Gruppe vorab aufzufüllen.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Der Typ der Elemente in der unveränderlichen Gruppe.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Eine neue unveränderliche Gruppe, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">Erstellt eine leere unveränderlich sortierte Gruppe, die den angegebenen Vergleich verwendet.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Die Implementierung, die beim Vergleich von Elementen in der Gruppe verwendet werden soll.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Der Typ der Elemente in der unveränderlichen Gruppe.</typeparam>
      <returns vsli:raw="An empty immutable set.">Eine leere unveränderliche Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">Eine neue unveränderlich sortierte Gruppe, die das angegebene Element enthält und den angegebenen Vergleich verwendet.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Die Implementierung, die beim Vergleich von Elementen in der Gruppe verwendet werden soll.</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Das Element, mit dem die Gruppe vorab aufgefüllt wird.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">Der Typ der Elemente, die in der unveränderlichen Gruppe gespeichert sind.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Eine neue unveränderliche Gruppe, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">Eine neue unveränderlich sortierte Gruppe, die den angegebenen Array von Elementen enthält und den angegebenen Vergleich verwendet.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Die Implementierung, die beim Vergleich von Elementen in der Gruppe verwendet werden soll.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Ein Array, das die Elemente enthält, um die Gruppe vorab aufzufüllen.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Der Typ der Elemente in der unveränderlichen Gruppe.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Eine neue unveränderliche Gruppe, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Gibt eine Auflistung zurück, die zum Erstellen einer unveränderlich sortierten Gruppe verwendet werden kann.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Gibt eine Auflistung zurück, die zum Erstellen einer unveränderlich sortierten Gruppe verwendet werden kann.</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">Der zum Vergleichen von Elementen in der Gruppe für Gleichheit verwendete Vergleich.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The immutable collection.">Die unveränderliche Auflistung.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Erstellt eine neue unveränderliche Auflistung, die die angegebenen Elemente enthält.</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">Der zu verwendende Vergleich zum Vergleichen von Elementen in dieser Gruppe.</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">Die Elemente, die der Menge vor deren Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Eine neue unveränderliche Gruppe, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Erstellt eine neue unveränderliche Auflistung, die die angegebenen Elemente enthält.</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">Die Elemente, die der Menge vor deren Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Eine neue unveränderliche Gruppe, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">Listet eine Sequenz auf und erzeugt ein unveränderlich sortierte Gruppe ihrer Inhalte.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Die Sequenz, die aufgelistet werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Eine unveränderliche Gruppe, die die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">Listet eine Sequenz auf, erzeugt ein unveränderlich sortierte Gruppe ihrer Inhalte und verwendet den angegeben Vergleich.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Die Sequenz, die aufgelistet werden soll.</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">Der Vergleich zum Initialisieren und Hinzufügen von Mitgliedern zur sortierten Gruppe.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Eine unveränderliche Gruppe, die die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">Erstellt einen unveränderlichen sortierten Satz aus dem aktuellen Inhalt des Satzes des Generators.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">Der Generator, aus dem der unveränderliche sortierte Satz erstellt werden soll.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">Der Typ der Elemente in der unveränderlich sortierten Gruppe.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">Ein unveränderlicher sortierter Satz, der den aktuellen Inhalt der Sammlung des Generators enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt die Implementierung einer unveränderlichen sortierten Gruppe dar.

NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">Der Typ der Elemente in der Gruppe.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">Ruft eine leere unveränderliche sortierte Gruppe ab.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">Fügt dieser unveränderlichen sortierten Gruppe den angegebenen Wert hinzu.</summary>
      <param name="value" vsli:raw="The value to add.">Der hinzuzufügende Wert.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">Eine neue Gruppe mit dem hinzugefügten Element oder diese Gruppe, wenn das Element bereits in dieser Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">Entfernt alle Elemente aus der unveränderlichen sortierten Gruppe.</summary>
      <returns vsli:raw="An empty set with the elements removed.">Eine leere Gruppe, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">Ermittelt, ob diese unveränderliche sortierte Gruppe den angegebenen Wert enthält.</summary>
      <param name="value" vsli:raw="The value to check for.">Der zu suchende Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Gruppe den angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">Entfernt eine angegebene Gruppe von Elementen aus dieser unveränderlichen sortierten Gruppe.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Die Elemente, die aus der Gruppe entfernt werden sollen.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Eine neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">Gibt einen Enumerator zurück, der die unveränderliche sortierte Gruppe durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Ein Enumerator, der zum Durchlaufen der Gruppe verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">Ruft die Position, an der der angegebene Wert auftritt, innerhalb dieser unveränderlichen sortierten Gruppe ab.</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">Der Wert, dessen Position gesucht wird.</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">Der Index des angegebenen <paramref name="item" /> in der sortierten Gruppe, sofern <paramref name="item" /> gefunden wurde. Wenn <paramref name="item" /> nicht gefunden wurde und kleiner als mindestens ein Element in dieser Gruppe ist, gibt diese Methode eine negative Zahl zurück, die das bitweise Komplement des Indexes des ersten Elements darstellt, das größer als der Wert ist. Wenn <paramref name="item" /> nicht gefunden wurde und größer als alle Elemente in der Gruppe ist, gibt diese Methode eine negative Zahl zurück, die das bitweise Komplement des Indexes des letzten Elements plus 1 darstellt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">Erstellt eine unveränderliche sortierte Gruppe, die Elemente enthält, die sowohl in dieser Gruppe als auch in der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">Die Gruppe, deren Schnittmenge mit dieser gebildet werden soll.</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">Eine neue unveränderliche sortierte Gruppe, die Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe eine echte (strikte) Teilmenge der angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe eine echte Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Ruft einen schreibgeschützten Verweis auf das Element der Gruppe am angegebenen <paramref name="index" /> ab.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Der nullbasierte Index des Elements in der Gruppe, die zurückgegeben werden soll.</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">Ein schreibgeschützter Verweis auf das Element an der angegebenen Position.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe und eine angegebene Auflistung gemeinsame Elemente enthalten.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Auflistung und <paramref name="other" /> über mindestens ein gemeinsames Element verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">Entfernt den angegebenen Wert aus dieser unveränderlichen sortierten Gruppe.</summary>
      <param name="value" vsli:raw="The element to remove.">Das zu entfernende Element.</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">Eine neue unveränderliche sortierte Gruppe, aus der das Element entfernt wurde, oder diese Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">Gibt <see cref="T:System.Collections.Generic.IEnumerable`1" /> zum Durchlaufen dieser unveränderlichen sortierten Gruppe in umgekehrter Reihenfolge zurück.</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">Ein Enumerator, der die unveränderliche sortierte Gruppe in umgekehrter Reihenfolge durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Gruppen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">Erstellt eine unveränderliche sortierte Gruppe, die Elemente enthält, die entweder in dieser Gruppe oder in einer angegebenen Sequenz, aber nicht in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The other sequence of items.">Die andere Sequenz von Elementen.</param>
      <returns vsli:raw="The new immutable sorted set.">Die neue unveränderliche sortierte Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">Fügt der Auflistung den angegebenen Wert hinzu.</summary>
      <param name="item" vsli:raw="The value to add.">Der hinzuzufügende Wert.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Entfernt alle Elemente aus der Auflistung.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Kopiert die Elemente der Auflistung in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Das eindimensionale Array, das das Ziel der aus der Auflistung kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der Auflistung.</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">Das aus der Auflistung zu entfernende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus der Auflistung entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">Fügt ein Element am angegebenen Index in die Gruppe ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="item" /> eingefügt werden soll.</param>
      <param name="item" vsli:raw="The object to insert into the set.">Das in die Gruppe einzufügende Objekt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Entfernt das Element am angegebenen Index.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">Fügt der aktuellen Gruppe ein Element hinzu und gibt einen Wert zurück, um anzugeben, ob das Element erfolgreich hinzugefügt wurde.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Der Element, das zur Menge hinzugefügt wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" />, wenn das Element der Gruppe hinzugefügt wurde. <see langword="false" />, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Entfernt alle Elemente in der angegebenen Auflistung aus der aktuellen Gruppe.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Die Auflistung der Elemente, die aus der Gruppe entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die in einer angegebenen Auflistung ebenfalls enthalten sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">Ändert die aktuelle Gruppe, sodass sie alle Elemente enthält, die sowohl in der aktuellen Gruppe als auch in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Kopiert die Elemente der Gruppe in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Das eindimensionale Array, das das Ziel der aus der Gruppe kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">Fügt der Gruppe ein Element hinzu.</summary>
      <param name="value" vsli:raw="The object to add to the set.">Das Objekt, das der Gruppe hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Die Gruppe ist schreibgeschützt oder weist eine feste Größe auf.</exception>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">Die Position, an der das neue Element eingefügt wurde, oder -1, um anzugeben, dass das Element nicht in die Auflistung eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">Entfernt alle Elemente aus der Gruppe.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">Ermittelt, ob die Gruppe einen bestimmten Wert enthält.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Das Objekt, das in der Gruppe gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt in der Gruppe gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">Bestimmt den Index eines bestimmten Elements in der Gruppe.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Das Objekt, das in der Gruppe gesucht werden soll.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">Fügt ein Element am angegebenen Index in die Gruppe ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value" vsli:raw="The object to insert into the set.">Das in die Gruppe einzufügende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Die Gruppe ist schreibgeschützt oder weist eine feste Größe auf.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Entfernt das erste Vorkommen eines bestimmten Objekts aus der Gruppe.</summary>
      <param name="value" vsli:raw="The object to remove from the set.">Das aus der Gruppe zu entfernende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Die Gruppe ist schreibgeschützt oder weist eine feste Größe auf.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">Entfernt das Element am angegebenen Index aus der Gruppe.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Die Gruppe ist schreibgeschützt oder weist eine feste Größe auf.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="value" vsli:raw="The element to add.">Das hinzuzufügende Element.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Eine neue Gruppe mit dem hinzugefügten Element oder diese Gruppe, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Ruft eine leere unveränderliche Gruppe ab, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Eine leere unveränderliche Gruppe, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Entfernt die Elemente in der angegebenen Auflistung aus der aktuellen unveränderlichen Gruppe.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Die Elemente, die aus der Gruppe entfernt werden sollen.</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">Die neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Erstellt eine unveränderliche Gruppe, die Elemente enthält, die sowohl in dieser Gruppe als auch in der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Eine neue unveränderliche Gruppe, die alle Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="value" vsli:raw="The element to remove.">Das zu entfernende Element.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Eine neue Gruppe, aus der das angegebene Element entfernt wurde, oder die aktuelle Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Erstellt eine unveränderliche Gruppe, die nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Eine neue Gruppe mit den Elementen, die nur in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Erstellt eine unveränderliche Gruppe, die alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Die Auflistung, aus der Elemente hinzugefügt werden sollen.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Eine neue unveränderliche Gruppe mit den hinzugefügten Elementen; oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">Erstellt eine Auflistung, die denselben Inhalt wie diese unveränderliche sortierte Gruppe aufweist und mithilfe änderbarer Standardschnittstellen effizient bearbeitet werden kann.</summary>
      <returns vsli:raw="The sorted set builder.">Der Generator für sortierte Gruppen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Durchsucht die Gruppe nach einem angegebenen Wert und gibt ggf. den identischen Wert zurück, sofern vorhanden.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Der zu suchende Wert.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Der bei der Suche in der Gruppe gefundene Wert, oder der ursprüngliche Wert, wenn die Suche keine Übereinstimmung ergeben hat.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Ein Wert, der angibt, ob die Suche erfolgreich war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">Fügt dieser unveränderlichen sortierten Gruppe eine bestimmte Gruppe von Elementen hinzu.</summary>
      <param name="other" vsli:raw="The items to add.">Die hinzuzufügenden Elemente.</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">Die neue Gruppe mit den hinzugefügten Elementen; oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">Gibt die unveränderliche sortierte Gruppe mit dem angegebenen Schlüsselvergleich zurück.</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">Der zu suchende Vergleich.</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">Die unveränderliche sortierte Gruppe mit dem angegebenen Schlüsselvergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Ruft die Anzahl der Elemente in der unveränderlich sortierten Gruppe ab.</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">Die Anzahl der Elemente in der unveränderlichen sortierten Gruppe.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">Ruft einen Wert ab, der angibt, ob diese unveränderliche sortierte Gruppe leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Gruppe leer ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">Ruft das Element der unveränderlichen sortierten Gruppe am angegebenen Index ab.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">Der Index des Elements, das aus der sortierten Gruppe abgerufen werden soll.</param>
      <returns vsli:raw="The element at the given index.">Das Element am angegebenen Index.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">Ruft den Vergleich ab, der zum Sortieren von Schlüsseln in der unveränderlichen sortierten Gruppe verwendet wird.</summary>
      <returns vsli:raw="The comparer used to sort keys.">Der zum Sortieren von Schlüsseln verwendete Vergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Ruft den durch den Vergleich definierten Höchstwert in der unveränderlich sortierten Gruppe ab.</summary>
      <returns vsli:raw="The maximum value in the set.">Der Höchstwert in der Gruppe.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Ruft den durch den Vergleich definierten Mindestwert in der unveränderlich sortierten Gruppe ab.</summary>
      <returns vsli:raw="The minimum value in the set.">Der Mindestwert in der Gruppe.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">„true“ wird zurückgegeben, da unveränderliche Auflistungen immer schreibgeschützt sind. Siehe Schnittstelle <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns vsli:raw="A boolean value indicating whether the collection is read-only.">Ein boolescher Wert, der angibt, ob die Sammlung schreibgeschützt ist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">Siehe Schnittstelle <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access.">Dies ist der nullbasierte Index des Elements, auf das zugegriffen werden soll.</param>
      <returns vsli:raw="The element stored at the specified index.">Das Element, das am angegebenen Index gespeichert wird.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">„true“ wird zurückgegeben, da unveränderliche Auflistungen immer threadsicher sind. Siehe Schnittstelle <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="A boolean value indicating whether the collection is thread-safe.">Ein boolescher Wert, der angibt, ob die Auflistung Thread sicher ist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Siehe <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="Object used for synchronizing access to the collection.">Objekt, das zum Synchronisieren des Zugriffs auf die Auflistung verwendet wird.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.IList" /> eine feste Größe hat.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Ruft die <see cref="T:System.Object" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The index.">Der Index.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Die <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine sortierte Gruppe dar, die Änderungen mit wenig oder keinen Speicherbelegungen ermöglicht und unveränderlich sortierte Gruppen effizient bearbeitet oder erstellt.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Fügt der aktuellen Gruppe ein Element hinzu und gibt einen Wert zurück, um anzugeben, ob das Element erfolgreich hinzugefügt wurde.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Der Element, das zur Menge hinzugefügt wird.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" />, wenn das Element der Gruppe hinzugefügt wurde. <see langword="false" />, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">Entfernt alle Elemente aus dieser Gruppe.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">Bestimmt, ob die Gruppe das angegebene Objekt enthält.</summary>
      <param name="item" vsli:raw="The object to locate in the set.">Das Objekt, das in der Gruppe gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <paramref name="item" /> in der Gruppe gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">Entfernt die angegebenen Elementgruppe aus der aktuellen Gruppe.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Die Auflistung der Elemente, die aus der Gruppe entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">Gibt einen Enumerator zurück, der den Satz durchläuft.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">Ein Enumerator, der zum Durchlaufen der Gruppe verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die in einer angegebenen Auflistung ebenfalls enthalten sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Bestimmt, ob die aktuelle Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Bestimmt, ob die aktuelle Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Bestimmt, ob die aktuelle Gruppe eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Bestimmt, ob die aktuelle Gruppe eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Ruft einen schreibgeschützten Verweis auf das Element der Gruppe am angegebenen <paramref name="index" /> ab.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Der nullbasierte Index des Elements in der Gruppe, die zurückgegeben werden soll.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Ein schreibgeschützter Verweis auf das Element an der angegebenen Position.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Bestimmt, ob sich die aktuelle Gruppe und die angegebene Auflistung überschneiden.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Auflistung und <paramref name="other" /> über mindestens ein gemeinsames Element verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">Entfernt das erste Vorkommen des angegebenen Objekts aus der Gruppe.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Das aus der Gruppe zu entfernende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">
        <see langword="true" />, wenn <paramref name="item" /> aus der Gruppe entfernt wurde; <see langword="false" />, wenn <paramref name="item" /> in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">Gibt einen Enumerator zurück, der die unveränderlich sortierte Gruppe in umgekehrter Reihenfolge durchläuft.</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">Ein Enumerator, der die Gruppe in umgekehrter Reihenfolge durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Bestimmt, ob die aktuelle Gruppe und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die aktuelle Gruppe und <paramref name="other" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Fügt der aktuellen Gruppe ein Element hinzu und gibt einen Wert zurück, um anzugeben, ob das Element erfolgreich hinzugefügt wurde.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Der Element, das zur Menge hinzugefügt wird.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Kopiert die Elemente der Auflistung in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Das eindimensionale Array, das das Ziel der aus der Auflistung kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Kopiert die Elemente der Gruppe in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Das eindimensionale Array, das das Ziel der aus der Gruppe kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">Erstellt einen unveränderlich sortierte Gruppe basierend auf dem Inhalt dieser Instanz.</summary>
      <returns vsli:raw="An immutable set.">Eine unveränderliche Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Durchsucht die Gruppe nach einem angegebenen Wert und gibt ggf. den identischen Wert zurück, sofern vorhanden.</summary>
      <param name="equalValue" vsli:raw="The value for which to search.">Der zu suchende Wert.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Der bei der Suche in der Gruppe gefundene Wert, oder der ursprüngliche Wert, wenn die Suche keine Übereinstimmung ergeben hat.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Ein Wert, der angibt, ob die Suche erfolgreich war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Ändert die aktuelle Gruppe, sodass sie alle Elemente enthält, die sowohl in der aktuellen Gruppe als auch in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">Die Auflistung, die mit dem aktuellen Zustand verglichen werden soll.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Ruft die Anzahl der Elemente in der unveränderlich sortierten Gruppe ab.</summary>
      <returns vsli:raw="The number of elements in this set.">Die Anzahl der Elemente in dieser Gruppe.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">Ruft das Element der Gruppe am angegebenen Index ab.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Der nullbasierte Index des Elements in der Gruppe, die zurückgegeben werden soll.</param>
      <returns vsli:raw="The element at the given position.">Das Element an der angegebenen Position.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">Ruft das Objekt ab oder legt es fest, mit dem die Gleichheit der Werte in der unveränderlich sortierten Gruppe bestimmt wird.</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">Der Vergleich, mit dem die Gleichheit der Werte in der Gruppe bestimmt wird.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Ruft den durch den Vergleich definierten Höchstwert in der unveränderlich sortierten Gruppe ab.</summary>
      <returns vsli:raw="The maximum value in the set.">Der Höchstwert in der Gruppe.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Ruft den durch den Vergleich definierten Mindestwert in der unveränderlich sortierten Gruppe ab.</summary>
      <returns vsli:raw="The minimum value in the set.">Der Mindestwert in der Gruppe.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Immer <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ein Objekt, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Listet den Inhalt einer binären Struktur auf.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />-Klasse verwendeten Ressourcen frei.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Setzt den Enumerator auf das nächste Element der unveränderlich sortierten Gruppe.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der sortierten Gruppe überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der unveränderlich sortierten Gruppe.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Ruft das Element an der aktuellen Position des Enumerators ab.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Das aktuelle Element.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> Klasse bereit.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">Erstellt einen leeren unveränderlichen Stapel.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">Der Typ der Elemente, die im unveränderlichen Stapel gespeichert werden.</typeparam>
      <returns vsli:raw="An empty immutable stack.">Ein leerer unveränderlicher Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">Erstellt einen neuen unveränderlichen Stapel, der das angegebene Element enthält.</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">Das Element, mit dem der Stapel vorab aufgefüllt wird.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Der Typ der Elemente im unveränderlichen Stapel.</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">Eine neue unveränderliche Auflistung, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">Erstellt einen neuen unveränderlichen Stapel, der das angegebene Array von Elementen enthält.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">Ein Array, das die Elemente enthält, um den Stapel vorab aufzufüllen.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Der Typ der Elemente im unveränderlichen Stapel.</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">Ein neuer unveränderlicher Stapel, der die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">Erstellt einen neuen unveränderlichen Stapel, der die angegebenen Elemente enthält.</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">Die Elemente, die zum Stapel vor dessen Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Der Typ der Elemente im Stapel.</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">Ein unveränderlicher Stapel, der die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">Entfernt das angegebene Element aus einem unveränderlichen Stapel.</summary>
      <param name="stack" vsli:raw="The stack to modify.">Der Stapel, der geändert werden soll.</param>
      <param name="value" vsli:raw="The item to remove from the stack.">Das Element, das aus dem Stapel entfernt werden soll.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">Der Typ des Elements, das im Stapel enthalten ist.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Der Stapel ist leer.</exception>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Ein Stapel; nie <see langword="null" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Stellt einen unveränderlichen Stapel dar.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">Der Typ des Elements im Stapel.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Entfernt alle Objekte aus dem unveränderlichen Stapel.</summary>
      <returns vsli:raw="An empty immutable stack.">Ein leerer unveränderlicher Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">Gibt einen Enumerator zurück, der den unveränderlichen Stapel durchläuft.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">Ein Enumerator, der zum Durchlaufen des Stapels verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">Gibt das Objekt oben im Stapel zurück, ohne es zu entfernen.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Der Stapel ist leer.</exception>
      <returns vsli:raw="The object at the top of the stack.">Das Objekt am Anfang des Stapels.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">Ruft einen schreibgeschützten Verweis auf das Element am Anfang des Stapels ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Wird ausgelöst, wenn der Stapel leer ist.</exception>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">Ein schreibgeschützter Verweis auf das Element am Anfang des Stapels.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">Entfernt das oberste Element aus dem unveränderlichen Stapel und gibt den Stapel nach dem Entfernen zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Der Stapel ist leer.</exception>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Ein Stapel; nie <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">Entfernt das angegebene Element aus dem unveränderlichen Stapel und gibt den Stapel nach dem Entfernen zurück.</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">Der Wert, der aus dem Stapel entfernt werden soll.</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Ein Stapel; nie <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">Fügt ein Objekt am Anfang des unveränderlichen Stapels ein und gibt den neuen Stapel zurück.</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">Das Objekt, das auf dem Stapel abgelegt werden soll.</param>
      <returns vsli:raw="The new stack.">Der neue Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">Entfernt alle Elemente aus dem unveränderlichen Stapel.</summary>
      <returns vsli:raw="The empty immutable stack.">Der leere unveränderliche Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Entfernt das Element am Anfang des unveränderlichen Stapels und gibt den neuen Stapel zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Der Stapel ist leer.</exception>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Der neue Stapel; nie <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Fügt ein Element am Anfang des unveränderlichen Stapels ein und gibt den neuen Stapel zurück.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Das Element, das auf dem Stapel abgelegt werden soll.</param>
      <returns vsli:raw="The new stack.">Der neue Stapel.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">Ruft einen leeren unveränderlichen Stapel ab.</summary>
      <returns vsli:raw="An empty immutable stack.">Ein leerer unveränderlicher Stapel.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">Ruft einen Wert ab, der angibt, ob diese Instanz des unveränderlichen Stapels leer ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese Instanz leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Listet den Inhalt von einem unveränderlichen Stapel auf, ohne Arbeitsspeicher zuzuweisen.  
  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">Setzt den Enumerator auf das nächste Element des unveränderlichen Stapels.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Auflistung überschritten hat.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">LINQ-Erweiterungsmethodenüberschreibungen, die eine höhere Effizienz für <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> bieten als die standardmäßigen LINQ-Methoden 
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Sammlungen und deren Installation)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Wendet eine Funktion auf eine Sequenz von Elementen auf kumulative Art und Weise an.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Die Auflistung, auf die die Funktion angewendet werden soll.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Eine Funktion, die für jedes Element auf kumulative Art und Weise aufgerufen werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">Der endgültige Wert, nachdem die kumulative Funktion auf alle Elemente angewendet wurde.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Wendet eine Funktion auf eine Sequenz von Elementen auf kumulative Art und Weise an.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Die Auflistung, auf die die Funktion angewendet werden soll.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Der erste Akkumulatorwert.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Eine Funktion, die für jedes Element auf kumulative Art und Weise aufgerufen werden soll.</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Der Typ des kumulierten Werts.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The final accumulator value.">Der letzte Akkumulatorwert.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Wendet eine Funktion auf eine Sequenz von Elementen auf kumulative Art und Weise an.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Die Auflistung, auf die die Funktion angewendet werden soll.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Der erste Akkumulatorwert.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Eine Funktion, die für jedes Element auf kumulative Art und Weise aufgerufen werden soll.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Der Typ des kumulierten Werts.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">Der Typ des von der Ergebnisauswahl zurückgegebenen Ergebnisses.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The final accumulator value.">Der letzte Akkumulatorwert.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">Ruft einen Wert ab, der angibt, ob alle Elemente in diesem Array einer angegebenen Bedingung entsprechen.</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">Das Array, das auf Übereinstimmungen geprüft werden soll.</param>
      <param name="predicate" vsli:raw="The predicate.">Das Prädikat.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn jedes Element der Quellsequenz den Test im angegebenen Prädikat besteht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">Gibt einen Wert zurück, der angibt, ob diese Auflistung Elemente enthält.</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">Der Generator, der zum Suchen nach Übereinstimmungen verwendet werden soll.</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">Der Typ der Elemente im Array.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Array-Generator Elemente enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">Ruft einen Wert ab, der angibt, ob das Array Elemente enthält.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Das Array, das auf Übereinstimmungen geprüft werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Array Elemente enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">Ruft einen Wert ab, der angibt, ob das Array Elemente enthält, die eine bestimmte Bedingung erfüllen.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Das Array, das auf Übereinstimmungen geprüft werden soll.</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">Der Delegat, der die Bedingung definiert, der ein Element entsprechen soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn ein Element der angegebenen Bedingung entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">Gibt das Element an einem angegebenen Index in einem Array zurück.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Das Array, in dem ein Element gesucht werden soll.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Der Index des abzurufenden Elements.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The item at the specified index.">Das Element am angegebenen Index.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Gibt das Element an einem angegebenen Index in einer Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Das Array, in dem ein Element gesucht werden soll.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Der Index des abzurufenden Elements.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">Das Element am angegebenen Index oder der Standardwert, wenn der Index nicht gefunden wird.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">Gibt das erste Element in der Auflistung zurück.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">Der Generator, von dem ein Element abgerufen werden soll.</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">Der Typ der Elemente im Array.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Das Array ist leer.</exception>
      <returns vsli:raw="The first item in the list.">Das erste Element in der Liste.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">Gibt das erste Element in einem Array zurück.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Das Array, von dem ein Element abgerufen werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Das Array ist leer.</exception>
      <returns vsli:raw="The first item in the array.">Das erste Element im Array.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">Gibt das erste Element in einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Das Array, von dem ein Element abgerufen werden soll.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Das Array ist leer.</exception>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Das erste Element in der Liste, wenn es die von <paramref name="predicate" /> angegebene Bedingung erfüllt.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">Gibt das erste Element in der Auflistung oder den Standardwert zurück, wenn die Auflistung leer ist.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Der Generator, von dem ein Element abgerufen werden soll.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Der Elementtyp im Generator.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Das erste Element in der Liste, falls gefunden, andernfalls der Standardwert für den Elementtyp.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Das erste Element in der Liste, falls gefunden, andernfalls der Standardwert für den Elementtyp.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">Gibt das erste Element der Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Das erste Element in der Liste, falls gefunden, andernfalls der Standardwert für den Elementtyp.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">Gibt das letzte Element in der Auflistung zurück.</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">Der Generator, aus dem Elemente abgerufen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Der Elementtyp im Generator.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Wird ausgelöst, wenn die Auflistung leer ist.</exception>
      <returns vsli:raw="The last element in the builder.">Das letzte Element im Generator.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">Gibt das letzte Element des Arrays zurück.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">Der Typ des Elements, das im Array enthalten ist.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Wird ausgelöst, wenn die Auflistung leer ist.</exception>
      <returns vsli:raw="The last element in the array.">Das letzte Element im Array.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Gibt das letzte Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">Der Delegat, der die Bedingungen für das abzurufende Element definiert.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Wird ausgelöst, wenn die Auflistung leer ist.</exception>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">Das letzte Element des Arrays, das die <paramref name="predicate" />-Bedingung erfüllt.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">Gibt das letzte Element in der Auflistung oder den Standardwert zurück, wenn die Auflistung leer ist.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Der Generator, von dem ein Element abgerufen werden soll.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Der Elementtyp im Generator.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Gibt das letzte Element einer Sequenz, das eine Bedingung erfüllt, oder einen Standardwert zurück, wenn ein solches Element nicht gefunden wird.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">Das Array, aus dem ein Element abgerufen werden soll.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Projiziert jedes Element einer Sequenz in ein neues Format.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">Das unveränderliche Array zum Auswählen von Elementen.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">Der Typ des Ergebniselements.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Transformierenfunktion für jedes Element der Quelle sind.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen, und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">Das unveränderliche Array.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">Eine Transformationsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Eine Transformationsfunktion, die auf jedes Element der Zwischensequenz angewendet werden soll</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">Der Typ der Elemente von <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Der Typ der Zwischenelemente, die von <paramref name="collectionSelector" /> erfasst werden.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Der Typ der Elemente in der resultierenden Sequenz.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente erzeugt werden, indem für jedes Element von <paramref name="collectionSelector" /> die 1:n-Transformationsfunktion <paramref name="immutableArray" /> aufgerufen wird, und anschließend jedes Element der Sequenz und dessen entsprechendes Quellelement einem Ergebniselement zugeordnet werden.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Bestimmt, ob zwei Sequenzen durch einen Gleichheitsvergleich als gleich bestimmt werden.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Das für den Vergleich zu verwendende Array.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Die für den Vergleich zu verwendenden Elemente.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Der Vergleich. der für die Gleichheitsprüfung verwendet werden soll.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Der Typ des Elements im verglichenen Array.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass die Sequenzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Bestimmt, ob zwei Sequenzen durch einen Gleichheitsvergleich als gleich bestimmt werden.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Das für den Vergleich zu verwendende Array.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Die für den Vergleich zu verwendenden Elemente.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Der Vergleich. der für die Gleichheitsprüfung verwendet werden soll.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Der Typ des Elements im verglichenen Array.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass die Sequenzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Bestimmt, ob zwei Sequenzen durch einen Gleichheitsvergleich als gleich bestimmt werden.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Das für den Vergleich zu verwendende Array.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Die für den Vergleich zu verwendenden Elemente.</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">Der Vergleich. der für die Gleichheitsprüfung verwendet werden soll.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Der Typ des Elements im verglichenen Array.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass die Sequenzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Gibt das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">Das Array, aus dem das Element abgerufen werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The element in the sequence.">Das Element in der Sequenz.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Gibt <see cref="T:System.Boolean" />zurück.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Gibt das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <param name="immutableArray" vsli:raw="The array.">Das Array.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> enthält mehr als ein Element.</exception>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">Das Element im Array oder der Standardwert, wenn das Array leer ist.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Gibt das einzige Element einer Sequenz, das eine angegebene Bedingung erfüllt, oder einen Standardwert zurück, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">Das Array, aus dem das Element abgerufen werden soll.</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">Die Bedingung, die das Element erfüllen muss.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">Das Element, sofern es die angegebene Bedingung erfüllt, andernfalls das Standardelement.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">Kopiert den Inhalt dieses Arrays in ein änderbares Array.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The newly instantiated array.">Das neu instanziierte Array.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Erstellt ein Wörterbuch basierend auf dem Inhalt dieses Arrays.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Das Array, aus dem ein Wörterbuch erstellt werden soll.</param>
      <param name="keySelector" vsli:raw="The key selector.">Die Schlüsselauswahl.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Der Typ des Schlüssels.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Das neu initialisierte Wörterbuch.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Erstellt ein Wörterbuch basierend auf dem Inhalt dieses Arrays.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Das Array, aus dem ein Wörterbuch erstellt werden soll.</param>
      <param name="keySelector" vsli:raw="The key selector.">Die Schlüsselauswahl.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Der Vergleich, mit dem das Wörterbuch initialisiert werden soll.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Der Typ des Schlüssels.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Das neu initialisierte Wörterbuch.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Erstellt ein Wörterbuch basierend auf dem Inhalt dieses Arrays.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Das Array, aus dem ein Wörterbuch erstellt werden soll.</param>
      <param name="keySelector" vsli:raw="The key selector.">Die Schlüsselauswahl.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Die Elementauswahl.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Der Typ des Schlüssels.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Der Typ des Elements.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Das neu initialisierte Wörterbuch.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Erstellt ein Wörterbuch basierend auf dem Inhalt dieses Arrays.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Das Array, aus dem ein Wörterbuch erstellt werden soll.</param>
      <param name="keySelector" vsli:raw="The key selector.">Die Schlüsselauswahl.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Die Elementauswahl.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Der Vergleich, mit dem das Wörterbuch initialisiert werden soll.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Der Typ des Schlüssels.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Der Typ des Elements.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Das neu initialisierte Wörterbuch.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtert eine Sequenz von Werten basierend auf einem Prädikat.</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">Das zu filternde Array.</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">Die Bedingung, die zum Filtern des Arrayinhalts verwendet werden soll.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">Gibt <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit Elementen zurück, die die Bedingung erfüllen.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.WebSockets</name>
  </assembly>
  <members>
    <member name="T:System.Net.WebSockets.ValueWebSocketReceiveResult">
      <summary>Stellt das Ergebnis der Ausführung eines einzelnen <see cref="M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" />-Vorgangs auf einem <see cref="T:System.Net.WebSockets.WebSocket" /> dar.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ValueWebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.WebSockets.ValueWebSocketReceiveResult" />-Struktur. Eine Instanz dieser Struktur stellt das Ergebnis eines einzelnen <c>ReceiveAsync</c>-Vorgangs auf einem <see cref="T:System.Net.WebSockets.WebSocket" /> dar.</summary>
      <param name="count">Die Anzahl von Bytes, die der <see cref="T:System.Net.WebSockets.WebSocket" /> empfangen hat.</param>
      <param name="messageType">Einer der Enumerationswerte, der angibt, ob die aktuelle Nachricht eine UTF-8- oder binäre Nachricht ist.</param>
      <param name="endOfMessage">
        <see langword="true" />, um anzugeben, ob die Nachricht vollständig empfangen wurde; andernfalls <see langword="false" />.</param>
    </member>
    <member name="P:System.Net.WebSockets.ValueWebSocketReceiveResult.Count">
      <summary>Ruft die Anzahl von Bytes ab, die die <see cref="T:System.Net.WebSockets.WebSocket" />-Klasse empfangen hat.</summary>
      <returns>Die Anzahl von Bytes, die der <see cref="T:System.Net.WebSockets.WebSocket" /> empfangen hat.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ValueWebSocketReceiveResult.EndOfMessage">
      <summary>Ruft ab, ob die Nachricht vollständig empfangen wurde.</summary>
      <returns>
        <see langword="true" /> , wenn die Nachricht vollständig empfangen wurde. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Net.WebSockets.ValueWebSocketReceiveResult.MessageType">
      <summary>Ruft den Typ der aktuellen Nachricht ab.</summary>
      <returns>Einer der Enumerationswerte, der angibt, ob die aktuelle Nachricht eine UTF-8-, Binär-oder Close-Nachricht ist.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocket">
      <summary>Die „WebSocket“-Klasse erlaubt Anwendungen das Senden und Empfangen von Daten nach Abschluss der WebSocket-Aktualisierung.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.#ctor">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocket" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.Abort">
      <summary>Bricht die WebSocket-Verbindung ab und bricht alle ausstehenden EA-Vorgänge ab.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Schließt die WebSocket-Verbindung unter Verwendung des in Abschnitt 7 der WebSocket-Protokollspezifikation definierten Schließen-Handshakes in einem asynchronen Vorgang.</summary>
      <param name="closeStatus">Gibt den Grund für das Schließen der WebSocket-Verbindung an.</param>
      <param name="statusDescription">Stellt eine lesbare Begründung für das Schließen der Verbindung bereit.</param>
      <param name="cancellationToken">Das Token, das verwendet werden kann, um eine Benachrichtigung dazu zu verteilen, dass Vorgänge abgebrochen werden sollen.</param>
      <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Initiiert oder beendet den Schließen-Handshake gemäß der WebSocket-Protokollspezifikation, Abschnitt 7.</summary>
      <param name="closeStatus">Gibt den Grund für das Schließen der WebSocket-Verbindung an.</param>
      <param name="statusDescription">Ermöglicht Anwendungen, eine lesbare Erklärung anzugeben, weshalb die Verbindung geschlossen wird.</param>
      <param name="cancellationToken">Das Token, mit dem die Benachrichtigung verteilt werden kann, dass Vorgänge abgebrochen werden sollen.</param>
      <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)">
      <summary>Clientpuffer erstellen, um sie mit dieser <see cref="T:System.Net.WebSockets.WebSocket" />-Instanz zu verwenden.</summary>
      <param name="receiveBufferSize">Die Größe (in Bytes) des Client-Empfangspuffers.</param>
      <param name="sendBufferSize">Die Größe (in Bytes) des Sendepuffers.</param>
      <returns>Ein Array mit den Clientpuffern.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})">
      <summary>Ermöglicht es Aufrufern, eine clientseitige WebSocket-Klasse zu erstellen, die das WSPC zu Gestaltungszwecken verwendet.</summary>
      <param name="innerStream">Die für IO-Vorgang zu verwendende Verbindung.</param>
      <param name="subProtocol">Das vom Client akzeptierte Unterprotokoll.</param>
      <param name="receiveBufferSize">Die Größe des Client-WebSocket-Empfangspuffers in Byte.</param>
      <param name="sendBufferSize">Die Größe des Client-WebSocket-Sendepuffers in Byte.</param>
      <param name="keepAliveInterval">Bestimmt, wie regelmäßig Frames über die Verbindung als Keep-Alive gesendet werden. Gilt nur, wenn sich die Verbindung im Leerlauf befindet.</param>
      <param name="useZeroMaskingKey">Gibt an, ob für die WebSocket-Maske ein zufälliger oder ein statischer Schlüssel (nur Nullen) verwendet werden soll.</param>
      <param name="internalBuffer">Wird als interner Puffer im WPC verwendet. Die Größe muss mindestens <c>2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 auf 32-Bit-Systemen)</c> betragen.</param>
      <returns>Gibt <see cref="T:System.Net.WebSockets.WebSocket" />zurück.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateFromStream(System.IO.Stream,System.Boolean,System.String,System.TimeSpan)">
      <summary>Erstellt eine neue <see cref="T:System.Net.WebSockets.WebSocket" />-Klasse, die auf dem angegebenen Datenstrom arbeitet, der eine Websocketverbindung darstellt.</summary>
      <param name="stream">Der Datenstrom für die Verbindung.</param>
      <param name="isServer">
        <see langword="true" />, um anzugeben, dass es sich um die serverseitige Verbindung handelt; <see langword="false" />, wenn es sich um die clientseitige Verbindung handelt.</param>
      <param name="subProtocol">Das vereinbarte Unterprotokoll, das beim Herstellen der Verbindung verwendet wurde.</param>
      <param name="keepAliveInterval">Das zu verwendende Keep-Alive-Intervall oder <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" />-Feld zum Deaktivieren von Keep-Alive-Intervallen.</param>
      <returns>Der neue Websocket.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)">
      <summary>Erstellt einen WebSocket-Serverpuffer.</summary>
      <param name="receiveBufferSize">Die Größe (in Bytes) des gewünschten Puffers.</param>
      <returns>Gibt <see cref="T:System.ArraySegment`1" />zurück.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.Dispose">
      <summary>Wird verwendet, um nicht verwaltete Ressourcen für ASP.NET und selbst gehostete Implementierungen zu bereinigen.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.IsApplicationTargeting45">
      <summary>Gibt einen Wert zurück, der angibt, ob die WebSocket-Instanz auf .NET Framework 4.5 abzielt.</summary>
      <returns>
        <see langword="true" />, wenn die <see cref="T:System.Net.WebSockets.WebSocket" />-Klasse .NET Framework 4.5 anzielt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)">
      <summary>Gibt einen Wert zurück, der angibt, wenn der Zustand der WebSocket-Instanz "Closed" oder "Aborted" ist.</summary>
      <param name="state">Der aktuelle Zustand des WebSocket.</param>
      <returns>
        <see langword="true" />, wenn <see cref="T:System.Net.WebSockets.WebSocket" /> geschlossen oder abgebrochen wird; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
      <summary>Empfängt Daten asynchron von der <see cref="T:System.Net.WebSockets.WebSocket" />-Verbindung.</summary>
      <param name="buffer">Verweist auf den Anwendungspuffer, der der Speicherort für die empfangenen Daten ist.</param>
      <param name="cancellationToken">Gibt die Benachrichtigung darüber weiter, dass Vorgänge abgebrochen werden sollen.</param>
      <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" />-Eigenschaft im Task-Objekt gibt ein <see cref="T:System.Net.WebSockets.WebSocketReceiveResult" /> Objekt zurück, das die empfangenen Daten darstellt.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Empfängt Daten asynchron von der <see cref="T:System.Net.WebSockets.WebSocket" />-Verbindung.</summary>
      <param name="buffer">Der Anwendungspuffer, der den Speicherort für die empfangenen Daten darstellt.</param>
      <param name="cancellationToken">Das Abbruchtoken zum Abbrechen des Empfangsvorgangs.</param>
      <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.ValueTask`1.Result" />-Eigenschaft im Task-Objekt gibt ein <see cref="T:System.Net.WebSockets.ValueWebSocketReceiveResult" /> Objekt zurück, das die empfangenen Daten darstellt.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.RegisterPrefixes">
      <summary>Lässt zu, dass Aufrufer Präfixe für WebSocket-Anforderungen (ws und wss) registrieren.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>Sendet Daten asynchron über die <see cref="T:System.Net.WebSockets.WebSocket" />-Verbindung</summary>
      <param name="buffer">Der über die Verbindung zu sendende Puffer.</param>
      <param name="messageType">Gibt an, ob die Anwendung eine Binär- oder eine Textnachricht sendet.</param>
      <param name="endOfMessage">Gibt an, ob die Daten in „buffer“ der letzte Teil der Nachricht sind.</param>
      <param name="cancellationToken">Das Token, das eine Benachrichtigung verteilt, dass Vorgänge abgebrochen werden sollen.</param>
      <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.SendAsync(System.ReadOnlyMemory{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>Sendet Daten asynchron über die <see cref="T:System.Net.WebSockets.WebSocket" />-Verbindung</summary>
      <param name="buffer">Der Puffer, der über die Verbindung gesendet werden soll.</param>
      <param name="messageType">Einer der Enumerationswerte, der angibt, ob die Anwendung eine Binär- oder Textnachricht sendet.</param>
      <param name="endOfMessage">
        <see langword="true" /> gibt an, dass die Daten in „buffer“ der letzte Teil der Nachricht sind, andernfalls <see langword="false" />.</param>
      <param name="cancellationToken">Das Abbruchtoken zum Abbrechen des Sendevorgangs.</param>
      <returns>Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])">
      <summary>Überprüft, ob sich die Verbindung in einem erwarteten Zustand befindet.</summary>
      <param name="state">Der aktuelle Status des WebSocket, der mit der Liste gültiger Zustände verglichen werden soll.</param>
      <param name="validStates">Liste des jeweils gültigen Verbindungsstatus.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.CloseStatus">
      <summary>Gibt den Grund an, warum der Remoteendpunkt den Schließen-Handshake ausgelöst hat.</summary>
      <returns>Gibt <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.CloseStatusDescription">
      <summary>Ermöglicht es dem Remoteendpunkt, den Grund für das Schließen der Verbindung anzugeben.</summary>
      <returns>Gibt <see cref="T:System.String" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval">
      <summary>Ruft das standardmäßige Keep-Alive-Intervall des WebSocket-Protokolls ab.</summary>
      <returns>Das standardmäßige Keep-Alive-Intervall des WebSocket-Protokolls. Der typische Wert für dieses Intervall beträgt 30 Sekunden (gemäß der Definition durch das Betriebssystem oder die .NET-Plattform). Sie wird verwendet, um den Wert zu initialisieren <see cref="P:System.Net.WebSockets.ClientWebSocketOptions.KeepAliveInterval" /> .</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.State">
      <summary>Gibt den aktuellen Zustand der WebSocket-Verbindung zurück.</summary>
      <returns>Der aktuelle Zustand der WebSocket-Verbindung.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.SubProtocol">
      <summary>Ruft das Unterprotokoll ab, das während des Handshakes beim Öffnen ausgehandelt wurde.</summary>
      <returns>Das Unterprotokoll, das innerhalb des öffnenden Handshakes ausgehandelt wurde.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketCloseStatus">
      <summary>Stellt bekannte WebSocket-Codes für Schließvorgänge dar, wie sie in Abschnitt 11.7 der Spezifikation des WebSocket-Protokolls definiert sind.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.Empty">
      <summary>Kein Fehler festgelegt.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.EndpointUnavailable">
      <summary>(1001) Gibt an, dass ein Endpunkt entfernt wird. Server oder Client wird nicht mehr verfügbar sein.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InternalServerError">
      <summary>(1011) Die Verbindung wird wegen eines Fehlers auf dem Server vom Server geschlossen.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InvalidMessageType">
      <summary>(1003) Client oder Server beendet die Verbindung, da der empfangene Datentyp nicht unterstützt wird.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InvalidPayloadData">
      <summary>(1007) Der Client oder Server beendet die Verbindung, da er Daten empfangen hat, die mit dem Nachrichtentyp inkonsistent sind.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.MandatoryExtension">
      <summary>(1010) Der Client beendet die Verbindung, da er die Aushandlung einer Erweiterung seitens des Servers erwartet.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.MessageTooBig">
      <summary>(1009) Der Client oder Server beendet die Verbindung, weil er eine Nachricht empfangen hat, die zu groß ist, um sie zu verarbeiten.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.NormalClosure">
      <summary>(1000) Die Verbindung wurde nach Verarbeitung der Anforderung geschlossen.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.PolicyViolation">
      <summary>(1008) Die Verbindung wird geschlossen, da ein Endpunkt eine Nachricht empfangen hat, die gegen die Richtlinie verstößt.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.ProtocolError">
      <summary>(1002) Der Client oder Server beendet die Verbindung aufgrund eines Protokollfehlers.</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketContext">
      <summary>Wird für den Zugriff auf die Informationen im WebSocket-Handshake verwendet.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketContext.#ctor">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketContext" />-Klasse.</summary>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.CookieCollection">
      <summary>Die Cookies, die während des öffnenden Handshakes an den Server übergeben wurden.</summary>
      <returns>Gibt <see cref="T:System.Net.CookieCollection" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.Headers">
      <summary>Die HTTP-Header, die während des öffnenden Handshakes an den Server gesendet wurden.</summary>
      <returns>Gibt <see cref="T:System.Collections.Specialized.NameValueCollection" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsAuthenticated">
      <summary>Ob der WebSocket-Client authentifiziert ist.</summary>
      <returns>Gibt <see cref="T:System.Boolean" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsLocal">
      <summary>Ob der WebSocket-Client vom lokalen Computer verbunden wurde.</summary>
      <returns>Gibt <see cref="T:System.Boolean" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsSecureConnection">
      <summary>Gibt an, ob die WebSocket-Verbindung mit Secure Sockets Layer (SSL) gesichert ist.</summary>
      <returns>Gibt <see cref="T:System.Boolean" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.Origin">
      <summary>Der Wert des Ursprungs-HTTP-Headers, der im öffnenden Handshake enthalten ist.</summary>
      <returns>Gibt <see cref="T:System.String" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.RequestUri">
      <summary>Der URI, der tatsächlich vom WebSocket-Client angefordert wurde.</summary>
      <returns>Gibt <see cref="T:System.Uri" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketKey">
      <summary>Der Wert des HTTP-Headers SecWebSocketKey im öffnenden Handshake.</summary>
      <returns>Gibt <see cref="T:System.String" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
      <summary>Der Wert des HTTP-Headers SecWebSocketKey im öffnenden Handshake.</summary>
      <returns>Gibt <see cref="T:System.Collections.Generic.IEnumerable`1" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
      <summary>Die Liste der vom WebSocket-Client angeforderten Unterprotokolle.</summary>
      <returns>Gibt <see cref="T:System.String" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.User">
      <summary>Ein Objekt, das verwendet wird, um Identität, Authentifizierungsinformationen und Sicherheitsrollen für den WebSocket-Clienten abzurufen.</summary>
      <returns>Gibt <see cref="T:System.Security.Principal.IPrincipal" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.WebSocket">
      <summary>Die WebSocket-Instanz zur Interaktion (Senden/Empfangen/Beenden usw.) mit der WebSocket-Verbindung.</summary>
      <returns>Gibt <see cref="T:System.Net.WebSockets.WebSocket" />zurück.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketError">
      <summary>Enthält die Liste möglicher WebSocket-Fehler.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.ConnectionClosedPrematurely">
      <summary>Gibt an, dass die Verbindung unerwartet beendet wurde.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.Faulted">
      <summary>Gibt einen allgemeinen Fehler an.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.HeaderError">
      <summary>Gibt an, dass beim Analysieren der HTTP-Header während des öffnenden Handshakes ein Fehler aufgetreten ist.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.InvalidMessageType">
      <summary>Gibt an, dass ein WebSocket-Frame mit einem unbekannten Opcode empfangen wurde.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.InvalidState">
      <summary>Gibt an, dass WebSocket in einem ungültigen Zustand für den angegebenen Vorgang ist (z. B. geschlossen oder abgebrochen).</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.NativeError">
      <summary>Gibt an, dass ein unbekannter systemeigener Fehler aufgetreten ist.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.NotAWebSocket">
      <summary>Gibt an, dass die eingehende Anforderung keine gültige Websocket-Anforderung war.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.Success">
      <summary>Gibt an, dass es keine systemeigene Fehlerinformationen für die Ausnahme gab.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.UnsupportedProtocol">
      <summary>Gibt an, dass der Client ein nicht unterstütztes WebSocket-Unterprotokoll angefordert hat.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.UnsupportedVersion">
      <summary>Gibt an, dass der Client eine nicht unterstützte Version des WebSocket-Protokolls angefordert hat.</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketException">
      <summary>Stellt eine Ausnahme dar, die beim Ausführen einer Operation für eine WebSocket-Verbindung aufgetreten ist.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="nativeError">Der systemeigene Fehlercode für die Ausnahme.Der systemeigene Fehlercode für die Ausnahme.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32,System.Exception)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="nativeError">Der systemeigene Fehlercode für die Ausnahme.Der systemeigene Fehlercode für die Ausnahme.</param>
      <param name="innerException">Gibt die vorherige Ausnahme an, die zur aktuellen Ausnahme geführt hat.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32,System.String)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="nativeError">Der systemeigene Fehlercode für die Ausnahme.Der systemeigene Fehlercode für die Ausnahme.</param>
      <param name="message">Die Beschreibung des Fehlers.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="error">Der Fehler aus der „WebSocketError“-Enumeration.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Exception)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="error">Der Fehler aus der „WebSocketError“-Enumeration.</param>
      <param name="innerException">Gibt die vorherige Ausnahme an, die zur aktuellen Ausnahme geführt hat.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="error">Der Fehler aus der „WebSocketError“-Enumeration.</param>
      <param name="nativeError">Der systemeigene Fehlercode für die Ausnahme.Der systemeigene Fehlercode für die Ausnahme.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.Exception)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="error">Der Fehler aus der „WebSocketError“-Enumeration.</param>
      <param name="nativeError">Der systemeigene Fehlercode für die Ausnahme.Der systemeigene Fehlercode für die Ausnahme.</param>
      <param name="innerException">Gibt die vorherige Ausnahme an, die zur aktuellen Ausnahme geführt hat.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.String)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="error">Der Fehler aus der „WebSocketError“-Enumeration.</param>
      <param name="nativeError">Der systemeigene Fehlercode für die Ausnahme.Der systemeigene Fehlercode für die Ausnahme.</param>
      <param name="message">Die Beschreibung des Fehlers.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.String,System.Exception)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="error">Der Fehler aus der „WebSocketError“-Enumeration.</param>
      <param name="nativeError">Der systemeigene Fehlercode für die Ausnahme.Der systemeigene Fehlercode für die Ausnahme.</param>
      <param name="message">Die Beschreibung des Fehlers.</param>
      <param name="innerException">Gibt die vorherige Ausnahme an, die zur aktuellen Ausnahme geführt hat.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.String)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="error">Der Fehler aus der „WebSocketError“-Enumeration.</param>
      <param name="message">Die Beschreibung des Fehlers.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.String,System.Exception)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="error">Der Fehler aus der „WebSocketError“-Enumeration.</param>
      <param name="message">Die Beschreibung des Fehlers.</param>
      <param name="innerException">Gibt die vorherige Ausnahme an, die zur aktuellen Ausnahme geführt hat.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.String)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="message">Die Beschreibung des Fehlers.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.String,System.Exception)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketException" />-Klasse.</summary>
      <param name="message">Die Beschreibung des Fehlers.</param>
      <param name="innerException">Gibt die vorherige Ausnahme an, die zur aktuellen Ausnahme geführt hat.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Legt das SerializationInfo-Objekt mit dem Dateinamen und der Zeilennummer fest, bei der diese -Ausnahme aufgetreten ist.</summary>
      <param name="info">Ein SerializationInfo-Objekt.</param>
      <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketException.ErrorCode">
      <summary>Der systemeigene Fehlercode für die aufgetretene Ausnahme.</summary>
      <returns>Gibt <see cref="T:System.Int32" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketException.WebSocketErrorCode">
      <summary>Gibt einen WebSocketError zurück, der den aufgetretenen Fehler angibt.</summary>
      <returns>Gibt <see cref="T:System.Net.WebSockets.WebSocketError" />zurück.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketMessageType">
      <summary>Gibt den Typ der Nachricht an:</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Binary">
      <summary>Die Nachricht liegt im Binärformat vor.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Close">
      <summary>Ein Empfang wurde abgeschlossen, da eine schließende Nachricht empfangen wurde.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Text">
      <summary>Die Nachricht liegt in Klartext vor.</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketReceiveResult">
      <summary>Eine Instanz dieser Klasse stellt das Ergebnis eines einzelnen ReceiveAsync-Vorgangs für ein WebSocket dar.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketReceiveResult" />-Klasse.</summary>
      <param name="count">Die Anzahl der empfangenen Bytes.</param>
      <param name="messageType">Der Nachrichtentyp, der empfangen wurde</param>
      <param name="endOfMessage">Gibt an, ob es sich um die endgültige Nachricht handelt.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
      <summary>Erstellt eine Instanz der <see cref="T:System.Net.WebSockets.WebSocketReceiveResult" />-Klasse.</summary>
      <param name="count">Die Anzahl der empfangenen Bytes.</param>
      <param name="messageType">Der Nachrichtentyp, der empfangen wurde</param>
      <param name="endOfMessage">Gibt an, ob es sich um die endgültige Nachricht handelt.</param>
      <param name="closeStatus">Gibt den <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" /> der Verbindung an.</param>
      <param name="closeStatusDescription">Die Beschreibung von <paramref name="closeStatus" />.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatus">
      <summary>Gibt den Grund an, warum der Remoteendpunkt den Schließen-Handshake ausgelöst hat.</summary>
      <returns>Gibt <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatusDescription">
      <summary>Gibt die optionale Beschreibung zurück, die beschreibt, warum der Schließen-Handshake vom Remoteendpunkt eingeleitet wurde.</summary>
      <returns>Gibt <see cref="T:System.String" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.Count">
      <summary>Gibt die Anzahl der Bytes an, die vom WebSocket empfangen wurden.</summary>
      <returns>Gibt <see cref="T:System.Int32" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.EndOfMessage">
      <summary>Gibt an, ob die Nachricht vollständig empfangen wurde.</summary>
      <returns>Gibt <see cref="T:System.Boolean" />zurück.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.MessageType">
      <summary>Gibt an, ob die aktuelle Nachricht eine UTF-8- oder binäre Nachricht ist.</summary>
      <returns>Gibt <see cref="T:System.Net.WebSockets.WebSocketMessageType" />zurück.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketState">
      <summary>Definiert die unterschiedlichen Zustände, die eine WebSockets-Instanz aufweisen kann.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Aborted">
      <summary>Für zukünftige Verwendung reserviert.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Closed">
      <summary>Zeigt an, dass der Schließen-Handshake des WebSockets ordnungsgemäß abgeschlossen wurde</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.CloseReceived">
      <summary>Eine Meldung zum Schließen wurde vom Remoteendpunkt empfangen.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.CloseSent">
      <summary>Eine Meldung zum Schließen wurde an den Remoteendpunkt gesendet.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Connecting">
      <summary>Die Verbindung handelt den Handshake mit dem Remote-Endpunkt aus.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.None">
      <summary>Für zukünftige Verwendung reserviert.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Open">
      <summary>Der Ausgangszustand, nachdem der HTTP-Handshake abgeschlossen wurde.</summary>
    </member>
  </members>
</doc>
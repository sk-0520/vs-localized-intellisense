<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary>Definisce come vengono gestiti i commenti dallo struct <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary>Consente i commenti all'interno di input JSON e li considera come token validi. Durante la lettura il chiamante può accedere ai valori di commento.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary>Non consente i commenti all'interno di input JSON. Gli eventuali commenti trovati vengono considerati come codice JSON non valido viene generata una <see cref="T:System.Text.Json.JsonException" />. Rappresenta il valore predefinito.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary>Consente i commenti all'interno di input JSON e li ignora. <see cref="T:System.Text.Json.Utf8JsonReader" /> si comporta come se non fossero presenti commenti.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary>Offre un meccanismo per l'esame del contenuto strutturale di un valore JSON senza creare automaticamente istanze dei valori di dati.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary>Rilascia le risorse usate dall'istanza di <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Analizza una sequenza come testo con codifica UTF-8 che rappresenta un valore byte JSON singolo in un JsonDocument.</summary>
      <param name="utf8Json">Il testo JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contiene opzioni non supportate.</exception>
      <returns>Rappresentazione JsonDocument del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary>Analizza un elemento <see cref="T:System.IO.Stream" /> come dati con codifica UTF-8 che rappresentano un valore JSON singolo in un JsonDocument. Il flusso viene letto fino al completamento.</summary>
      <param name="utf8Json">Dati JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contiene opzioni non supportate.</exception>
      <returns>Rappresentazione JsonDocument del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Analizza la memoria come testo con codifica UTF-8 che rappresenta un valore byte JSON singolo in un JsonDocument.</summary>
      <param name="utf8Json">Il testo JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contiene opzioni non supportate.</exception>
      <returns>Rappresentazione JsonDocument del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary>Analizza testo che rappresenta un valore carattere JSON singolo in un JsonDocument.</summary>
      <param name="json">Il testo JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contiene opzioni non supportate.</exception>
      <returns>Rappresentazione JsonDocument del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary>Analizza testo che rappresenta un valore stringa JSON singolo in un JsonDocument.</summary>
      <param name="json">Il testo JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contiene opzioni non supportate.</exception>
      <returns>Rappresentazione JsonDocument del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary>Analizza un elemento <see cref="T:System.IO.Stream" /> come dati con codifica UTF-8 che rappresentano un valore JSON singolo in un JsonDocument. Il flusso viene letto fino al completamento.</summary>
      <param name="utf8Json">Dati JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento del lettore durante l'analisi.</param>
      <param name="cancellationToken">Token da monitorare per le richieste di annullamento.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> non rappresenta un valore JSON singolo valido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> contiene opzioni non supportate.</exception>
      <returns>Attività che crea una rappresentazione JsonDocument del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary>Analizza un valore JSON (inclusi gli oggetti o le matrici) dal lettore specificato.</summary>
      <param name="reader">Lettore per eseguire la lettura.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contiene opzioni non supportate.

-oppure-

Il token <paramref name="reader" /> non avvia o rappresenta un valore.</exception>
      <exception cref="T:System.Text.Json.JsonException">Il lettore non è riuscito a leggere un valore.</exception>
      <returns>JsonDocument che rappresenta il valore (e i valori annidati) letti dal lettore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary>Prova ad analizzare un valore JSON (inclusi gli oggetti o le matrici) dal lettore specificato.</summary>
      <param name="reader">Lettore per eseguire la lettura.</param>
      <param name="document">Quando termina, questo metodo contiene il documento analizzato.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contiene opzioni non supportate.

-oppure-

Il token <paramref name="reader" /> non avvia o rappresenta un valore.</exception>
      <exception cref="T:System.Text.Json.JsonException">Il lettore non è riuscito a leggere un valore.</exception>
      <returns>
        <see langword="true" /> se un valore è stato letto e convertito in un JsonDocument; <see langword="false" /> se il lettore ha esaurito i dati durante l'analisi. In tutti gli altri casi viene generata un'eccezione.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Scrive il documento nel writer specificato come valore JSON.</summary>
      <param name="writer">Writer in cui scrivere il documento.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="writer" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il <see cref="P:System.Text.Json.JsonElement.ValueKind" /> di questo elemento <see cref="P:System.Text.Json.JsonDocument.RootElement" /> produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary>Ottiene l'elemento radice di questo documento JSON.</summary>
      <returns>Oggetto <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore del documento.</returns>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary>Consente all'utente di definire il comportamento personalizzato durante l'analisi di dati JSON per creare un <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary>Ottiene o imposta un valore che indica se una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o una matrice è consentita (e ignorata) all'interno del payload JSON in corso di lettura.</summary>
      <returns>
        <see langword="true" /> Se è consentita una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o in una matrice. in caso contrario, <see langword="false" /> . Il valore predefinito è <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary>Ottiene o imposta un valore che determina il modo in cui <see cref="T:System.Text.Json.JsonDocument" /> gestisce i commenti durante la lettura dei dati JSON.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">L'enumerazione di gestione dei commenti è impostata su un valore non supportato o non compreso nell'intervallo di enum <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
      <returns>Uno dei valori di enumerazione che indica come vengono gestiti i commenti.</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary>Ottiene o imposta la profondità massima consentita durante l'analisi di dati JSON, con il valore predefinito (ad esempio 0) che indica una profondità massima di 64.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">La profondità massima è impostata su un valore negativo.</exception>
      <returns>Profondità massima consentita durante l'analisi dei dati JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary>Rappresenta un valore JSON specifico all'interno di un <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary>Ottiene un JsonElement archiviabile in modo sicuro oltre la durata dell'elemento <see cref="T:System.Text.Json.JsonDocument" /> originale.</summary>
      <returns>JsonElement archiviabile in modo sicuro oltre la durata dell'elemento <see cref="T:System.Text.Json.JsonDocument" /> originale.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary>Ottiene un enumeratore per enumerare i valori nella matrice JSON rappresentata da questo JsonElement.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Enumeratore per enumerare i valori nella matrice JSON rappresentata da questo JsonElement.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary>Ottiene un enumeratore per enumerare le proprietà nell'oggetto JSON rappresentato da questo JsonElement.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Enumeratore per enumerare le proprietà nell'oggetto JSON rappresentato da questo JsonElement.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary>Ottiene il numero di valori contenuti nel valore di matrice corrente.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero di valori contenuti nel valore di matrice corrente.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary>Ottiene il valore dell'elemento come <see cref="T:System.Boolean" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per il valore non è <see cref="F:System.Text.Json.JsonValueKind.True" /> né <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Valore dell'elemento come <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.Byte" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary>Ottiene il valore dell'elemento sotto forma di matrice di byte.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Il valore non è codificato come testo in Base64 e quindi non può essere decodificato in byte.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Valore decodificato come matrice di byte.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary>Ottiene il valore dell'elemento come <see cref="T:System.DateTime" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere letto come <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Valore dell'elemento come <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary>Ottiene il valore dell'elemento come <see cref="T:System.DateTimeOffset" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere letto come <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Valore dell'elemento come <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.Decimal" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.Double" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary>Ottiene il valore dell'elemento come <see cref="T:System.Guid" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Valore dell'elemento come <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.Int16" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.Int32" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.Int64" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary>Ottiene un elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore di una proprietà obbligatoria identificata da <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName">Rappresentazione UTF-8 senza byte order mark (BOM) del nome della proprietà da restituire.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Nessuna proprietà trovata con il nome richiesto.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore della proprietà richiesta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary>Ottiene un elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore di una proprietà obbligatoria identificata da <paramref name="propertyName" />.</summary>
      <param name="propertyName">Nome della proprietà di cui deve essere restituito il valore.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Nessuna proprietà trovata con il nome richiesto.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore della proprietà richiesta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary>Ottiene un elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore di una proprietà obbligatoria identificata da <paramref name="propertyName" />.</summary>
      <param name="propertyName">Nome della proprietà di cui deve essere restituito il valore.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Nessuna proprietà trovata con il nome richiesto.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Elemento <see cref="T:System.Text.Json.JsonElement" /> che rappresenta il valore della proprietà richiesta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary>Ottiene una stringa che rappresenta i dati di input originali sottostanti questo valore.</summary>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Dati di input originali sottostanti questo valore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.SByte" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.Single" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary>Ottiene il valore dell'elemento come <see cref="T:System.String" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per il valore non è <see cref="F:System.Text.Json.JsonValueKind.String" /> né <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Valore dell'elemento come <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.UInt16" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.UInt32" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary>Ottiene il numero JSON corrente come <see cref="T:System.UInt64" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore non può essere rappresentato come un <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Numero JSON corrente come <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary>Ottiene una rappresentazione stringa del valore corrente appropriata per il tipo di valore.</summary>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Rappresentazione stringa del valore corrente appropriata per il tipo di valore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Byte" />.</summary>
      <param name="value">Quando il metodo termina, contiene l'equivalente in byte del numero JSON corrente se la conversione ha esito positivo.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Byte" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Prova a rappresentare la stringa JSON corrente come matrice di byte, supponendo che sia codificata in base 64.</summary>
      <param name="value">Se il metodo ha esito positivo, contiene la rappresentazione binaria decodificata del testo in base 64.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token è codificato come testo valido in Base64 e può essere decodificato correttamente in byte; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary>Prova a rappresentare la stringa JSON corrente come un <see cref="T:System.DateTime" />.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore di data e ora equivalente alla stringa JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se la stringa può essere rappresentata come <see cref="T:System.DateTime" />; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Prova a rappresentare la stringa JSON corrente come un <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value">Quando termina, questo metodo contiene la data e ora equivalenti alla stringa JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se la stringa può essere rappresentata come <see cref="T:System.DateTimeOffset" />; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Decimal" />.</summary>
      <param name="value">Quando termina, questo metodo contiene l'equivalente decimale del numero JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Decimal" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Double" />.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore a virgola mobile e precisione doppia equivalente al numero JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Double" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary>Prova a rappresentare la stringa JSON corrente come un <see cref="T:System.Guid" />.</summary>
      <param name="value">Quando termina, questo metodo contiene il GUID equivalente alla stringa JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se la stringa può essere rappresentata come <see cref="T:System.Guid" />; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Int16" />.</summary>
      <param name="value">Quando il metodo termina, contiene l'equivalente intero a 16 bit del numero JSON corrente se la conversione ha esito positivo.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Int16" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Int32" />.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore intero a 32 bit equivalente al numero JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Int32" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Int64" />.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore intero a 64 bit equivalente al numero JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Int64" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary>Cerca una proprietà con nome <paramref name="utf8PropertyName" /> nell'oggetto corrente e restituisce un valore che indica se la proprietà esiste. Se la proprietà esiste, il metodo ne assegna il valore all'argomento <paramref name="value" />.</summary>
      <param name="utf8PropertyName">Rappresentazione UTF-8 senza byte order mark (BOM) del nome della proprietà da restituire.</param>
      <param name="value">Riceve il valore della proprietà trovata.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se la proprietà è stata trovata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary>Cerca una proprietà con nome <paramref name="propertyName" /> nell'oggetto corrente e restituisce un valore che indica se la proprietà esiste. Se la proprietà esiste, il metodo ne assegna il valore all'argomento <paramref name="value" />.</summary>
      <param name="propertyName">Nome della proprietà da trovare.</param>
      <param name="value">Quando termina, il metodo contiene il valore della proprietà specificata.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se la proprietà è stata trovata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary>Cerca una proprietà con nome <paramref name="propertyName" /> nell'oggetto corrente e restituisce un valore che indica se la proprietà esiste. Se la proprietà esiste, il relativo valore viene assegnato all'argomento <paramref name="value" />.</summary>
      <param name="propertyName">Nome della proprietà da trovare.</param>
      <param name="value">Quando termina, il metodo contiene il valore della proprietà specificata.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se la proprietà è stata trovata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.SByte" />.</summary>
      <param name="value">Quando il metodo termina, contiene l'equivalente in byte con segno del numero JSON corrente se la conversione ha esito positivo.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.SByte" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.Single" />.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore a virgola mobile e precisione singola equivalente al numero JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.Single" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.UInt16" />.</summary>
      <param name="value">Quando il metodo termina, contiene l'equivalente intero a 16 bit senza segno del numero JSON corrente se la conversione ha esito positivo.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.UInt16" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.UInt32" />.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore intero a 32 bit senza segno equivalente al numero JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.UInt32" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary>Prova a rappresentare il numero JSON corrente come un <see cref="T:System.UInt64" />.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore intero a 64 bit senza segno equivalente al numero JSON corrente.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>
        <see langword="true" /> se il numero può essere rappresentato come <see cref="T:System.UInt64" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Confronta il testo rappresentato da un intervallo di byte con codifica UTF8 con il valore stringa di questo elemento.</summary>
      <param name="utf8Text">Testo con codifica UTF-8 da usare per il confronto.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns>
        <see langword="true" /> se il valore stringa di questo elemento ha la stessa codifica UTF-8 di <paramref name="utf8Text" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary>Confronta un intervallo di caratteri di sola lettura specificato con il valore stringa di questo elemento.</summary>
      <param name="text">Testo con cui eseguire il confronto.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns>
        <see langword="true" /> se il valore stringa di questo elemento corrisponde a <paramref name="text" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary>Confronta una stringa specificata con il valore stringa di questo elemento.</summary>
      <param name="text">Testo con cui eseguire il confronto.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns>
        <see langword="true" /> se il valore stringa di questo elemento corrisponde a <paramref name="text" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Scrive l'elemento nel writer specificato come valore JSON.</summary>
      <param name="writer">Writer di testo in cui scrivere l'elemento.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="writer" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Text.Json.JsonElement.ValueKind" /> di questo valore è <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary>Ottiene il valore in corrispondenza dell'indice specificato se il valore corrente è un <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index">Indice dell'elemento.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Text.Json.JsonElement.ValueKind" /> per questo valore non è <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> non è incluso nell'intervallo [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Valore in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary>Ottiene il tipo del valore JSON corrente.</summary>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
      <returns>Tipo del valore JSON corrente.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary>Rappresenta un enumeratore per i contenuti di una matrice JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary>Rilascia le risorse usate dall'istanza di <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la matrice.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo della raccolta.</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <see langword="false" /> se l'enumeratore ha superato la fine della raccolta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nella raccolta.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore per una matrice di <see cref="T:System.Text.Json.JsonElement" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary>Ottiene l'elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary>Ottiene l'elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary>Rappresenta un enumeratore per le proprietà di un oggetto JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary>Rilascia le risorse usate dall'istanza di <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere le proprietà di un oggetto.</summary>
      <returns>Enumeratore che può essere usato per scorrere l'oggetto.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary>Sposta l'enumeratore all'elemento successivo della raccolta.</summary>
      <returns>
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <see langword="false" /> se l'enumeratore ha superato la fine della raccolta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary>Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nella raccolta.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore per oggetti <see cref="T:System.Text.Json.JsonProperty" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary>Ottiene l'elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>Ottiene l'elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns>Elemento della raccolta in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary>Fornisce metodi per trasformare il testo con codifica UTF-8 o UTF-16 in un modulo adatto a JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codifica un valore di testo UTF-8 come stringa JSON.</summary>
      <param name="utf8Value">Testo con codifica UTF-8 da convertire in testo con codifica JSON.</param>
      <param name="encoder">Codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="utf8Value" /> è troppo grande.

-oppure-

<paramref name="utf8Value" /> contiene byte UTF-8 non validi.</exception>
      <returns>Testo JSON codificato.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codifica un valore di testo specificato come stringa JSON.</summary>
      <param name="value">Valore da convertire in testo codificato JSON.</param>
      <param name="encoder">Codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> è troppo grande.

-oppure-

<paramref name="value" /> contiene caratteri UTF-16 non validi.</exception>
      <returns>Testo JSON codificato.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codifica il valore di testo della stringa come stringa JSON.</summary>
      <param name="value">Valore da convertire in testo codificato JSON.</param>
      <param name="encoder">Codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> è troppo grande.

-oppure-

<paramref name="value" /> contiene caratteri UTF-16 non validi.</exception>
      <returns>Testo JSON codificato.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary>Determina se questa istanza e un oggetto specificato, che deve essere anche un'istanza di <see cref="T:System.Text.Json.JsonEncodedText" />, hanno lo stesso valore.</summary>
      <param name="obj">Oggetto da confrontare con questa istanza.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary>Determina se questa istanza e un'altra istanza di <see cref="T:System.Text.Json.JsonEncodedText" /> specificata hanno lo stesso valore.</summary>
      <param name="other">Oggetto da confrontare con questa istanza.</param>
      <returns>
        <see langword="true" /> se questa istanza e <paramref name="other" /> hanno lo stesso valore. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary>Restituisce il codice hash per questo oggetto <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns>Codice hash per l'istanza.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary>Converte il valore di questa istanza in un oggetto <see cref="T:System.String" />.</summary>
      <returns>Stringa con codifica UTF-16 sottostante.</returns>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary>Ottiene la rappresentazione con codifica UTF-8 del testo JSON precodificato.</summary>
      <returns>Rappresentazione con codifica UTF-8 del testo JSON pre-codificato.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary>Definisce un oggetto eccezione personalizzato che viene generato quando viene rilevato testo JSON non valido, quando viene passata la profondità massima definita o il testo JSON non è compatibile con il tipo di una proprietà in un oggetto.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Crea un nuovo oggetto eccezione con dati serializzati.</summary>
      <param name="info">Dati dell'oggetto serializzato relativi all'eccezione generata.</param>
      <param name="context">Oggetto contenente le informazioni contestuali sull'origine o la destinazione.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.JsonException" /> con un messaggio di errore specificato.</summary>
      <param name="message">Il messaggio di errore specifico del contesto.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.JsonException" /> con un messaggio di errore specificato e un riferimento all'eccezione interna che è la causa dell'eccezione corrente.</summary>
      <param name="message">Il messaggio di errore specifico del contesto.</param>
      <param name="innerException">Eccezione che ha causato l'eccezione corrente.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>Crea un nuovo oggetto eccezione per fornire informazioni sull'errore all'utente.</summary>
      <param name="message">Il messaggio di errore specifico del contesto.</param>
      <param name="path">Percorso in cui è stato rilevato testo JSON non valido.</param>
      <param name="lineNumber">Numero di riga (a partire da 0) in cui è stato rilevato testo JSON non valido durante la deserializzazione.</param>
      <param name="bytePositionInLine">Numero di byte nella riga corrente (a partire da 0) in cui è stato rilevato testo JSON non valido.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary>Crea un nuovo oggetto eccezione per inoltrare all'utente informazioni sull'errore che include un'eccezione interna specificata.</summary>
      <param name="message">Il messaggio di errore specifico del contesto.</param>
      <param name="path">Percorso in cui è stato rilevato testo JSON non valido.</param>
      <param name="lineNumber">Numero di riga (a partire da 0) in cui è stato rilevato testo JSON non valido durante la deserializzazione.</param>
      <param name="bytePositionInLine">Numero di byte (a partire da 0) nella riga corrente in cui è stato rilevato testo JSON non valido.</param>
      <param name="innerException">Eccezione che ha causato l'eccezione corrente.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Imposta l'oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con le informazioni sull'eccezione.</summary>
      <param name="info">Dati dell'oggetto serializzato relativi all'eccezione generata.</param>
      <param name="context">Oggetto contenente le informazioni contestuali sull'origine o la destinazione.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary>Ottiene il numero in base zero di byte letti all'interno della riga corrente prima dell'eccezione.</summary>
      <returns>Numero in base zero di byte letti all'interno della riga corrente prima dell'eccezione.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary>Ottiene il numero in base zero di righe lette prima dell'eccezione.</summary>
      <returns>Numero in base zero di righe lette prima dell'eccezione.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary>Ottiene un messaggio che descrive l'eccezione corrente.</summary>
      <returns>Messaggio di errore che descrive l'eccezione corrente.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary>Ottiene il percorso all'interno del testo JSON in cui è stata rilevata l'eccezione.</summary>
      <returns>Percorso all'interno del file JSON in cui è stata rilevata l'eccezione.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary>Determina i criteri di denominazione usati per convertire un nome basato su stringa in un altro formato, ad esempio un formato con notazione a cammello.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary>Quando viene sottoposto a override in una classe derivata, converte il nome specificato in base ai criteri.</summary>
      <param name="name">Nome da convertire.</param>
      <returns>Nome convertito.</returns>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary>Ottiene i criteri di denominazione per la notazione a cammello.</summary>
      <returns>Criteri di denominazione per la combinazione di maiuscole e minuscole.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary>Rappresenta una singola proprietà per un oggetto JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Confronta il testo con codifica UTF-8 specificato con il nome di questa proprietà.</summary>
      <param name="utf8Text">Testo con codifica UTF-8 da usare per il confronto.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Type" /> per questo valore non è <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" /> se il nome di questa proprietà ha la stessa codifica UTF-8 di <paramref name="utf8Text" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary>Confronta il testo specificato come intervallo di caratteri con il nome di questa proprietà.</summary>
      <param name="text">Testo con cui eseguire il confronto.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Type" /> per questo valore non è <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" /> se il nome di questa proprietà corrisponde a <paramref name="text" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary>Confronta la stringa specificata con il nome di questa proprietà.</summary>
      <param name="text">Testo con cui eseguire il confronto.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Type" /> per questo valore non è <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" /> se il nome di questa proprietà corrisponde a <paramref name="text" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary>Visualizza una rappresentazione stringa della proprietà per il debug.</summary>
      <returns>Stringa contenente il valore della proprietà non interpretato, che inizia con la virgoletta di apertura della dichiarazione e termina con l'ultimo carattere che fa parte del valore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Scrive la proprietà nel writer specificato come proprietà di oggetto JSON denominato.</summary>
      <param name="writer">Writer in cui scrivere la proprietà.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> è troppo grande per essere una proprietà di oggetto JSON.</exception>
      <exception cref="T:System.InvalidOperationException">Il <see cref="P:System.Text.Json.JsonElement.ValueKind" /> di questo <see cref="P:System.Text.Json.JsonProperty.Value" /> della proprietà JSON produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ObjectDisposedException">L'elemento <see cref="T:System.Text.Json.JsonDocument" /> padre è stato eliminato.</exception>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary>Ottiene il nome di questa proprietà.</summary>
      <returns>Nome di questa proprietà.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary>Ottiene il valore di questa proprietà.</summary>
      <returns>Valore della proprietà.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary>Consente all'utente di definire il comportamento personalizzato durante la lettura di dati JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary>Ottiene o imposta un valore che definisce se una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o una matrice è consentita (e ignorata) all'interno del payload JSON in corso di lettura.</summary>
      <returns>
        <see langword="true" /> Se è consentita una virgola aggiuntiva; in caso contrario, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary>Ottiene o imposta un valore che determina il modo in cui <see cref="T:System.Text.Json.Utf8JsonReader" /> gestisce i commenti durante la lettura dei dati JSON.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">La proprietà viene impostata su un valore che non è un membro dell'enumerazione <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
      <returns>Uno dei valori di enumerazione che indica come vengono gestiti i commenti.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary>Ottiene o imposta la profondità massima consentita durante la lettura di JSON, con il valore predefinito (ad esempio 0) che indica una profondità massima di 64.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">La profondità massima viene impostata su un valore negativo.</exception>
      <returns>Profondità massima consentita durante la lettura di dati JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary>Definisce un tipo opaco che contiene e salva tutte le informazioni di stato rilevanti che devono essere fornite a <see cref="T:System.Text.Json.Utf8JsonReader" /> per continuare la lettura dopo l'elaborazione di dati incompleti.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary>Costruisce una nuova istanza di <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options">Definisce il comportamento personalizzato di <see cref="T:System.Text.Json.Utf8JsonReader" /> che è diverso da JSON RFC (ad esempio la gestione dei commenti o la profondità massima consentita per la lettura). Per impostazione predefinita, <see cref="T:System.Text.Json.Utf8JsonReader" /> segue JSON RFC rigorosamente (i commenti all'interno di JSON non sono validi) ed esegue la lettura fino a una profondità massima pari a 64.</param>
      <exception cref="T:System.ArgumentException">La profondità massima è impostata su un valore non positivo (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary>Ottiene il comportamento personalizzato da usare durante la lettura di dati JSON con lo struct <see cref="T:System.Text.Json.Utf8JsonReader" />, che potrebbe non rispettare rigorosamente la specifica JSON, ovvero il comportamento predefinito.</summary>
      <returns>Comportamento personalizzato da usare durante la lettura dei dati JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary>Fornisce funzionalità per serializzare oggetti o tipi valore in JSON e per deserializzare JSON in oggetti o tipi valore.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Analizza il testo con codifica UTF-8 che rappresenta un singolo valore JSON in un'istanza di un tipo specificato.</summary>
      <param name="utf8Json">Il testo JSON da analizzare.</param>
      <param name="returnType">Tipo dell'oggetto da convertire e restituire.</param>
      <param name="options">Opzioni per controllare il comportamento durante l'analisi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Valore JSON non valido.

-oppure-

<typeparamref name="returnType" /> non è compatibile con il valore JSON.

-oppure-

Sono presenti dati rimanenti nell'intervallo oltre un valore JSON singolo.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="returnType" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione <paramref name="returnType" /> del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Analizza il testo che rappresenta un singolo valore JSON in un'istanza di un tipo specificato.</summary>
      <param name="json">Il testo JSON da analizzare.</param>
      <param name="returnType">Tipo dell'oggetto da convertire e restituire.</param>
      <param name="options">Opzioni per controllare il comportamento durante l'analisi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> o <paramref name="returnType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Valore JSON non valido.
          
-oppure-

<typeparamref name="TValue" /> non è compatibile con il valore JSON.

-oppure-

Sono presenti dati rimanenti nella stringa oltre un valore JSON singolo.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="returnType" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione <paramref name="returnType" /> del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Legge un valore JSON (inclusi oggetti o matrici) dal lettore specificato e lo converte in un'istanza di un tipo specificato.</summary>
      <param name="reader">Lettore da cui leggere il valore JSON.</param>
      <param name="returnType">Tipo dell'oggetto da convertire e restituire.</param>
      <param name="options">Opzioni per controllare il comportamento del serializzatore durante la lettura.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Valore JSON non valido.
          
-oppure-

<typeparamref name="returnType" /> non è compatibile con il valore JSON.

-oppure-

Il lettore non è riuscito a leggere un valore.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> usa opzioni non supportate.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="returnType" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione <paramref name="returnType" /> del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary>Analizza il testo con codifica UTF-8 che rappresenta un singolo valore JSON in un'istanza del tipo specificato da un parametro di tipo generico.</summary>
      <param name="utf8Json">Il testo JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento durante l'analisi.</param>
      <typeparam name="TValue">Tipo di destinazione del testo con codifica UTF-8.</typeparam>
      <exception cref="T:System.Text.Json.JsonException">Valore JSON non valido.

-oppure-

<typeparamref name="TValue" /> non è compatibile con il valore JSON.

-oppure-

Sono presenti dati rimanenti nell'intervallo oltre un valore JSON singolo.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <typeparamref name="TValue" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione <typeparamref name="TValue" /> del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary>Analizza il testo che rappresenta un singolo valore JSON in un'istanza del tipo specificato da un parametro di tipo generico.</summary>
      <param name="json">Il testo JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento durante l'analisi.</param>
      <typeparam name="TValue">Tipo di destinazione del valore JSON.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Valore JSON non valido.

-oppure-

<typeparamref name="TValue" /> non è compatibile con il valore JSON.

-oppure-

Sono presenti dati rimanenti nella stringa oltre un valore JSON singolo.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <typeparamref name="TValue" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione <typeparamref name="TValue" /> del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary>Legge un valore JSON (inclusi oggetti o matrici) dal lettore specificato in un'istanza del tipo specificato da un parametro di tipo generico.</summary>
      <param name="reader">Lettore da cui leggere il valore JSON.</param>
      <param name="options">Opzioni per controllare il comportamento del serializzatore durante la lettura.</param>
      <typeparam name="TValue">Tipo di destinazione del valore JSON.</typeparam>
      <exception cref="T:System.Text.Json.JsonException">Valore JSON non valido.

-oppure-

<typeparamref name="TValue" /> non è compatibile con il valore JSON.

-oppure-

Il lettore non è riuscito a leggere un valore.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> usa opzioni non supportate.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <typeparamref name="TValue" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione <typeparamref name="TValue" /> del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Legge in modo asincrono il testo con codifica UTF-8 che rappresenta un singolo valore JSON in un'istanza di un tipo specificato. Il flusso verrà letto fino al completamento.</summary>
      <param name="utf8Json">Dati JSON da analizzare.</param>
      <param name="returnType">Tipo dell'oggetto da convertire e restituire.</param>
      <param name="options">Opzioni per controllare il comportamento durante la lettura.</param>
      <param name="cancellationToken">Token di annullamento che può essere usato per annullare l'operazione di lettura.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> o <paramref name="returnType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Valore JSON non valido.

-oppure-

<typeparamref name="TValue" /> non è compatibile con il valore JSON.

-oppure-

Sono presenti dati rimanenti nel flusso.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="returnType" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione <paramref name="returnType" /> del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Legge in modo asincrono il testo con codifica UTF-8 che rappresenta un singolo valore JSON in un'istanza di un tipo specificato da un parametro di tipo generico. Il flusso verrà letto fino al completamento.</summary>
      <param name="utf8Json">Dati JSON da analizzare.</param>
      <param name="options">Opzioni per controllare il comportamento durante la lettura.</param>
      <param name="cancellationToken">Token che può essere usato per annullare l'operazione di lettura.</param>
      <typeparam name="TValue">Tipo di destinazione del valore JSON.</typeparam>
      <exception cref="T:System.Text.Json.JsonException">Valore JSON non valido.

-oppure-

<typeparamref name="TValue" /> non è compatibile con il valore JSON.

-oppure-

Sono presenti dati rimanenti nel flusso.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <typeparamref name="TValue" /> o i membri serializzabili.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> è <see langword="null" />.</exception>
      <returns>Rappresentazione <typeparamref name="TValue" /> del valore JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Converte il valore di un tipo specificato in una stringa JSON.</summary>
      <param name="value">Valore da convertire.</param>
      <param name="inputType">Tipo di <paramref name="value" /> da convertire.</param>
      <param name="options">Opzioni per controllare il comportamento di conversione.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> non è compatibile con <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="inputType" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione della stringa JSON del valore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Scrive la rappresentazione JSON del tipo specificato nel writer disponibile.</summary>
      <param name="writer">Writer JSON in cui scrivere.</param>
      <param name="value">Valore da convertire e scrivere.</param>
      <param name="inputType">Tipo di <paramref name="value" /> da convertire.</param>
      <param name="options">Opzioni per controllare il comportamento di serializzazione.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> non è compatibile con <paramref name="value" /></exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> o <paramref name="inputType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="inputType" /> o i membri serializzabili.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Converte il valore di un tipo specificato da un parametro di tipo generico in una stringa JSON.</summary>
      <param name="value">Valore da convertire.</param>
      <param name="options">Opzioni per controllare il comportamento di serializzazione.</param>
      <typeparam name="TValue">Tipo del valore da serializzare.</typeparam>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <typeparamref name="TValue" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione della stringa JSON del valore.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Scrive la rappresentazione JSON di un tipo specificato da un parametro di tipo generico nel writer disponibile.</summary>
      <param name="writer">Writer JSON in cui scrivere.</param>
      <param name="value">Valore da convertire e scrivere.</param>
      <param name="options">Opzioni per controllare il comportamento di serializzazione.</param>
      <typeparam name="TValue">Tipo del valore da serializzare.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <typeparamref name="TValue" /> o i membri serializzabili.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Converte in modo asincrono il valore di un tipo specificato nel testo JSON con codifica UTF-8 e lo scrive nel flusso specificato.</summary>
      <param name="utf8Json">Flusso UTF-8 in cui scrivere.</param>
      <param name="value">Valore da convertire.</param>
      <param name="inputType">Tipo di <paramref name="value" /> da convertire.</param>
      <param name="options">Opzioni per controllare il comportamento di serializzazione.</param>
      <param name="cancellationToken">Token che può essere usato per annullare l'operazione di scrittura.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> non è compatibile con <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> o <paramref name="inputType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="inputType" /> o i membri serializzabili.</exception>
      <returns>Attività che rappresenta l'operazione di scrittura asincrona.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Converte in modo asincrono un valore di un tipo specificato da un parametro di tipo generico a testo JSON con codifica UTF-8 e lo scrive in un flusso.</summary>
      <param name="utf8Json">Flusso UTF-8 in cui scrivere.</param>
      <param name="value">Valore da convertire.</param>
      <param name="options">Opzioni per controllare il comportamento di serializzazione.</param>
      <param name="cancellationToken">Token che può essere usato per annullare l'operazione di scrittura.</param>
      <typeparam name="TValue">Tipo del valore da serializzare.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <typeparamref name="TValue" /> o i membri serializzabili.</exception>
      <returns>Attività che rappresenta l'operazione di scrittura asincrona.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Converte un valore del tipo specificato in una stringa JSON, codificata in byte UTF-8.</summary>
      <param name="value">Valore da convertire.</param>
      <param name="inputType">Tipo di <paramref name="value" /> da convertire.</param>
      <param name="options">Opzioni per controllare il comportamento di conversione.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> non è compatibile con <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="inputType" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione della stringa JSON del valore, codificata in byte UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Converte il valore di un tipo specificato da un parametro di tipo generico in una stringa JSON, codificata in byte UTF-8.</summary>
      <param name="value">Valore da convertire.</param>
      <param name="options">Opzioni per controllare il comportamento di conversione.</param>
      <typeparam name="TValue">Tipo di valore.</typeparam>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <typeparamref name="TValue" /> o i membri serializzabili.</exception>
      <returns>Rappresentazione della stringa JSON del valore, codificata in byte UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerDefaults">
      <summary>Specifica le opzioni predefinite usate da <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.General">
      <summary>Specifica che devono essere usati valori di utilizzo generico. Si tratta delle stesse impostazioni che vengono applicate se non è specificato un oggetto <see cref="T:System.Text.Json.JsonSerializerDefaults" />.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
      <summary>Specifica che i valori devono essere usati in modo più appropriato a uno scenario basato sul Web.</summary>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary>Fornisce le opzioni da usare con <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
      <summary>Costruisce una nuova istanza di <see cref="T:System.Text.Json.JsonSerializerOptions" /> con un set predefinito di opzioni determinate dall'oggetto <see cref="T:System.Text.Json.JsonSerializerDefaults" /> specificato.</summary>
      <param name="defaults">Oggetto <see cref="T:System.Text.Json.JsonSerializerDefaults" /> da valutare.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
      <summary>Copia le opzioni da un'istanza di <see cref="T:System.Text.Json.JsonSerializerOptions" /> a una nuova istanza.</summary>
      <param name="options">Istanza delle opzioni da cui copiare le opzioni.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary>Restituisce il convertitore per il tipo specificato.</summary>
      <param name="typeToConvert">Tipo per il quale restituire un convertitore.</param>
      <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="System.Text.Json.Serialization.JsonConverter" /> configurato per <paramref name="typeToConvert" /> ha restituito un convertitore non valido.</exception>
      <exception cref="T:System.NotSupportedException">Non sono presenti <see cref="System.Text.Json.Serialization.JsonConverter" /> compatibili per <paramref name="typeToConvert" /> o i membri serializzabili.</exception>
      <returns>Il primo convertitore che supporta il tipo specificato o <see langword="null" /> in assenza di un convertitore.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary>Ottiene o imposta un valore che indica se una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o una matrice è consentita (e ignorata) all'interno del payload JSON in corso di deserializzazione.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
      <returns>
        <see langword="true" /> Se una virgola aggiuntiva alla fine di un elenco di valori JSON in un oggetto o in una matrice è consentita (e ignorata); <see langword="false" /> in caso contrario,.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary>Ottiene l'elenco dei convertitori definiti dall'utente che sono stati registrati.</summary>
      <returns>Elenco di convertitori personalizzati.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary>Ottiene o imposta le dimensioni predefinite del buffer, in byte, da usare per la creazione di buffer temporanei.</summary>
      <exception cref="T:System.ArgumentException">Le dimensioni del buffer sono minori di 1.</exception>
      <exception cref="T:System.InvalidOperationException">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
      <returns>Dimensioni predefinite del buffer in byte.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
      <summary>Specifica una condizione per determinare in quali circostanze devono essere ignorate le proprietà con valori predefiniti durante la serializzazione o la deserializzazione.
Il valore predefinito è <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.</summary>
      <exception cref="T:System.ArgumentException">Questa proprietà è impostata su <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" />.</exception>
      <exception cref="T:System.InvalidOperationException">Questa proprietà viene impostata dopo la serializzazione o la deserializzazione.

-oppure-

La proprietà <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> è stata impostata su <see langword="true" />. Queste proprietà non possono essere usate insieme.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary>Ottiene o imposta i criteri usati per convertire il nome di una chiave <see cref="T:System.Collections.IDictionary" /> in un altro formato, ad esempio con la combinazione di maiuscole e minuscole a cammello.</summary>
      <returns>Criterio utilizzato per convertire il nome di una <see cref="T:System.Collections.IDictionary" /> chiave in un altro formato.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary>Ottiene o imposta il codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</summary>
      <returns>Codifica dei caratteri JavaScript.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary>Ottiene o imposta un valore che determina se i valori <see langword="null" /> vengono ignorati durante la serializzazione e la deserializzazione. Il valore predefinito è <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.

-oppure-

La proprietà <see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> è stata impostata su un valore non predefinito. Queste proprietà non possono essere usate insieme.</exception>
      <returns>
        <see langword="true" /> per ignorare i valori null durante la serializzazione e la deserializzazione; in caso contrario, vedere langword = "false"/ &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
      <summary>Determina se i campi di sola lettura vengono ignorati durante la serializzazione. Una proprietà è di sola lettura se non è contrassegnata con la parola chiave <see langword="readonly" />. Il valore predefinito è <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà viene impostata dopo la serializzazione o la deserializzazione.</exception>
      <returns>
        <see langword="true" /> Se i campi di sola lettura devono essere ignorati durante la serializzazione; <see langword="false" /> in caso contrario,.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary>Ottiene un valore che determina se le proprietà di sola lettura vengono ignorate durante la serializzazione. Il valore predefinito è <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
      <returns>
        <see langword="true" /> per ignorare le proprietà di sola lettura durante la serializzazione; in caso contrario, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
      <summary>Determina se i campi vengono gestiti con serializzazione e deserializzazione.
Il valore predefinito è <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà viene impostata dopo la serializzazione o la deserializzazione.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary>Ottiene o imposta la profondità massima consentita durante la serializzazione o deserializzazione di JSON, con il valore predefinito 0 che indica una profondità massima di 64.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La profondità massima è impostata su un valore negativo.</exception>
      <returns>Profondità massima consentita durante la serializzazione o deserializzazione di JSON.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
      <summary>Specifica la modalità di gestione dei tipi di numero durante la serializzazione o la deserializzazione.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà viene impostata dopo la serializzazione o la deserializzazione.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary>Ottiene o imposta un valore che determina se per il nome di una proprietà viene usato un confronto senza distinzione tra maiuscole e minuscole durante la deserializzazione. Il valore predefinito è <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> per confrontare i nomi di proprietà con il confronto senza distinzione tra maiuscole e minuscole; in caso contrario, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary>Ottiene o imposta un valore che specifica i criteri usati per convertire il nome di una proprietà per un oggetto in un altro formato, ad esempio la combinazione di maiuscole e minuscole a cammello o <see langword="null" /> per lasciare invariati i nomi delle proprietà.</summary>
      <returns>Criteri di denominazione delle proprietà o <see langword="null" /> per lasciare invariati i nomi di proprietà.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary>Ottiene o imposta un valore che definisce come vengono gestiti i commenti durante la deserializzazione.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">L'enumerazione di gestione dei commenti è impostata su un valore non supportato o non compreso nell'intervallo di enum <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
      <returns>Valore che indica se i commenti sono consentiti, non consentiti o ignorati.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
      <summary>Configura il modo in cui vengono gestiti i riferimenti agli oggetti durante la lettura e la scrittura di JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary>Ottiene o imposta un valore che definisce se JSON deve usare la pretty print. Per impostazione predefinita, JSON viene serializzato senza spazi vuoti aggiuntivi.</summary>
      <exception cref="T:System.InvalidOperationException">Questa proprietà è stata impostata dopo la serializzazione o deserializzazione.</exception>
      <returns>
        <see langword="true" /> Se JSON deve essere stampato sulla serializzazione; in caso contrario, <see langword="false" /> . Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary>Definisce i vari token JSON che costituiscono un testo JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary>Il tipo di token è una stringa di commento.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary>Il tipo di token è la fine di una matrice JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary>Il tipo di token è la fine di un oggetto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary>Il tipo di token è il valore letterale JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary>Non esiste alcun valore (distinto da <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary>Il tipo di token è il valore letterale JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary>Il tipo di token è un numero JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary>Il tipo di token è un nome di proprietà JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary>Il tipo di token è l'inizio di una matrice JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary>Il tipo di token è l'inizio di un oggetto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary>Il tipo di token è una stringa JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary>Il tipo di token è il valore letterale JSON true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary>Specifica il tipo di dati di un valore JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary>Matrice JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary>Valore JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary>Valore JSON Null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary>Numero JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary>Oggetto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary>Stringa JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary>Valore JSON true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary>Non esiste alcun valore (distinto da <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary>Consente all'utente di definire il comportamento personalizzato durante la scrittura di codice JSON con <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary>Ottiene o imposta il codificatore da usare per l'escape delle stringhe oppure <see langword="null" /> per usare il codificatore predefinito.</summary>
      <returns>Codificatore di caratteri JavaScript usato per eseguire l'override del comportamento di escape.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary>Ottiene o imposta un valore che indica se <see cref="T:System.Text.Json.Utf8JsonWriter" /> deve formattare l'output JSON, operazione che include l'applicazione del rientro ai token JSON annidati, l'aggiunta di nuove righe e l'aggiunta di spazio vuoto tra i nomi e i valori delle proprietà.</summary>
      <returns>
        <see langword="true" /> per formattare l'output JSON; <see langword="false" /> per scrivere senza spazi vuoti aggiuntivi. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary>Ottiene o imposta un valore che indica se i<see cref="T:System.Text.Json.Utf8JsonWriter" /> deve ignorare la convalida strutturale e consentire all'utente di scrivere codice JSON non valido.</summary>
      <returns>
        <see langword="true" /> per ignorare la convalida strutturale e consentire JSON non valido; <see langword="false" /> per generare un oggetto <see cref="T:System.InvalidOperationException" /> in qualsiasi tentativo di scrivere JSON non valido.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary>Fornisce la classe base per gli attributi di serializzazione.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary>Crea una nuova istanza dell'oggetto <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
      <summary>Quando viene inserito in un costruttore, indica che il costruttore deve essere usato per creare istanze del tipo durante la deserializzazione.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary>Converte un oggetto o un valore in o da JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary>In caso di override in una classe derivata, determina se l'istanza del convertitore può convertire il tipo di oggetto specificato.</summary>
      <param name="typeToConvert">Tipo dell'oggetto per controllare se può essere convertito da questa istanza del convertitore.</param>
      <returns>
        <see langword="true" /> se l'istanza può convertire il tipo di oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary>Converte un oggetto o un valore in o da JSON.</summary>
      <typeparam name="T">Tipo di oggetto o valore gestito dal convertitore.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary>Determina se il tipo specificato può essere convertito.</summary>
      <param name="typeToConvert">Tipo con cui eseguire il confronto.</param>
      <returns>
        <see langword="true" /> se il tipo può essere convertito, altrimenti <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Legge e converte il valore JSON nel tipo <typeparamref name="T" />.</summary>
      <param name="reader">Lettore.</param>
      <param name="typeToConvert">Tipo da convertire.</param>
      <param name="options">Oggetto che specifica le opzioni di serializzazione da usare.</param>
      <returns>Valore convertito.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary>Scrive un valore specificato come JSON.</summary>
      <param name="writer">Writer sul quale scrivere.</param>
      <param name="value">Valore da convertire in JSON.</param>
      <param name="options">Oggetto che specifica le opzioni di serializzazione da usare.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
      <summary>Indica se <see langword="null" /> deve essere passato al convertitore durante la serializzazione e se <see cref="F:System.Text.Json.JsonTokenType.Null" /> deve essere passato invece durante la deserializzazione.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary>Quando viene applicato a una proprietà o a un tipo, specifica il tipo di convertitore da usare.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> con il tipo di convertitore specificato.</summary>
      <param name="converterType">Tipo del convertitore.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary>In caso di override in una classe derivata, se <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> è <see langword="null" />, consente alla classe derivata di creare un oggetto <see cref="T:System.Text.Json.Serialization.JsonConverter" /> per passare lo stato aggiuntivo.</summary>
      <param name="typeToConvert">Tipo del convertitore.</param>
      <returns>Convertitore personalizzato.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary>Ottiene il tipo dell'oggetto <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> oppure <see langword="null" /> se è stato creato senza un tipo.</summary>
      <returns>Tipo di <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> o <see langword="null" /> se è stato creato senza un tipo.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary>Supporta la conversione di diversi tipi usando un modello factory.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary>Quando viene sottoposto a override in una classe derivata, inizializza una nuova istanza della classe <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Crea un convertitore per un tipo specificato.</summary>
      <param name="typeToConvert">Tipo gestito dal convertitore.</param>
      <param name="options">Opzioni di serializzazione da usare.</param>
      <returns>Convertitore per il quale <typeparamref name="T" /> è compatibile con <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary>Per una proprietà di tipo <see cref="T:System.Collections.Generic.IDictionary`2" />, tutte le proprietà che non hanno un membro corrispondente vengono aggiunte a tale dizionario durante la deserializzazione e scritte durante la serializzazione.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary>Crea una nuova istanza della classe <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary>Impedisce la serializzazione o la deserializzazione di una proprietà.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
      <summary>Specifica la condizione che deve essere soddisfatta prima che una proprietà venga ignorata.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
      <summary>Controlla il modo in cui <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> ignora le proprietà per la serializzazione e la deserializzazione.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
      <summary>La proprietà verrà sempre ignorata.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
      <summary>La proprietà verrà sempre serializzata e deserializzata, indipendentemente dalla configurazione di <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
      <summary>La proprietà verrà ignorata solo se è <see langword="null" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
      <summary>Se il valore è <see langword="null" /> la proprietà viene ignorata durante la serializzazione. Viene applicato solo ai campi e alle proprietà tipo di riferimento.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
      <summary>Indica che il membro deve essere incluso per la serializzazione e la deserializzazione.</summary>
      <exception cref="T:System.InvalidOperationException">L'attributo viene applicato a una proprietà non pubblica.</exception>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
      <summary>Determina come <see cref="T:System.Text.Json.JsonSerializer" /> gestisce i numeri nelle fasi di serializzazione e deserializzazione.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
      <summary>I token <see cref="F:System.Text.Json.JsonTokenType.String" /> "NaN", "Infinity" e "-Infinity" possono essere letti come costanti a virgola mobile e i valori <see cref="T:System.Single" /> e <see cref="T:System.Double" /> di queste costanti verranno scritti come le rappresentazioni stringa JSON corrispondenti.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
      <summary>I numeri possono essere letti dai token <see cref="F:System.Text.Json.JsonTokenType.String" />. Non impedisce che i numeri vengano letti dal token <see cref="F:System.Text.Json.JsonTokenType.Number" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
      <summary>I numeri verranno letti solo dai token <see cref="F:System.Text.Json.JsonTokenType.Number" /> e verranno scritti solo come numeri JSON (senza virgolette).</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
      <summary>I numeri verranno scritti come stringhe JSON (con virgolette) e non come numeri JSON.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
      <summary>Se posizionato in un tipo, una proprietà o un campo indica le impostazioni <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> da usare per la serializzazione o la deserializzazione di numeri.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" />.</summary>
      <param name="handling">Combinazione bit per bit dei valori di enumerazione che specifica come devono essere gestiti i tipi di numeri durante la serializzazione o la deserializzazione.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
      <summary>Indica le impostazioni da usare per la serializzazione o deserializzazione di numeri.</summary>
      <returns>Oggetto che determina le impostazioni di serializzazione e deserializzazione dei numeri.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary>Specifica il nome della proprietà presente nel codice JSON durante la serializzazione e la deserializzazione. Vengono ignorati gli eventuali criteri di denominazione specificati da <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> con il nome di proprietà specificato.</summary>
      <param name="name">Nome della proprietà.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary>Ottiene il nome della proprietà.</summary>
      <returns>Nome della proprietà.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary>Converte i valori di enumerazione da e verso stringhe.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary>Inizializza un'istanza della classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> con i criteri di denominazione predefiniti che consentono i valori integer.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary>Inizializza un'istanza della classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> con i criteri di denominazione specificati e un valore che indica se sono consentiti valori di enumerazione non definiti.</summary>
      <param name="namingPolicy">Criteri di denominazione facoltativi per la scrittura di valori enum.</param>
      <param name="allowIntegerValues">
        <see langword="true" /> per consentire valori enum non definiti. In caso contrario, <see langword="false" />. Quando <see langword="true" />, se non è definito un valore enum, l'output sarà in forma di numero anziché di stringa.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary>Determina se il tipo specificato può essere convertito in un enum.</summary>
      <param name="typeToConvert">Tipo da controllare.</param>
      <returns>
        <see langword="true" /> se il tipo può essere convertito, altrimenti <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Crea un convertitore per il tipo specificato.</summary>
      <param name="typeToConvert">Tipo gestito dal convertitore.</param>
      <param name="options">Opzioni di serializzazione da usare.</param>
      <returns>Convertitore per il quale <typeparamref name="T" /> è compatibile con <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler">
      <summary>Questa classe definisce il modo in cui <see cref="T:System.Text.Json.JsonSerializer" /> gestisce i riferimenti alla serializzazione e alla deserializzazione.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.Serialization.ReferenceHandler" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
      <summary>Restituisce l'oggetto <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> usato per ogni chiamata di serializzazione.</summary>
      <returns>Sistema di risoluzione da usare per la serializzazione e la deserializzazione.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
      <summary>Le proprietà dei metadati verranno rispettate durante la deserializzazione di oggetti e matrici JSON in tipi di riferimento e scritte durante la serializzazione di tipi di riferimento. Questa operazione è necessaria per creare un file JSON di cui è possibile eseguire il round-trip da oggetti che contengono cicli o riferimenti duplicati.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
      <summary>Questa classe definisce il modo in cui <see cref="T:System.Text.Json.JsonSerializer" /> gestisce i riferimenti alla serializzazione e alla deserializzazione.</summary>
      <typeparam name="T">Tipo di <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> da creare per ogni chiamata di serializzazione o deserializzazione.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
      <summary>Inizializza una nuova istanza della classe generica <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" /> che può creare un'istanza <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> dell'oggetto specificato <typeparam name="T" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
      <summary>Crea un nuovo oggetto <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> di tipo <typeparamref name="T" /> usato per ogni chiamata di serializzazione.</summary>
      <returns>Nuovo sistema di risoluzione da usare per la serializzazione e la deserializzazione.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceResolver">
      <summary>Questa classe definisce il modo in cui <see cref="T:System.Text.Json.JsonSerializer" /> gestisce i riferimenti alla serializzazione e alla deserializzazione.
Seleziona il comportamento che prevede il mantenimento dei riferimenti alla serializzazione e alla deserializzazione.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
      <summary>Aggiunge una voce al contenitore di riferimenti usando l'ID e il valore specificati.
Questo metodo viene chiamato quando viene letta una proprietà di metadati $id da un oggetto JSON.</summary>
      <param name="referenceId">Identificatore dell'oggetto o della matrice JSON.</param>
      <param name="value">Valore dell'oggetto tipo di riferimento CLR risultante dall'analisi dell'oggetto JSON.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
      <summary>Ottiene l'identificatore di riferimento del valore specificato, se esiste. In caso contrario, viene assegnato un nuovo ID.
Questo metodo viene chiamato prima che venga scritto un oggetto CLR, in modo da poter decidere se scrivere $id ed enumerare il resto delle proprietà o scrivere $ref e passare all'oggetto successivo.</summary>
      <param name="value">Valore dell'oggetto tipo di riferimento CLR per il quale ottenere un ID.</param>
      <param name="alreadyExists">Al termine del metodo, <see langword="true" /> se esiste già un riferimento a un valore; in caso contrario, <see langword="false" /> .</param>
      <returns>ID di riferimento per l'oggetto specificato.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
      <summary>Restituisce l'oggetto tipo di riferimento CLR correlato all'ID di riferimento specificato. Questo metodo viene chiamato quando viene letta la proprietà di metadati $ref.</summary>
      <param name="referenceId">ID di riferimento correlato all'oggetto restituito.</param>
      <returns>Oggetto tipo di riferimento correlato all'ID di riferimento specificato.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary>Fornisce un'API ad alte prestazioni per l'accesso di tipo forward-only e di sola lettura al testo JSON con codifica UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Inizializza una nuova istanza della struttura <see cref="T:System.Text.Json.Utf8JsonReader" /> che elabora una sequenza di sola lettura del testo con codifica UTF-8 e indica se l'input contiene tutto il testo da elaborare.</summary>
      <param name="jsonData">Testo JSON con codifica UTF-8 da elaborare.</param>
      <param name="isFinalBlock">
        <see langword="true" /> per indicare che la sequenza di input contiene tutti i dati da elaborare; <see langword="false" /> per indicare che l'intervallo di input contiene dati parziali e che seguiranno altri dati.</param>
      <param name="state">Oggetto che contiene lo stato del lettore. Se si tratta della prima chiamata al costruttore, passare lo stato predefinito; in caso contrario, passare il valore della proprietà <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> dall'istanza precedente di <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Inizializza una nuova istanza della struttura <see cref="T:System.Text.Json.Utf8JsonReader" /> che elabora una sequenza di sola lettura del testo con codifica UTF-8 usando le opzioni specificate.</summary>
      <param name="jsonData">Testo JSON con codifica UTF-8 da elaborare.</param>
      <param name="options">Definisce il comportamento personalizzato dell'oggetto <see cref="T:System.Text.Json.Utf8JsonReader" /> che differisce dalla RFC JSON, ad esempio la gestione dei commenti o la profondità massima consentita durante la lettura. Per impostazione predefinita, <see cref="T:System.Text.Json.Utf8JsonReader" /> è conforme alla RFC JSON, di conseguenza i commenti all'interno di JSON non sono validi e la profondità massima è pari a 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Inizializza una nuova istanza della struttura <see cref="T:System.Text.Json.Utf8JsonReader" /> che elabora un intervallo di sola lettura del testo con codifica UTF-8 e indica se l'input contiene tutto il testo da elaborare.</summary>
      <param name="jsonData">Testo JSON con codifica UTF-8 da elaborare.</param>
      <param name="isFinalBlock">
        <see langword="true" /> per indicare che la sequenza di input contiene tutti i dati da elaborare; <see langword="false" /> per indicare che l'intervallo di input contiene dati parziali e che seguiranno altri dati.</param>
      <param name="state">Oggetto che contiene lo stato del lettore. Se si tratta della prima chiamata al costruttore, passare lo stato predefinito; in caso contrario, passare il valore della proprietà <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> dall'istanza precedente di <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Inizializza una nuova istanza della struttura <see cref="T:System.Text.Json.Utf8JsonReader" /> che elabora un intervallo di sola lettura del testo con codifica UTF-8 usando le opzioni specificate.</summary>
      <param name="jsonData">Testo JSON con codifica UTF-8 da elaborare.</param>
      <param name="options">Definisce il comportamento personalizzato dell'oggetto <see cref="T:System.Text.Json.Utf8JsonReader" /> che differisce dalla RFC JSON, ad esempio la gestione dei commenti o la profondità massima consentita durante la lettura. Per impostazione predefinita, <see cref="T:System.Text.Json.Utf8JsonReader" /> è conforme alla RFC JSON, di conseguenza i commenti all'interno di JSON non sono validi e la profondità massima è pari a 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary>Legge il valore del token JSON successivo dall'origine come <see cref="T:System.Boolean" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un valore booleano (vale a dire <see cref="F:System.Text.Json.JsonTokenType.True" /> o <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
      <returns>
        <see langword="true" /> se <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> è <see cref="F:System.Text.Json.JsonTokenType.True" />. <see langword="false" /> se <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> è <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary>Analizza il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Byte" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un campo <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il formato numerico del valore del token JSON non è corretto, ad esempio contiene un valore frazionario oppure è scritto in notazione scientifica.
          
-oppure-

Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Byte.MinValue" /> o maggiore di <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary>Analizza il valore del token JSON corrente dall'origine e decodifica la stringa JSON con codifica Base64 come matrice di byte.</summary>
      <exception cref="T:System.InvalidOperationException">Il tipo del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Il valore non è codificato come testo in Base64 e quindi non può essere decodificato in byte.

-oppure-

Il valore contiene caratteri di riempimento non validi o più di due caratteri di riempimento.

-oppure-

Il valore è incompleto. Ovvero, la lunghezza della stringa JSON non è un multiplo di 4.</exception>
      <returns>Matrice di byte che rappresenta il valore del token JSON corrente.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary>Analizza il valore del token JSON corrente dall'origine come commento e lo transcodifica come <see cref="T:System.String" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il token JSON non è un commento.</exception>
      <returns>Commento che rappresenta il valore del token JSON corrente.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.DateTime" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Il valore del token JSON non può essere letto come <see cref="T:System.DateTime" />.
        
-oppure- 
L'intero valore del token con codifica UTF-8 non può essere analizzato come valore <see cref="T:System.DateTime" />.

-oppure-

Il valore del token JSON è in un formato non supportato.</exception>
      <returns>Valore di data e ora se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.DateTimeOffset" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Il valore del token JSON non può essere letto come <see cref="T:System.DateTimeOffset" />.

-oppure- 
L'intero valore del token con codifica UTF-8 non può essere analizzato come valore <see cref="T:System.DateTimeOffset" />.

-oppure-

Il valore del token JSON è in un formato non supportato.</exception>
      <returns>Offset di data e ora se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Decimal" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Decimal.MinValue" /> o maggiore di <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Double" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Double.MinValue" /> o maggiore di <see cref="F:System.Double.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Guid" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Il valore del token JSON è in un formato non supportato per GUID.
        
-oppure-

L'intero valore del token con codifica UTF-8 non può essere analizzato come valore <see cref="T:System.Guid" />.</exception>
      <returns>Valore GUID se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary>Analizza il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Int16" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un campo <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il formato numerico del valore del token JSON non è corretto, ad esempio contiene un valore frazionario oppure è scritto in notazione scientifica.
          
-oppure-

Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Int16.MinValue" /> o maggiore di <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Int32" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il formato numerico del valore del token JSON non è corretto. Ad esempio, contiene un numero decimale o è scritto in notazione scientifica.
            
-oppure-

Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Int32.MinValue" /> o maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Int64" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il formato numerico del valore del token JSON non è corretto. Ad esempio, contiene un numero decimale o è scritto in notazione scientifica.
            
-oppure-

Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Int64.MinValue" /> o maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary>Analizza il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.SByte" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un campo <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il formato numerico del valore del token JSON non è corretto, ad esempio contiene un valore frazionario oppure è scritto in notazione scientifica.
          
-oppure-

Il valore del token JSON rappresenta un numero minore di <see cref="F:System.SByte.MinValue" /> o maggiore di <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.Single" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il valore del token JSON rappresenta un numero minore di <see cref="F:System.Single.MinValue" /> o maggiore di <see cref="F:System.Single.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary>Legge il valore del token JSON successivo dall'origine, senza caratteri di escape e transcodificato come stringa.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è una stringa (vale a dire, non è <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> o <see cref="F:System.Text.Json.JsonTokenType.Null" />).

-oppure-

La stringa JSON contiene byte UTF-8 non validi o surrogati UTF-16 non validi.</exception>
      <returns>Valore del token analizzato come stringa oppure <see langword="null" /> se <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> è <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary>Analizza il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.UInt16" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un campo <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il formato numerico del valore del token JSON non è corretto, ad esempio contiene un valore frazionario oppure è scritto in notazione scientifica.
          
-oppure-

Il valore del token JSON rappresenta un numero minore di <see cref="F:System.UInt16.MinValue" /> o maggiore di <see cref="F:System.UInt16.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.UInt32" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il formato numerico del valore del token JSON non è corretto. Ad esempio, contiene un numero decimale o è scritto in notazione scientifica.

-oppure-

Il valore del token JSON rappresenta un numero minore di <see cref="F:System.UInt32.MinValue" /> o maggiore di <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary>Legge il valore del token JSON successivo dall'origine e lo analizza come <see cref="T:System.UInt64" />.</summary>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Il formato numerico del valore del token JSON non è corretto. Ad esempio, contiene un numero decimale o è scritto in notazione scientifica.
            
-oppure-

Il valore del token JSON rappresenta un numero minore di <see cref="F:System.UInt64.MinValue" /> o maggiore di <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns>Valore del token con codifica UTF-8 analizzato come <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary>Legge il token JSON successivo dall'origine di input.</summary>
      <exception cref="T:System.Text.Json.JsonException">Viene rilevato un token JSON non valido in base a JSON RFC.
        
-oppure-

La profondità corrente supera il limite ricorsivo impostato dalla profondità massima.</exception>
      <returns>
        <see langword="true" /> se il token è stato letto correttamente. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary>Ignora gli elementi figlio del token JSON corrente.</summary>
      <exception cref="T:System.InvalidOperationException">Al lettore sono stati assegnati dati parziali con altri dati a seguire (ovvero <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> è <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException">È stato rilevato un token JSON non valido durante lo spostamento, in base alla RFC JSON.

-oppure-

La profondità corrente supera il limite ricorsivo impostato dalla profondità massima.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Byte" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Byte" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine e decodifica la stringa JSON con codifica Base64 come matrice di byte e restituisce un valore che indica se l'operazione è stata completata.</summary>
      <param name="value">Quando termina, questo metodo contiene la rappresentazione binaria decodificata del testo in Base64.</param>
      <exception cref="T:System.InvalidOperationException">Il token JSON non è <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token è codificato come testo valido in Base64 e può essere decodificato correttamente in byte; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.DateTime" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.DateTime" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.DateTimeOffset" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.DateTimeOffset" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Decimal" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Decimal" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Double" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Double" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Guid" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Guid" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Int16" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Int16" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Int32" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Int32" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Int64" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Int64" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.SByte" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.SByte" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.Single" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.Single" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.UInt16" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.UInt16" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.UInt32" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.UInt32" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary>Prova ad analizzare il valore del token JSON corrente dall'origine come oggetto <see cref="T:System.UInt64" /> e restituisce un valore che indica se l'operazione è riuscita.</summary>
      <param name="value">Quando termina, questo metodo contiene il valore analizzato.</param>
      <exception cref="T:System.InvalidOperationException">Il valore del token JSON non è <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns>
        <see langword="true" /> se l'intero valore del token con codifica UTF-8 può essere analizzato correttamente come valore <see cref="T:System.UInt64" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary>Tenta di ignorare gli elementi figlio del token JSON corrente.</summary>
      <exception cref="T:System.Text.Json.JsonException">È stato rilevato un token JSON non valido durante lo spostamento, in base alla RFC JSON.
          
-oppure-

La profondità corrente supera il limite ricorsivo impostato dalla profondità massima.</exception>
      <returns>
        <see langword="true" /> se sono disponibili dati sufficienti per ignorare correttamente gli elementi figlio. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Confronta il testo con codifica UTF-8 in un intervallo di byte di sola lettura con il valore del token JSON senza caratteri di escape nell'origine e restituisce un valore che indica se corrispondono.</summary>
      <param name="utf8Text">Testo con codifica UTF-8 da usare per il confronto.</param>
      <exception cref="T:System.InvalidOperationException">Il token JSON non è una stringa JSON, ovvero non è <see cref="F:System.Text.Json.JsonTokenType.String" /> o <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" /> se il valore del token JSON nell'origine corrisponde al testo di ricerca con codifica UTF-8; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary>Confronta il testo in un intervallo di caratteri di sola lettura con il valore del token JSON senza caratteri di escape nell'origine e restituisce un valore che indica se corrispondono.</summary>
      <param name="text">Testo con cui eseguire il confronto.</param>
      <exception cref="T:System.InvalidOperationException">Il token JSON non è una stringa JSON, ovvero non è <see cref="F:System.Text.Json.JsonTokenType.String" /> o <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" /> se il valore del token JSON nell'origine corrisponde al testo di ricerca; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary>Confronta il testo della stringa con il valore del token JSON senza caratteri di escape nell'origine e restituisce un valore che indica se corrispondono.</summary>
      <param name="text">Testo con cui eseguire il confronto.</param>
      <exception cref="T:System.InvalidOperationException">Il token JSON non è una stringa JSON, ovvero non è <see cref="F:System.Text.Json.JsonTokenType.String" /> o <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" /> se il valore del token JSON nell'origine corrisponde al testo di ricerca; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary>Ottiene il numero totale di byte usati finora da questa istanza di <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns>Numero totale di byte utilizzati fino a questo momento.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary>Ottiene la profondità del nodo corrente.</summary>
      <returns>Profondità del token corrente.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary>Ottiene lo stato corrente di <see cref="T:System.Text.Json.Utf8JsonReader" /> da passare a un costruttore <see cref="T:System.Text.Json.Utf8JsonReader" /> con altri dati.</summary>
      <returns>Stato corrente del lettore.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary>Ottiene un valore che indica quale proprietà <c>Value</c> usare per ottenere il valore del token.</summary>
      <returns>
        <see langword="true" /> Se <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> deve essere utilizzato per ottenere il valore del token; <see langword="false" /> se <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> deve essere utilizzato.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary>Ottiene la modalità di questa istanza di <see cref="T:System.Text.Json.Utf8JsonReader" />, che indica se sono stati specificati tutti i dati JSON o se sono previsti altri dati.</summary>
      <returns>
        <see langword="true" /> Se il Reader è stato costruito con l'intervallo di input o la sequenza contenente l'intero dati JSON da elaborare; <see langword="false" /> se il Reader è stato costruito con un intervallo di input o una sequenza che può contenere dati JSON parziali con più dati da seguire.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary>Ottiene l'oggetto corrente <see cref="T:System.SequencePosition" /> all'interno della sequenza ReadOnlySequence&lt;byte&gt; di input con codifica UTF-8 fornita o una <see cref="T:System.SequencePosition" /> predefinita se lo struct <see cref="T:System.Text.Json.Utf8JsonReader" /> è stato costruito con ReadOnlySpan&lt;byte&gt;.</summary>
      <returns>Oggetto corrente <see cref="T:System.SequencePosition" /> all'interno del byte ReadOnlySequence di input con codifica UTF-8 specificato &lt; &gt; o valore predefinito <see cref="T:System.SequencePosition" /> se lo <see cref="T:System.Text.Json.Utf8JsonReader" /> struct è stato costruito con un &lt; byte ReadOnlySpan &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary>Ottiene l'indice in corrispondenza del quale inizia l'ultimo token JSON elaborato (all'interno del testo di input con codifica UTF-8 specificato), ignorando eventuali spazi vuoti.</summary>
      <returns>Indice iniziale dell'ultimo token JSON elaborato all'interno del testo di input con codifica UTF-8 specificato.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary>Ottiene il tipo dell'ultimo token JSON elaborato nel testo JSON con codifica UTF-8.</summary>
      <returns>Tipo dell'ultimo token JSON elaborato.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary>Ottiene il valore non elaborato dell'ultimo token elaborato come sezione di ReadOnlySequence&lt;byte&gt; del payload di input, solo se il token è contenuto in diversi segmenti.</summary>
      <returns>Sequenza di sola lettura di byte.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary>Ottiene il valore non elaborato dell'ultimo token elaborato come sezione di ReadOnlySpan&lt;byte&gt; del payload di input, se il token è contenuto in un solo segmento o se il lettore è stato costruito con un payload JSON contenuto in un oggetto ReadOnlySpan&lt;byte&gt;.</summary>
      <returns>Intervallo di sola lettura di byte.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary>Fornisce un'API ad alte prestazioni per la scrittura di tipo forward-only, non memorizzata nella cache di testo JSON con codifica UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> scrivendo l'output nell'oggetto <see cref="T:System.Buffers.IBufferWriter`1" /> specificato e usando le opzioni di personalizzazione.</summary>
      <param name="bufferWriter">Destinazione per la scrittura di testo JSON.</param>
      <param name="options">Definisce il comportamento personalizzato di <see cref="T:System.Text.Json.Utf8JsonWriter" />. Per impostazione predefinita scrive JSON ridotto (senza spazi aggiuntivi) e verifica che il codice JSON scritto sia strutturalmente valido in base alla RFC JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> scrivendo l'output nel flusso specificato e usando le opzioni di personalizzazione.</summary>
      <param name="utf8Json">Destinazione per la scrittura di testo JSON.</param>
      <param name="options">Definisce il comportamento personalizzato di <see cref="T:System.Text.Json.Utf8JsonWriter" />. Per impostazione predefinita scrive JSON ridotto (senza spazi aggiuntivi) e verifica che il codice JSON scritto sia strutturalmente valido in base alla RFC JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary>Esegue il commit dell'eventuale testo JSON che non è ancora stato scaricato e rilascia tutte le risorse usate dall'istanza corrente.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary>Esegue il commit in modalità asincrona dell'eventuale testo JSON che non è ancora stato scaricato e rilascia tutte le risorse usate dall'istanza corrente.</summary>
      <returns>Attività che rappresenta l'operazione di eliminazione asincrona.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary>Esegue il commit del testo JSON scritto fino al momento, il che lo rende visibile alla destinazione di output.</summary>
      <exception cref="T:System.ObjectDisposedException">L'istanza è stata eliminata.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>Esegue il commit in modalità asincrona del testo JSON scritto fino al momento, il che lo rende visibile alla destinazione di output.</summary>
      <param name="cancellationToken">Token da monitorare per le richieste di annullamento. Il valore predefinito è <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <exception cref="T:System.ObjectDisposedException">L'istanza è stata eliminata.</exception>
      <returns>Attività che rappresenta l'operazione di scaricamento asincrona.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary>Reimposta lo stato interno di questa istanza in modo da poterla riusare.</summary>
      <exception cref="T:System.ObjectDisposedException">L'istanza è stata eliminata.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary>Reimposta lo stato interno di questa istanza in modo da poterla riusare con una nuova istanza di <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter">Destinazione per la scrittura di testo JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'istanza è stata eliminata.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary>Reimposta lo stato interno di questa istanza in modo da poterla riusare con una nuova istanza di <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json">Destinazione per la scrittura di testo JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'istanza è stata eliminata.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il nome della proprietà e il valore dei byte non elaborati (come stringa JSON con codifica base 64) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome con codifica UTF-8 della proprietà da scrivere.</param>
      <param name="bytes">Dati binari da scrivere come testo con codifica Base64.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il nome della proprietà e il valore dei byte non elaborati (come stringa JSON con codifica base 64) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="bytes">Dati binari da scrivere come testo con codifica Base64.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il nome della proprietà e il valore dei byte non elaborati (come stringa JSON con codifica base 64) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="bytes">Dati binari da scrivere come testo con codifica Base64.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il nome della proprietà precodificato e il valore dei byte non elaborati (come stringa JSON con codifica Base64) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome con codifica JSON della proprietà da scrivere.</param>
      <param name="bytes">Dati binari da scrivere come testo con codifica Base64.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il valore dei byte non elaborati come stringa JSON con codifica Base64 come elemento di una matrice JSON.</summary>
      <param name="bytes">Dati binari da scrivere come elemento stringa JSON con codifica Base64 di una matrice JSON.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>Scrive il nome di una proprietà specificato come intervallo di byte di sola lettura e un valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come valore letterale JSON true o false come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>Scrive il nome di una proprietà specificato come intervallo di caratteri di sola lettura e un valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come valore letterale JSON true o false come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come valore letterale JSON true o false come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come valore letterale JSON true o false come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary>Scrive un valore <see cref="T:System.Boolean" /> (come valore letterale JSON true o false) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come valore letterale JSON true o false come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary>Scrive un valore di testo UTF-8 come commento JSON.</summary>
      <param name="utf8Value">Valore con codifica UTF-8 da scrivere come commento JSON all'interno di <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.
        
-oppure-

<paramref name="utf8Value" /> contiene un delimitatore di commento (ovvero <c>*/</c> ).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary>Scrive un valore di testo UTF-16 come commento JSON.</summary>
      <param name="value">Valore con codifica UTF-16 da scrivere come commento JSON transcodificato UTF-8 all'interno di <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.
        
-oppure-

<paramref name="value" /> contiene un delimitatore di commento (ovvero <c>*/</c> ).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary>Scrive un valore di testo stringa come commento JSON.</summary>
      <param name="value">Valore con codifica UTF-16 da scrivere come commento JSON transcodificato UTF-8 all'interno di <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.
        
-oppure-

<paramref name="value" /> contiene un delimitatore di commento (ovvero <c>*/</c> ).</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary>Scrive la fine di una matrice JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary>Scrive la fine di un oggetto JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il nome di una proprietà specificato come intervallo di byte di sola lettura e un valore letterale JSON null come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary>Scrive il nome di una proprietà specificato come intervallo di caratteri di sola lettura e un valore letterale JSON null come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary>Scrive il nome di una proprietà specificato come stringa e il valore letterale JSON null come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary>Scrive il nome della proprietà precodificato e il valore letterale JSON null come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary>Scrive il valore letterale JSON null come elemento di una matrice JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary>Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Decimal" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary>Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Double" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Int32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary>Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Int64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary>Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.Single" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary>Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.UInt32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary>Scrive il nome di una proprietà specificato come estensione di byte di sola lettura e un valore <see cref="T:System.UInt64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Decimal" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Double" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Int32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Int64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Single" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.UInt32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.UInt64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Decimal" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Double" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Int32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Int64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Single" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.UInt32" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.UInt64" /> (come un numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Decimal" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Double" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Int32" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Int64" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Single" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.UInt32" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.UInt64" /> (come numero JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come numero JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary>Scrive un valore <see cref="T:System.Decimal" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary>Scrive un valore <see cref="T:System.Double" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary>Scrive un valore <see cref="T:System.Int32" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary>Scrive un valore <see cref="T:System.Int64" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary>Scrive un valore <see cref="T:System.Single" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary>Scrive un valore <see cref="T:System.UInt32" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary>Scrive un valore <see cref="T:System.UInt64" /> (come numero JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come numero JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il nome della proprietà UTF-8 (come stringa JSON) come prima parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary>Scrive il nome della proprietà(come stringa JSON) come prima parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary>Scrive il nome della proprietà(come stringa JSON) come prima parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary>Scrive il nome della proprietà precodificato (come stringa JSON) come prima parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary>Scrive l'inizio di una matrice JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON supera la profondità massima pari a 1.000.

-oppure-

La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary>Scrive l'inizio di una matrice JSON con un nome di proprietà specificato con un'estensione di byte di sola lettura come chiave.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 della matrice JSON da scrivere.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON supera la profondità massima pari a 1.000.

-oppure-
       
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary>Scrive l'inizio di una matrice JSON con un nome di proprietà specificato con un'estensione di caratteri di sola lettura come chiave.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 della matrice JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON supera la profondità massima pari a 1.000.

-oppure-
       
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary>Scrive l'inizio di una matrice JSON con un nome di proprietà specificato con una stringa come chiave.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 della matrice JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON supera la profondità massima pari a 1.000.

-oppure-
       
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary>Scrive l'inizio di una matrice JSON con un nome di proprietà precodificato come chiave.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON della matrice JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON ha superato la profondità massima pari a 1.000.
    
-oppure-

La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary>Scrive l'inizio di un oggetto JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON supera la profondità massima pari a 1.000.

-oppure-

La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary>Scrive l'inizio di un oggetto JSON con un nome di proprietà specificato con un'estensione di byte di sola lettura come chiave.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON supera la profondità massima pari a 1.000. 

-oppure-
       
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary>Scrive l'inizio di un oggetto JSON con un nome di proprietà specificato con un'estensione di caratteri di sola lettura come chiave.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON supera la profondità massima pari a 1.000. 

-oppure-
       
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary>Scrive l'inizio di un oggetto JSON con un nome di proprietà specificato con una stringa come chiave.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON supera la profondità massima pari a 1.000. 

-oppure-
       
La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary>Scrive l'inizio di un oggetto JSON con un nome di proprietà precodificato come chiave.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">La profondità dei dati JSON ha superato la profondità massima pari a 1.000.
          
-oppure-

La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary>Scrive un nome di proprietà UTF-8 e un valore <see cref="T:System.DateTime" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary>Scrive un nome di proprietà UTF-8 e un valore <see cref="T:System.DateTimeOffset" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary>Scrive un nome di proprietà UTF-8 e un valore <see cref="T:System.Guid" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Scrive un nome di proprietà UTF-8 e un valore di testo UTF-8 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="utf8Value">Valore con codifica UTF-8 da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary>Scrive un nome di proprietà UTF-8 e un valore di testo UTF-16 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary>Scrive un nome di proprietà UTF-8 e un valore stringa di testo (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary>Scrive il nome della proprietà UTF-8 e il valore precodificato (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="utf8PropertyName">Nome della proprietà con codifica UTF-8 dell'oggetto JSON da scrivere.</param>
      <param name="value">Valore con codifica JSON da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e questo metodo comporterebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.DateTime" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.DateTimeOffset" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary>Scrive il nome di una proprietà specificato come estensione di caratteri di sola lettura e un valore <see cref="T:System.Guid" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Scrive un nome di proprietà UTF-16 e un valore di testo UTF-8 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="utf8Value">Valore con codifica UTF-8 da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Scrive un nome di proprietà UTF-16 e un valore di testo UTF-16 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Scrive un nome di proprietà UTF-16 e un valore stringa di testo (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary>Scrive il nome della proprietà e il valore precodificato (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore con codifica JSON da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.DateTime" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.DateTimeOffset" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore <see cref="T:System.Guid" /> (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore di testo UTF-8 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="utf8Value">Valore con codifica UTF-8 da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore di testo UTF-16 (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary>Scrive il nome di una proprietà specificato come una stringa e un valore stringa di testo (come una stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica UTF-16 dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore con codifica UTF-16 da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome o il valore della proprietà specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary>Scrive il nome della proprietà e il valore precodificato (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore con codifica JSON da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il nome della proprietà specificato è troppo lungo.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.DateTime" /> (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.DateTimeOffset" /> (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary>Scrive il nome della proprietà precodificato e il valore <see cref="T:System.Guid" /> (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Scrive il nome della proprietà precodificato e il valore di testo UTF-8 (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="utf8Value">Valore con codifica UTF-8 da scrivere come stringa JSON come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary>Scrive il nome della proprietà precodificato e il valore di testo (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary>Scrive il nome della proprietà precodificato e il valore della stringa di testo (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary>Scrive il nome della proprietà precodificato e il valore precodificato (come stringa JSON) come parte di una coppia nome/valore di un oggetto JSON.</summary>
      <param name="propertyName">Nome della proprietà con codifica JSON dell'oggetto JSON da transcodificare e scrivere come UTF-8.</param>
      <param name="value">Valore con codifica JSON da scrivere come stringa JSON transcodificata UTF-8 come parte della coppia nome/valore.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary>Scrive un valore <see cref="T:System.DateTime" /> (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come stringa JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary>Scrive un valore <see cref="T:System.DateTimeOffset" /> (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come stringa JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary>Scrive un valore <see cref="T:System.Guid" /> (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore da scrivere come stringa JSON come elemento di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione produrrebbe la scrittura di codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Scrive un valore di testo UTF-8 (come stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="utf8Value">Valore con codifica UTF-8 da scrivere come elemento di stringa JSON di una matrice JSON.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary>Scrive un valore di testo UTF-16 (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore con codifica UTF-16 da scrivere come elemento di stringa JSON transcodificato UTF-8 di una matrice JSON.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary>Scrive un valore stringa di testo (come una stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore con codifica UTF-16 da scrivere come elemento di stringa JSON transcodificato UTF-8 di una matrice JSON.</param>
      <exception cref="T:System.ArgumentException">Il valore specificato è troppo grande.</exception>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary>Scrive il valore di testo precodificato (come stringa JSON) come elemento di una matrice JSON.</summary>
      <param name="value">Valore con codifica JSON da scrivere come elemento di stringa JSON transcodificato UTF-8 di una matrice JSON.</param>
      <exception cref="T:System.InvalidOperationException">La convalida è abilitata e l'operazione di scrittura produrrebbe codice JSON non valido.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary>Ottiene il numero totale di byte di cui è stato eseguito il commit nell'output dall'istanza fino al momento corrente.</summary>
      <returns>Numero totale di byte di cui è stato eseguito il commit nell'output da fino a questo <see cref="T:System.Text.Json.Utf8JsonWriter" /> momento.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary>Ottiene il numero di byte scritti da <see cref="T:System.Text.Json.Utf8JsonWriter" /> fino a questo momento che non sono ancora stati scaricati nell'output e sottoposti a commit.</summary>
      <returns>Numero di byte scritti finora dall'oggetto <see cref="T:System.Text.Json.Utf8JsonWriter" /> che non sono stati ancora scaricati nell'output e di cui è stato eseguito il commit.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary>Ottiene la profondità del nodo corrente.</summary>
      <returns>Profondità del token corrente.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary>Ottiene il comportamento personalizzato durante la scrittura di codice JSON tramite questa istanza, che indica se formattare l'output durante la scrittura, se ignorare la convalida strutturale JSON e quali caratteri di escape usare.</summary>
      <returns>Comportamento personalizzato di questa istanza del writer per la formattazione, la convalida e l'escape.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">実行前の状態、実行後の状態、オブジェクトの不変部分などのプログラム コントラクトを表す静的メソッドを格納します。</summary>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">コントラクトが失敗すると発生します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">条件をチェックし、その条件が <see langword="false" /> の場合は、アナライザーに設定されたエスカレーション ポリシーに従います。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">条件をチェックし、その条件が <see langword="false" /> の場合は、アナライザーによって設定されたエスカレーション ポリシーに従い、指定されたメッセージを表示します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">条件が一致しない場合に表示するメッセージ。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> であるとは静的に証明されない場合でも、指定された条件が <see langword="true" /> であると想定するようコード分析ツールに指示します。</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> に想定する条件式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">常に <see langword="true" /> であるとは静的に証明されない場合でも、条件が <see langword="true" /> であると想定するようコード分析ツールに指示し、想定が失敗した場合はメッセージを表示します。</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> に想定する条件式。</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">想定が失敗した場合にポストするメッセージ。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">メソッドのコントラクトに <see langword="if" />-<see langword="then" />-<see langword="throw" /> の形式で実行前の状態のみが含まれる場合に、コントラクト セクションの終わりをマークします。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">外側のメソッドまたはプロパティの実行後の状態のコントラクトを指定します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">テストする条件式。 式には <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />、<see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" />、および <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> の各値を使用できます。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">指定された終了条件の実行後の状態のコントラクトと、条件が <see langword="false" /> の場合に表示するメッセージを指定します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">テストする条件式。 式には <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> および <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> の各値を使用できます。</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">式が <see langword="true" /> でない場合に表示するメッセージ。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">指定された例外および条件に基づいて、外側のメソッドまたはプロパティに実行後の状態のコントラクトを指定します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">実行後の状態のチェックを起動する例外の種類。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">指定された例外および条件に基づいて、実行後の状態のコントラクトと、外側のメソッドまたはプロパティの条件が <see langword="false" /> の場合に表示するメッセージを指定します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">式が <see langword="false" /> の場合に表示するメッセージ。</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">実行後の状態のチェックを起動する例外の種類。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">ある整数範囲内のすべての整数について指定したテストが true かどうかを判定します。</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" /> に渡す最初の整数。</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" /> に渡す最後の整数より 1 だけ大きい数。</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">指定した範囲内の任意の整数値を評価する関数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> は <paramref name="fromInclusive" /> より小さい値です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <paramref name="predicate" /> から <paramref name="fromInclusive" /> - 1 の範囲の任意の整数に対して、<paramref name="toExclusive" /> が <see langword="true" /> を返す場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">ある要素のコレクション内の要素が関数内に存在するかどうかを判断します。</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" /> に渡される型 <c>T</c> の要素が含まれているコレクション。</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" /> 内の要素を評価する関数。</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" /> に格納されている型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> または <paramref name="predicate" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="predicate" /> 内の型 <paramref name="T" /> の任意の要素に対して、<paramref name="collection" /> が <see langword="true" /> を返す場合にのみ <see langword="true" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">指定した範囲内のすべての整数について特定の状態が有効かどうかを判定します。</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" /> に渡す最初の整数。</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" /> に渡す最後の整数より 1 だけ大きい数。</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">指定された範囲の整数の存在を評価する関数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> は <paramref name="fromInclusive" /> より小さい値です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <paramref name="predicate" /> から <paramref name="fromInclusive" /> - 1 の範囲のすべての整数に対して、<paramref name="toExclusive" /> が <see langword="true" /> を返す場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">コレクション内のすべての要素が関数内に存在するかどうかを判断します。</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <paramref name="predicate" /> に渡される型 <c>T</c> の要素が含まれているコレクション。</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" /> 内のすべての要素の存在を評価する関数。</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="collection" /> に格納されている型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> または <paramref name="predicate" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <paramref name="predicate" /> 内の型 <paramref name="T" /> のすべての要素に対して、<paramref name="collection" /> が <see langword="true" /> を返す場合にのみ <see langword="true" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">外側のメソッドまたはプロパティの不変コントラクトを指定します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">外側のメソッドまたはプロパティの不変コントラクトを指定し、コントラクトの条件が失敗した場合はメッセージを表示します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件が <see langword="false" /> の場合に表示するメッセージ。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">メソッドまたはプロパティの開始時の値を表します。</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">表す値 (フィールドまたはパラメーター)。</param>
      <typeparam name="T" vsli:raw="The type of value.">値の型。</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">メソッドまたはプロパティの開始時のフィールドまたはパラメーターの値。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定し、コントラクトの条件が失敗した場合はメッセージを表示します。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件が <see langword="false" /> の場合に表示するメッセージ。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定し、コントラクトの条件が失敗した場合は例外をスローします。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件が <see langword="false" /> の場合にスローする例外。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">外側のメソッドまたはプロパティの実行前の状態のコントラクトを指定し、コントラクトの条件が失敗した場合は指定されたメッセージで例外をスローします。</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">テストする条件式。</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件が <see langword="false" /> の場合に表示するメッセージ。</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件が <see langword="false" /> の場合にスローする例外。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">メソッドまたはプロパティの戻り値を表します。</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">外側のメソッドまたはプロパティの戻り値の型。</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">外側のメソッドまたはプロパティの戻り値。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">メソッドから戻るときの <see langword="out" /> パラメーターの最後の (出力) 値を表します。</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> パラメーター。</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> パラメーターの型。</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">
        <see langword="out" /> パラメーターの出力値。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">完全なコントラクトの構文の代わりに使用できる省略を定義します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">再利用できるように異なるメソッドへのレガシ <see langword="if-then-throw" /> コードのファクタリングを有効にし、スローされる例外と引数のフル コントロールを提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">別の型にこの型のコード コントラクトが含まれるように指定します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">この型のコード コントラクトを格納する型。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">この型のコード コントラクトを格納する型を取得します。</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">この型のコード コントラクトを格納する型。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">クラスが型のコントラクトであることを指定します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">現在のクラスがコントラクトである型を使用して、<see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">現在のクラスがコントラクトである型。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">このコード コントラクトが適用される型を取得します。</summary>
      <returns vsli:raw="The type that this contract applies to.">このコード コントラクトが適用される型。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> イベントのメソッドおよびデータを提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> イベントのデータを提供します。</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">失敗したコントラクトを指定する列挙値の 1 つ。</param>
      <param name="message" vsli:raw="The message for the event.">イベントに関するメッセージ。</param>
      <param name="condition" vsli:raw="The condition for the event.">イベントの条件。</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">イベントの原因になる例外。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> プロパティを <see langword="true" /> に設定します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> プロパティを <see langword="true" /> に設定します。</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">コントラクトのエラーの条件を取得します。</summary>
      <returns vsli:raw="The condition for the failure.">エラーの条件。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">失敗したコントラクトの型を取得します。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">失敗したコントラクトの型を指定する列挙値の 1 つ。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> イベントが処理されたかどうかを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">イベントが処理済みである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> イベントを説明するメッセージを取得します。</summary>
      <returns vsli:raw="The message that describes the event.">イベントを説明するメッセージ。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">
        <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> イベントの原因となった元の例外を取得します。</summary>
      <returns vsli:raw="The exception that caused the event.">イベントの原因になる例外。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">コードのコントラクトのエスカレーション ポリシーを適用するかどうかを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">エスカレーション ポリシーを適用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">失敗したコントラクトの型を指定します。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> コントラクトが失敗しました。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> コントラクトが失敗しました。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> コントラクトが失敗しました。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> コントラクトが失敗しました。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> コントラクトが失敗しました。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> コントラクトが失敗しました。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">クラスのインバリアント メソッドとしてメソッドをマークします。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">アセンブリ、型、またはメソッドの粒度でコントラクトおよびツールのオプションを設定できるようにします。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">指定したカテゴリ、設定、および有効/無効値を使用して、<see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="category" vsli:raw="The category for the option to be set.">設定するオプションのためのカテゴリ。</param>
      <param name="setting" vsli:raw="The option setting.">オプションの設定。</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">オプションを有効にする場合は <see langword="true" />。オプションを無効にする場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">指定したカテゴリ、設定、および値を使用して、<see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="category" vsli:raw="The category of the option to be set.">設定するオプションのカテゴリ。</param>
      <param name="setting" vsli:raw="The option setting.">オプションの設定。</param>
      <param name="value" vsli:raw="The value for the setting.">設定の値。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">オプションのカテゴリを取得します。</summary>
      <returns vsli:raw="The category of the option.">オプションのカテゴリ。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">オプションが有効かどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オプションが有効になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">オプションの設定を取得します。</summary>
      <returns vsli:raw="The setting for the option.">オプションの設定。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">オプションの値を取得します。</summary>
      <returns vsli:raw="The value for the option.">オプションの値。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">フィールドの可視性がメソッドよりも少ない場合、フィールドを メソッドのコントラクトで使用できることを指定します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">フィールドに適用されるプロパティの名前。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">フィールドに適用されるプロパティ名を取得します。</summary>
      <returns vsli:raw="The property name to be applied to the field.">フィールドに適用されたプロパティ名。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">アセンブリがコントラクトを含む参照アセンブリであることを指定します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">実行時に動作しないメンバーを識別します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">静的な検証を実行せずに、アセンブリ、型、またはメンバーが正確であると想定するよう分析ツールに指示します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">検証を要求する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">ターゲットのコントラクトを検証するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">検証が必要な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">型またはメソッドが純粋なこと、つまり、表示状態を変更しないことを示します。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">バイナリ リライターがコントラクト エラーの処理に使用するメソッドを提供します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">バイナリ リライターが既定のエラー動作をアクティブにするために使用します。</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">エラーの種類を指定する列挙値の 1 つ。</param>
      <param name="userMessage" vsli:raw="Additional user information.">追加のユーザー情報。</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">エラーの原因となった条件の説明。</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">現在の例外を発生させた内部例外。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> は正しい <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> 値ではありません。</exception>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">イベントが処理されて、エラーが発生しない場合は null 参照 (Visual Basic の場合は <see langword="Nothing" />)。それ以外の場合はローカライズされたエラー メッセージが返されます。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">既定のエラー動作を発生させます。</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">エラーの種類を指定する列挙値の 1 つ。</param>
      <param name="displayMessage" vsli:raw="The message to display.">表示するメッセージ。</param>
      <param name="userMessage" vsli:raw="Additional user information.">追加のユーザー情報。</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">エラーの原因となった条件の説明。</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">現在の例外を発生させた内部例外。</param>
    </member>
  </members>
</doc>
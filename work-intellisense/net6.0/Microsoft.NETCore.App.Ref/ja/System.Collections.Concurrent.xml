<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Concurrent</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Concurrent.BlockingCollection`1">
      <summary vsli:raw="Provides blocking and bounding capabilities for thread-safe collections that implement &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> を実装するスレッド セーフなコレクションに、ブロッキングと範囲指定の機能を提供します。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class without an upper-bound.">上限を指定せずに、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class without an upper-bound and using the provided &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; as its underlying data store.">上限を指定せずに、指定した <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> を基になるデータ ストアとして使用して、<see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection to use as the underlying data store.">基になるデータ ストアとして使用するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">
        <paramref name="collection" /> 引数が null です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class with the specified upper-bound and using the provided &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; as its underlying data store.">上限を指定し、指定した <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> を基になるデータ ストアとして使用して、<see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection to use as the underlying data store.">基になるデータ ストアとして使用するコレクション。</param>
      <param name="boundedCapacity" vsli:raw="The bounded size of the collection.">コレクションのサイズの制限。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">
        <paramref name="collection" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;boundedCapacity&quot; /&gt; is not a positive value.">
        <paramref name="boundedCapacity" /> は正の値ではありません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The supplied &lt;paramref name=&quot;collection&quot; /&gt; contains more values than is permitted by &lt;paramref name=&quot;boundedCapacity&quot; /&gt;.">指定された <paramref name="collection" /> に、<paramref name="boundedCapacity" /> によって許可されているよりも多い値が含まれています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class with the specified upper-bound.">上限を指定して、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="boundedCapacity" vsli:raw="The bounded size of the collection.">コレクションのサイズの制限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;boundedCapacity&quot; /&gt; is not a positive value.">
        <paramref name="boundedCapacity" /> は正の値ではありません。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)">
      <summary vsli:raw="Adds the item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> に項目を追加します。</summary>
      <param name="item" vsli:raw="The item to be added to the collection. The value can be a null reference.">コレクションに追加する項目。 この値は null 参照でもかまいません。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は、追加に関して完了としてマークされました。  
  
- または - 
基になるコレクションが項目を受け入れませんでした。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
      <summary vsli:raw="Adds the item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> に項目を追加します。</summary>
      <param name="item" vsli:raw="The item to be added to the collection. The value can be a null reference.">コレクションに追加する項目。 この値は null 参照でもかまいません。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">観察するキャンセル トークン。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> が取り消されている場合。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that owns &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が破棄されているか、<paramref name="cancellationToken" /> を所有する <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は、追加に関して完了としてマークされました。  
  
- または - 
基になるコレクションが項目を受け入れませんでした。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary vsli:raw="Adds the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスに、指定した項目を追加します。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">いずれかのコレクションに追加する項目。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれます。または 1 つ以上のコレクションが追加完了としてマークされています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">1 つ以上の基になるコレクションで項目が受け入れられませんでした。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added.">項目が追加された <paramref name="collections" /> 配列内のコレクションのインデックス。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)">
      <summary vsli:raw="Adds the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスに、指定した項目を追加します。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">いずれかのコレクションに追加する項目。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">観察するキャンセル トークン。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> が取り消されている場合。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">1 つ以上の基になるコレクションで項目が受け入れられませんでした。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれます。または 1 つ以上のコレクションが追加完了としてマークされています。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed, or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されているか、<paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されています。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added.">項目が追加された <paramref name="collections" /> 配列内のコレクションのインデックス。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding">
      <summary vsli:raw="Marks the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances as not accepting any more additions.">それ以上追加を受け入れないように、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスをマークします。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies all of the items in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance to a compatible one-dimensional array, starting at the specified index of the target array.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス内のすべての項目を、互換性のある 1 次元配列にコピーします。コピー操作は、コピー先の配列の、指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスから要素がコピーされる先の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; argument is null.">
        <paramref name="array" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is less than zero.">
        <paramref name="index" /> 引数は 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA; The destination array is too small to hold all of the BlockingCollection elements.&#xA;&#xA; The array rank doesn't match.&#xA;&#xA; The array type is incompatible with the type of the BlockingCollection elements.">
        <paramref name="index" /> 引数は <paramref name="array" /> の長さ以上です。  
  
目的の配列は小さすぎるため、すべての BlockingCollection 要素を保持できません。  
  
配列ランクが一致しません。  
  
配列型は BlockingCollection 要素の型と互換性がありません。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)">
      <summary vsli:raw="Releases resources used by the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスによって使用されているリソースを解放します。</summary>
      <param name="disposing" vsli:raw="Whether being disposed explicitly (true) or due to a finalizer (false).">明示的に破棄される場合は true、ファイナライザーによる場合は false。</param>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable">
      <summary vsli:raw="Provides a consuming &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for items in the collection.">コレクション内の項目を取り出す <see cref="T:System.Collections.Generic.IEnumerator`1" /> を提供します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that removes and returns items from the collection.">コレクションから項目を削除して返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
      <summary vsli:raw="Provides a consuming &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for items in the collection.">コレクション内の項目を取り出す <see cref="T:System.Collections.Generic.IEnumerable`1" /> を提供します。</summary>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">観察するキャンセル トークン。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> が取り消されている場合。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が破棄されているか、<paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されています。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that removes and returns items from the collection.">コレクションから項目を削除して返す <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Provides an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; for items in the collection.">コレクション内の項目に対する <see cref="T:System.Collections.Generic.IEnumerator`1" /> を提供します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; for the items in the collection.">コレクション内の項目に対する <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies all of the items in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance to a compatible one-dimensional array, starting at the specified index of the target array.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス内のすべての項目を、互換性のある 1 次元配列にコピーします。コピー操作は、コピー先の配列の、指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスから要素がコピーされる先の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; argument is null.">
        <paramref name="array" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is less than zero.">
        <paramref name="index" /> 引数は 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.">
        <paramref name="index" /> 引数が <paramref name="array" /> の長さ以上か、配列が多次元か、またはコレクションの型パラメーターを自動的にコピー先の配列の型にキャストできません。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Provides an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for items in the collection.">コレクション内の項目に対する <see cref="T:System.Collections.IEnumerator" /> を提供します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the items in the collection.">コレクション内の項目に対する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take">
      <summary vsli:raw="Removes an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> から項目を削除します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance, or the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; is empty and has been marked as complete with regards to additions.">基になるコレクションがこの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスの外で変更されました。または、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が空で、コレクションが追加完了としてマークされています。</exception>
      <exception cref="T:System.OperationCanceledException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は空であり、追加に関して完了としてマークされました。</exception>
      <returns vsli:raw="The item that was removed from the collection.">コレクションから削除される項目。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)">
      <summary vsli:raw="Removes an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> から項目を削除します。</summary>
      <param name="cancellationToken" vsli:raw="A token that can be used to cancel the &quot;take&quot; operation.">取得操作を取り消すために使用できるオブジェクト。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> は取り消されます。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が破棄されているか、トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> が取り消されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance, or the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; is empty and has been marked as complete with regards to additions.">基になるコレクションがこの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスの外で変更されたか、BlockingCollection が追加完了としてマークされているか、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が空です。</exception>
      <returns vsli:raw="The item that was removed from the collection.">コレクションから削除される項目。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary vsli:raw="Takes an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスから項目を取得します。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">いずれかのコレクションから削除される項目。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element or &lt;see cref=&quot;M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding&quot; /&gt; has been called on the collection.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれています。または、<see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> がコレクションで呼び出されました。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">1 つ以上の基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス以外で変更されました。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed.">項目が削除された <paramref name="collections" /> 配列内のコレクションのインデックス。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)">
      <summary vsli:raw="Takes an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances while observing the specified cancellation token.">指定したキャンセル トークンを観察しながら、指定した <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスのいずれかから項目を取得します。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">いずれかのコレクションから削除される項目。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">観察するキャンセル トークン。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> が取り消されている場合。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">1 つ以上の基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス以外で変更されました。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or &lt;see cref=&quot;M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding&quot; /&gt; has been called on the collection.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれています。または、<see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> がコレクションで呼び出されました。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed.">項目が削除された <paramref name="collections" /> 配列内のコレクションのインデックス。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.ToArray">
      <summary vsli:raw="Copies the items from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance into a new array.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスの項目を新しい配列にコピーします。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="An array containing copies of the elements of the collection.">コレクションの要素のコピーを格納する配列。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> に対して、指定した項目の追加を試みます。</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">コレクションに追加する項目。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は、追加に関して完了としてマークされました。  
  
- または - 
基になるコレクションが項目を受け入れませんでした。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; could be added; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">
        <paramref name="item" /> を追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 項目が重複しており、基になるコレクションが項目の重複を受け入れない場合は、<see cref="T:System.InvalidOperationException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; within the specified time period.">指定した期間内に、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> に対して指定した項目の追加を試みます。</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">コレクションに追加する項目。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は、追加に関して完了としてマークされました。  
  
- または - 
基になるコレクションが項目を受け入れませんでした。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">指定した時間内にコレクションに <paramref name="item" /> を追加できた場合は <see langword="true" />。それ以外の場合は false。 項目が重複しており、基になるコレクションが項目の重複を受け入れない場合は、<see cref="T:System.InvalidOperationException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; within the specified time period, while observing a cancellation token.">キャンセル トークンを観察しながら、指定した期間内に、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> に対して指定した項目の追加を試みます。</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">コレクションに追加する項目。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">観察するキャンセル トークン。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> が取り消されている場合。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the underlying &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が破棄されているか、または基になっている <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は、追加に関して完了としてマークされました。  
  
- または - 
基になるコレクションが項目を受け入れませんでした。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">指定した時間内にコレクションに <paramref name="item" /> を追加できた場合は <see langword="true" />。それ以外の場合は false。 項目が重複しており、基になるコレクションが項目の重複を受け入れない場合は、<see cref="T:System.InvalidOperationException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> に対して、指定した項目の追加を試みます。</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">コレクションに追加する項目。</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。または、タイムアウトが <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は、追加に関して完了としてマークされました。  
  
- または - 
基になるコレクションが項目を受け入れませんでした。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time span; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した期間内にコレクションに <paramref name="item" /> を追加できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスに対して、指定した項目の追加を試みます。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">いずれかのコレクションに追加する項目。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれます。または 1 つ以上のコレクションが追加完了としてマークされています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">1 つ以上の基になるコレクションで項目が受け入れられませんでした。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">
        <paramref name="collections" /> 配列内の、項目が追加されたコレクションのインデックス。項目を追加できなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスに対して、指定した項目の追加を試みます。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">いずれかのコレクションに追加する項目。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。 
- または - 
<paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれます。または 1 つ以上のコレクションが追加完了としてマークされています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">1 つ以上の基になるコレクションで項目が受け入れられませんでした。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">
        <paramref name="collections" /> 配列内の、項目が追加されたコレクションのインデックス。項目を追加できなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスに対して、指定した項目の追加を試みます。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">いずれかのコレクションに追加する項目。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">観察するキャンセル トークン。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> が取り消されている場合。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">1 つ以上の基になるコレクションで項目が受け入れられませんでした。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。 
- または - 
<paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれます。または 1 つ以上のコレクションが追加完了としてマークされています。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">
        <paramref name="collections" /> 配列内の、項目が追加されたコレクションのインデックス。項目を追加できなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances while observing the specified cancellation token.">指定したキャンセル トークンを観察しながら、指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスに対して指定した項目の追加を試みます。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">いずれかのコレクションに追加する項目。</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス、または <paramref name="cancellationToken" /> を作成した <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.&#xA;&#xA;-or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。または、タイムアウトが <see cref="F:System.Int32.MaxValue" /> を超えています。  
  
- または - 
<paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれます。または 1 つ以上のコレクションが追加完了としてマークされています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">1 つ以上の基になるコレクションで項目が受け入れられませんでした。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">
        <paramref name="collections" /> 配列内の、項目が追加されたコレクションのインデックス。項目を追加できなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> から項目の削除を試みます。</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">コレクションから削除される項目。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスの外部で変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">項目を削除できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period.">指定した期間内に、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> から項目の削除を試みます。</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">コレクションから削除される項目。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスの外部で変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified  time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した時間内にコレクションから項目を削除できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period while observing a cancellation token.">キャンセル トークンを観察しながら、指定した期間内に、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> から項目の削除を試みます。</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">コレクションから削除される項目。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">観察するキャンセル トークン。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; has been canceled.">
        <see cref="T:System.Threading.CancellationToken" /> は取り消されました。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the underlying &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が破棄されているか、または基になっている <see cref="T:System.Threading.CancellationTokenSource" /> が破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">基になるコレクションがこの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスの外部で変更されました 。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified  time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した時間内にコレクションから項目を削除できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period.">指定した期間内に、<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> から項目の削除を試みます。</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">コレクションから削除される項目。</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait for the item to be removed, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">待機するミリ秒数を表すオブジェクト。無制限に待機する場合は、-1 ミリ秒を表すオブジェクト。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。 
- または - 
 <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスの外部で変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した時間内にコレクションから項目を削除できた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスから項目の削除を試みます。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">いずれかのコレクションから削除される項目。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">1 つ以上の基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス以外で変更されました。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">
        <paramref name="collections" /> 配列内の、項目が削除されたコレクションのインデックス。項目を削除できなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスから項目の削除を試みます。</summary>
      <param name="collections" vsli:raw="The array of collections to remove an item from.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">いずれかのコレクションから削除される項目。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。 
- または - 
<paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">1 つ以上の基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス以外で変更されました。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">
        <paramref name="collections" /> 配列内の、項目が削除されたコレクションのインデックス。項目を削除できなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスから項目の削除を試みます。</summary>
      <param name="collections" vsli:raw="The array of collections to remove an item from.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">いずれかのコレクションから削除される項目。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">観察するキャンセル トークン。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> が取り消されている場合。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">1 つ以上の基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス以外で変更されました。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。 
- または - 
<paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれています。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">
        <paramref name="collections" /> 配列内の、項目が削除されたコレクションのインデックス。項目を削除できなかった場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">指定したいずれかの <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスから項目の削除を試みます。</summary>
      <param name="collections" vsli:raw="The array of collections.">コレクションの配列。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">いずれかのコレクションから削除される項目。</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">1 つ以上の <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスが破棄されています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 引数が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。または、タイムアウトが <see cref="F:System.Int32.MaxValue" /> を超えています。  
  
- または - 
<paramref name="collections" /> の数が STA および MTA の最大サイズ (STA の場合は 62、MTA の場合は 63) を超えています。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">
        <paramref name="collections" /> 引数が長さ 0 の配列であるか、NULL 要素がこの引数に含まれています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">1 つ以上の基になるコレクションが <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンス以外で変更されました。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">
        <paramref name="collections" /> 配列内の、項目が削除されたコレクションのインデックス。項目を削除できなかった場合は -1。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity">
      <summary vsli:raw="Gets the bounded capacity of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">この <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> インスタンスの容量の上限を取得します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="The bounded capacity of this collection, or -1 if no bound was supplied.">このコレクションの容量の上限。上限が指定されていない場合は int.MaxValue。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.Count">
      <summary vsli:raw="Gets the number of items contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> に格納されている項目の数を取得します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="The number of items contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> に格納されている項目の数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted">
      <summary vsli:raw="Gets whether this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete for adding.">この <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が追加完了としてマークされているかどうかを取得します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="Whether this collection has been marked as complete for adding.">このコレクションが追加完了としてマークされているかどうか。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted">
      <summary vsli:raw="Gets whether this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete for adding and is empty.">この <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> が追加完了としてマークされていて、かつ空であるかどうかを取得します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="Whether this collection has been marked as complete for adding and is empty.">このコレクションが追加完了としてマークされていて、かつ空であるかどうか。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> は破棄されています。</exception>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate the access is not synchronized.">
        <see langword="false" />アクセスが同期されていないことを示すために、常にを返します。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。 このプロパティはサポートされていません。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">SyncRoot プロパティはサポートされていません。</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentBag`1">
      <summary vsli:raw="Represents a thread-safe, unordered collection of objects.">オブジェクトの順序付けられていないスレッド セーフなコレクションを表します。</summary>
      <typeparam name="T" vsli:raw="The type of the elements to be stored in the collection.">コレクションに格納する要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; class that contains elements copied from the specified collection.">指定したコレクションからコピーされた要素を格納する、<see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">新しい <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に要素がコピーされたコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="collection" /> が null 参照 (Visual Basic では Nothing) です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">オブジェクトを <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に追加します。</summary>
      <param name="item" vsli:raw="The object to be added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に追加するオブジェクト。 参照型の場合、この値は null 参照 (Visual Basic の場合は Nothing) でもかまいません。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Clear">
      <summary vsli:raw="Removes all values from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> からすべての値を削除します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- the number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> が <paramref name="array" /> の長さ以上です。または、コピー元の <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> の要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> のコンテンツの列挙子。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に対してオブジェクトの追加を試みます。</summary>
      <param name="item" vsli:raw="The object to be added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に追加するオブジェクト。 参照型の場合、この値は null 参照 (Visual Basic の場合は Nothing) でもかまいません。</param>
      <returns vsli:raw="Always returns true.">常に真を返します</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。 または、<paramref name="array" /> に 0 から始まるインデックス番号がありません。 -または- <paramref name="index" /> が <paramref name="array" /> の長さ以上です。-または- コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。 または、コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> のコンテンツの列挙子。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; elements to a new array.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> の要素を新しい配列にコピーします。</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> からコピーされた要素のスナップショットを格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)">
      <summary vsli:raw="Attempts to return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; without removing it.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> からオブジェクトを削除せずに返そうと試みます。</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; or the default value of &lt;typeparamref name=&quot;T&quot; /&gt; if the operation failed.">このメソッドから戻るときに、<paramref name="result" /> のオブジェクトが <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に格納されます。操作が失敗した場合は、<typeparamref name="T" /> の既定値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> からオブジェクトを削除して返そうと試みます。</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; or the default value of &lt;typeparamref name=&quot;T&quot; /&gt; if the bag is empty.">このメソッドから戻るときに、<paramref name="result" /> から削除されたオブジェクトが <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に格納されます。このバッグが空の場合は、<typeparamref name="T" /> の既定値が格納されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was removed successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> が空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が空の場合は <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが SyncRoot で同期されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">
        <see langword="false" />アクセスが同期されていないことを示すために、常にを返します。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。 このプロパティはサポートされていません。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">SyncRoot プロパティはサポートされていません。</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2">
      <summary vsli:raw="Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.">同時に複数のスレッドからアクセスできる、スレッド セーフなキーと値のペアのコレクションを表します。</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.">空で、既定のコンカレンシー レベルと既定の初期量を備え、キーの型の既定の比較子を使用する、<see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.">指定した <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> からコピーされた要素を格納し、既定のコンカレンシー レベルと既定の初期量を備え、キーの型の既定の比較子を使用する、<see cref="T:System.Collections.Generic.IEnumerable`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IEnumerable`1" /> に要素がコピーされた <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or any of its keys is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> またはそのキーが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="collection" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; has the default concurrency level, has the default initial capacity, and uses the specified  &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">指定した <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> からコピーされた要素を格納し、既定のコンカレンシー レベルと既定の初期量を備え、指定した <see cref="T:System.Collections.IEnumerable" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IEnumerable`1" /> に要素がコピーされた <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> または <paramref name="comparer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the default concurrency level and capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">空で、既定のコンカレンシー レベルと容量を備え、指定した <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer" vsli:raw="The equality comparison implementation to use when comparing keys.">キーの比較時に使用する等価比較の実装。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">指定した <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> から要素をコピーして格納し、指定した <see cref="T:System.Collections.IEnumerable" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">同時に <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> を更新するスレッドの推定数。</param>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IEnumerable`1" /> に要素がコピーされた <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> または <paramref name="comparer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; is less than 1.">
        <paramref name="concurrencyLevel" /> が 1 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="collection" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.">空で、指定したコンカレンシー レベルと容量を備え、キーの型の既定の比較子を使用する、<see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">同時に <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> を更新するスレッドの推定数。</param>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; is less than 1.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="concurrencyLevel" /> が 1 未満です。  
  
- または - 
 <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">空で、指定したコンカレンシー レベルと指定した初期量を備え、指定した <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">同時に <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> を更新するスレッドの推定数。</param>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> が格納できる要素数の初期値。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than 1.">
        <paramref name="concurrencyLevel" /> または <paramref name="capacity" /> が 1 未満です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or updates a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function if the key already exists.">キーがまだ存在しない場合は <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> にキーと値のペアを追加し、キーが既に存在する場合は、指定された関数を使用して <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> のキーと値のペアを更新します。</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">追加するキーまたは値を更新するキー</param>
      <param name="addValue" vsli:raw="The value to be added for an absent key.">キーが存在しない場合に追加する値</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">キーが存在する場合に、キーの既存の値に基づいて新しい値を生成するために使用される関数</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> または <paramref name="updateValueFactory" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
      <returns vsli:raw="The new value for the key. This will be either be &lt;paramref name=&quot;addValue&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">キーの新しい値。 これは、<paramref name="addValue" /> (キーが存在しない場合) か <paramref name="updateValueFactory" /> の結果 (キーが存在する場合) のどちらかになります。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
      <summary vsli:raw="Uses the specified functions to add a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or to update a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key already exists.">指定した関数を使用して、キーがまだ存在しない場合は <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> にキーと値のペアを追加し、キーが既に存在する場合は <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> のキーと値のペアを更新します。</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">追加するキーまたは値を更新するキー</param>
      <param name="addValueFactory" vsli:raw="The function used to generate a value for an absent key.">キーが存在しない場合に、値を生成するために使用される関数</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">キーが存在する場合に、キーの既存の値に基づいて新しい値を生成するために使用される関数</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt;, &lt;paramref name=&quot;addValueFactory&quot; /&gt;, or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />、<paramref name="addValueFactory" />、または <paramref name="updateValueFactory" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
      <returns vsli:raw="The new value for the key. This will be either be the result of &lt;paramref name=&quot;addValueFactory&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">キーの新しい値。 これは、<paramref name="addValueFactory" /> の結果 (キーが存在しない場合) か <paramref name="updateValueFactory" /> の結果 (キーが存在する場合) のどちらかになります。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)">
      <summary vsli:raw="Uses the specified functions and argument to add a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or to update a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key already exists.">指定した関数と引数を使用して、キーがまだ存在しない場合は <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> にキーと値のペアを追加し、キーが既に存在する場合は <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> のキーと値のペアを更新します。</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">追加するキーまたは値を更新するキー。</param>
      <param name="addValueFactory" vsli:raw="The function used to generate a value for an absent key.">キーが存在しない場合に、値を生成するために使用される関数。</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">キーの既存の値に基づいて、既存のキーの新しい値を生成するために使用される関数。</param>
      <param name="factoryArgument" vsli:raw="An argument to pass into &lt;paramref name=&quot;addValueFactory&quot; /&gt; and &lt;paramref name=&quot;updateValueFactory&quot; /&gt;.">
        <paramref name="addValueFactory" /> と <paramref name="updateValueFactory" /> に渡す引数。</param>
      <typeparam name="TArg" vsli:raw="The type of an argument to pass into &lt;paramref name=&quot;addValueFactory&quot; /&gt; and &lt;paramref name=&quot;updateValueFactory&quot; /&gt;.">およびに渡す引数の型 <paramref name="addValueFactory" /><paramref name="updateValueFactory" /> 。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt;, &lt;paramref name=&quot;addValueFactory&quot; /&gt;, or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="key" />、<paramref name="addValueFactory" />、または <paramref name="updateValueFactory" /> が null 参照 (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
      <returns vsli:raw="The new value for the key. This will be either be the result of &lt;paramref name=&quot;addValueFactory&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">キーの新しい値。 これは、<paramref name="addValueFactory" /> の結果 (キーが存在しない場合) か <paramref name="updateValueFactory" /> の結果 (キーが存在する場合) のどちらかになります。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear">
      <summary vsli:raw="Removes all keys and values from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> からすべてのキーと値を削除します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; contains the specified key.">指定したキーが <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> に格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> の列挙子。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist. Returns the new value, or the existing value if the key exists.">キーがまだ存在しない場合に、<see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> にキーと値のペアを追加します。 新しい値、またはキーが存在する場合は既存の値を返します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value to be added, if the key does not already exist.">キーがまだ存在しない場合に追加する値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">キーの値。 キーがディクショナリに既に存在する場合はキーの既存の値、キーがディクショナリに存在していなかった場合は新しい値になります。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function if the key does not already exist. Returns the new value, or the existing value if the key exists.">キーがまだ存在しない場合に、指定された関数を使用して <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> にキーと値のペアを追加します。 新しい値、またはキーが存在する場合は既存の値を返します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="valueFactory" vsli:raw="The function used to generate a value for the key.">キーの値を生成するために使用される関数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; or &lt;paramref name=&quot;valueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> または <paramref name="valueFactory" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">キーの値。 キーがディクショナリに既に存在する場合はキーの既存の値、キーがディクショナリに存在していなかった場合は新しい値になります。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function and an argument if the key does not already exist, or returns the existing value if the key exists.">キーがまだ存在しない場合は、指定された関数と引数を使用して <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> にキーと値のペアを追加し、キーが存在する場合は既存の値を返します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="valueFactory" vsli:raw="The function used to generate a value for the key.">キーの値を生成するために使用される関数。</param>
      <param name="factoryArgument" vsli:raw="An argument value to pass into &lt;paramref name=&quot;valueFactory&quot; /&gt;.">
        <paramref name="valueFactory" /> に渡す引数値。</param>
      <typeparam name="TArg" vsli:raw="The type of an argument to pass into &lt;paramref name=&quot;valueFactory&quot; /&gt;.">に渡す引数の型 <paramref name="valueFactory" /> 。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is a &lt;see langword=&quot;null&quot; /&gt; reference (Nothing in Visual Basic).">
        <paramref name="key" /> が <see langword="null" /> 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">キーの値。 キーがディクショナリに既に存在する場合はキーの既存の値、キーがディクショナリに存在していなかった場合は新しい値になります。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the collection.">項目をコレクションに追加します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to add to the dictionary.">ディクショナリに追加する <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" /> の <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains too many elements.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に含まれている要素が多すぎます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Gets whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains an element with the specified key.">指定したキーを持つ要素が <see cref="T:System.Collections.Generic.ICollection`1" /> に含まれているかどうかを取得します。</summary>
      <param name="keyValuePair" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索されるキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at the specified array index.">指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.ICollection" /> の要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> が <paramref name="array" /> の長さ以上です。

- または -

コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the specified key/value pair from the collection.">コレクションから、指定したキーと値のペアを削除します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to remove.">削除する <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; property of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" /> の <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> プロパティが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="key" /> が元の <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合にも false を返します。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary vsli:raw="Adds the specified key and value to the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">指定したキーと値を <see cref="T:System.Collections.Generic.IDictionary`2" /> に追加します。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">追加する要素の値として使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">同じキーを持つ要素が、<see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> に既に存在します。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.Generic.IDictionary`2" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、元の <see langword="false" /> で <paramref name="key" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.IDictionary`2" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at the specified array index.">指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.ICollection" /> の要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> が <paramref name="array" /> の長さ以上です。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">指定したキーと値をディクショナリに追加します。</summary>
      <param name="key" vsli:raw="The object to use as the key.">キーとして使用するオブジェクト。</param>
      <param name="value" vsli:raw="The object to use as the value.">値として使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type  of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the type of values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; A value with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <paramref name="key" /> が、<see cref="T:System.Collections.Generic.Dictionary`2" /> のキーの型に代入できない型です。  
  
- または - 
 <paramref name="value" /> が、<see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値の型に代入できない型です。  
  
- または - 
同じキーを持つ値が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Gets a value that indicates the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; contains an element with the specified key.">指定したキーを持つ要素が <see cref="T:System.Collections.Generic.IDictionary`2" /> に含まれているかどうかを示す値を取得します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.IDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> に対する <see cref="T:System.Collections.Generic.IDictionary`2" /> を提供します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> の列挙子。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
      <summary vsli:raw="Copies the key and value pairs stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; to a new array.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> に格納されているキーと値のペアを新しい配列にコピーします。</summary>
      <returns vsli:raw="A new array containing a snapshot of key and value pairs copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> からコピーされたキーと値のペアのスナップショットを格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
      <summary vsli:raw="Attempts to add the specified key and value to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> に対して、指定したキーと値の追加を試みます。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be  &lt;see langword=&quot;null&quot; /&gt; for reference types.">追加する要素の値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key/value pair was added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; successfully; &lt;see langword=&quot;false&quot; /&gt; if the key already exists.">キーと値のペアが <see langword="true" /> に正常に追加された場合は <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。キーが既に存在する場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Attempts to get the value associated with the specified key from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> から、指定したキーに関連付けられている値の取得を試みます。</summary>
      <param name="key" vsli:raw="The key of the value to get.">取得する値のキー。</param>
      <param name="value" vsli:raw="When this method returns, contains the object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; that has the specified key, or the default value of the type if the operation failed.">このメソッドから戻るときに、指定したキーを持つオブジェクトが <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> から格納されます。操作が失敗した場合は、型の既定値が格納されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> は <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">キーが <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> に見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
      <summary vsli:raw="Attempts to remove and return the value that has the specified key from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> から、指定したキーを持つ値を削除して返そうと試みます。</summary>
      <param name="key" vsli:raw="The key of the element to remove and return.">削除して返す要素のキー。</param>
      <param name="value" vsli:raw="When this method returns, contains the object removed from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, or the default value of  the &lt;see langword=&quot;TValue&quot; /&gt; type if &lt;paramref name=&quot;key&quot; /&gt; does not exist.">このメソッドから戻るときに、<see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> から削除されたオブジェクトが格納されます。<paramref name="key" /> が存在しない場合は、<see langword="TValue" /> 型の既定値が格納されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> は <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was removed successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes a key and value from the dictionary.">ディクショナリからキーと値を削除します。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; representing the key and value to remove.">削除するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; property of &lt;paramref name=&quot;item&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="item" /> の <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> プロパティが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key and value represented by &lt;paramref name=&quot;item&quot; /&gt; are successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" /> によって表されるキーと値が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
      <summary vsli:raw="Updates the value associated with &lt;paramref name=&quot;key&quot; /&gt; to &lt;paramref name=&quot;newValue&quot; /&gt; if the existing value with &lt;paramref name=&quot;key&quot; /&gt; is equal to &lt;paramref name=&quot;comparisonValue&quot; /&gt;.">
        <paramref name="key" /> での既存の値が <paramref name="comparisonValue" /> と等しい場合は、<paramref name="key" /> に関連付けられている値を <paramref name="newValue" /> に更新します。</summary>
      <param name="key" vsli:raw="The key of the value that is compared with &lt;paramref name=&quot;comparisonValue&quot; /&gt; and possibly replaced.">値を <paramref name="comparisonValue" /> と比較し、場合によっては置き換えるキー。</param>
      <param name="newValue" vsli:raw="The value that replaces the value of the element that has the specified &lt;paramref name=&quot;key&quot; /&gt; if the comparison results in equality.">比較した結果が等しい場合に、指定した <paramref name="key" /> を持つ要素の値を置き換える値。</param>
      <param name="comparisonValue" vsli:raw="The value that is compared with the value of the element that has the specified &lt;paramref name=&quot;key&quot; /&gt;.">指定した <paramref name="key" /> を持つ要素の値と比較する値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value with &lt;paramref name=&quot;key&quot; /&gt; was equal to &lt;paramref name=&quot;comparisonValue&quot; /&gt; and was replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> を持つ値が <paramref name="key" /> に等しかったため、<paramref name="comparisonValue" /> に置き換えられた場合は <paramref name="newValue" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> に格納されているキー/値ペアの数を取得します。</summary>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">ディレクトリに含まれている要素が多すぎます。</exception>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> が空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が空の場合は <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">取得または設定する値のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">プロパティが取得され、<paramref name="key" /> がコレクションに存在しません。</exception>
      <returns vsli:raw="The value of the key/value pair at the specified index.">指定したインデックス位置にあるキーと値のペアの値。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A collection of keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> のキーのコレクション。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.ICollection" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> のキーを格納しているコレクション。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値を含むコレクションを取得します。</summary>
      <returns vsli:raw="A collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値を格納しているコレクション。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが SyncRoot で同期されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。 の場合、 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> このプロパティは常にを返し <see langword="false" /> ます。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。 このプロパティはサポートされていません。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported.">このプロパティはサポートされていません。</exception>
      <returns vsli:raw="Always returns null.">常に null を返します。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.Generic.IDictionary`2" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> の場合、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.IDictionary`2" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> の場合、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">取得または設定する値のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type or the value type of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> のキーの型または値型に代入できない型です。</exception>
      <returns vsli:raw="The value associated with the specified key, or  &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">指定したキーに関連付けられている値。<paramref name="key" /> がディクショナリに存在しない場合、または <paramref name="key" /> が <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> のキーの型に代入できない型である場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains the keys of the  &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーが格納されている <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An interface that contains the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> のキーを格納しているインターフェイス。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An interface that contains the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 内の値を含むインターフェイス。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Values">
      <summary vsli:raw="Gets a collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値を含むコレクションを取得します。</summary>
      <returns vsli:raw="A collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値を格納しているコレクション。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentQueue`1">
      <summary vsli:raw="Represents a thread-safe first in-first out (FIFO) collection.">スレッド セーフな先入れ先出し (FIFO) コレクションを表します。</summary>
      <typeparam name="T" vsli:raw="The type of the elements contained in the queue.">キューに格納されている要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; class that contains elements copied from the specified collection.">指定したコレクションからコピーされた要素を格納する、<see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">新しい <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> に要素がコピーされたコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">
        <paramref name="collection" /> 引数が null です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> からすべてのオブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> が <paramref name="array" /> の長さ以上です。または、コピー元の <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> の要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> の末尾にオブジェクトを追加します。</summary>
      <param name="item" vsli:raw="The object to add to the end of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> の末尾に追加するオブジェクト。 参照型の場合、この値は null 参照 (Visual Basic の場合は Nothing) でもかまいません。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> のコンテンツの列挙子。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> に対してオブジェクトの追加を試みます。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> に追加するオブジェクト。 参照型の場合、この値は null 参照 (Visual Basic の場合は Nothing) でもかまいません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> からオブジェクトを削除して返そうと試みます。</summary>
      <param name="item" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;item&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">操作が正常に終了した場合は、このメソッドから戻るときに、削除されたオブジェクトが <paramref name="item" /> に格納されます。 削除できるオブジェクトがない場合、値は指定されません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要素が正常に削除されて返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。 または、<paramref name="array" /> に 0 から始まるインデックス番号がありません。 -または- <paramref name="index" /> が <paramref name="array" /> の長さ以上です。-または- コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。 または、コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
      <summary vsli:raw="Copies the elements stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; to a new array.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> に格納されている要素を新しい配列にコピーします。</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> からコピーされた要素のスナップショットを格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
      <summary vsli:raw="Tries to remove and return the object at the beginning of the concurrent queue.">同時実行キューの先頭にあるオブジェクトを削除して返そうと試みます。</summary>
      <param name="result" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">操作が正常に終了した場合は、このメソッドから戻るときに、削除されたオブジェクトが <paramref name="result" /> に格納されます。 削除できるオブジェクトがない場合、値は指定されません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> の先頭から要素が正常に削除されて返された場合は <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
      <summary vsli:raw="Tries to return an object from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; without removing it.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> の先頭にあるオブジェクトを削除せずに返そうと試みます。</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; or an unspecified value if the operation failed.">このメソッドから戻るときに、<see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> の先頭にあるオブジェクトが <paramref name="result" /> に格納されます。操作が失敗した場合、値は指定されません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> が空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が空の場合は <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが SyncRoot で同期されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">
        <see langword="false" />アクセスが同期されていないことを示すために、常にを返します。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。 このプロパティはサポートされていません。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">SyncRoot プロパティはサポートされていません。</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentStack`1">
      <summary vsli:raw="Represents a thread-safe last in-first out (LIFO) collection.">スレッド セーフな後入れ先出し (LIFO) コレクションを表します。</summary>
      <typeparam name="T" vsli:raw="The type of the elements contained in the stack.">スタックに格納されている要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; class that contains elements copied from the specified collection.">指定したコレクションからコピーされた要素を格納する、<see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">新しい <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> に要素がコピーされたコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">
        <paramref name="collection" /> 引数が null です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> からすべてのオブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> が <paramref name="array" /> の長さ以上です。または、コピー元の <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の列挙子。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭にオブジェクトを挿入します。</summary>
      <param name="item" vsli:raw="The object to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> にプッシュするオブジェクト。 参照型の場合、この値は null 参照 (Visual Basic の場合は Nothing) でもかまいません。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
      <summary vsli:raw="Inserts multiple objects at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭に複数のオブジェクトをアトミックに挿入します。</summary>
      <param name="items" vsli:raw="The objects to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> にプッシュするオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> が null 参照 (Visual Basic では Nothing) です。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Inserts multiple objects at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭に複数のオブジェクトをアトミックに挿入します。</summary>
      <param name="items" vsli:raw="The objects to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> にプッシュするオブジェクト。</param>
      <param name="startIndex" vsli:raw="The zero-based offset in &lt;paramref name=&quot;items&quot; /&gt; at which to begin inserting elements onto the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <paramref name="items" /> の先頭に挿入する要素の開始位置を示す、<see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 内の 0 から始まるオフセット。</param>
      <param name="count" vsli:raw="The number of elements to be inserted onto the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭に挿入する要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is negative. Or &lt;paramref name=&quot;startIndex&quot; /&gt; is greater than or equal to the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> または <paramref name="count" /> が負の値です。 または、<paramref name="startIndex" /> が <paramref name="items" /> の長さ以上です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; + &lt;paramref name=&quot;count&quot; /&gt; is greater than the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> + <paramref name="count" /> が <paramref name="items" /> の長さを超えています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> に対してオブジェクトの追加を試みます。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> に追加するオブジェクト。 参照型の場合、この値は null 参照 (Visual Basic の場合は Nothing) でもかまいません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> からオブジェクトを削除して返そうと試みます。</summary>
      <param name="item" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;item&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">操作が正常に終了した場合は、このメソッドから戻るときに、削除されたオブジェクトが <paramref name="item" /> に格納されます。 削除できるオブジェクトがない場合、値は指定されません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要素が正常に削除されて返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。 または、<paramref name="array" /> に 0 から始まるインデックス番号がありません。 -または- <paramref name="index" /> が <paramref name="array" /> の長さ以上です。-または- コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先の <paramref name="index" /> の <paramref name="array" /> から最後までの領域を超えています。 または、コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
      <summary vsli:raw="Copies the items stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; to a new array.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> に格納されている項目を新しい配列にコピーします。</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> からコピーされた要素のスナップショットを格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
      <summary vsli:raw="Attempts to return an object from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; without removing it.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭にあるオブジェクトを削除せずに返そうと試みます。</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; or an unspecified value if the operation failed.">このメソッドから戻るときに、<see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭にあるオブジェクトが <paramref name="result" /> に格納されます。操作が失敗した場合、値は指定されません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
      <summary vsli:raw="Attempts to pop and return the object at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭にあるオブジェクトをポップして返そうと試みます。</summary>
      <param name="result" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">操作が正常に終了した場合は、このメソッドから戻るときに、削除されたオブジェクトが <paramref name="result" /> に格納されます。 削除できるオブジェクトがない場合、値は指定されません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭から要素が正常に削除されて返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
      <summary vsli:raw="Attempts to pop and return multiple objects from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭にある複数のオブジェクトをアトミックにポップして返そうと試みます。</summary>
      <param name="items" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to which objects popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; will be added.">
        <see cref="T:System.Array" /> の先頭からポップされたオブジェクトの追加先となる <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null argument (Nothing in Visual Basic).">
        <paramref name="items" /> は null 引数 (Visual Basic の Nothing) です。</exception>
      <returns vsli:raw="The number of objects successfully popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; and inserted in &lt;paramref name=&quot;items&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭から正常にポップされ、<paramref name="items" /> に挿入されたオブジェクトの数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Attempts to pop and return multiple objects from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭にある複数のオブジェクトをアトミックにポップして返そうと試みます。</summary>
      <param name="items" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to which objects popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; will be added.">
        <see cref="T:System.Array" /> の先頭からポップされたオブジェクトの追加先となる <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />。</param>
      <param name="startIndex" vsli:raw="The zero-based offset in &lt;paramref name=&quot;items&quot; /&gt; at which to begin inserting elements from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <paramref name="items" /> の先頭からの要素を挿入する開始位置を示す、<see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 内の 0 から始まるオフセット。</param>
      <param name="count" vsli:raw="The number of elements to be popped from top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; and inserted into &lt;paramref name=&quot;items&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> の先頭からポップして <paramref name="items" /> に挿入する要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is negative. Or &lt;paramref name=&quot;startIndex&quot; /&gt; is greater than or equal to the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> または <paramref name="count" /> が負の値です。 または、<paramref name="startIndex" /> が <paramref name="items" /> の長さ以上です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; + &lt;paramref name=&quot;count&quot; /&gt; is greater than the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> + <paramref name="count" /> が <paramref name="items" /> の長さを超えています。</exception>
      <returns vsli:raw="The number of objects successfully popped from the top of the stack and inserted in &lt;paramref name=&quot;items&quot; /&gt;.">スタックの一番上から正常にポップされ、<paramref name="items" /> に挿入されたオブジェクトの数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> が空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が空の場合は <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが SyncRoot で同期されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">
        <see langword="false" />アクセスが同期されていないことを示すために、常にを返します。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。 このプロパティはサポートされていません。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported">SyncRoot プロパティはサポートされていません</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
      <summary vsli:raw="Specifies options to control the buffering behavior of a partitioner.">パーティショナーのバッファリング動作を制御するオプションを指定します。</summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering">
      <summary vsli:raw="Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).">元の列挙から項目を 1 つずつ受け取り、複数のスレッドからより効率的にアクセスできる中間ストレージを使用しないパーティショナーを作成します。 このオプションは、短い待機時間のサポート (項目がソースから使用可能になると同時に処理されます) と、項目間の依存関係の部分的なサポート (スレッド自体で処理する項目を待機する間にスレッドでデッドロックが発生することはありません) を提供します。</summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.None">
      <summary vsli:raw="Use the default behavior, which is to use buffering to achieve optimal performance.">既定の動作を使用します。既定の動作では、最適なパフォーマンスを実現するために、バッファリングを使用します。</summary>
    </member>
    <member name="T:System.Collections.Concurrent.IProducerConsumerCollection`1">
      <summary vsli:raw="Defines methods to manipulate thread-safe collections intended for producer/consumer usage. This interface provides a unified representation for producer/consumer collections so that higher level abstractions such as &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; can use the collection as the underlying storage mechanism.">プロデューサーまたはコンシューマーが使用するためのスレッド セーフなコレクションを操作するメソッドを定義します。 このインスタンスには、プロデューサー/コンシューマー コレクションの統一された表現が用意されています。<see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> のような高度な抽象化では、基になるストレージ機構としてこのコレクションを使用できます。</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the collection.">コレクション内の要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a specified index.">指定したインデックスを開始位置として、<see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> の要素を <see cref="T:System.Array" /> にコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.  &#xA;  &#xA; The array must have zero-based indexing.">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />。  
  
配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> が null 参照 (Visual Basic では Nothing) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the collection is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> が <paramref name="array" /> の長さ以上です。または、コレクション内の要素数が、 <paramref name="index" /> から <paramref name="array" /> の最後までの領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray">
      <summary vsli:raw="Copies the elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; to a new array.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> に格納されている要素を新しい配列にコピーします。</summary>
      <returns vsli:raw="A new array containing the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> からコピーされた要素を格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> に対してオブジェクトの追加を試みます。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;item&quot; /&gt; was invalid for this collection.">
        <paramref name="item" /> は、このコレクションには無効です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> からオブジェクトを削除して返そうと試みます。</summary>
      <param name="item" vsli:raw="When this method returns, if the object was removed and returned successfully, &lt;paramref name=&quot;item&quot; /&gt; contains the removed object. If no object was available to be removed, the value is unspecified.">オブジェクトが正常に削除されて返された場合は、このメソッドから戻るときに、削除されたオブジェクトが <paramref name="item" /> に格納されます。 削除できるオブジェクトがない場合、値は指定されません。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが正常に削除されて返された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.OrderablePartitioner`1">
      <summary vsli:raw="Represents a particular manner of splitting an orderable data source into multiple partitions.">並べ替え可能なデータ ソースを複数のパーティションに分割する特定の方法を表します。</summary>
      <typeparam name="TSource" vsli:raw="Type of the elements in the collection.">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Called from constructors in derived classes to initialize the &lt;see cref=&quot;T:System.Collections.Concurrent.OrderablePartitioner`1&quot; /&gt; class with the specified constraints on the index keys.">インデックス キーに関する制約を指定して <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> クラスを初期化するために、派生クラスのコンストラクターから呼び出されます。</summary>
      <param name="keysOrderedInEachPartition" vsli:raw="Indicates whether the elements in each partition are yielded in the order of increasing keys.">各パーティション内の要素のキーが昇順になるかどうかを示します。</param>
      <param name="keysOrderedAcrossPartitions" vsli:raw="Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.">前にあるパーティション内の要素の順序が、後にあるパーティション内の要素よりも常に前になるかどうかを示します。 true の場合、パーティション 0 の各要素の順序キーは、パーティション 1 のどの要素よりも小さくなり、パーティション 1 の各要素の順序キーは、パーティション 2 のどの要素よりも小さくなります。以降も同様です。</param>
      <param name="keysNormalized" vsli:raw="Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.">キーを正規化するかどうかを示します。 true の場合、順序キーはすべて [0 . numberOfElements-1] の範囲内の一意の整数になります。 false の場合も順序キーは一意である必要がありますが、相対的な順序だけが考慮され、それぞれの絶対値は考慮されません。</param>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">基になるコレクションを可変個のパーティションに分割できるオブジェクトを作成します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.">動的パーティションは、基本クラスでサポートされていません。 派生クラスで実装されている必要があります。</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">基になるデータ ソースのパーティションを作成できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">基になるコレクションを可変個のパーティションに分割できるオブジェクトを作成します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by this partitioner.">動的パーティションは、このパーティショナーでサポートされていません。</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">基になるデータ ソースのパーティションを作成できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the specified number of orderable partitions.">基になるコレクションを、指定した数の順序付け可能なパーティションに分割します。</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">作成するパーティションの数。</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">
        <paramref name="partitionCount" /> 列挙子を格納するリスト。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the given number of ordered partitions.">基になるコレクションを、指定した数の順序付きのパーティションに分割します。</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">作成するパーティションの数。</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">
        <paramref name="partitionCount" /> 列挙子を格納するリスト。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized">
      <summary vsli:raw="Gets whether order keys are normalized.">順序キーが正規化されるかどうかを取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the keys are normalized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> キーが正規化されている場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions">
      <summary vsli:raw="Gets whether elements in an earlier partition always come before elements in a later partition.">前にあるパーティション内の要素の順序が、後にあるパーティション内の要素よりも常に前になるかどうかを取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the elements in an earlier partition always come before elements in a later partition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 前のパーティションの要素が、後のパーティションの要素の前にある場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition">
      <summary vsli:raw="Gets whether elements in each partition are yielded in the order of increasing keys.">各パーティション内の要素のキーが昇順になるかどうかを取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the elements in each partition are yielded in the order of increasing keys; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 各パーティション内の要素が、キーを増やす順序で生成される場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner">
      <summary vsli:raw="Provides common partitioning strategies for arrays, lists, and enumerables.">配列、リスト、および列挙体に使用できる共通のパーティション方法を提供します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">ユーザーが指定した範囲をチャンクするパーティショナーを作成します。</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">範囲の下限。この値も含まれます。</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">範囲の上限。この値は含まれません。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.">
        <paramref name="toExclusive" /> 引数が <paramref name="fromInclusive" /> 引数以下です。</exception>
      <returns vsli:raw="A partitioner.">パーティショナー。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">ユーザーが指定した範囲をチャンクするパーティショナーを作成します。</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">範囲の下限。この値も含まれます。</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">範囲の上限。この値は含まれません。</param>
      <param name="rangeSize" vsli:raw="The size of each subrange.">各サブ範囲のサイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;rangeSize&quot; /&gt; argument is less than or equal to 0.">
        <paramref name="toExclusive" /> 引数が <paramref name="fromInclusive" /> 引数以下です。  
  
- または - 
<paramref name="rangeSize" /> 引数が 0 以下です。</exception>
      <returns vsli:raw="A partitioner.">パーティショナー。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">ユーザーが指定した範囲をチャンクするパーティショナーを作成します。</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">範囲の下限。この値も含まれます。</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">範囲の上限。この値は含まれません。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.">
        <paramref name="toExclusive" /> 引数が <paramref name="fromInclusive" /> 引数以下です。</exception>
      <returns vsli:raw="A partitioner.">パーティショナー。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">ユーザーが指定した範囲をチャンクするパーティショナーを作成します。</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">範囲の下限。この値も含まれます。</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">範囲の上限。この値は含まれません。</param>
      <param name="rangeSize" vsli:raw="The size of each subrange.">各サブ範囲のサイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;rangeSize&quot; /&gt; argument is less than or equal to 0.">
        <paramref name="toExclusive" /> 引数が <paramref name="fromInclusive" /> 引数以下です。  
  
- または - 
<paramref name="rangeSize" /> 引数が 0 以下です。</exception>
      <returns vsli:raw="A partitioner.">パーティショナー。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Array&quot; /&gt; instance.">
        <see cref="T:System.Array" /> インスタンスから順序付け可能なパーティショナーを作成します。</summary>
      <param name="array" vsli:raw="The array to be partitioned.">パーティションに分割する配列。</param>
      <param name="loadBalance" vsli:raw="A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.">作成されたパーティショナーで、静的にパーティションを割り当てるのではなく、動的にパーティション間で負荷を分散する必要があるかどうかを示すブール値。</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source array.">元の配列内の要素の型。</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input array.">入力配列に基づく順序付け可能なパーティショナー。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; instance.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> インスタンスから順序付け可能なパーティショナーを作成します。</summary>
      <param name="source" vsli:raw="The enumerable to be partitioned.">パーティションに分割する列挙体。</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source enumerable.">元の列挙内の要素の型。</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input array.">入力配列に基づく順序付け可能なパーティショナー。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; instance.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> インスタンスから順序付け可能なパーティショナーを作成します。</summary>
      <param name="source" vsli:raw="The enumerable to be partitioned.">パーティションに分割する列挙体。</param>
      <param name="partitionerOptions" vsli:raw="Options to control the buffering behavior of the partitioner.">パーティショナーのバッファー動作を制御するオプション。</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source enumerable.">元の列挙内の要素の型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;partitionerOptions&quot; /&gt; argument specifies an invalid value for &lt;see cref=&quot;T:System.Collections.Concurrent.EnumerablePartitionerOptions&quot; /&gt;.">
        <paramref name="partitionerOptions" /> 引数が、<see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" /> の無効な値を指定しています。</exception>
      <returns vsli:raw="An orderable partitioner based on the input array.">入力配列に基づく順序付け可能なパーティショナー。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)">
      <summary vsli:raw="Creates an orderable partitioner from an &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; instance.">
        <see cref="T:System.Collections.Generic.IList`1" /> インスタンスから順序付け可能なパーティショナーを作成します。</summary>
      <param name="list" vsli:raw="The list to be partitioned.">パーティションに分割するリスト。</param>
      <param name="loadBalance" vsli:raw="A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.">作成されたパーティショナーで、静的にパーティションを割り当てるのではなく、動的にパーティション間で負荷を分散する必要があるかどうかを示すブール値。</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source list.">元のリスト内の要素の型。</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input list.">入力リストに基づく順序付け可能なパーティショナー。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner`1">
      <summary vsli:raw="Represents a particular manner of splitting a data source into multiple partitions.">データ ソースを複数のパーティションに分割する特定の方法を表します。</summary>
      <typeparam name="TSource" vsli:raw="Type of the elements in the collection.">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.#ctor">
      <summary vsli:raw="Creates a new partitioner instance.">新しいパーティショナー インスタンスを作成します。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">基になるコレクションを可変個のパーティションに分割できるオブジェクトを作成します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by the base class. You must implement it in a derived class.">動的パーティションは、基本クラスでサポートされていません。 派生クラスで実装する必要があります。</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">基になるデータ ソースのパーティションを作成できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the given number of partitions.">基になるコレクションを指定した数のパーティションに分割します。</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">作成するパーティションの数。</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">
        <paramref name="partitionCount" /> 列挙子を格納するリスト。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions">
      <summary vsli:raw="Gets whether additional partitions can be created dynamically.">追加のパーティションを動的に作成できるかどうかを取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.Partitioner`1&quot; /&gt; can create partitions dynamically as they are requested; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.Partitioner`1&quot; /&gt; can only allocate partitions statically.">
        <see langword="true" /> が <see cref="T:System.Collections.Concurrent.Partitioner`1" /> 要求に応じて動的にパーティションを作成できる場合は。が <see langword="false" /><see cref="T:System.Collections.Concurrent.Partitioner`1" /> 静的にパーティションを割り当てることができる場合は。</returns>
    </member>
  </members>
</doc>
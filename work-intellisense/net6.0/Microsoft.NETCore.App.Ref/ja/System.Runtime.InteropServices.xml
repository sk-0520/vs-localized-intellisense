<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary vsli:raw="The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.">データの単位が、データ サイズの倍数ではないアドレスから読み込まれたり、アドレスに書き込まれたりしたときにスローされる例外。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class.">
        <see cref="T:System.DataMisalignedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message.">指定したエラー メッセージを使用して、<see cref="T:System.DataMisalignedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">エラーを記述する <see cref="T:System.String" /> オブジェクト。 <paramref name="message" /> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステム環境向けにローカライズされていることを確認する必要があります。</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message and underlying exception.">指定したエラー メッセージと基になる例外を使用して、<see cref="T:System.DataMisalignedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">エラーを記述する <see cref="T:System.String" /> オブジェクト。 <paramref name="message" /> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステム環境向けにローカライズされていることを確認する必要があります。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt;. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の <see cref="T:System.DataMisalignedException" /> の原因である例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary vsli:raw="The exception that is thrown when a DLL specified in a DLL import cannot be found.">DLL インポートで指定した DLL が見つからない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with default properties.">
        <see cref="T:System.DllNotFoundException" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with serialized data.">シリアル化したデータを使用して、<see cref="T:System.DllNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; that holds the serialized object data about the exception being thrown.">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; that contains contextual information about the source or destination.">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message.">指定したエラー メッセージを使用して、<see cref="T:System.DllNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.DllNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary vsli:raw="Provides random access to unmanaged blocks of memory from managed code.">メモリのアンマネージド ブロックにマネージド コードからランダムにアクセスできるようにします。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class.">
        <see cref="T:System.IO.UnmanagedMemoryAccessor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, and capacity.">指定されたバッファー、オフセット、および容量を使用して、<see cref="T:System.IO.UnmanagedMemoryAccessor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">アクセサーを格納するバッファー。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">アクセサーの開始位置のバイト。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">割り当てるメモリのサイズ (バイト単位)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値が <paramref name="buffer" /> を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="offset" /> または <paramref name="capacity" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値は、アドレス空間の最大値をラップします。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, capacity, and access right.">指定されたバッファー、オフセット、容量、およびアクセス権を使用して、<see cref="T:System.IO.UnmanagedMemoryAccessor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">アクセサーを格納するバッファー。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">アクセサーの開始位置のバイト。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">割り当てるメモリのサイズ (バイト単位)。</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">メモリに対して許可されているアクセス権の種類。 既定値は、<see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" /> です。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値が <paramref name="buffer" /> を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> または <paramref name="capacity" /> が 0 未満です。  
  
- または - 
 <paramref name="access" /> が有効な <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 列挙値ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値は、アドレス空間の最大値をラップします。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt;.">
        <see cref="T:System.IO.UnmanagedMemoryAccessor" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.IO.UnmanagedMemoryAccessor" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Sets the initial values for the accessor.">アクセサーの初期値を設定します。</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">アクセサーを格納するバッファー。</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">アクセサーの開始位置のバイト。</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">割り当てるメモリのサイズ (バイト単位)。</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">メモリに対して許可されているアクセス権の種類。 既定値は、<see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" /> です。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値が <paramref name="buffer" /> を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> または <paramref name="capacity" /> が 0 未満です。  
  
- または - 
 <paramref name="access" /> が有効な <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 列挙値ではありません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値は、アドレス空間の最大値をラップします。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary vsli:raw="Reads a structure of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into a provided reference.">アクセサーから指定された参照に <paramref name="T" /> 型の構造体を読み取ります。</summary>
      <param name="position" vsli:raw="The position in the accessor at which to begin reading.">アクセサー内の読み取り開始位置。</param>
      <param name="structure" vsli:raw="The structure to contain the read data.">読み取りデータが格納されている構造体。</param>
      <typeparam name="T" vsli:raw="The type of structure.">構造体の型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read in a structure of type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;T&quot; /&gt; is a value type that contains one or more reference types.">
        <paramref name="position" /> 型の構造体で読み取るための <paramref name="T" /> の後のバイト数が不足しています。  
  
- または - 
 <see langword="T" /> は 1 つ以上の参照型を含む値型です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads structures of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into an array of type &lt;paramref name=&quot;T&quot; /&gt;.">アクセサーから <paramref name="T" /> 型の配列に <paramref name="T" /> 型の構造体を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes in the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <param name="array" vsli:raw="The array to contain the structures read from the accessor.">アクセサーから読み取った構造体を格納する配列。</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; in which to place the first copied structure.">最初にコピーされた構造体を配置する <paramref name="array" /> 内のインデックス。</param>
      <param name="count" vsli:raw="The number of structures of type &lt;c&gt;T&lt;/c&gt; to read from the accessor.">アクセサーから読み取る <c>T</c> 型の構造体の数。</param>
      <typeparam name="T" vsli:raw="The type of structure.">構造体の型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is not large enough to contain &lt;paramref name=&quot;count&quot; /&gt; of structures (starting from &lt;paramref name=&quot;position&quot; /&gt;).">
        <paramref name="array" /> が、構造体の <paramref name="count" /> (<paramref name="position" /> から開始) を格納するのに十分な大きさではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The number of structures read into &lt;paramref name=&quot;array&quot; /&gt;. This value can be less than &lt;paramref name=&quot;count&quot; /&gt; if there are fewer structures available, or zero if the end of the accessor is reached.">
        <paramref name="array" /> に読み取った構造体の数。 構造体の数が <paramref name="count" /> よりも少ない場合、戻り値は count よりも小さくなります。また、アクセサーの末尾に到達した場合は 0 が返されます。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary vsli:raw="Reads a Boolean value from the accessor.">アクセサーからブール値を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> または <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary vsli:raw="Reads a byte value from the accessor.">アクセサーからバイト値を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary vsli:raw="Reads a character from the accessor.">アクセサーから文字を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary vsli:raw="Reads a decimal value from the accessor.">アクセサーから 10 進値を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal to read is invalid.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。  
  
- または - 
読み取る 10 進数が無効です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary vsli:raw="Reads a double-precision floating-point value from the accessor.">アクセサーから倍精度浮動小数点値を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary vsli:raw="Reads a 16-bit integer from the accessor.">アクセサーから 16 ビットの整数を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary vsli:raw="Reads a 32-bit integer from the accessor.">アクセサーから 32 ビットの整数を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary vsli:raw="Reads a 64-bit integer from the accessor.">アクセサーから 64 ビットの整数を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary vsli:raw="Reads an 8-bit signed integer from the accessor.">アクセサーから 8 ビットの符号付き整数を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary vsli:raw="Reads a single-precision floating-point value from the accessor.">アクセサーから単精度浮動小数点値を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary vsli:raw="Reads an unsigned 16-bit integer from the accessor.">アクセサーから 16 ビットの符号なし整数を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary vsli:raw="Reads an unsigned 32-bit integer from the accessor.">アクセサーから 32 ビットの符号なし整数を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary vsli:raw="Reads an unsigned 64-bit integer from the accessor.">アクセサーから 64 ビットの符号なし整数を読み取ります。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">アクセサーの読み取り開始位置 (バイト数)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
      <returns vsli:raw="The value that was read.">読み取られた値。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary vsli:raw="Writes a Boolean value into the accessor.">アクセサーにブール値を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary vsli:raw="Writes a byte value into the accessor.">アクセサーにバイト値を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary vsli:raw="Writes a character into the accessor.">アクセサーに文字を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary vsli:raw="Writes a decimal value into the accessor.">アクセサーに 10 進値を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal is invalid.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。  
  
- または - 
10 進数が無効です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value into the accessor.">アクセサーに <see cref="T:System.Double" /> 値を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer into the accessor.">アクセサーに 16 ビットの整数を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary vsli:raw="Writes a 32-bit integer into the accessor.">アクセサーに 32 ビットの整数を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary vsli:raw="Writes a 64-bit integer into the accessor.">アクセサーに 64 ビットの整数を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after position to write a value.">値を書き込むための position の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary vsli:raw="Writes an 8-bit integer into the accessor.">アクセサーに 8 ビットの整数を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; into the accessor.">アクセサーに <see cref="T:System.Single" /> を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary vsli:raw="Writes an unsigned 16-bit integer into the accessor.">アクセサーに 16 ビットの符号なし整数を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary vsli:raw="Writes an unsigned 32-bit integer into the accessor.">アクセサーに 32 ビットの符号なし整数を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary vsli:raw="Writes an unsigned 64-bit integer into the accessor.">アクセサーに 64 ビットの符号なし整数を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary vsli:raw="Writes a structure into the accessor.">アクセサーに構造体を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="structure" vsli:raw="The structure to write.">書き込む構造体。</param>
      <typeparam name="T" vsli:raw="The type of structure.">構造体の型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write a structure of type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="position" /> 型の構造体を書き込むための <paramref name="T" /> の後のアクセサー内のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes structures from an array of type &lt;paramref name=&quot;T&quot; /&gt; into the accessor.">
        <paramref name="T" /> 型の配列からアクセサーに構造体を書き込みます。</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="array" vsli:raw="The array to write into the accessor.">アクセサーに書き込む配列。</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; to start writing from.">書き込みの開始位置を示す、<paramref name="array" /> のインデックス。</param>
      <param name="count" vsli:raw="The number of structures in &lt;paramref name=&quot;array&quot; /&gt; to write.">書き込む <paramref name="array" /> 内の構造体の数。</param>
      <typeparam name="T" vsli:raw="The type of structure.">構造体の型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write the number of structures specified by &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="position" /> で指定された構造体の数を書き込むための、<paramref name="count" /> の後のアクセサー内のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。  
  
- または - 
 <paramref name="offset" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">アクセサーは破棄されています。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary vsli:raw="Determines whether the accessor is readable.">アクセサーが読み取り可能かどうかを決定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is readable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">アクセサーが読み取り可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary vsli:raw="Determines whether the accessory is writable.">アクセサーが書き込み可能かどうかを決定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is writable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">アクセサーが書き込み可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary vsli:raw="Gets the capacity of the accessor.">アクセサーの容量を取得します。</summary>
      <returns vsli:raw="The capacity of the accessor.">アクセサーの容量。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary vsli:raw="Determines whether the accessor is currently open by a process.">現在、アクセサーがプロセスによって開かれているかどうかを確認します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is open; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">アクセサーが開かれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">属性付きのフィールドまたはパラメーターの既定値が <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> のインスタンスであり、<see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> が <see langword="null" /> であることを示します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IDispatchConstantAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute.">属性に格納されている <see langword="IDispatch" /> 定数を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IDispatch&quot; /&gt; constant value.">属性に格納されている <see langword="IDispatch" /> 定数。 <see langword="null" /> 定数値としては、<see langword="IDispatch" /> だけが許可されます。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This class cannot be inherited.">属性付きのフィールドまたはパラメーターの既定値が <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> のインスタンスであり、<see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> が <see langword="null" /> であることを示します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IUnknownConstantAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute.">属性に格納されている <see langword="IUnknown" /> 定数を取得します。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IUnknown&quot; /&gt; constant value.">属性に格納されている <see langword="IUnknown" /> 定数。 <see langword="null" /> 定数値としては、<see langword="IUnknown" /> だけが許可されます。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary vsli:raw="Allows an unmanaged method to call a managed method.">アンマネージド メソッドがマネージド メソッドを呼び出せるようにします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary vsli:raw="Encapsulates an array and an offset within the specified array.">指定した配列内の配列とオフセットをカプセル化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; structure.">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="array" vsli:raw="A managed array.">マネージド配列。</param>
      <param name="offset" vsli:raw="The offset in bytes, of the element to be passed through platform invoke.">プラットフォーム呼び出しによって渡される要素のオフセット (バイト単位)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array is larger than 2 gigabytes (GB).">配列は 2 GB を超えています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object matches the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object.">指定したオブジェクトが現在の <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトに一致するかどうかを示します。</summary>
      <param name="obj" vsli:raw="Object to compare with this instance.">現在のインスタンスと比較する対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object matches this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが現在の <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Indicates whether the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance.">指定した <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトが現在のインスタンスに一致するかどうかを示します。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with this instance.">このインスタンスと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトが現在のインスタンスと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary vsli:raw="Returns the managed array referenced by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> が参照するマネージド配列を返します。</summary>
      <returns vsli:raw="The managed array this instance references.">対象のインスタンスが参照するマネージド配列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary vsli:raw="Returns a hash code for this value type.">値型に対するハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this instance.">対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary vsli:raw="Returns the offset provided when this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; was constructed.">
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> の構築時に指定されたオフセットを返します。</summary>
      <returns vsli:raw="The offset for this instance.">対象のインスタンスのオフセット。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects have the same value.">指定した 2 つの <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">
        <paramref name="b" /> パラメーターと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">
        <paramref name="a" /> パラメーターと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="a" /> の値が <paramref name="b" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects no not have the same value.">指定した 2 つの <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトの値が異なるかどうかを判断します。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">
        <paramref name="b" /> パラメーターと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">
        <paramref name="a" /> パラメーターと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is not the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="a" /> の値が <paramref name="b" /> の値と異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary vsli:raw="Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.">Automation Marshaler またはカスタムのプロキシとスタブを使用して、型をマーシャリングするかどうかを指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AutomationProxyAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="val" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">Automation Marshaler を使用してクラスをマーシャリングする場合は <see langword="true" />。プロキシ スタブ マーシャラーを使用する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary vsli:raw="Gets a value indicating the type of marshaler to use.">使用するマーシャラーの種類を示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">Automation Marshaler を使用してクラスをマーシャリングする場合は <see langword="true" />。プロキシ スタブ マーシャラーを使用する場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary vsli:raw="Controls whether Unicode characters are converted to the closest matching ANSI characters.">Unicode 文字を、その文字に一番近い ANSI 文字に変換するかどうかを制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.">マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BestFitMappingAttribute&quot; /&gt; class set to the value of the &lt;see cref=&quot;P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping&quot; /&gt; property.">
        <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> プロパティの値を設定して、<see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="BestFitMapping" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">最適マッピングが有効なことを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary vsli:raw="Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.">Unicode 文字を ANSI 文字に変換するときの、最適マッピングの動作を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">最適マッピングが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_BSTR&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">
        <see langword="VT_BSTR" /> 型のデータをマネージド コードからアンマネージド コードにマーシャリングします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> オブジェクトを指定して、<see cref="T:System.Object" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">ラップされ、<see langword="VT_BSTR" /> としてマーシャリングされるオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.String&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> オブジェクトを指定して、<see cref="T:System.String" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">ラップされ、<see langword="VT_BSTR" /> としてマーシャリングされるオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped &lt;see cref=&quot;T:System.String&quot; /&gt; object to marshal as type &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">
        <see langword="VT_BSTR" /> 型としてマーシャリングされる、ラップされた <see cref="T:System.String" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="The object that is wrapped by &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> によりラップされるオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary vsli:raw="Specifies the calling convention required to call methods implemented in unmanaged code.">アンマネージ コードで実装されたメソッドを呼び出すために必要な呼び出し規約を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary vsli:raw="The caller cleans the stack. This enables calling functions with &lt;see langword=&quot;varargs&quot; /&gt;, which makes it appropriate to use for methods that accept a variable number of parameters, such as &lt;see langword=&quot;Printf&quot; /&gt;.">呼び出し元がスタックを消去します。 これを使用すると、<see langword="varargs" /> で関数を呼び出すことができます。<see langword="Printf" /> など、受け取るパラメーターの数が可変のメソッドで使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary vsli:raw="This calling convention is not supported.">この呼び出し規約はサポートされていません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary vsli:raw="The callee cleans the stack.">呼び出し先がスタックを消去します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary vsli:raw="The first parameter is the &lt;see langword=&quot;this&quot; /&gt; pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.">最初のパラメーターは <see langword="this" /> ポインターで、レジスタ ECX に格納されます。 その他のパラメーターは、スタックにプッシュされます。 この呼び出し規約は、アンマネージ DLL からエクスポートしたクラスのメソッドを呼び出すために使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary vsli:raw="This member is not actually a calling convention, but instead uses the default platform calling convention.">このメンバーは実際には呼び出し規約ではありません。代わりに、既定のプラットフォーム呼び出し規約を使用します。 たとえば、Windows x86 では <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />、Linux x86 では <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" /> が既定値になります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary vsli:raw="Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.">インターフェイスが生成される場合、COM に公開されているクラスに対して生成されるクラス インターフェイスの型を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration value.">
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 列挙値を指定して、<see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="classInterfaceType" vsli:raw="Describes the type of interface that is generated for a class.">クラスに対して生成するインターフェイスの型について説明します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration member.">指定した <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="classInterfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; values that describes the type of interface that is generated for a class.">クラスに対して生成するインターフェイスの型について説明する <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 値の 1 つ。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">クラスに対して生成するインターフェイスの型について説明する <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">クラスに対して生成するインターフェイスの型について説明する <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary vsli:raw="Identifies the type of class interface that is generated for a class.">クラスに対して生成されるクラス インターフェイスの型を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary vsli:raw="&lt;para&gt;Indicates that the class only supports late binding for COM clients. A &lt;see langword=&quot;dispinterface&quot; /&gt; for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the &lt;see langword=&quot;dispinterface&quot; /&gt; in order to prevent clients from caching the DISPIDs of the interface. The &lt;see langword=&quot;dispinterface&quot; /&gt; does not exhibit the versioning problems described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; because clients can only late-bind to the interface.&lt;/para&gt;&lt;para&gt;This is the default setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.&lt;/para&gt;">
        <para>クラスが COM クライアントに対して遅延バインディングだけをサポートすることを示します。 クラスの <see langword="dispinterface" /> は、要求に応じて自動的に COM クライアントに公開されます。 Tlbexp.exe (Type Library Exporter) によって生成されるタイプ ライブラリには、<see langword="dispinterface" /> の型情報は含まれません。これは、クライアントがこのインターフェイスの DISPID をキャッシュしないようにするためです。 クライアントがこの <see langword="dispinterface" /> に対して実行できるのは遅延バインディングだけであるため、<see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> に示されているバージョン管理の問題は、このインターフェイスでは発生しません。</para>
        <para>これは、<see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> の既定の設定です。</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary vsli:raw="Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using &lt;see langword=&quot;AutoDual&quot; /&gt; is strongly discouraged because of the versioning limitations described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.">クラスに対してデュアル クラス インターフェイスを自動的に生成し、COM に公開することを示します。 型情報は、クラス インターフェイスに対して作成され、タイプ ライブラリで公開されます。 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> で説明したようなバージョン管理の制約があるため、<see langword="AutoDual" /> は使用しないことを強くお勧めします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary vsli:raw="&lt;para&gt;Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the &lt;see langword=&quot;IDispatch&quot; /&gt; interface. This is the recommended setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;. Using &lt;see langword=&quot;ClassInterfaceType.None&quot; /&gt; is the only way to expose functionality through interfaces implemented explicitly by the class.&lt;/para&gt;&lt;para&gt;Tlbexp.exe (Type Library Exporter) exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass. In .NET Framework 2.0 and later versions, you can specify the default interface exposed to COM by using the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; attribute. If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward). Tlbexp.exe exposes &lt;see langword=&quot;_Object&quot; /&gt; as the default interface if neither the class nor its base classes implement interfaces.&lt;/para&gt;">クラスに対してクラス インターフェイスを生成しないことを示します。 インターフェイスを明示的に実装していないクラスには、<see langword="IDispatch" /> インターフェイスを通じた遅延バインディングによってしかアクセスできません。 これは、<see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> の推奨値です。 このクラスが明示的に実装しているインターフェイスを通じて機能を公開するには、<see langword="ClassInterfaceType.None" /> の使用が唯一の方法です。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary vsli:raw="Specifies the class identifier of a coclass imported from a type library.">タイプ ライブラリからインポートされるコクラスのクラス識別子を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CoClassAttribute&quot; /&gt; with the class identifier of the original coclass.">元のコクラスのクラス ID を使用して、<see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="coClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class identifier of the original coclass.">元のコクラスのクラス ID を格納している <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary vsli:raw="Gets the class identifier of the original coclass.">元のコクラスのクラス ID を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the class identifier of the original coclass.">元のコクラスのクラス ID を格納している <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CollectionsMarshal">
      <summary vsli:raw="An unsafe class that provides a set of methods to access the underlying data representations of collections.">コレクションの基になるデータ表現にアクセスするための一連のメソッドを提供する安全でないクラスです。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; view over the data in a list.&#xA; Items should not be added or removed from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; while the &lt;see cref=&quot;T:System.Span`1&quot; /&gt; is in use.">リスト内のデータに対する <see cref="T:System.Span`1" /> ビューを取得します。
<see cref="T:System.Span`1" /> の使用中に、項目を <see cref="T:System.Collections.Generic.List`1" /> に対して追加または削除することはできません。</summary>
      <param name="list" vsli:raw="List from which to create the &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">
        <see cref="T:System.Span`1" /> を作成する基になるリスト</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">リスト内の項目の型。</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Span`1&quot; /&gt; instance over the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> に対する <see cref="T:System.Span`1" /> インスタンス</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary vsli:raw="Indicates the COM alias for a parameter or field type.">パラメーターまたはフィールドの種類の COM エイリアスを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAliasNameAttribute&quot; /&gt; class with the alias for the attributed field or parameter.">属性フィールドまたはパラメーターのエイリアスを使用して、<see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="alias" vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">インポートしたときにタイプ ライブラリに検出されたフィールドまたはパラメーターのエイリアス。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary vsli:raw="Gets the alias for the field or parameter as found in the type library when it was imported.">インポートしたときにタイプ ライブラリに検出されたフィールドまたはパラメーターのエイリアスを取得します。</summary>
      <returns vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">インポートしたときにタイプ ライブラリに検出されたフィールドまたはパラメーターのエイリアス。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary vsli:raw="Permits late-bound registration of an event handler.">イベント ハンドラーの遅延バインディング登録を許可します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; class by using the specified type and a name of the event on the type.">指定された型およびその型のイベント名を使用して、<see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The type of object.">オブジェクトの型。</param>
      <param name="eventName" vsli:raw="The name of an event on &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> のイベント名。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Attaches an event handler to a COM object.">イベント ハンドラーを COM オブジェクトにアタッチします。</summary>
      <param name="target" vsli:raw="The target object that the event delegate should bind to.">イベント デリゲートをバインドするターゲット オブジェクト。</param>
      <param name="handler" vsli:raw="The event delegate.">イベント デリゲート。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary vsli:raw="Gets the method that was used to add an event handler delegate to the event source.">イベント ハンドラー デリゲートをイベント ソースに追加するために使用されたメソッドを取得します。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">非パブリック メソッドを返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使われたメソッドがパブリックではないが、呼び出し元が非パブリック メソッドに対するリフレクション アクセス許可を持っていません。</exception>
      <returns vsli:raw="The method that was used to add an event handler delegate to the event source.">イベント ハンドラー デリゲートをイベント ソースに追加するために使用されたメソッド。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.">派生クラスでオーバーライドされると、このメンバーに適用されているすべてのカスタム属性が格納されている配列を取得します。</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このメンバーの継承チェーンを検索して属性を見つける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.">このメンバーは、リフレクションのみのコンテキストに読み込まれる型に属します。 「方法: リフレクションのみのコンテキストにアセンブリを読み込む」を参照してください。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">カスタム属性の型を読み込むことはできません。</exception>
      <returns vsli:raw="An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.">すべてのカスタム属性が格納されている配列。定義されている属性がない場合は要素を持たない配列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.">派生クラスでオーバーライドされると、このメンバーに適用されている指定した型のすべてのカスタム属性が格納されている配列を取得します。</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for. Only attributes that are assignable to this type can be returned.">検索する属性の型。 この型に割り当てることができる属性だけが返されます。</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このメンバーの継承チェーンを検索して属性を見つける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context">このメンバーは、リフレクションのみのコンテキストに読み込まれる型に属します。 「方法: リフレクションのみのコンテキストにアセンブリを読み込む」を参照してください。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">カスタム属性の型を読み込むことはできません。</exception>
      <returns vsli:raw="An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.">指定した型のすべてのカスタム属性が格納されている配列。定義されている属性がない場合は要素を持たない配列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects for the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">現在の <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> の <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトのリストを返します。</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">現在の <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> に適用されている属性に関するデータを表す <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトのジェネリック リスト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary vsli:raw="Returns the public or non-public methods that have been associated with an event in metadata.">メタデータ内のイベントに関連付けられているパブリックまたは非パブリック メソッドを返します。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">非パブリック メソッドを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.">メタデータ内のイベントに関連付けられているメソッドを表す配列。 そのようなメソッドがない場合は、空の配列が返されます。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, returns the method that was called when the event was raised.">派生クラスでオーバーライドされると、イベントの発生時に呼び出されたメソッドを返します。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">非パブリック メソッドを返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使われたメソッドがパブリックではないが、呼び出し元が非パブリック メソッドに対するリフレクション アクセス許可を持っていません。</exception>
      <returns vsli:raw="The object that was called when the event was raised.">イベントの発生時に呼び出されたオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, retrieves the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object for removing a method of the event.">派生クラスでオーバーライドされると、イベントのメソッドを削除するための <see cref="T:System.Reflection.MethodInfo" /> オブジェクトを取得します。</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">非パブリック メソッドを返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使われたメソッドがパブリックではないが、呼び出し元が非パブリック メソッドに対するリフレクション アクセス許可を持っていません。</exception>
      <returns vsli:raw="The method that was used to remove an event handler delegate from the event source.">イベント ハンドラー デリゲートをイベント ソースから削除するために使用されたメソッド。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instances of the specified attribute are applied to this member.">指定された属性型のインスタンスが 1 つ以上このメンバーに適用されているかどうかを示します。</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for.">検索する属性の型。</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このメンバーの継承チェーンを検索して属性を見つける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified attribute has been applied to this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された属性がこのメンバーに適用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Detaches an event handler from a COM object.">COM オブジェクトからイベント ハンドラーをデタッチします。</summary>
      <param name="target" vsli:raw="The target object that the event delegate is bound to.">イベント デリゲートをバインドするターゲット オブジェクト。</param>
      <param name="handler" vsli:raw="The event delegate.">イベント デリゲート。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The event does not have a public &lt;see langword=&quot;remove&quot; /&gt; accessor.">イベントにパブリック <see langword="remove" /> アクセサーがありません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The handler that was passed in cannot be used.">渡されたハンドラーは使用できません。</exception>
      <exception cref="T:System.Reflection.TargetException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; and the event is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; is not declared on the target.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch &lt;see cref=&quot;T:System.Exception&quot; /&gt; instead.">
        <block subset="none" type="note">
          <para>Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、<see cref="T:System.Exception" /> を代わりにキャッチします。</para>
        </block>
        <paramref name="target" /> パラメーターは <see langword="null" /> で、イベントは静的でありません。  
  
- または - 
<see cref="T:System.Reflection.EventInfo" /> はターゲットで宣言されていません。</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The caller does not have access permission to the member.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.MemberAccessException&quot; /&gt;, instead.">
        <block subset="none" type="note">
          <para>Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。</para>
        </block>  
  
 呼び出し元には、このメンバーに対するアクセス許可がありません。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary vsli:raw="Gets the attributes for this event.">このイベントの属性を取得します。</summary>
      <returns vsli:raw="The read-only attributes for this event.">このイベントの読み取り専用属性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">このメンバーを宣言するクラスを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class that declares this member.">このメンバーを宣言するクラスの <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary vsli:raw="Gets the metadata token associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">現在の <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> オブジェクトに関連付けられているメタデータ トークンを取得します。</summary>
      <returns vsli:raw="A 32-bit Integer that represents the metadata token.">メタデータトークンを表す32ビット整数。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary vsli:raw="Gets the module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">現在の <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> オブジェクトに関連付けられているモジュールを取得します。</summary>
      <returns vsli:raw="The module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">現在のオブジェクトに関連付けられているモジュール <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary vsli:raw="Gets the name of the current member.">現在のメンバーの名前を取得します。</summary>
      <returns vsli:raw="The name of this member.">このメンバーの名前。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to initialize this instance.">このインスタンスを初期化するために使用されたクラス オブジェクトを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to initialize the current object.">現在のオブジェクトを初期化するために使用された <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary vsli:raw="Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.">現在のバージョンのアセンブリ内のクラスはすべて、以前のバージョンのアセンブリ内のクラスと互換性があることを COM クライアントに対して示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComCompatibleVersionAttribute&quot; /&gt; class with the major version, minor version, build, and revision numbers of the assembly.">アセンブリのメジャー バージョン番号、マイナー バージョン番号、ビルド番号、およびリビジョン番号を指定して、<see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="major" vsli:raw="The major version number of the assembly.">アセンブリのメジャー バージョン番号。</param>
      <param name="minor" vsli:raw="The minor version number of the assembly.">アセンブリのマイナー バージョン番号。</param>
      <param name="build" vsli:raw="The build number of the assembly.">アセンブリのビルド番号。</param>
      <param name="revision" vsli:raw="The revision number of the assembly.">アセンブリのリビジョン番号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary vsli:raw="Gets the build number of the assembly.">アセンブリのビルド番号を取得します。</summary>
      <returns vsli:raw="The build number of the assembly.">アセンブリのビルド番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the assembly.">アセンブリのメジャー バージョン番号を取得します。</summary>
      <returns vsli:raw="The major version number of the assembly.">アセンブリのメジャー バージョン番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the assembly.">アセンブリのマイナー バージョン番号を取得します。</summary>
      <returns vsli:raw="The minor version number of the assembly.">アセンブリのマイナー バージョン番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary vsli:raw="Gets the revision number of the assembly.">アセンブリのリビジョン番号を取得します。</summary>
      <returns vsli:raw="The revision number of the assembly.">アセンブリのリビジョン番号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary vsli:raw="Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.">タイプ ライブラリからアセンブリにインポートしたときに、クラスまたはインターフェイスについての情報が失われたことを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComConversionLossAttribute&quot; /&gt; class.">
        <see langword="ComConversionLossAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary vsli:raw="Specifies a default interface to expose to COM. This class cannot be inherited.">COM に公開する既定のインターフェイスを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; object as the default interface exposed to COM.">COM に公開する既定のインターフェイスとして <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> オブジェクトを指定して、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value indicating the default interface to expose to COM.">COM に公開する既定のインターフェイスを示す <see cref="T:System.Type" /> 値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">COM に公開する既定のインターフェイスを指定する <see cref="T:System.Type" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">COM に公開する既定のインターフェイスを指定する <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary vsli:raw="Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.">ソース インターフェイスと、コクラスが COM タイプ ライブラリからインポートされるときに生成されるイベント インターフェイスのメソッドを実装するクラスとを識別します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComEventInterfaceAttribute&quot; /&gt; class with the source interface and event provider class.">ソース インターフェイスとイベント プロバイダー クラスを指定して、<see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="SourceInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the original source interface from the type library. COM uses this interface to call back to the managed class.">タイプ ライブラリからの元のソース インターフェイスを格納する <see cref="T:System.Type" />。 COM はこのインターフェイスを使用してマネージド クラスにコールバックします。</param>
      <param name="EventProvider" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">イベント インターフェイスのメソッドを実装するクラスを格納する <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary vsli:raw="Gets the class that implements the methods of the event interface.">イベント インターフェイスのメソッドを実装するクラスを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">イベント インターフェイスのメソッドを実装するクラスを格納する <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary vsli:raw="Gets the original source interface from the type library.">タイプ ライブラリから元のソース インターフェイスを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the source interface.">ソース インターフェイスを格納している <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary vsli:raw="Provides methods that enable .NET delegates that handle events to be added and removed from COM objects.">イベントを処理する .NET Framework デリゲートについて、COM オブジェクトとの間でその追加および削除を行うためのメソッドを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Adds a delegate to the invocation list of events originating from a COM object.">COM オブジェクトから生成されるイベントの呼び出しリストにデリゲートを追加します。</summary>
      <param name="rcw" vsli:raw="The COM object that triggers the events the caller would like to respond to.">呼び出し元が応答するイベントの発生元の COM オブジェクト。</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">イベントを発生させるために COM オブジェクトによって使用されるソース インターフェイスの識別子。</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">ソース インターフェイスのメソッドのディスパッチ識別子。</param>
      <param name="d" vsli:raw="The delegate to invoke when the COM event is fired.">COM イベントの発生時に呼び出すデリゲート。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Removes a delegate from the invocation list of events originating from a COM object.">COM オブジェクトから生成されるイベントの呼び出しリストからデリゲートを削除します。</summary>
      <param name="rcw" vsli:raw="The COM object the delegate is attached to.">デリゲートがアタッチされている COM オブジェクト。</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">イベントを発生させるために COM オブジェクトによって使用されるソース インターフェイスの識別子。</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">ソース インターフェイスのメソッドのディスパッチ識別子。</param>
      <param name="d" vsli:raw="The delegate to remove from the invocation list.">呼び出しリストから削除するデリゲート。</param>
      <returns vsli:raw="The delegate that was removed from the invocation list.">呼び出しリストから削除されたデリゲート。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary vsli:raw="The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.">COM メソッドの呼び出しによって、認識されない HRESULT が返された場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with default values.">
        <see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class from serialization data.">シリアル化データから、<see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that holds the serialized object data.">シリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that supplies the contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報を提供する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message.">指定したメッセージを使用して、<see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message and error code.">指定したメッセージとエラー コードを使用して、<see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that indicates the reason the exception occurred.">例外が発生した理由を示すメッセージ。</param>
      <param name="errorCode" vsli:raw="The error code (HRESULT) value associated with this exception.">この例外に関連付けられているエラー コード (HRESULT) 値です。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary vsli:raw="Converts the contents of the exception to a string.">例外の内容を文字列に変換します。</summary>
      <returns vsli:raw="A string containing the &lt;see cref=&quot;P:System.Exception.HResult&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;, and &lt;see cref=&quot;P:System.Exception.StackTrace&quot; /&gt; properties of the exception.">例外の <see cref="P:System.Exception.HResult" />、<see cref="P:System.Exception.Message" />、<see cref="P:System.Exception.InnerException" />、<see cref="P:System.Exception.StackTrace" /> の各プロパティを含んでいる文字列。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary vsli:raw="Indicates that the attributed type was previously defined in COM.">属性付き型が以前に COM で定義されたものであることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary vsli:raw="Identifies how to expose an interface to COM.">COM に対するインターフェイスの公開方法を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary vsli:raw="Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. &lt;see cref=&quot;F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual&quot; /&gt; is the default value.">このインターフェイスが COM にデュアル インターフェイスとして公開されることを示し、事前バインディングと遅延バインディングの両方を有効にします。 既定値は <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.">インターフェイスが COM にディスパッチ インターフェイスとして公開されることを示し、遅延バインディングのみを有効にします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a Windows Runtime interface.">インターフェイスが COM に Windows ランタイム インターフェイスとして公開されることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary vsli:raw="Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.">インターフェイスが COM に IUnknown から派生したインターフェイスとして公開されることを示し、事前バインディングのみを有効にします。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary vsli:raw="Describes the type of a COM member.">COM メンバーの型について記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary vsli:raw="The member is a normal method.">メンバーは通常のメソッドです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary vsli:raw="The member gets properties.">メンバーはプロパティを取得します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary vsli:raw="The member sets properties.">メンバーはプロパティを設定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.">アセンブリを COM から使用できるように登録するときに呼び出すメソッドを指定します。これにより、登録処理中にユーザー記述のコードを実行できるようになります。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComRegisterFunctionAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary vsli:raw="Identifies a list of interfaces that are exposed as COM event sources for the attributed class.">属性付きクラスの COM イベント ソースとして公開されるインターフェイスのリストを識別します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the name of the event source interface.">イベント ソース インターフェイスの名前を指定して、<see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterfaces" vsli:raw="A null-delimited list of fully qualified event source interface names.">イベント ソース インターフェイスの完全修飾名の null 区切りリスト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the type to use as a source interface.">ソース インターフェイスとして使用する型を指定して、<see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterface" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source interface.">ソース インターフェイスの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">ソース インターフェイスとして使用する型を指定して、<see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">既定のソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">ソース インターフェイスの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">ソース インターフェイスとして使用する型を指定して、<see langword="ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">既定のソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">ソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">ソース インターフェイスの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">ソース インターフェイスとして使用する型を指定して、<see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">既定のソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">ソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">ソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface4" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">ソース インターフェイスの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary vsli:raw="Gets the fully qualified name of the event source interface.">イベント ソース インターフェイスの完全限定名を取得します。</summary>
      <returns vsli:raw="The fully qualified name of the event source interface.">イベント ソース インターフェイスの完全限定名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary vsli:raw="Specifies the requested behavior when setting up an advise sink or a caching connection with an object.">オブジェクトを使用してアドバイズ シンクまたはキャッシュ コネクションを設定する場合に要求される動作を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary vsli:raw="For data advisory connections, assures accessibility to data.">データのアドバイザリ コネクションの場合に、データへのアクセシビリティを確保します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary vsli:raw="For data advisory connections (&lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;), this flag requests the data object not to send data when it calls &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">データのアドバイザリ コネクション (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> または <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />) の場合、このフラグは、データ オブジェクトが <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> の呼び出し時にデータを送信しないよう要求します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary vsli:raw="Requests that the object make only one change notification or cache update before deleting the connection.">コネクションを削除する前に、オブジェクトが 1 回だけ変更通知またはキャッシュの更新を行うよう要求します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary vsli:raw="Requests that the object not wait for the data or view to change before making an initial call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; (for data or view advisory connections) or updating the cache (for cache connections).">オブジェクトがデータまたは表示の変更を待機せずに <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> の初期呼び出し (データまたは表示のアドバイザリ コネクションの場合) またはキャッシュの更新 (キャッシュ コネクションの場合) を行うよう要求します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary vsli:raw="This value is used by DLL object applications and object handlers that perform the drawing of their objects.">この値は、オブジェクトの描画を実行する DLL オブジェクト アプリケーションおよびオブジェクト ハンドラーによって使用されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary vsli:raw="Synonym for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN&quot; /&gt;, which is used more often.">頻繁に使用される <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" /> のシノニム。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary vsli:raw="For cache connections, this flag updates the cached representation only when the object containing the cache is saved.">キャッシュ コネクションの場合、このフラグは、キャッシュを格納しているオブジェクトの保存時にだけ、キャッシュされている表示を更新します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary vsli:raw="Stores the parameters that are used during a moniker binding operation.">モニカー バインド操作中に使用されるパラメーターを格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary vsli:raw="Specifies the size, in bytes, of the &lt;see langword=&quot;BIND_OPTS&quot; /&gt; structure.">
        <see langword="BIND_OPTS" /> 構造体のサイズをバイト単位で指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary vsli:raw="Indicates the amount of time (clock time in milliseconds, as returned by the &lt;see langword=&quot;GetTickCount&quot; /&gt; function) that the caller specified to complete the binding operation.">バインディング操作を完了するために呼び出し元が指定した時間 (<see langword="GetTickCount" /> 関数が返すミリ秒単位の時間) を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary vsli:raw="Controls aspects of moniker binding operations.">モニカー バインディング操作のあらゆる局面を制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary vsli:raw="Represents flags that should be used when opening the file that contains the object identified by the moniker.">モニカーが識別するオブジェクトを格納しているファイルを開くときに使用するフラグを表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary vsli:raw="Contains a pointer to a bound-to &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure, &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure, or an &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">バインド先の <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体、<see cref="T:System.Runtime.InteropServices.VARDESC" /> 構造体、または <see langword="ITypeComp" /> インターフェイスへのポインターを格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure.">
        <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体へのポインターを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary vsli:raw="Represents a pointer to an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ITypeComp&quot; /&gt; interface.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> インターフェイスへのポインターを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure.">
        <see cref="T:System.Runtime.InteropServices.VARDESC" /> 構造体へのポインターを表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary vsli:raw="Identifies the calling convention used by a method described in a METHODDATA structure.">METHODDATA 構造体で記述されたメソッドが使用する呼び出し規則を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary vsli:raw="Indicates that the C declaration (CDECL) calling convention is used for a method.">メソッドに対して C 宣言 (CDECL) 呼び出し規則を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.">メソッドに対して Macintosh Pascal (MACPASCAL) 呼び出し規則を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary vsli:raw="Indicates the end of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.CALLCONV&quot; /&gt; enumeration.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 列挙体の末尾を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.">メソッドに対して Macintosh Programmers’ Workbench (MPW) の CDECL 呼び出し規則を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.">メソッドに対して Macintosh Programmers’ Workbench (MPW) の PASCAL 呼び出し規則を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary vsli:raw="Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.">メソッドに対して MSC Pascal (MSCPASCAL) 呼び出し規則を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary vsli:raw="Indicates that the Pascal calling convention is used for a method.">メソッドに対して Pascal 呼び出し規則を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary vsli:raw="This value is reserved for future use.">この値は、今後使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary vsli:raw="Indicates that the standard calling convention (STDCALL) is used for a method.">メソッドに対して標準呼び出し規則 (STDCALL) を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary vsli:raw="Indicates that the standard SYSCALL calling convention is used for a method.">メソッドに対して標準 SYSCALL 呼び出し規則を使用することを示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary vsli:raw="Describes a connection that exists to a given connection point.">指定したコネクション ポイントに存在する接続を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary vsli:raw="Represents a connection token that is returned from a call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> への呼び出しによって返された接続トークンを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary vsli:raw="Represents a pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on a connected advisory sink. The caller must call &lt;see langword=&quot;IUnknown::Release&quot; /&gt; on this pointer when the &lt;see langword=&quot;CONNECTDATA&quot; /&gt; structure is no longer needed.">接続されたアドバイズ シンク上の <see langword="IUnknown" /> インターフェイスへのポインターを表します。 <see langword="IUnknown::Release" /> 構造体が必要なくなったときに、呼び出し元からこのポインターの指す <see langword="CONNECTDATA" /> を呼び出す必要があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary vsli:raw="Specifies the direction of the data flow in the &lt;paramref name=&quot;dwDirection&quot; /&gt; parameter of the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; method. This determines the formats that the resulting enumerator can enumerate.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> メソッドの <paramref name="dwDirection" /> パラメーターのデータ フローの方向を指定します。 これにより、結果の列挙子によって列挙できる形式が決定されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> が、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> で指定できる形式の列挙子を提供することを要求します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> が、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> で指定できる形式の列挙子を提供することを要求します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary vsli:raw="Identifies the type description being bound to.">バインドされている型の記述を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary vsli:raw="Indicates that a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure was returned.">
        <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体が返されたことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary vsli:raw="Indicates that an &lt;see langword=&quot;IMPLICITAPPOBJ&quot; /&gt; was returned.">
        <see langword="IMPLICITAPPOBJ" /> が返されたことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary vsli:raw="Indicates an end-of-enumeration marker.">列挙体末尾のマーカーを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary vsli:raw="Indicates that no match was found.">一致が見つからなかったことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;TYPECOMP&quot; /&gt; was returned.">
        <see langword="TYPECOMP" /> が返されたことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;VARDESC&quot; /&gt; was returned.">
        <see langword="VARDESC" /> が返されたことを示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary vsli:raw="Contains the arguments passed to a method or property by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">
        <see langword="IDispatch::Invoke" /> によってメソッドまたはプロパティに渡された引数を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary vsli:raw="Represents the count of arguments.">引数の数を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary vsli:raw="Represents the count of named arguments.">名前つき引数の数を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary vsli:raw="Represents the dispatch IDs of named arguments.">名前つき引数のディスパッチ ID を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary vsli:raw="Represents a reference to the array of arguments.">引数の配列への参照を表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary vsli:raw="Specifies the desired data or view aspect of the object when drawing or getting data.">データの描画時または取得時にオブジェクトのデータやビューに必要な特徴を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary vsli:raw="A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.">オブジェクトをコンテナー内の埋め込みオブジェクトとして表示するオブジェクトの表現。 この値は通常、複合ドキュメント オブジェクトに指定されます。 この表示形式は、画面またはプリンターに対して指定できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary vsli:raw="A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.">**[ファイル] メニューの [印刷]** を使用してプリンターに印刷したような画面上のオブジェクトの表現。 記述されるデータでページのシーケンスを表現できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary vsli:raw="An iconic representation of an object.">オブジェクトのアイコン表示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary vsli:raw="A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.">参照ツールでオブジェクトが表示されるようにする、オブジェクトのサムネイル表示。 サムネイルは、約 120 × 120 ピクセル、16 色 (推奨) のデバイスに依存しないビットマップで、メタファイルにラップされる場合があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary vsli:raw="Contains the type description and process transfer information for a variable, function, or a function parameter.">変数、関数、または関数パラメーターの、型の説明およびプロセス転送情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary vsli:raw="Contains information about an element.">要素に関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary vsli:raw="Identifies the type of the element.">要素の型を識別します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary vsli:raw="Contains information about an element.">要素に関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary vsli:raw="Contains information for remoting the element.">要素をリモート処理するための情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary vsli:raw="Contains information about the parameter.">パラメーターに関する情報を格納します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary vsli:raw="Describes the exceptions that occur during &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">
        <see langword="IDispatch::Invoke" /> 中に発生する例外を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary vsli:raw="Describes the error intended for the customer.">ユーザーに対して表示するエラーを記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary vsli:raw="Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.">エラーに関する詳細な情報が含まれているヘルプ ファイルの、ドライブ名、パス名、およびファイル名から成る完全修飾名を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary vsli:raw="Indicates the name of the source of the exception. Typically, this is an application name.">例外の理由を示すメッセージです。 通常は、これはアプリケーション名です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary vsli:raw="Indicates the Help context ID of the topic within the Help file.">ヘルプ ファイル内のトピックのヘルプ コンテキスト ID を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary vsli:raw="Represents a pointer to a function that takes an &lt;see cref=&quot;T:System.Runtime.InteropServices.EXCEPINFO&quot; /&gt; structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to &lt;see langword=&quot;null&quot; /&gt;.">引数として <see cref="T:System.Runtime.InteropServices.EXCEPINFO" />構造体をとり、HRESULT 値を返す関数を指すポインターを表します。 遅延読み込みを行わない場合は、このフィールドは <see langword="null" /> に設定されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary vsli:raw="This field is reserved; it must be set to &lt;see langword=&quot;null&quot; /&gt;.">このフィールドは予約されています。<see langword="null" /> に設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary vsli:raw="A return value describing the error.">エラーについて記述する戻り値です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary vsli:raw="Represents an error code identifying the error.">エラーを識別するエラー コードを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary vsli:raw="This field is reserved; it must be set to 0.">このフィールドは予約されています。0 に設定する必要があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary vsli:raw="Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.">1601 年 1 月 1 日以降の 100 ナノ秒間隔の数を表します。 この構造体は 64 ビット値です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary vsli:raw="Specifies the high 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">
        <see langword="FILETIME" /> の上位の 32 ビット値を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary vsli:raw="Specifies the low 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">
        <see langword="FILETIME" /> の下位の 32 ビット値を指定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary vsli:raw="Represents a generalized Clipboard format.">クリップボードの一般化された形式を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary vsli:raw="Specifies the particular clipboard format of interest.">関係する特定のクリップボード形式を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration constants that indicates how much detail should be contained in the rendering.">表示に含まれる必要がある詳細情報を示す <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 列挙定数の 1 つを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary vsli:raw="Specifies part of the aspect when the data must be split across page boundaries.">データがページ境界を越えて分割される必要があるときの特性の部分を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary vsli:raw="Specifies a pointer to a &lt;see langword=&quot;DVTARGETDEVICE&quot; /&gt; structure containing information about the target device that the data is being composed for.">構成されているデータの対象デバイスに関する情報を格納している <see langword="DVTARGETDEVICE" /> 構造体へのポインターを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration constants, which indicates the type of storage medium used to transfer the object's data.">オブジェクトのデータを転送するために使用するストレージ メディアの種類を示す <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 列挙定数の 1 つを指定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary vsli:raw="Defines a function description.">関数の記述を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary vsli:raw="Specifies the calling convention of a function.">関数の呼び出し規約を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary vsli:raw="Counts the total number of parameters.">パラメーターの合計数をカウントします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary vsli:raw="Counts the optional parameters.">オプションのパラメーターをカウントします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary vsli:raw="Counts the permitted return values.">許可されている戻り値をカウントします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary vsli:raw="Contains the return type of the function.">関数の戻り値の型を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary vsli:raw="Specifies whether the function is virtual, static, or dispatch-only.">関数が仮想、静的、またはディスパッチ専用かどうかを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary vsli:raw="Specifies the type of a property function.">プロパティ関数の型を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary vsli:raw="Indicates the array of &lt;see cref=&quot;F:System.Runtime.InteropServices.ELEMDESC&quot; /&gt;.">
        <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> のサイズを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary vsli:raw="Stores the count of errors a function can return on a 16-bit system.">関数が 16 ビットのシステム上で返すことができるエラーの数を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary vsli:raw="Identifies the function member ID.">関数メンバーの ID を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary vsli:raw="Specifies the offset in the VTBL for &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL&quot; /&gt;.">
        <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" /> の仮想関数テーブル (VTBL: Virtual Function Table) 内のオフセットを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; of a function.">関数の <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a function.">関数のプロパティを定義する定数を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary vsli:raw="The function that supports data binding.">データ連結をサポートしている関数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary vsli:raw="The function that best represents the object. Only one function in a type can have this attribute.">オブジェクトを最もよく表す関数です。 型の 1 つの関数だけが、この属性を持つことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">コンパイラが "abc" の型で "xyz" という名前のメンバーを検索する場合に最適化を許可します。 このようなメンバーが検出され、既定のコレクション要素のアクセサー関数としてフラグが付けられている場合は、そのメンバー関数への呼び出しが生成されます。 dispinterface およびインターフェイスのメンバーでは許可されますが、モジュールでは許可されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE&quot; /&gt; must also be set.">ユーザーに対して表示されるバインド可能な関数です。 <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> も設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">関数は存在し、バインド可能ですが、ユーザーに対して表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="Mapped as individual bindable properties.">個別のバインド可能なプロパティとして割り当てられます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">プロパティはオブジェクト ブラウザーには表示されますが、プロパティ ブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">インターフェイスが既定の動作を備えていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the call is allowed to set the property.">設定した場合は、そのプロパティを設定したメソッドを呼び出すと、初めに <see langword="IPropertyNotifySink::OnRequestEdit" /> が呼び出されます。 <see langword="OnRequestEdit" /> を実装すると、呼び出しがこのプロパティを設定できるかどうかを確認します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary vsli:raw="The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.">関数は、マクロ言語からはアクセスできません。 このフラグは、システムレベル関数または型ブラウザーに表示しない関数で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary vsli:raw="The function returns an object that is a source of events.">関数は、イベントの発生元のオブジェクトを返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">型情報メンバーは、ユーザー インターフェイスに表示する既定のメンバーです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;. If an error occurs during the function, the caller can call &lt;see langword=&quot;GetLastError&quot; /&gt; to retrieve the error code.">関数は <see langword="GetLastError" /> をサポートしています。 関数の実行中にエラーが発生した場合、呼び出し元は <see langword="GetLastError" /> を呼び出してエラー コードを取得できます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary vsli:raw="Defines how to access a function.">関数にアクセスする方法を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary vsli:raw="The function can be accessed only through &lt;see langword=&quot;IDispatch&quot; /&gt;.">関数には、<see langword="IDispatch" /> を使用したときにだけアクセスできます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">関数は、<see langword="static" /> アドレスによってアクセスし、暗黙の <see langword="this" /> ポインターを取得します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary vsli:raw="The function is accessed through the virtual function table (VTBL), and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">関数は、仮想関数テーブル (VTBL: virtual function table) を使用してアクセスし、暗黙の <see langword="this" /> ポインターを取得します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and does not take an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">関数は、<see langword="static" /> アドレスを使用してアクセスし、暗黙の <see langword="this" /> ポインターを取得しません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary vsli:raw="The function is accessed in the same way as &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL&quot; /&gt;, except the function has an implementation.">関数は、実装されている場合を除き、<see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> と同様にアクセスします。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;IAdviseSink&quot; /&gt; interface.">
        <see langword="IAdviseSink" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.">登録されているすべてのアドバイズ シンクに、オブジェクトが実行状態から読み込み済み状態に変更されたことを通知します。  このメソッドは、サーバーから呼び出されます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Notifies all data objects currently registered advisory sinks that data in the object has changed.">現在アドバイズ シンクが登録されているすべてのデータ オブジェクトに、オブジェクトのデータが変更されたことを通知します。</summary>
      <param name="format" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt;, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.">呼び出し元データ オブジェクトの形式、対象デバイス、レンダリング、およびストレージ情報が記述されている <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> (参照渡し)。</param>
      <param name="stgmedium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.">呼び出し元データ オブジェクトのストレージ メディア (グローバル メモリ、ディスク ファイル、ストレージ オブジェクト、ストリーム オブジェクト、グラフィック デバイス インターフェイス (GDI: Graphics Device Interface) オブジェクト、または未定義) およびそのメディアの所有権を定義する <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> (参照渡し)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.">登録されているすべてのアドバイズ シンクに、オブジェクトの名前が変更されたことを通知します。 このメソッドは、サーバーから呼び出されます。</summary>
      <param name="moniker" vsli:raw="A pointer to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on the new full moniker of the object.">オブジェクトの新しく完全なモニカーの <see langword="IMoniker" /> インターフェイスへのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been saved. This method is called by a server.">登録されているすべてのアドバイズ シンクに、オブジェクトの名前が保存されたことを通知します。 このメソッドは、サーバーから呼び出されます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary vsli:raw="Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.">オブジェクトの、登録されているアドバイズ シンクに、ビューが変更されたことを通知します。 このメソッドは、サーバーから呼び出されます。</summary>
      <param name="aspect" vsli:raw="The aspect, or view, of the object. Contains a value taken from the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration.">オブジェクトの特性またはビュー。 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 列挙体から取得された値を格納します。</param>
      <param name="index" vsli:raw="The portion of the view that has changed. Currently, only -1 is valid.">ビューの変更部分。 現在、-1 だけが有効です。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface.">
        <see langword="IBindCtx" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.">コンテキスト オブジェクト パラメーターの内部で維持されるテーブルのキーである文字列を列挙します。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.">このメソッドが返されるときに、オブジェクト パラメーター列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Returns the current binding options stored in the current bind context.">現在のバインド コンテキストに格納されている現在のバインディング オプションを返します。</summary>
      <param name="pbindopts" vsli:raw="A pointer to the structure to receive the binding options.">バインディング オプションを受け取る構造体へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary vsli:raw="Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.">コンテキスト オブジェクト パラメーターの内部で維持されるテーブルで特定のキーを検索し、存在する場合は対応するオブジェクトを返します。</summary>
      <param name="pszKey" vsli:raw="The name of the object to search for.">検索する対象となるオブジェクトの名前。</param>
      <param name="ppunk" vsli:raw="When this method returns, contains the object interface pointer. This parameter is passed uninitialized.">このメソッドが返されるときに、オブジェクトのインターフェイス ポインターを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary vsli:raw="Returns access to the Running Object Table (ROT) relevant to this binding process.">このバインディング プロセスに関連するランニング オブジェクト テーブル (ROT: Running Object Table) へのアクセスを返します。</summary>
      <param name="pprot" vsli:raw="When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.">このメソッドが返されるときに、ランニング オブジェクト テーブル (ROT) への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary vsli:raw="Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.">モニカー操作中にバインドされ、操作完了時に解放する必要があるオブジェクトの 1 つとして、渡されたオブジェクトを登録します。</summary>
      <param name="punk" vsli:raw="The object to register for release.">解放のために登録するオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary vsli:raw="Registers the specified object pointer under the specified name in the internally maintained table of object pointers.">オブジェクト ポインターの内部で維持されるテーブルで、指定した名前を使用して指定したオブジェクト ポインターを登録します。</summary>
      <param name="pszKey" vsli:raw="The name to register &lt;paramref name=&quot;punk&quot; /&gt; with.">
        <paramref name="punk" /> の登録に使用する名前。</param>
      <param name="punk" vsli:raw="The object to register.">登録するオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary vsli:raw="Releases all the objects currently registered with the bind context by using the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> メソッドによってバインド コンテキストに現在登録されているすべてのオブジェクトを解放します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary vsli:raw="Removes the object from the set of registered objects that need to be released.">解放する必要がある登録済みオブジェクトのセットからオブジェクトを削除します。</summary>
      <param name="punk" vsli:raw="The object to unregister for release.">解放のために登録を解除するオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary vsli:raw="Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.">コンテキスト オブジェクト パラメーターの内部で維持されるテーブルで、キーが現在登録されている場合、そのキーを使用して現在検出されているオブジェクトの登録を取り消します。</summary>
      <param name="pszKey" vsli:raw="The key to unregister.">登録を解除するキー。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the specified key was successfully removed from the table; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">指定したキーがテーブルから正常に削除された場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Stores a block of parameters in the bind context. These parameters will apply to later &lt;see langword=&quot;UCOMIMoniker&quot; /&gt; operations that use this bind context.">一連のパラメーターをバインド コンテキストに格納します。 これらのパラメーターは、以降に実行される <see langword="UCOMIMoniker" /> 操作のうち、このバインド コンテキストを使用する操作に適用されます。</summary>
      <param name="pbindopts" vsli:raw="The structure containing the binding options to set.">設定するバインディング オプションを格納している構造体。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface.">
        <see langword="IConnectionPoint" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary vsli:raw="Establishes an advisory connection between the connection point and the caller's sink object.">コネクション ポイントと呼び出し元のシンク オブジェクト間にアドバイザリ コネクションを確立します。</summary>
      <param name="pUnkSink" vsli:raw="A reference to the sink to receive calls for the outgoing interface managed by this connection point.">このコネクション ポイントが管理するアウトゴーイング インターフェイスへの呼び出しを受信するためのシンクへの参照。</param>
      <param name="pdwCookie" vsli:raw="When this method returns, contains the connection cookie. This parameter is passed uninitialized.">このメソッドが返されるときに、接続クッキーを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates an enumerator object for iteration through the connections that exist to this connection point.">コネクション ポイントに存在する接続を反復処理するための列挙子オブジェクトを作成します。</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.">このメソッドが返されるときに、新しく作成された列挙子を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary vsli:raw="Returns the IID of the outgoing interface managed by this connection point.">コネクション ポイントが管理するアウトゴーイング インターフェイスの IID を返します。</summary>
      <param name="pIID" vsli:raw="When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.">このパラメーターが返されるときに、このコネクション ポイントが管理するアウトゴーイング インターフェイスの IID を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface pointer to the connectable object that conceptually owns this connection point.">概念上このコネクション ポイントを所有している接続可能オブジェクトへの <see langword="IConnectionPointContainer" /> インターフェイス ポインターを取得します。</summary>
      <param name="ppCPC" vsli:raw="When this parameter returns, contains the connectable object's &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface. This parameter is passed uninitialized.">このパラメーターが返されるときに、接続可能オブジェクトの <see langword="IConnectionPointContainer" /> インターフェイスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary vsli:raw="Terminates an advisory connection previously established through the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> メソッドが以前に確立したアドバイザリ コネクションを終了します。</summary>
      <param name="dwCookie" vsli:raw="The connection cookie previously returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> メソッドが以前に返した接続クッキー。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface.">
        <see langword="IConnectionPointContainer" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.">IID あたり 1 つのコネクション ポイントとして、接続可能オブジェクトでサポートされているすべてのコネクション ポイントの列挙子を作成します。</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.">このメソッドが返されるときに、列挙子のインターフェイス ポインターを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary vsli:raw="Asks the connectable object if it has a connection point for a particular IID, and if so, returns the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface pointer to that connection point.">特定の IID のコネクション ポイントが存在するかどうかを接続可能オブジェクトに確認し、存在する場合はそのコネクション ポイントへの <see langword="IConnectionPoint" /> インターフェイス ポインターを返します。</summary>
      <param name="riid" vsli:raw="A reference to the outgoing interface IID whose connection point is being requested.">コネクション ポイントを要求しているアウトゴーイング インターフェイス IID への参照。</param>
      <param name="ppCP" vsli:raw="When this method returns, contains the connection point that manages the outgoing interface &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、アウトゴーイング インターフェイス <paramref name="riid" /> を管理するコネクション ポイントを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IDataObject&quot; /&gt; interface.">
        <see langword="IDataObject" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary vsli:raw="Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.">データ オブジェクトとアドバイズ シンク間の接続を作成します。 このメソッドは、アドバイズ シンクをサポートするオブジェクトによって呼び出され、オブジェクトのデータの変更をアドバイズ シンクに通知できるようにします。</summary>
      <param name="pFormatetc" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.">今後の通知のために使用される形式、対象デバイス、特性、およびメディアを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体 (参照渡し)。</param>
      <param name="advf" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; values that specifies a group of flags for controlling the advisory connection.">アドバイザリ コネクションの制御用フラグのグループを指定する <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 値の 1 つ。</param>
      <param name="adviseSink" vsli:raw="A pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface on the advisory sink that will receive the change notification.">変更通知を受信するアドバイズ シンク上の <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> インターフェイスへのポインター。</param>
      <param name="connection" vsli:raw="When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)&quot; /&gt;. If this value is zero, the connection was not established. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、この接続を識別する DWORD トークンへのポインターを格納します。 このトークンを後で <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" /> に渡して、アドバイザリ コネクションを削除できます。 この値が 0 の場合、接続は確立されていません。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The advisory connection was created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; This method is not implemented on the data object.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; The data object does not support change notification.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">このメソッドは、標準の戻り値である E_INVALIDARG、E_UNEXPECTED、および E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。 
 <list type="table"><listheader><term> 値</term><description> 説明</description></listheader><item><term> S_OK</term><description> アドバイザリ コネクションが作成されました。</description></item><item><term> E_NOTIMPL</term><description> このメソッドは、データ オブジェクトには実装されていません。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> に無効な値があります。現在は -1 だけがサポートされています。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> パラメーターに無効な値があります。</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> データ オブジェクトは、変更通知をサポートしていません。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary vsli:raw="Destroys a notification connection that had been previously established.">以前に確立されていた通知の接続を破棄します。</summary>
      <param name="connection" vsli:raw="A DWORD token that specifies the connection to remove. Use the value returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; when the connection was originally established.">削除する接続を指定する DWORD トークン。 接続が最初に確立されたときに、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> から返された値を使用します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates an object that can be used to enumerate the current advisory connections.">現在のアドバイザリ コネクションを列挙するために使用できるオブジェクトを作成します。</summary>
      <param name="enumAdvise" vsli:raw="When this method returns, contains an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&quot; /&gt; that receives the interface pointer to the new enumerator object. If the implementation sets &lt;paramref name=&quot;enumAdvise&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、新しい列挙子オブジェクトへのインターフェイス ポインターを受け取る <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> を格納します。 実装によって <paramref name="enumAdvise" /> が <see langword="null" /> に設定される場合、現時点ではアドバイズ シンクへの接続はありません。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="This method supports the standard return value E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object is successfully instantiated or there are no connections.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; This object does not support advisory notifications.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">このメソッドは、標準の戻り値である E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。  
  
 <list type="table"><listheader><term> 値</term><description> 説明</description></listheader><item><term> S_OK</term><description> 列挙子オブジェクトが正常にインスタンス化されたか、接続がありません。</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> このオブジェクトは、アドバイザリの通知をサポートしていません。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary vsli:raw="Creates an object for enumerating the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures for a data object. These structures are used in calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">データ オブジェクトの <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体を列挙するためのオブジェクトを作成します。 これらの構造体は、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> または <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> の呼び出しで使用されます。</summary>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DATADIR&quot; /&gt; values that specifies the direction of the data.">データの方向を指定する <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 値の 1 つ。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object was successfully created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; The direction specified by the &lt;paramref name=&quot;direction&quot; /&gt; parameter is not supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_S_USEREG&lt;/term&gt;&lt;description&gt; Requests that OLE enumerate the formats from the registry.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">このメソッドは、標準の戻り値である E_INVALIDARG および E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。 
 <list type="table"><listheader><term> 値</term><description> 説明</description></listheader><item><term> S_OK</term><description> 列挙子オブジェクトが正常に作成されました。</description></item><item><term> E_NOTIMPL</term><description><paramref name="direction" /> パラメーターで指定された方向はサポートされていません。</description></item><item><term> OLE_S_USEREG</term><description> OLE がレジストリから形式を列挙するように要求します。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Provides a standard &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that is logically equivalent to a more complex structure. Use this method to determine whether two different &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures would return the same data, removing the need for duplicate rendering.">より複雑な構造体と論理的に等価な、標準の <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体を提供します。 このメソッドを使用して、2 つの異なる <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体が同一のデータを返すかどうかを確認し、表示を二重化する必要をなくします。</summary>
      <param name="formatIn" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored.">
        <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> などの後続の呼び出しで、呼び出し元がデータを取得するために使用する必要がある、形式、メディア、および対象デバイスを定義する <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 構造体へのポインター (参照渡し)。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> メンバーは、この場合には重要ではないため、無視する必要があります。</param>
      <param name="formatOut" vsli:raw="When this method returns, contains a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that contains the most general information possible for a specific rendering, making it canonically equivalent to &lt;c&gt;formatetcIn&lt;/c&gt;. The caller must allocate this structure and the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)&quot; /&gt; method must fill in the data. To retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;, the caller uses the supplied value of &lt;paramref name=&quot;formatOut&quot; /&gt;, unless the value supplied is &lt;see langword=&quot;null&quot; /&gt;. This value is &lt;see langword=&quot;null&quot; /&gt; if the method returns &lt;see langword=&quot;DATA_S_SAMEFORMATETC&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、特定の表示で最も一般的な情報を格納している <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体へのポインターを格納し、<c>formatetcIn</c> と規準的等価にします。 呼び出し元でこの構造体を割り当て、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> メソッドでデータを格納する必要があります。 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> などの後続の呼び出しでデータを取得するには、指定された値が <see langword="null" /> の場合を除き、呼び出し元は <paramref name="formatOut" /> に指定された値を使用します。 このメソッドが <see langword="null" /> を返す場合、この値は <see langword="DATA_S_SAMEFORMATETC" /> です。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> メンバーは、この場合には重要ではないため、無視する必要があります。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The returned &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure is different from the one that was passed.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DATA_S_SAMEFORMATETC&lt;/term&gt;&lt;description&gt; The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures are the same and &lt;see langword=&quot;null&quot; /&gt; is returned in the &lt;paramref name=&quot;formatOut&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">このメソッドは、標準の戻り値である E_INVALIDARG、E_UNEXPECTED、および E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。 
 <list type="table"><listheader><term> 値</term><description> 説明</description></listheader><item><term> S_OK</term><description> 返される <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体は、渡された構造体とは異なります。</description></item><item><term> DATA_S_SAMEFORMATETC</term><description> 複数の <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体が同一で、<paramref name="formatOut" /> パラメーターに <see langword="null" /> が返されます。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> に無効な値があります。現在は -1 だけがサポートされています。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> パラメーターに無効な値があります。</description></item><item><term> OLE_E_NOTRUNNING</term><description> アプリケーションが実行されていません。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. The &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method, which is called by a data consumer, renders the data described in the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure and transfers it through the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure. The caller then assumes responsibility for releasing the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure.">ソース データ オブジェクトからデータを取得します。 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> メソッドは、データ コンシューマーによって呼び出され、指定された <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体に記述されているデータを表示し、指定された <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 構造体を使用してそのデータを転送します。 呼び出し元は、その後で <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 構造体を解放する必要があります。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.">データを渡すときに使用する形式、メディア、および対象デバイスを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体へのポインター (参照渡し)。 ブール型の OR 演算子を使用して複数のメディアを指定し、メソッドがそれらの指定の中から最良のメディアを選択できるようにします。</param>
      <param name="medium" vsli:raw="When this method returns, contains a pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that indicates the storage medium containing the returned data through its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed&quot; /&gt; member, and the responsibility for releasing the medium through the value of its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the receiver of the medium is responsible for releasing it; otherwise, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; points to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on the appropriate object so its &lt;see langword=&quot;Release&quot; /&gt; method can be called. The medium must be allocated and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、<see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> メンバーを通じて返されたデータを格納しているストレージ メディアと、その <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> メンバーの値を通じてメディアを解放する必要性を示す <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 構造体へのポインターを格納します。 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> が <see langword="null" /> の場合は、メディアを受け取ったら、そのメディアを解放する必要があります。それ以外の場合は、<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> が適切なオブジェクトの <see langword="IUnknown" /> インターフェイスを指すため、その <see langword="Release" /> メソッドを呼び出すことができます。 メディアは、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> で割り当て、情報を格納する必要があります。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. This method, which is called by a data consumer, differs from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method in that the caller must allocate and free the specified storage medium.">ソース データ オブジェクトからデータを取得します。 このメソッドはデータ コンシューマーによって呼び出され、呼び出し元が、指定したストレージ メディアを割り当て、解放する必要があるという点で <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> メソッドとは異なります。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt;, and only the following &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; values are valid: &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL&quot; /&gt;, or &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE&quot; /&gt;.">データを渡すときに使用する形式、メディア、および対象デバイスを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体へのポインター (参照渡し)。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> に指定できるのは 1 つのメディアだけです。また、有効な <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 値は、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" />、または <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" /> だけです。</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The caller must also free the medium. The implementation of this method must always supply a value of &lt;see langword=&quot;null&quot; /&gt; for the &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that this parameter points to.">転送されるデータを格納しているストレージ メディアを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> (参照渡し)。 メディアは、呼び出し元で割り当て、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> で情報を格納する必要があります。 呼び出し元は、メディアを解放する必要もあります。 このメソッドの実装では、常に、このパラメーターが指している <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 構造体の<see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> メンバーに <see langword="null" /> 値を与える必要があります。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Determines whether the data object is capable of rendering the data described in the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure. Objects attempting a paste or drop operation can call this method before calling &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; to get an indication of whether the operation may be successful.">データ オブジェクトが、<see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体で記述されているデータを表示できるかどうかを確認します。 貼り付け操作またはドロップ操作をしようとしているオブジェクトは、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> を呼び出す前にこのメソッドを呼び出して、操作が正常に実行できるかどうかを示す値を取得できます。</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use for the query.">問い合わせに使用する形式、メディア、および対象デバイスを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体へのポインター (参照渡し)。</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; A subsequent call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; would probably be successful.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; An invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; An invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_TYMED&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_DVASPECT&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">このメソッドは、標準の戻り値である E_INVALIDARG、E_UNEXPECTED、および E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。 
 <list type="table"><listheader><term> 値</term><description> 説明</description></listheader><item><term> S_OK</term><description> 後続の <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> の呼び出しは、正常に実行されないこともあります。</description></item><item><term> DV_E_LINDEX</term><description><see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> の無効な値。現在は -1 だけがサポートされています。</description></item><item><term> DV_E_FORMATETC</term><description><paramref name="pFormatetc" /> パラメーターの無効な値。</description></item><item><term> DV_E_TYMED</term><description> 正しくない <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 値。</description></item><item><term> DV_E_DVASPECT</term><description> 正しくない <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 値。</description></item><item><term> OLE_E_NOTRUNNING</term><description> アプリケーションが実行されていません。</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary vsli:raw="Transfers data to the object that implements this method. This method is called by an object that contains a data source.">このメソッドを実装するオブジェクトにデータを転送します。 このメソッドは、データ ソースを格納しているオブジェクトから呼び出されます。</summary>
      <param name="formatIn" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.">ストレージ メディアに格納されているデータを解釈するときに、データ オブジェクトによって使用される形式を定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体 (参照渡し)。</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure, passed by reference, that defines the storage medium in which the data is being passed.">データが渡されるストレージ メディアを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 構造体 (参照渡し)。</param>
      <param name="release" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that the data object called, which implements &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. &lt;see langword=&quot;false&quot; /&gt; to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.">
        <see langword="true" /> を指定すると、呼び出しから制御が戻った後、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> を実装する呼び出されるデータ オブジェクトがストレージ メディアを所有します。 つまり、データ オブジェクトは、<see langword="ReleaseStgMedium" /> 関数の呼び出しによって使用された後に、メディアを解放する必要があります。 <see langword="false" /> を指定すると、呼び出し元がストレージ メディアの所有権を保持し、呼び出されるデータ オブジェクトは呼び出しの期間だけストレージ メディアを使用します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary vsli:raw="Contains information needed for transferring a structure element, parameter, or function return value between processes.">構造体の要素、パラメーター、または関数の戻り値をプロセス間で転送するために必要な情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary vsli:raw="Reserved; set to &lt;see langword=&quot;null&quot; /&gt;.">予約済み。<see langword="null" /> に設定されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary vsli:raw="Indicates an &lt;see cref=&quot;T:System.Runtime.InteropServices.IDLFLAG&quot; /&gt; value describing the type.">型を記述する <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 値を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">構造体の要素、パラメーター、または関数の戻り値をプロセス間で転送する方法を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">パラメーターは、呼び出し元から呼び出し先に情報を渡します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">パラメーターは、クライアント アプリケーションのローカル ID です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">パラメーターは、呼び出し先から呼び出し元に情報を返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">パラメーターは、メンバーの戻り値です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">パラメーターが情報を渡すか、情報を受け取るかを指定しません。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnectionPoints&quot; /&gt; interface.">
        <see langword="IEnumConnectionPoints" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt" vsli:raw="The number of &lt;see langword=&quot;IConnectionPoint&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" /> に返される <see langword="IConnectionPoint" /> の参照の数。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">このメソッドが返されるときに、列挙された接続への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">このメソッドが返されるときに、<paramref name="rgelt" /> に列挙された実際の接続数への参照を格納します。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">列挙のシーケンスを最初にリセットします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列挙体内でスキップする要素の数。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnections&quot; /&gt; interface.">
        <see langword="IEnumConnections" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.CONNECTDATA&quot; /&gt; structures to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" /> に返される <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 構造体の数。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">このメソッドが返されるときに、列挙された接続への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">このメソッドが返されるときに、<paramref name="rgelt" /> に列挙された実際の接続数への参照を格納します。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">列挙のシーケンスを最初にリセットします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列挙体内でスキップする要素の数。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumFORMATETC&quot; /&gt; interface.">
        <see langword="IEnumFORMATETC" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">現在の列挙状態と同じ列挙状態を格納する新しい列挙子を作成します。</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" /> に返される <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> の参照の数。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、列挙された <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 参照への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、<paramref name="rgelt" /> に列挙された参照の実数への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">列挙のシーケンスを最初にリセットします。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">
        <see langword="S_OK" /> 値を保持している HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列挙体内でスキップする要素の数。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumMoniker&quot; /&gt; interface.">
        <see langword="IEnumMoniker" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt" vsli:raw="The number of monikers to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" /> に返されるモニカーの数。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.">このメソッドが返されるときに、列挙されたモニカーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of monikers enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">このメソッドが返されるときに、<paramref name="rgelt" /> に列挙されたモニカーの実数への参照を格納します。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">列挙のシーケンスを最初にリセットします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列挙体内でスキップする要素の数。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumSTATDATA&quot; /&gt; interface.">
        <see langword="IEnumSTATDATA" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">現在の列挙状態と同じ列挙状態を格納する新しい列挙子を作成します。</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" /> に返される <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> の参照の数。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、列挙された <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 参照への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched" vsli:raw="When this parameter returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">このパラメーターが返されるときに、<paramref name="rgelt" /> に列挙された参照の実数への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">列挙のシーケンスを最初にリセットします。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">
        <see langword="S_OK" /> 値を保持している HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列挙体内でスキップする要素の数。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumString&quot; /&gt; interface.">
        <see langword="IEnumString" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt" vsli:raw="The number of strings to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">
        <paramref name="rgelt" /> に返す文字列の数。</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.">このメソッドが返されるときに、列挙された文字列への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of strings enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">このメソッドが返されるときに、<paramref name="rgelt" /> に列挙された文字列の実数への参照を格納します。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">列挙のシーケンスを最初にリセットします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列挙体内でスキップする要素の数。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumVARIANT&quot; /&gt; interface.">
        <see langword="IEnumVARIANT" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT&quot; /&gt; reference to the newly created enumerator.">新しく作成された列挙子への <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> 参照。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt" vsli:raw="The number of elements to return in &lt;c&gt;rgelt&lt;/c&gt;.">
        <c>rgelt</c> で返される要素の数。</param>
      <param name="rgVar" vsli:raw="When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.">このメソッドが返されるときに、列挙された要素への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of elements enumerated in &lt;c&gt;rgelt&lt;/c&gt;.">このメソッドが返されるときに、<c>rgelt</c> に列挙された実際の要素数への参照を格納します。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">列挙のシーケンスを最初にリセットします。</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">
        <see langword="S_OK" /> 値を保持している HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">列挙体内でスキップする要素の数。</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">スキップした要素の数が <paramref name="celt" /> に等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IMoniker&quot; /&gt; interface, with COM functionality from &lt;see langword=&quot;IPersist&quot; /&gt; and &lt;see langword=&quot;IPersistStream&quot; /&gt;.">
        <see langword="IMoniker" /> および <see langword="IPersist" /> の COM 機能を備えた <see langword="IPersistStream" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Uses the moniker to bind to the object that it identifies.">モニカーを使用して、そのモニカーが識別するオブジェクトにバインドします。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used in this binding operation.">このバインド操作で使用するバインド コンテキスト オブジェクトの <see langword="IBindCtx" /> インターフェイスへの参照。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="riidResult" vsli:raw="The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.">モニカーが識別するオブジェクトと通信するために、クライアントが使用するインターフェイスのインターフェイス ID (IID: Interface Identifier)。</param>
      <param name="ppvResult" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riidResult&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="riidResult" /> によって要求されたインターフェイスへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Retrieves an interface pointer to the storage that contains the object identified by the moniker.">モニカーで識別されるオブジェクトが格納されているストレージへのインターフェイス ポインターを取得します。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used during this binding operation.">このバインド操作で使用するバインド コンテキスト オブジェクトの <see langword="IBindCtx" /> インターフェイスへの参照。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="riid" vsli:raw="The interface identifier (IID) of the storage interface requested.">要求したストレージ インターフェイスのインターフェイス ID (IID: Interface Identifier)。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="riid" /> によって要求されたインターフェイスへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Creates a new moniker based on the common prefix that this moniker shares with another moniker.">このモニカーが別のモニカーと共有する、共通のプリフィックスに基づいて、新しいモニカーを作成します。</summary>
      <param name="pmkOther" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on another moniker to compare with the current moniker for a common prefix.">共通のプリフィックス作成のために現在のモニカーと比較する別のモニカーの <see langword="IMoniker" /> インターフェイスへの参照。</param>
      <param name="ppmkPrefix" vsli:raw="When this method returns, contains the moniker that is the common prefix of the current moniker and &lt;paramref name=&quot;pmkOther&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、現在のモニカーと <paramref name="pmkOther" /> の共通のプリフィックスであるモニカーを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Combines the current moniker with another moniker, creating a new composite moniker.">現在のモニカーと別のモニカーを結合し、新しい複合モニカーを作成します。</summary>
      <param name="pmkRight" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on a moniker to append to the end of the current moniker.">現在のモニカーの末尾に追加するモニカーの <see langword="IMoniker" /> インターフェイスへの参照。</param>
      <param name="fOnlyIfNotGeneric" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the caller requires a nongeneric composition. The operation proceeds only if &lt;paramref name=&quot;pmkRight&quot; /&gt; is a moniker class that the current moniker can combine with in some way other than forming a generic composite. &lt;see langword=&quot;false&quot; /&gt; to indicate that the method can create a generic composite if necessary.">呼び出し元が汎用的でない複合を必要としている場合は <see langword="true" /> とします。 この場合、<paramref name="pmkRight" /> が汎用的な複合モニカーを形成しないような方法で現在のモニカーを複合できるモニカー クラスである場合に限り、操作が続行されます。 メソッドが必要に応じて汎用的な複合モニカーを作成できる場合は <see langword="false" /> とします。</param>
      <param name="ppmkComposite" vsli:raw="When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.">このメソッドが返されるときに、作成された複合モニカーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.">複合モニカーのコンポーネントを列挙できる列挙子へのポインターを提供します。</summary>
      <param name="fForward" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enumerate the monikers from left to right. &lt;see langword=&quot;false&quot; /&gt; to enumerate from right to left.">モニカーを左から右へ列挙する場合は <see langword="true" />。 右から左へ列挙する場合は <see langword="false" />。</param>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.">このメソッドが返されるときに、モニカーの列挙子オブジェクトへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">オブジェクトのクラス ID (CLSID: Class Identifier) を取得します。</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains the CLSID. This parameter is passed uninitialized.">このメソッドが返されるときに、CLSID を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary vsli:raw="Gets the display name, which is a user-readable representation of the current moniker.">現在のモニカーについてユーザーが解釈できる形式の表示名を取得します。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this operation.">この操作に使用するバインド コンテキストへの参照。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="ppszDisplayName" vsli:raw="When this method returns, contains the display name string. This parameter is passed uninitialized.">このメソッドが返されるときに、表示名文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary vsli:raw="Returns the size, in bytes, of the stream needed to save the object.">オブジェクトを保存するために必要なストリームのサイズをバイト単位で返します。</summary>
      <param name="pcbSize" vsli:raw="When this method returns, contains a &lt;see langword=&quot;long&quot; /&gt; value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.">このメソッドが返されるときに、このオブジェクトを保存するために必要なストリームのサイズをバイト単位で示す <see langword="long" /> 値を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Provides a number representing the time that the object identified by the current moniker was last changed.">このモニカーで識別されるオブジェクトが、最後に変更された時刻を表す数値を示します。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">このバインド操作に使用するバインド コンテキストへの参照。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="pFileTime" vsli:raw="When this method returns, contains the time of the last change. This parameter is passed uninitialized.">このメソッドが返されるときに、最後の変更時刻を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary vsli:raw="Calculates a 32-bit integer using the internal state of the moniker.">モニカーの内部状態を使用して、32 ビット整数を計算します。</summary>
      <param name="pdwHash" vsli:raw="When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.">このメソッドが返されるときに、このモニカーのハッシュ値を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.">現在のモニカーまたは類似の構造を持つモニカーの右側に複合された場合に、他の何にも複合されないモニカーを示します。</summary>
      <param name="ppmk" vsli:raw="When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.">このメソッドが返されるときに、現在のモニカーと逆のモニカーを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary vsli:raw="Checks the object for changes since it was last saved.">最後に保存した時点からオブジェクトが変更されたかどうかを確認します。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the object has changed; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">オブジェクトが変更されている場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Compares the current moniker with a specified moniker and indicates whether they are identical.">指定したモニカーと現在のモニカーを比較し、同一かどうかを示します。</summary>
      <param name="pmkOtherMoniker" vsli:raw="A reference to the moniker to use for comparison.">比較に使用するモニカーへの参照。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the monikers are identical; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">モニカーが同一の場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the object that is identified by the current moniker is currently loaded and running.">現在のモニカーで識別されるオブジェクトが現在読み込まれ、実行中かどうかを判断します。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">このバインド操作に使用するバインド コンテキストへの参照。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="pmkNewlyRunning" vsli:raw="A reference to the moniker most recently added to the Running Object Table (ROT).">ランニング オブジェクト テーブル (ROT: Running Object Table) に最後に追加されたモニカーへの参照。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is running; an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is not running; or an &lt;see langword=&quot;E_UNEXPECTED&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">モニカーが実行中の場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。モニカーが実行されていない場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary vsli:raw="Indicates whether this moniker is of one of the system-supplied moniker classes.">このモニカーがシステム指定のモニカー クラスの 1 つかどうかを示します。</summary>
      <param name="pdwMksys" vsli:raw="When this method returns, contains a pointer to an integer that is one of the values from the &lt;see langword=&quot;MKSYS&quot; /&gt; enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.">このメソッドが返されるときに、<see langword="MKSYS" /> 列挙体からの値の 1 つであり、COM モニカー クラスの 1 つを参照する整数へのポインターを格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is a system moniker; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">モニカーがシステム モニカーの場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary vsli:raw="Initializes an object from the stream where it was previously saved.">オブジェクトが以前格納されたストリームから、そのオブジェクトを初期化します。</summary>
      <param name="pStm" vsli:raw="The stream that the object is loaded from.">読み込まれるオブジェクトが格納されているストリーム。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Reads as many characters of the specified display name as the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)&quot; /&gt; understands and builds a moniker corresponding to the portion read.">指定した表示名の文字を読み取るときに、<see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> が読み取った部分に対応するモニカーを理解および構築するために必要な文字数だけ読み取ります。</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">このバインド操作に使用するバインド コンテキストへの参照。</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker that has been built from the display name up to this point.">このポイントまでの表示名から構築されたモニカーへの参照。</param>
      <param name="pszDisplayName" vsli:raw="A reference to the string containing the remaining display name to parse.">解析する対象の、残りの表示名を格納している文字列への参照。</param>
      <param name="pchEaten" vsli:raw="When this method returns, contains the number of characters that were consumed in parsing &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="pszDisplayName" /> の解析に使用した文字数を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="ppmkOut" vsli:raw="When this method returns, contains a reference to the moniker that was built from &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="pszDisplayName" /> から構築されたモニカーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.">現在のモニカーと同じオブジェクトを参照するが、それ以上に効率的にバインドできる縮小された別のモニカーを返します。</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context to use in this binding operation.">このバインド操作で使用するバインド コンテキストの <see langword="IBindCtx" /> インターフェイスへの参照。</param>
      <param name="dwReduceHowFar" vsli:raw="A value that specifies how far the current moniker should be reduced.">現在のモニカーを縮小する程度を指定する値。</param>
      <param name="ppmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker.">現在のモニカーの左側のモニカーへの参照。</param>
      <param name="ppmkReduced" vsli:raw="When this method returns, contains a reference to the reduced form of the current moniker, which can be &lt;see langword=&quot;null&quot; /&gt; if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.">このメソッドが返されるときに、現在のモニカーの縮小形式への参照を格納します。エラーが発生したか、現在のモニカーが縮小されなかった場合は、<see langword="null" /> を格納することができます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.">現在のモニカー (または、同様の構造体を持つモニカー) に追加された場合に、指定したモニカーを生成するモニカーを示します。</summary>
      <param name="pmkOther" vsli:raw="A reference to the moniker to which a relative path should be taken.">相対パスを取得する必要があるモニカーへの参照。</param>
      <param name="ppmkRelPath" vsli:raw="When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.">このメソッドが返されるときに、関連モニカーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary vsli:raw="Saves an object to the specified stream.">指定したストリームにオブジェクトを保存します。</summary>
      <param name="pStm" vsli:raw="The stream to which the object is saved.">オブジェクトの保存先ストリーム。</param>
      <param name="fClearDirty" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to clear the modified flag after the save is complete; otherwise &lt;see langword=&quot;false&quot; /&gt;.">保存の完了後に変更フラグをクリアする場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary vsli:raw="Defines the attributes of an implemented or inherited interface of a type.">実装された型のインターフェイスまたは継承された型のインターフェイスの属性を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary vsli:raw="The interface or dispinterface represents the default for the source or sink.">インターフェイスまたは dispinterface は、ソースまたはシンクの既定値を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary vsli:raw="Sinks receive events through the virtual function table (VTBL).">シンクは、仮想関数テーブル (VTBL: virtual function table) を経由してイベントを受け取ります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary vsli:raw="The member should not be displayed or programmable by users.">メンバーは、ユーザーが表示したり、プログラミングしたりできません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary vsli:raw="This member of a coclass is called rather than implemented.">コクラスのこのメンバーは、実装されるのではなく呼び出されます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary vsli:raw="Specifies how to invoke a function by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">
        <see langword="IDispatch::Invoke" /> で関数を呼び出す方法を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary vsli:raw="The member is called using a normal function invocation syntax.">メンバーは、通常の関数呼び出しの構文を使用して呼び出されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary vsli:raw="The function is invoked using a normal property access syntax.">関数は、通常のプロパティ アクセスの構文を使用して呼び出されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary vsli:raw="The function is invoked using a property value assignment syntax.">関数は、プロパティ値割り当ての構文を使用して呼び出されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary vsli:raw="The function is invoked using a property reference assignment syntax.">関数は、プロパティ参照割り当ての構文を使用して呼び出されます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IPersistFile&quot; /&gt; interface, with functionality from &lt;see langword=&quot;IPersist&quot; /&gt;.">
        <see langword="IPersistFile" /> 機能を備えた <see langword="IPersist" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">オブジェクトのクラス ID (CLSID: Class Identifier) を取得します。</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.">このメソッドが返されるときに、CLSID への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary vsli:raw="Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.">オブジェクトの現在の作業ファイルへの絶対パスを取得します。現在の作業ファイルがない場合は、オブジェクトの既定のファイル名プロンプトを取得します。</summary>
      <param name="ppszFileName" vsli:raw="When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.">このメソッドが返されるときに、現在のファイルのパスを含む 0 で終わる文字列へのポインターのアドレス、または既定のファイル名プロンプト (*.txt など) を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary vsli:raw="Checks an object for changes since it was last saved to its current file.">現在のファイルを最後に保存した時点からオブジェクトが変更されたかどうかを確認します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the file has changed since it was last saved; &lt;see langword=&quot;S_FALSE&quot; /&gt; if the file has not changed since it was last saved.">最後に保存した時点からファイルが変更された場合は <see langword="S_OK" />。最後に保存した時点からファイルが変更されていない場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary vsli:raw="Opens the specified file and initializes an object from the file contents.">指定したファイルを開き、ファイルに含まれているオブジェクトを初期化します。</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to open.">開くファイルの絶対パスを含む 0 で終わる文字列。</param>
      <param name="dwMode" vsli:raw="A combination of values from the &lt;see langword=&quot;STGM&quot; /&gt; enumeration to indicate the access mode in which to open &lt;paramref name=&quot;pszFileName&quot; /&gt;.">
        <paramref name="pszFileName" /> を開くためのアクセス モードを示す、<see langword="STGM" /> 列挙体からの値の組み合わせ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary vsli:raw="Saves a copy of the object into the specified file.">指定したファイルにオブジェクトのコピーを保存します。</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to which the object is saved.">オブジェクトの保存先ファイルの絶対パスを含む、0 で終わる文字列。</param>
      <param name="fRemember" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to used the &lt;paramref name=&quot;pszFileName&quot; /&gt; parameter as the current working file; otherwise &lt;see langword=&quot;false&quot; /&gt;.">現在の作業ファイルとして <paramref name="pszFileName" /> パラメーターを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary vsli:raw="Notifies the object that it can write to its file.">ファイルに書き込むことができることをオブジェクトに通知します。</summary>
      <param name="pszFileName" vsli:raw="The absolute path of the file where the object was previously saved.">オブジェクトが前回保存されたファイルの絶対パス。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IRunningObjectTable&quot; /&gt; interface.">
        <see langword="IRunningObjectTable" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Enumerates the objects currently registered as running.">現在実行中として登録されているオブジェクトを列挙します。</summary>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.">このメソッドが返されるときに、ランニング オブジェクト テーブル (ROT: Running Object Table) の新しい列挙子を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary vsli:raw="Returns the registered object if the supplied object name is registered as running.">指定したオブジェクト名が実行中として登録されている場合は、登録済みのオブジェクトを返します。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">ROT で検索するモニカーへの参照。</param>
      <param name="ppunkObject" vsli:raw="When this method returns, contains the requested running object. This parameter is passed uninitialized.">このメソッドが返されるときに、要求された実行中オブジェクトを格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">操作が成功したかどうかを示す <see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.">ROT でモニカーを検索し、変更時刻が記録されていれば報告します。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">ROT で検索するモニカーへの参照。</param>
      <param name="pfiletime" vsli:raw="When this object returns, contains the objects last change time. This parameter is passed uninitialized.">このオブジェクトが返されるときに、オブジェクトの最後の変更時刻を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">操作が成功したかどうかを示す <see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the specified moniker is currently registered in the Running Object Table (ROT).">指定したモニカーが現在 ROT に登録されているかどうかを確認します。</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">ROT で検索するモニカーへの参照。</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">操作が成功したかどうかを示す <see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Notes the time that a particular object changed so &lt;see langword=&quot;IMoniker::GetTimeOfLastChange&quot; /&gt; can report an appropriate change time.">
        <see langword="IMoniker::GetTimeOfLastChange" /> が適切な変更時刻を報告できるように、特定のオブジェクトが変更された時刻を記録します。</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry of the changed object.">変更されたオブジェクトの ROT エントリ。</param>
      <param name="pfiletime" vsli:raw="A reference to the object's last change time.">オブジェクトの最後の変更時刻への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Registers that the supplied object has entered the running state.">指定したオブジェクトが実行状態になったことを登録します。</summary>
      <param name="grfFlags" vsli:raw="Specifies whether the Running Object Table's (ROT) reference to &lt;paramref name=&quot;punkObject&quot; /&gt; is weak or strong, and controls access to the object through its entry in the ROT.">
        <paramref name="punkObject" /> への ROT 参照が、ウィーク参照かストロング参照かを指定し、ROT のエントリを使用してオブジェクトへのアクセスを制御します。</param>
      <param name="punkObject" vsli:raw="A reference to the object being registered as running.">実行中として登録されているオブジェクトへの参照。</param>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker that identifies &lt;paramref name=&quot;punkObject&quot; /&gt;.">
        <paramref name="punkObject" /> を識別するモニカーへの参照。</param>
      <returns vsli:raw="A value that can be used to identify this ROT entry in subsequent calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> または <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" /> への後続の呼び出しで、この ROT エントリを識別するために使用できる値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary vsli:raw="Unregisters the specified object from the Running Object Table (ROT).">ROT から指定したオブジェクトの登録を解除します。</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry to revoke.">登録解除する ROT エントリ。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IStream&quot; /&gt; interface, with &lt;see langword=&quot;ISequentialStream&quot; /&gt; functionality.">
        <see langword="ISequentialStream" /> 機能を備えた <see langword="IStream" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary vsli:raw="Creates a new stream object with its own seek pointer that references the same bytes as the original stream.">元のストリームと同じバイトを参照する独自のシーク ポインターを持つ新しいストリーム オブジェクトを作成します。</summary>
      <param name="ppstm" vsli:raw="When this method returns, contains the new stream object. This parameter is passed uninitialized.">このメソッドが戻るとき、新しいストリーム オブジェクトが含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary vsli:raw="Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.">トランザクション モードで開いたストリーム オブジェクトに対する変更が親ストレージに反映されるようにします。</summary>
      <param name="grfCommitFlags" vsli:raw="A value that controls how the changes for the stream object are committed.">ストリーム オブジェクトの変更がコミットされる方法を制御する値です。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.">ストリームの現在のシーク ポインターから別のストリームの現在のシーク ポインターに、指定したバイト数をコピーします。</summary>
      <param name="pstm" vsli:raw="A reference to the destination stream.">コピー先ストリームへの参照。</param>
      <param name="cb" vsli:raw="The number of bytes to copy from the source stream.">ソース ストリームからコピーするバイト数です。</param>
      <param name="pcbRead" vsli:raw="On successful return, contains the actual number of bytes read from the source.">正常に返された場合は、コピー元から読み取られた実際のバイト数を格納します。</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the destination.">正常に返された場合は、コピー先に書き込まれた実際のバイト数を格納します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Restricts access to a specified range of bytes in the stream.">ストリーム内の指定したバイト範囲へのアクセスを制限します。</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">範囲の先頭のバイト オフセットです。</param>
      <param name="cb" vsli:raw="The length of the range, in bytes, to restrict.">制限する範囲の長さ (バイト単位) です。</param>
      <param name="dwLockType" vsli:raw="The requested restrictions on accessing the range.">範囲へのアクセスに対して要求する制限です。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.">現在のシーク ポインターから始めて、指定したバイト数をストリーム オブジェクトからメモリに読み取ります。</summary>
      <param name="pv" vsli:raw="When this method returns, contains the data read from the stream. This parameter is passed uninitialized.">このメソッドが戻るとき、ストリームから読み取られたデータが含まれています。 このパラメーターは初期化せずに渡されます。</param>
      <param name="cb" vsli:raw="The number of bytes to read from the stream object.">ストリーム オブジェクトから読み取るバイト数です。</param>
      <param name="pcbRead" vsli:raw="A pointer to a &lt;see langword=&quot;ULONG&quot; /&gt; variable that receives the actual number of bytes read from the stream object.">ストリーム オブジェクトから読み取られた実際のバイト数を受け取る <see langword="ULONG" /> 変数を指すポインターです。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary vsli:raw="Discards all changes that have been made to a transacted stream since the last &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)&quot; /&gt; call.">前回 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> が呼び出されてからトランザクション ストリームに対して行われた変更をすべて破棄します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary vsli:raw="Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.">シーク ポインターの位置を新しい位置に変更します。新しい位置は、ストリームの先頭、ストリームの終端、または現在のシーク ポインターを基準とする相対的な位置です。</summary>
      <param name="dlibMove" vsli:raw="The displacement to add to &lt;paramref name=&quot;dwOrigin&quot; /&gt;.">
        <paramref name="dwOrigin" /> に追加するオフセットです。</param>
      <param name="dwOrigin" vsli:raw="The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.">シークの原点です。 開始点は、ファイルの先頭、現在のシーク ポインター、またはファイルの末尾にできます。</param>
      <param name="plibNewPosition" vsli:raw="On successful return, contains the offset of the seek pointer from the beginning of the stream.">正常に返された場合は、ストリームの先頭からのシーク ポインターのオフセットが含まれています。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary vsli:raw="Changes the size of the stream object.">ストリーム オブジェクトのサイズを変更します。</summary>
      <param name="libNewSize" vsli:raw="The new size of the stream as a number of bytes.">ストリームの新しいサイズ (バイト数) です。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.STATSTG&quot; /&gt; structure for this stream.">このストリームの <see cref="T:System.Runtime.InteropServices.STATSTG" /> 構造体を取得します。</summary>
      <param name="pstatstg" vsli:raw="When this method returns, contains a &lt;see langword=&quot;STATSTG&quot; /&gt; structure that describes this stream object. This parameter is passed uninitialized.">このメソッドが返されるときに、このストリーム オブジェクトについて記述する <see langword="STATSTG" /> 構造体を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="grfStatFlag" vsli:raw="Members in the &lt;see langword=&quot;STATSTG&quot; /&gt; structure that this method does not return, thus saving some memory allocation operations.">
        <see langword="STATSTG" /> 構造体のメンバーのうち、このメソッドが返さないメンバー (不要なメモリ割り当てが行われないようにするため)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Removes the access restriction on a range of bytes previously restricted with the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)&quot; /&gt; method.">以前に <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> メソッドで適用したバイト範囲のアクセス制限を削除します。</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">範囲の先頭のバイト オフセットです。</param>
      <param name="cb" vsli:raw="The length, in bytes, of the range to restrict.">制限する範囲の長さ (バイト単位) です。</param>
      <param name="dwLockType" vsli:raw="The access restrictions previously placed on the range.">以前にこの範囲に適用したアクセス制限です。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a specified number of bytes into the stream object starting at the current seek pointer.">現在のシーク ポインターから始めて、指定したバイト数をストリーム オブジェクトに書き込みます。</summary>
      <param name="pv" vsli:raw="The buffer to write this stream to.">このストリームを書き込むバッファーです。</param>
      <param name="cb" vsli:raw="The number of bytes to write to the stream.">ストリームに書き込むバイト数です。</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;, this method does not provide the actual number of bytes written.">正常に返された場合は、ストリーム オブジェクトに書き込まれた実際のバイト数が含まれています。 呼び出し元がこのポインターを <see cref="F:System.IntPtr.Zero" /> に設定した場合、このメソッドは書き込まれた実際のバイト数を示しません。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">
        <see langword="ITypeComp" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary vsli:raw="Maps a name to a member of a type, or binds global variables and functions contained in a type library.">型のメンバーに名前を割り当てたり、タイプ ライブラリに格納されているグローバル変数、および関数をバインドしたりします。</summary>
      <param name="szName" vsli:raw="The name to bind.">バインドする名前。</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; computed by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">
        <see langword="LHashValOfNameSys" /> によって計算された <paramref name="szName" /> のハッシュ値。</param>
      <param name="wFlags" vsli:raw="A flags word containing one or more of the invoke flags defined in the &lt;see langword=&quot;INVOKEKIND&quot; /&gt; enumeration.">
        <see langword="INVOKEKIND" /> 列挙体に定義されている 1 つ以上の呼び出しフラグを含んでいる単語。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to the type description that contains the item to which it is bound, if a &lt;see langword=&quot;FUNCDESC&quot; /&gt; or &lt;see langword=&quot;VARDESC&quot; /&gt; was returned. This parameter is passed uninitialized.">
        <see langword="FUNCDESC" /> または <see langword="VARDESC" /> が返された場合は、このメソッドが返されるときに、バインド先の項目を格納している型の説明への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pDescKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;DESCKIND&quot; /&gt; enumerator that indicates whether the name bound-to is a &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;TYPECOMP&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、バインド先の名前が <see langword="DESCKIND" />、<see langword="VARDESC" />、<see langword="FUNCDESC" /> のいずれであるかを示す <see langword="TYPECOMP" /> 列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pBindPtr" vsli:raw="When this method returns, contains a reference to the bound-to &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;ITypeComp&quot; /&gt; interface. This parameter is passed uninitialized.">このメソッドが返されるときに、バインド先の <see langword="VARDESC" />、<see langword="FUNCDESC" />、または <see langword="ITypeComp" /> インターフェイスへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Binds to the type descriptions contained within a type library.">タイプ ライブラリ内に格納されている型の説明にバインドします。</summary>
      <param name="szName" vsli:raw="The name to bind.">バインドする名前。</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; determined by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">
        <see langword="LHashValOfNameSys" /> によって決定された <paramref name="szName" /> のハッシュ値。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeInfo&quot; /&gt; of the type to which &lt;paramref name=&quot;szName&quot; /&gt; was bound. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="szName" /> がバインドされた型の <see langword="ITypeInfo" /> への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeComp&quot; /&gt; variable. This parameter is passed uninitialized.">このメソッドが返されるときに、<see langword="ITypeComp" /> 変数への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary vsli:raw="Provides the managed definition of the Component Automation ITypeInfo interface.">コンポーネント オートメーションの ITypeInfo インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">DLL 内で定義されている静的な関数または変数のアドレスを取得します。</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">取得する <see langword="static" /> メンバーのアドレスのメンバー ID。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">メンバーがプロパティかどうかを指定し、プロパティである場合はその種類を示す <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">このメソッドが返されるときに、<see langword="static" /> メンバーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">コンポーネント クラス (coclass) を記述する型の新しいインスタンスを作成します。</summary>
      <param name="pUnkOuter" vsli:raw="The object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">制御側の <see langword="IUnknown" /> として機能するオブジェクト。</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">作成されたオブジェクトと通信するために、呼び出し元が使用するインターフェイスの IID。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">このメソッドが返されるときに、作成されたオブジェクトへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">型の説明が格納されているタイプ ライブラリと、そのタイプ ライブラリ内におけるその型の説明のインデックスを取得します。</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">このメソッドが返されるときに、この型の説明が格納されているタイプ ライブラリへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">このメソッドが返されるときに、型の説明が格納されているタイプ ライブラリ内におけるその説明のインデックスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">DLL 内の関数へのエントリ ポイントの記述または仕様を取得します。</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">DLL エントリの記述を取得するメンバー関数の ID。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">
        <paramref name="memid" /> で識別されるメンバーの種類を指定する <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">
        <see langword="null" /> ではない場合、関数は <paramref name="pBstrDllName" /> を DLL の名前が格納されている <see langword="BSTR" /> に設定します。</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">
        <see langword="null" /> ではない場合、関数は <c>lpbstrName</c> をエントリ ポイントの名前が含まれている <see langword="BSTR" /> に設定します。</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">
        <see langword="null" /> ではない場合、関数は序数によって定義されます。<c>lpwOrdinal</c> はその序数を指すように設定されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">指定した型の説明に対するヘルプ トピックのドキュメント文字列、ヘルプ ファイルの完全限定名とパス、およびコンテキスト ID を取得します。</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">ドキュメントを取得するメンバーの ID。</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">このメソッドが返されるときに、項目メソッドの名前を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、指定した項目のドキュメント文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した項目に関連付けられたヘルプ コンテキストへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">このメソッドが返されるときに、ヘルプ ファイルの完全修飾名を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">指定した関数に関する情報を格納している <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体を取得します。</summary>
      <param name="index" vsli:raw="The index of the function description to return.">取得する関数の説明のインデックス。</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した関数について記述する <see langword="FUNCDESC" /> 構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">メンバー名をメンバー ID に、パラメーター名をパラメーター ID に割り当てます。</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">割り当てる名前の配列。</param>
      <param name="cNames" vsli:raw="The count of names to map.">割り当てる名前の数。</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">このメソッドが返されるときに、名前の割り当てを格納する配列への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">型の説明で実装されたインターフェイスまたは基本インターフェイスに対する <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 値を取得します。</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">実装されたインターフェイスまたは基本インターフェイスのインデックス。</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">このメソッドが返されるときに、<see langword="IMPLTYPEFLAGS" /> 列挙体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">マーシャリング情報を取得します。</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">必要なマーシャリング情報を示すメンバー ID。</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">このメソッドが返されるときに、参照先の型の説明で記述されている、構造体のフィールドのマーシャリングに使用する <see langword="opcode" /> 文字列への参照を格納します。返す情報がない場合は、<see langword="null" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">指定した関数 ID に対応する指定したメンバー ID の変数 (またはプロパティやメソッドの名前とそのパラメーター) を取得します。</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">1 つ以上の名前が返されるメンバーの ID。</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">このメソッドが返されるときに、メンバーと関連付けられた 1 つ以上の名前を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">
        <paramref name="rgBstrNames" /> 配列の長さ。</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="rgBstrNames" /> 配列内の名前の数を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions if a type description references other type descriptions.">型の説明が別の型の説明を参照している場合に、参照先の型の説明を取得します。</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">取得する参照先の型の説明へのハンドル。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">このメソッドが返されるときに、参照先の型の説明を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types if a type description describes a COM class.">型の説明が COM クラスの記述である場合に、実装されたインターフェイス型に関する型の説明を取得します。</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">ハンドルを取得する実装された型のインデックス。</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">このメソッドが返されるときに、実装されたインターフェイスのハンドルへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">型の説明の属性を格納している <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 構造体を取得します。</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">このメソッドが返されるときに、この型の説明の属性を格納する構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">型の説明の <see langword="ITypeComp" /> インターフェイスを取得します。これを使用すると、クライアント コンパイラを型の説明のメンバーにバインドできます。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface of the containing type library. This parameter is passed uninitialized.">このメソッドが返されるときに、型の説明が格納されているタイプ ライブラリの <see langword="ITypeComp" /> インターフェイスへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">指定した変数を記述している <see langword="VARDESC" /> 構造体を取得します。</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">取得する変数の説明のインデックス。</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した変数について記述する <see langword="VARDESC" /> 構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">型の説明により説明されるインターフェイスを実装しているオブジェクトについて、メソッドを呼び出したりプロパティにアクセスしたりします。</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">型の説明で記述されているインターフェイスへの参照。</param>
      <param name="memid" vsli:raw="A value that identifies the interface member.">インターフェイス メンバーを識別する値。</param>
      <param name="wFlags" vsli:raw="Flags that describe the context of the invoke call.">呼び出しのコンテキストを記述するフラグ。</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">引数の配列、名前付き引数の DISPID の配列、各配列内の要素数のカウントを格納している構造体への参照。</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">結果が格納される場所への参照。 <paramref name="wFlags" /> が <see langword="DISPATCH_PROPERTYPUT" /> または <see langword="DISPATCH_PROPERTYPUTREF" /> を指定している場合、<paramref name="pVarResult" /> は無視されます。 結果が必要ない場合は、<see langword="null" /> に設定します。</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">
        <see langword="DISP_E_EXCEPTION" /> が返される場合にだけ情報が格納される例外情報構造体へのポインター。</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index within &lt;c&gt;rgvarg&lt;/c&gt; of the argument with the incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error. This parameter is passed uninitialized.">
        <see langword="Invoke" /> が <see langword="DISP_E_TYPEMISMATCH" /> を返す場合、<paramref name="puArgErr" /> は、型が正しくない引数について <c>rgvarg</c> 内のインデックスを示します。 複数の引数がエラーを返す場合、<paramref name="puArgErr" /> はエラーのある最初の引数だけを示します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">以前に <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">解放する <see langword="FUNCDESC" /> 構造体への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">以前に <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">解放する <see langword="TYPEATTR" /> 構造体への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">以前に <see langword="VARDESC" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">解放する <see langword="VARDESC" /> 構造体への参照。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeInfo2&quot; /&gt; interface.">
        <see langword="ITypeInfo2" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">DLL 内で定義されている静的な関数または変数のアドレスを取得します。</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">取得する <see langword="static" /> メンバーのアドレスのメンバー ID。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">メンバーがプロパティかどうかを指定し、プロパティである場合はその種類を示す <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">このメソッドが返されるときに、<see langword="static" /> メンバーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">コンポーネント クラス (coclass) を記述する型の新しいインスタンスを作成します。</summary>
      <param name="pUnkOuter" vsli:raw="An object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">制御側の <see langword="IUnknown" /> として機能するオブジェクト。</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">作成されたオブジェクトと通信するために、呼び出し元が使用するインターフェイスの IID。</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">このメソッドが返されるときに、作成されたオブジェクトへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">ライブラリのすべてのカスタム データ項目を取得します。</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data from the specified function.">指定した関数からすべてのカスタム データを取得します。</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">カスタム データを取得する関数のインデックス。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data for the specified implementation type.">指定した実装型のすべてのカスタム データを取得します。</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">カスタム データの実装型のインデックス。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt; which holds all custom data items.">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all of the custom data for the specified function parameter.">指定した関数パラメーターのすべてのカスタム データを取得します。</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">カスタム データを取得する関数のインデックス。</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">カスタム データを取得するこの関数のパラメーターのインデックス。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets the variable for the custom data.">カスタム データの変数を取得します。</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">カスタム データを取得する変数のインデックス。</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">型の説明が格納されているタイプ ライブラリと、そのタイプ ライブラリ内におけるその型の説明のインデックスを取得します。</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">このメソッドが返されるときに、この型の説明が格納されているタイプ ライブラリへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">このメソッドが返されるときに、型の説明が格納されているタイプ ライブラリ内におけるその説明のインデックスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">カスタム データを取得します。</summary>
      <param name="guid" vsli:raw="The GUID used to identify the data.">データの識別に使用する GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">このメソッドが戻るときに、取得したデータを格納する場所を指定する <see langword="Object" /> が含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">DLL 内の関数へのエントリ ポイントの記述または仕様を取得します。</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">DLL エントリの記述を取得するメンバー関数の ID。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">
        <paramref name="memid" /> で識別されるメンバーの種類を指定する <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">
        <see langword="null" /> ではない場合、関数は <paramref name="pBstrDllName" /> を DLL の名前が格納されている <see langword="BSTR" /> に設定します。</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">
        <see langword="null" /> ではない場合、関数は <c>lpbstrName</c> をエントリ ポイントの名前が含まれている <see langword="BSTR" /> に設定します。</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">
        <see langword="null" /> ではない場合、関数は序数によって定義されます。<c>lpwOrdinal</c> はその序数を指すように設定されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">指定した型の説明に対するヘルプ トピックのドキュメント文字列、ヘルプ ファイルの完全限定名とパス、およびコンテキスト ID を取得します。</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">ドキュメントを取得するメンバーの ID。</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">このメソッドが返されるときに、項目メソッドの名前を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、指定した項目のドキュメント文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した項目に関連付けられたヘルプ コンテキストへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">このメソッドが返されるときに、ヘルプ ファイルの完全修飾名を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">ドキュメントの文字列、完全なヘルプ ファイルの名前とパス、使用するローカリゼーション コンテキスト、およびヘルプ ファイル内のライブラリ ヘルプ トピック用のコンテキスト ID を取得します。</summary>
      <param name="memid" vsli:raw="The member identifier for the type description.">型の説明のメンバー識別子。</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが呼び出し元に復帰するときに、指定された項目の名前を含む <see langword="BSTR" /> が含まれています。 呼び出し元が項目名を必要としない場合、<paramref name="pbstrHelpString" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが呼び出し元に復帰するときに、ヘルプのローカリゼーション コンテキストが含まれています。 呼び出し元がヘルプ コンテキストを必要としない場合、<paramref name="pdwHelpStringContext" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが呼び出し元に復帰するときに、ヘルプ ファイルで使用される DLL を含むファイルの完全修飾名を含む <see langword="BSTR" /> が含まれています。 呼び出し元がファイル名を必要としない場合、<paramref name="pbstrHelpStringDll" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data from the specified function.">指定した関数からカスタム データを取得します。</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">カスタム データを取得する関数のインデックス。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">データの識別に使用する GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specified where to put the data. This parameter is passed uninitialized.">このメソッドが戻るときに、データを格納する場所を指定した <see langword="Object" /> を含みます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">指定した関数に関する情報を格納している <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体を取得します。</summary>
      <param name="index" vsli:raw="The index of the function description to return.">取得する関数の説明のインデックス。</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した関数について記述する <see langword="FUNCDESC" /> 構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).">既知の DISPID に基づいて特定のメンバーにバインドしますが、ここでメンバー名は不明です (たとえば、既定のメンバーにバインドする場合)。</summary>
      <param name="memid" vsli:raw="The member identifier.">メンバー識別子です。</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by memid.">memid によって識別されるメンバーの種類を指定する <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="pFuncIndex" vsli:raw="When this method returns, contains an index into the function. This parameter is passed uninitialized.">このメソッドから制御が戻った時点で、インデックスが関数に格納されます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">メンバー名をメンバー ID に、パラメーター名をパラメーター ID に割り当てます。</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">割り当てる名前の配列。</param>
      <param name="cNames" vsli:raw="The count of names to map.">割り当てる名前の数。</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">このメソッドが返されるときに、名前の割り当てを格納する配列への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the implementation type of the custom data.">カスタム データの実装の種類を取得します。</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">カスタム データの実装型のインデックス。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">データの識別に使用する GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">このメソッドが戻るときに、取得したデータを格納する場所を指定する <see langword="Object" /> が含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">型の説明で実装されたインターフェイスまたは基本インターフェイスに対する <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 値を取得します。</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">実装されたインターフェイスまたは基本インターフェイスのインデックス。</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">このメソッドが返されるときに、<see langword="IMPLTYPEFLAGS" /> 列挙体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">マーシャリング情報を取得します。</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">必要なマーシャリング情報を示すメンバー ID。</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">このメソッドが返されるときに、参照先の型の説明で記述されている、構造体のフィールドのマーシャリングに使用する <see langword="opcode" /> 文字列への参照を格納します。返す情報がない場合は、<see langword="null" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">指定した関数 ID に対応する指定したメンバー ID の変数 (またはプロパティやメソッドの名前とそのパラメーター) を取得します。</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">1 つ以上の名前が返されるメンバーの ID。</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">このメソッドが返されるときに、メンバーと関連付けられた 1 つ以上の名前を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">
        <paramref name="rgBstrNames" /> 配列の長さ。</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="rgBstrNames" /> 配列内の名前の数を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the specified custom data parameter.">指定されたカスタム データ パラメーターを取得します。</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">カスタム データを取得する関数のインデックス。</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">カスタム データを取得するこの関数のパラメーターのインデックス。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">データの識別に使用する GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">このメソッドが戻るときに、取得したデータを格納する場所を指定する <see langword="Object" /> が含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions, if a type description references other type descriptions.">型の説明が別の型の説明を参照している場合に、参照先の型の説明を取得します。</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">取得する参照先の型の説明へのハンドル。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">このメソッドが返されるときに、参照先の型の説明を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types, if a type description describes a COM class.">型の説明が COM クラスの記述である場合に、実装されたインターフェイス型に関する型の説明を取得します。</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">ハンドルを取得する実装された型のインデックス。</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">このメソッドが返されるときに、実装されたインターフェイスのハンドルへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">型の説明の属性を格納している <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 構造体を取得します。</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">このメソッドが返されるときに、この型の説明の属性を格納する構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">型の説明の <see langword="ITypeComp" /> インターフェイスを取得します。これを使用すると、クライアント コンパイラを型の説明のメンバーにバインドできます。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; of the containing type library. This parameter is passed uninitialized.">このメソッドが返されるときに、型の説明が格納されているタイプ ライブラリの <see langword="ITypeComp" /> への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary vsli:raw="Returns the type flags without any allocations. This method returns a &lt;see langword=&quot;DWORD&quot; /&gt; type flag, which expands the type flags without growing the &lt;see langword=&quot;TYPEATTR&quot; /&gt; (type attribute).">割り当てを行わず型フラグを返します。 このメソッドは、<see langword="TYPEATTR" /> (型の属性) を拡張せずに型のフラグを拡張する <see langword="DWORD" /> 型フラグを返します。</summary>
      <param name="pTypeFlags" vsli:raw="When this method returns, contains a &lt;see langword=&quot;DWORD&quot; /&gt; reference to a &lt;see langword=&quot;TYPEFLAG&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが戻った時点で、<see langword="TYPEFLAG" /> への <see langword="DWORD" /> 参照が格納されます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration quickly, without doing any allocations.">割り当てを一切実行せずに、<see langword="TYPEKIND" /> 列挙型を迅速に返します。</summary>
      <param name="pTypeKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration. This parameter is passed uninitialized.">このメソッドが戻った時点で、<see langword="TYPEKIND" /> 列挙型への参照が格納されます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the variable for the custom data.">カスタム データの変数を取得します。</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">カスタム データを取得する変数のインデックス。</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">データの識別に使用する GUID。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">このメソッドが戻るときに、取得したデータを格納する場所を指定する <see langword="Object" /> が含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">指定した変数を記述している <see langword="VARDESC" /> 構造体を取得します。</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">取得する変数の説明のインデックス。</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した変数について記述する <see langword="VARDESC" /> 構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known &lt;see langword=&quot;DISPID&quot; /&gt;, where the member name is not known (for example, when binding to a default member).">既知の <see langword="DISPID" /> に基づいて特定のメンバーにバインドしますが、ここでメンバー名は不明です (たとえば、既定のメンバーにバインドする場合)。</summary>
      <param name="memid" vsli:raw="The member identifier.">メンバー識別子です。</param>
      <param name="pVarIndex" vsli:raw="When this method returns, contains an index of &lt;paramref name=&quot;memid&quot; /&gt;. This parameter is passed uninitialized.">このメソッドから制御が戻った時点で、<paramref name="memid" /> のインデックスが格納されます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">型の説明により説明されるインターフェイスを実装しているオブジェクトについて、メソッドを呼び出したりプロパティにアクセスしたりします。</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">型の説明で記述されているインターフェイスへの参照。</param>
      <param name="memid" vsli:raw="Identifier of the interface member.">インターフェイス メンバーの識別子。</param>
      <param name="wFlags" vsli:raw="Flags describing the context of the invoke call.">呼び出しのコンテキストを記述するフラグ。</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">引数の配列、名前付き引数の DISPID の配列、各配列内の要素数のカウントを格納している構造体への参照。</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">結果が格納される場所への参照。 <paramref name="wFlags" /> が <see langword="DISPATCH_PROPERTYPUT" /> または <see langword="DISPATCH_PROPERTYPUTREF" /> を指定している場合、<paramref name="pVarResult" /> は無視されます。 結果が必要ない場合は、<see langword="null" /> に設定します。</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">
        <see langword="DISP_E_EXCEPTION" /> が返される場合にだけ情報が格納される例外情報構造体へのポインター。</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index of the argument with incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error.">
        <see langword="Invoke" /> が <see langword="DISP_E_TYPEMISMATCH" /> を返す場合、<paramref name="puArgErr" /> は、型が正しくない引数のインデックスを示します。 複数の引数がエラーを返す場合、<paramref name="puArgErr" /> はエラーのある最初の引数だけを示します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">以前に <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">解放する <see langword="FUNCDESC" /> 構造体への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">以前に <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">解放する <see langword="TYPEATTR" /> 構造体への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">以前に <see langword="VARDESC" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">解放する <see langword="VARDESC" /> 構造体への参照。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeLib&quot; /&gt; interface.">
        <see langword="ITypeLib" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">タイプ ライブラリで型の説明を検索します。</summary>
      <param name="szNameBuf" vsli:raw="The name to search for. This is an in/out parameter.">検索する名前。 これは in/out パラメーターです。</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">
        <see langword="LHashValOfNameSys" /> 関数によって計算され、検索を高速化するハッシュ値。 <paramref name="lHashVal" /> が 0 の場合、値が計算されます。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="szNameBuf" /> で指定した名前を含む型の説明へのポインターの配列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="rgMemId" vsli:raw="An array of the &lt;see langword=&quot;MEMBERID&quot; /&gt; 's of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. Cannot be &lt;see langword=&quot;null&quot; /&gt;.">検出された項目の <see langword="MEMBERID" /> の配列。<paramref name="rgMemId" />[i] は、<paramref name="ppTInfo" />[i] によって指定される型の説明にインデックスを作成する <see langword="MEMBERID" /> です。 <see langword="null" /> にすることはできません。</param>
      <param name="pcFound" vsli:raw="On entry, indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">開始時に、検索するインスタンス数を示します。 たとえば、最初の項目を検索するには、<paramref name="pcFound" /> = 1 を呼び出します。 検索は 1 つのインスタンスが見つかったときに停止します。  
  
終了時には、検索されたインスタンス数を示します。 <paramref name="pcFound" /> の <see langword="in" /> 値と <see langword="out" /> 値が同じ場合は、その名前を含む型の説明がもっと多く存在している可能性があります。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">ヘルプ ファイルのライブラリ ヘルプ トピックのライブラリ ドキュメント文字列、完全なヘルプ ファイル名とパス、およびコンテキスト識別子を取得します。</summary>
      <param name="index" vsli:raw="The index of the type description whose documentation is to be returned.">ドキュメントを取得する型の説明のインデックス。</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した項目の名前を表す文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した項目のドキュメント文字列を表す文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した項目に関連付けられたヘルプ コンテキストの識別子を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.">このメソッドが返されるときに、ヘルプ ファイルの完全修飾名を表す文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">ライブラリの属性を格納している構造体を取得します。</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">このメソッドが返されるときに、ライブラリの属性を格納している構造体を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">クライアント コンパイラがライブラリの型、変数、定数、およびグローバル関数をバインドできるようにします。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an instance of a &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、この <see langword="ITypeComp" /> の <see langword="ITypeLib" /> インスタンスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">ライブラリ内の指定した型の説明を取得します。</summary>
      <param name="index" vsli:raw="The index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">取得する <see langword="ITypeInfo" /> インターフェイスのインデックス。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="index" /> が参照する型について記述する <see langword="ITypeInfo" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">タイプ ライブラリにある型の説明の数を返します。</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">タイプ ライブラリにある型の説明の数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">指定された GUID に対応するタイプ記述を取得します。</summary>
      <param name="guid" vsli:raw="The IID of the interface or CLSID of the class whose type info is requested.">インターフェイスの IID または型情報が要求されたクラスの CLSID。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">このメソッドが返されるときに、要求された <see langword="ITypeInfo" /> インターフェイスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">型の説明の型を取得します。</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">タイプ ライブラリ内の型の説明のインデックス。</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">このメソッドが返されるときに、型の説明の <see langword="TYPEKIND" /> 列挙体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">渡された文字列がライブラリで記述される型またはメンバーの名前を格納しているかどうかを示します。</summary>
      <param name="szNameBuf" vsli:raw="The string to test. This is an in/out parameter.">テストする文字列。 これは in/out パラメーターです。</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">
        <paramref name="szNameBuf" /> のハッシュ値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="szNameBuf" /> がタイプ ライブラリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> メソッドから初めに取得した <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">解放する <see langword="TLIBATTR" /> 構造体。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;ITypeLib2&quot; /&gt; interface.">
        <see langword="ITypeLib2" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">タイプ ライブラリで型の説明を検索します。</summary>
      <param name="szNameBuf" vsli:raw="The name to search for.">検索する名前。</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">
        <see langword="LHashValOfNameSys" /> 関数によって計算され、検索を高速化するハッシュ値。 <paramref name="lHashVal" /> が 0 の場合、値が計算されます。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="szNameBuf" /> で指定した名前を含む型の説明へのポインターの配列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="rgMemId" vsli:raw="When this method returns, contains an array of the &lt;see langword=&quot;MEMBERID&quot; /&gt;s of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. This parameter cannot be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、検出された項目の <see langword="MEMBERID" /> の配列を格納します。<paramref name="rgMemId" />[i] は、<paramref name="ppTInfo" />[i] によって指定される型の説明にインデックスを作成する <see langword="MEMBERID" /> です。 このパラメーターを <see langword="null" /> とすることはできません。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pcFound" vsli:raw="On entry, a value, passed by reference, that indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">検索するインスタンス数を示している、開始時の値 (参照渡し)。 たとえば、最初の項目を検索するには、<paramref name="pcFound" /> = 1 を呼び出します。 検索は 1 つのインスタンスが見つかったときに停止します。  
  
終了時には、検索されたインスタンス数を示します。 <paramref name="pcFound" /> の <see langword="in" /> 値と <see langword="out" /> 値が同じ場合は、その名前を含む型の説明がもっと多く存在している可能性があります。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">ライブラリのすべてのカスタム データ項目を取得します。</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">カスタム データを取得します。</summary>
      <param name="guid" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; , passed by reference, that is used to identify the data.">
        <see cref="T:System.Guid" />、参照によって渡され、データの識別に使用されます。</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.">このメソッドが戻るときに、取得したデータを格納する場所を指定するオブジェクトが含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">ヘルプ ファイルのライブラリ ヘルプ トピックのライブラリ ドキュメント文字列、完全なヘルプ ファイル名とパス、およびコンテキスト識別子を取得します。</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned.">ドキュメントを取得する型の説明のインデックス。</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、指定した項目の名前を指定する文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、指定した項目のドキュメント文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">このメソッドが返されるときに、指定した項目に関連付けられたヘルプ コンテキストの識別子を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、ヘルプ ファイルの完全修飾名を指定する文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">ライブラリのドキュメントの文字列、完全なヘルプ ファイルの名前とパス、使用するローカリゼーション コンテキスト、およびヘルプ ファイル内のライブラリ ヘルプ トピック用のコンテキスト ID を取得します。</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned; if &lt;paramref name=&quot;index&quot; /&gt; is -1, the documentation for the library is returned.">返されるドキュメントの種類の説明のインデックス。<paramref name="index" /> が -1 の場合、ライブラリのドキュメントが返されます。</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが呼び出し元に復帰するときに、指定された項目の名前を指定する BSTR が含まれています。 呼び出し元が項目名を必要としない場合、<paramref name="pbstrHelpString" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが呼び出し元に復帰するときに、ヘルプのローカリゼーション コンテキストが含まれています。 呼び出し元がヘルプ コンテキストを必要としない場合、<paramref name="pdwHelpStringContext" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが呼び出し元に復帰するときに、ヘルプ ファイルで使用される DLL を含むファイルの完全修飾名を指定する BSTR が含まれています。 呼び出し元がファイル名を必要としない場合、<paramref name="pbstrHelpStringDll" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">ライブラリの属性を格納している構造体を取得します。</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">このメソッドが返されるときに、ライブラリの属性を格納している構造体を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary vsli:raw="Returns statistics about a type library that are required for efficient sizing of hash tables.">ハッシュ テーブルの効果的なサイズ変更に必要なタイプ ライブラリに関する統計情報を返します。</summary>
      <param name="pcUniqueNames" vsli:raw="A pointer to a count of unique names. If the caller does not need this information, set to &lt;see langword=&quot;null&quot; /&gt;.">一意名の数へのポインター。 呼び出し元がこの情報を必要としない場合は、<see langword="null" /> に設定します。</param>
      <param name="pcchUniqueNames" vsli:raw="When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、一意名の数の変更へのポインターを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">クライアント コンパイラがライブラリの型、変数、定数、およびグローバル関数をバインドできるようにします。</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、この <see langword="ITypeComp" /> の <see langword="ITypeLib" /> インスタンスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">ライブラリ内の指定した型の説明を取得します。</summary>
      <param name="index" vsli:raw="An index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">取得する <see langword="ITypeInfo" /> インターフェイスのインデックス。</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">このメソッドが返されるときに、<paramref name="index" /> が参照する型について記述する <see langword="ITypeInfo" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">タイプ ライブラリにある型の説明の数を返します。</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">タイプ ライブラリにある型の説明の数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">指定された GUID に対応するタイプ記述を取得します。</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt;, passed by reference, that represents the IID of the &lt;see langword=&quot;CLSID&quot; /&gt; interface of the class whose type info is requested.">型情報を要求されたクラスの <see langword="CLSID" /> インターフェイスの IID を表す <see cref="T:System.Guid" /> (参照渡し)。</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">このメソッドが返されるときに、要求された <see langword="ITypeInfo" /> インターフェイスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">型の説明の型を取得します。</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">タイプ ライブラリ内の型の説明のインデックス。</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">このメソッドが返されるときに、型の説明の <see langword="TYPEKIND" /> 列挙体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">渡された文字列がライブラリで記述される型またはメンバーの名前を格納しているかどうかを示します。</summary>
      <param name="szNameBuf" vsli:raw="The string to test.">テストする文字列。</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">
        <paramref name="szNameBuf" /> のハッシュ値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="szNameBuf" /> がタイプ ライブラリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> メソッドから初めに取得した <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">解放する <see langword="TLIBATTR" /> 構造体。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary vsli:raw="Defines flags that apply to type libraries.">タイプ ライブラリに適用するフラグを定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary vsli:raw="The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.">タイプ ライブラリはコントロールについて記述します。表示できる形式を持たないオブジェクト用の型ブラウザーには表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary vsli:raw="The type library exists in a persisted form on disk.">タイプ ライブラリは、ディスク上の永続化されたフォームに存在しています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary vsli:raw="The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.">タイプ ライブラリの使用は制限されませんが、ユーザーに対しては表示しないでください。 タイプ ライブラリは、コントロールによって使用される必要があります。 ホストでは、エクステンダー プロパティと共にコントロールをラップする新しいタイプ ライブラリを作成することをお勧めします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary vsli:raw="The type library is restricted, and should not be displayed to users.">タイプ ライブラリは制限されています。ユーザーに対して表示しないでください。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary vsli:raw="Contains information about how to transfer a structure element, parameter, or function return value between processes.">構造体の要素、パラメーター、または関数の戻り値をプロセス間で転送する方法に関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary vsli:raw="Represents a pointer to a value that is being passed between processes.">プロセス間で渡されている値へのポインターを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary vsli:raw="Represents bitmask values that describe the structure element, parameter, or return value.">構造体要素、パラメーター、または戻り値を記述するビットマスク値を表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">構造体の要素、パラメーター、または関数の戻り値をプロセス間で転送する方法を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary vsli:raw="The parameter has custom data.">パラメーターは、カスタム データを保持しています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary vsli:raw="The parameter has default behaviors defined.">パラメーターは、定義された既定の動作を保持しています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">パラメーターは、呼び出し元から呼び出し先に情報を渡します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">パラメーターは、クライアント アプリケーションのローカル ID です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary vsli:raw="The parameter is optional.">パラメーターはオプションです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">パラメーターは、呼び出し先から呼び出し元に情報を返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">パラメーターは、メンバーの戻り値です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">パラメーターが情報を渡すか、情報を受け取るかを指定しません。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STATDATA&quot; /&gt; structure.">
        <see langword="STATDATA" /> 構造体のマネージド定義を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; enumeration value that determines when the advisory sink is notified of changes in the data.">アドバイズ シンクがデータの変更を通知される時点を決定する <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 列挙値を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface that will receive change notifications.">変更通知を受け取る <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> インターフェイスを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary vsli:raw="Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.">アドバイザリ コネクションを一意に識別するトークンを表します。 このトークンは、アドバイザリ コネクションを設定するメソッドによって返されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure.">アドバイズ シンクが必要とするデータの <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体を表します。 アドバイズ シンクは、この <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体で指定されたデータの変更の通知を受け取ります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary vsli:raw="Contains statistical information about an open storage, stream, or byte-array object.">開いているストレージ、ストリーム、またはバイト配列オブジェクトに関する統計情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary vsli:raw="Specifies the last access time for this storage, stream, or byte array.">ストレージ、ストリーム、またはバイト配列に対する最後のアクセス時刻を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary vsli:raw="Specifies the size, in bytes, of the stream or byte array.">ストリームまたはバイト配列のサイズをバイト単位で指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary vsli:raw="Indicates the class identifier for the storage object.">ストレージ オブジェクトのクラス識別子を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary vsli:raw="Indicates the creation time for this storage, stream, or byte array.">ストレージ、ストリーム、またはバイト配列の作成時刻を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary vsli:raw="Indicates the types of region locking supported by the stream or byte array.">ストリームまたはバイト配列がサポートしている領域ロックの種類を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary vsli:raw="Indicates the access mode that was specified when the object was opened.">オブジェクトを開いたときに指定されたアクセス モードを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary vsli:raw="Indicates the current state bits of the storage object (the value most recently set by the &lt;see langword=&quot;IStorage::SetStateBits&quot; /&gt; method).">ストレージ オブジェクトの現在の状態ビット (最後に <see langword="IStorage::SetStateBits" /> メソッドによって設定された値) を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary vsli:raw="Indicates the last modification time for this storage, stream, or byte array.">ストレージ、ストリーム、またはバイト配列に対する最後の変更時刻を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary vsli:raw="Represents a pointer to a null-terminated string containing the name of the object described by this structure.">構造体が記述するオブジェクトの名前を格納している、終端が null の文字列へのポインターを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary vsli:raw="Reserved for future use.">将来使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary vsli:raw="Indicates the type of storage object, which is one of the values from the &lt;see langword=&quot;STGTY&quot; /&gt; enumeration.">
        <see langword="STGTY" /> 列挙体の値の 1 つで、ストレージ オブジェクトの種類を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STGMEDIUM&quot; /&gt; structure.">
        <see langword="STGMEDIUM" /> 構造体のマネージド定義を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary vsli:raw="Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses default procedures to release the storage; otherwise, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">受信プロセスが <see langword="ReleaseStgMedium" /> 関数を呼び出したときにストレージが解放される方法を送信プロセスが制御できるようにするインターフェイス インスタンスへのポインターを表します。 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> が <see langword="null" /> の場合、<see langword="ReleaseStgMedium" /> は既定プロシージャを使用してストレージを解放します。それ以外の場合、<see langword="ReleaseStgMedium" /> は指定された <see langword="IUnknown" /> インターフェイスを使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary vsli:raw="Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration.">ストレージ メディアの種類を指定します。 マーシャリング ルーチンとマーシャリング解除ルーチンは、この値を使用して、どの共用体メンバーが使用されたかを確認します。 この値は、<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 列挙体の要素のいずれかである必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary vsli:raw="Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.">受信プロセスが、転送されるデータにアクセスするために使用できるハンドル、文字列、またはインターフェイス ポインターを表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary vsli:raw="Identifies the target operating system platform.">ターゲット オペレーティング システムのプラットフォームを識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary vsli:raw="The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.">タイプ ライブラリの対象オペレーティング システムは、Apple Macintosh です。 既定では、すべてのデータ フィールドは偶数バイト境界に配置されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary vsli:raw="The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.">タイプ ライブラリの対象オペレーティング システムは、16 ビット Windows システムです。 既定では、データ フィールドはパックされます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary vsli:raw="The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).">タイプ ライブラリの対象オペレーティング システムは、32 ビット Windows システムです。 既定では、データ メンバーは自然に配置されます。たとえば、2 バイト整数は偶数バイト境界に配置され、4 バイト整数はクワドワード境界に配置されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary vsli:raw="The target operating system for the type library is 64-bit Windows systems.">タイプ ライブラリの対象オペレーティング システムは、64 ビット Windows システムです。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;TYMED&quot; /&gt; structure.">
        <see langword="TYMED" /> 構造体のマネージド定義を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary vsli:raw="The storage medium is an enhanced metafile. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteEnhMetaFile&quot; /&gt; to delete the bitmap.">ストレージ メディアは、拡張メタファイルです。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="DeleteEnhMetaFile" /> を使用してビットマップを削除する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary vsli:raw="The storage medium is a disk file identified by a path. If the &lt;see langword=&quot;STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;OpenFile&quot; /&gt; to delete the file.">ストレージ メディアは、パスで識別されるディスク ファイルです。 <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="OpenFile" /> を使用してファイルを削除する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary vsli:raw="The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteObject&quot; /&gt; to delete the bitmap.">ストレージ メディアは、グラフィック デバイス インターフェイス (GDI: Graphics Device Interface) コンポーネント (HBITMAP) です。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="DeleteObject" /> を使用してビットマップを削除する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary vsli:raw="The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;GlobalFree&quot; /&gt; to release the memory.">ストレージ メディアは、グローバル メモリ ハンドル (HGLOBAL) です。 GMEM_SHARE フラグを使用して、グローバル メモリ ハンドルを割り当てます。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="GlobalFree" /> を使用してメモリを解放する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary vsli:raw="The storage medium is a storage component identified by an &lt;see langword=&quot;IStorage&quot; /&gt; pointer. The data is in the streams and storages contained by this &lt;see langword=&quot;IStorage&quot; /&gt; instance. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStorage::Release&quot; /&gt; to release the storage component.">ストレージ メディアは、<see langword="IStorage" /> ポインターで識別されるストレージ コンポーネントです。 データはストリーム内にあり、ストレージはこの <see langword="IStorage" /> インスタンスにより格納されます。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> でない場合、目的のプロセスは <see langword="IStorage::Release" /> を使用してストレージ コンポーネントを解放する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary vsli:raw="The storage medium is a stream object identified by an &lt;see langword=&quot;IStream&quot; /&gt; pointer. Use &lt;see langword=&quot;ISequentialStream::Read&quot; /&gt; to read the data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStream::Release&quot; /&gt; to release the stream component.">ストレージ メディアは、<see langword="IStream" /> ポインターで識別されるストリーム オブジェクトです。 <see langword="ISequentialStream::Read" /> を使用してデータを読み取ります。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> でない場合、目的のプロセスは <see langword="IStream::Release" /> を使用してストリーム コンポーネントを解放する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary vsli:raw="The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteMetaFile&quot; /&gt; to delete the bitmap.">ストレージ メディアは、メタファイル (HMETAFILE) です。 Windows 関数または Win32 関数を使用して、メタフェイルのデータにアクセスします。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="DeleteMetaFile" /> を使用してビットマップを削除する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary vsli:raw="No data is being passed.">データが渡されていません。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary vsli:raw="Contains attributes of a &lt;see langword=&quot;UCOMITypeInfo&quot; /&gt;.">
        <see langword="UCOMITypeInfo" /> の属性を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary vsli:raw="Specifies the byte alignment for an instance of this type.">この型のインスタンスのバイト配置を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary vsli:raw="The size of an instance of this type.">この型のインスタンスのサイズ。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary vsli:raw="The size of this type's virtual method table (VTBL).">この型の仮想メソッド テーブル (VTBL) のサイズ。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary vsli:raw="Indicates the number of functions on the interface this structure describes.">構造体が記述するインターフェイス上の関数の数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary vsli:raw="Indicates the number of implemented interfaces on the interface this structure describes.">構造体が記述するインターフェイス上で実装されたインターフェイスの数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary vsli:raw="Indicates the number of variables and data fields on the interface described by this structure.">構造体が記述するインターフェイス上の変数とデータ フィールドの数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary vsli:raw="Reserved for future use.">将来使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary vsli:raw="The GUID of the type information.">型情報の GUID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary vsli:raw="IDL attributes of the described type.">記述された型の IDL 属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary vsli:raw="Locale of member names and documentation strings.">メンバー名とドキュメント文字列のロケール。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary vsli:raw="Reserved for future use.">将来使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary vsli:raw="A constant used with the &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidConstructor&quot; /&gt; and &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidDestructor&quot; /&gt; fields.">
        <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> フィールドと <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> フィールドで使用する定数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary vsli:raw="ID of constructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">コンストラクターの ID。または存在しない場合は <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary vsli:raw="ID of destructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">デストラクターの ID。または存在しない場合は <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary vsli:raw="If &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.typekind&quot; /&gt; == &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS&quot; /&gt;, specifies the type for which this type is an alias.">
        <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" /> の場合は、この型をエイリアスとする元の型を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEKIND&quot; /&gt; value describing the type this information describes.">この情報が記述している型を記述する <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 値。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary vsli:raw="Major version number.">メジャー バージョン番号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary vsli:raw="Minor version number.">マイナー バージョン番号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; value describing this information.">この情報を記述する <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 値。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary vsli:raw="Describes the type of a variable, return type of a function, or the type of a function parameter.">変数の型、関数の戻り値の型、関数パラメーターの型を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary vsli:raw="If the variable is &lt;see langword=&quot;VT_SAFEARRAY&quot; /&gt; or &lt;see langword=&quot;VT_PTR&quot; /&gt;, the &lt;see langword=&quot;lpValue&quot; /&gt; field contains a pointer to a &lt;see langword=&quot;TYPEDESC&quot; /&gt; that specifies the element type.">変数が <see langword="VT_SAFEARRAY" /> または <see langword="VT_PTR" /> の場合、<see langword="lpValue" /> フィールドは要素の型を指定する <see langword="TYPEDESC" /> へのポインターを格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary vsli:raw="Indicates the variant type for the item described by this &lt;see langword=&quot;TYPEDESC&quot; /&gt;.">
        <see langword="TYPEDESC" /> が記述する項目のバリアントの型を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary vsli:raw="Defines the properties and attributes of a type description.">型の説明のプロパティと属性を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary vsli:raw="The class supports aggregation.">クラスは、集約をサポートしています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">
        <see langword="Application" /> オブジェクトを記述する型の説明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">型のインスタンスは、<see langword="ITypeInfo::CreateInstance" /> で作成できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary vsli:raw="The type is a control from which other types will be derived and should not be displayed to users.">型は他の型の派生元になるコントロールであり、ユーザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.">インターフェイスが <see langword="IDispatch" /> から直接または間接に派生したものであることを示します。 このフラグは計算されます。このフラグのオブジェクト記述言語はありません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and VTBL binding.">インターフェイスは、<see langword="IDispatch" /> と VTBL バインディングの両方を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary vsli:raw="The type should not be displayed to browsers.">型はブラウザーに表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary vsli:raw="The type is licensed.">型はライセンス付きです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary vsli:raw="The interface cannot add members at run time.">インターフェイスは、実行時にメンバーを追加できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL&quot; /&gt;. This flag is not allowed on dispinterfaces.">インターフェイスで使用される型は、VTBL バインディングのサポートを含むオートメーションに完全に準拠しています。 インターフェイスでデュアルを設定すると、このフラグと <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" /> が設定されます。 このフラグはディスパッチ インターフェイスには設定できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">型は定義済みです。 クライアント アプリケーションは、この属性を持つオブジェクトの単一のインスタンスを自動的に作成します。 オブジェクトを指す変数の名前は、そのオブジェクトのクラス名と同じです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary vsli:raw="Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.">インターフェイスはプロキシ/スタブ ダイナミック リンク ライブラリを使用することを示します。 このフラグは、タイプ ライブラリの登録が解除されている場合に、タイプ ライブラリ プロキシの登録を解除してはいけないことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">オブジェクトは、<see langword="IConnectionPointWithDefault" /> をサポートし、既定の動作を備えています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary vsli:raw="Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.">マクロ言語からはアクセスできません。 このフラグは、システム レベルの型または型ブラウザーに表示しない型で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.">基本インターフェイスが、名前解決を確認してから子を確認することを示します。これは既定の反対の動作です。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary vsli:raw="Specifies various types of data and functions.">データおよび関数のさまざまな型を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary vsli:raw="A type that is an alias for another type.">別の型のエイリアスである型です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary vsli:raw="A set of implemented components interfaces.">実装されたコンポーネントのインターフェイス セットです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary vsli:raw="A set of methods and properties that are accessible through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;. By default, dual interfaces return &lt;see langword=&quot;TKIND_DISPATCH&quot; /&gt;.">
        <see langword="IDispatch::Invoke" /> を使用してアクセスできるメソッド、およびプロパティのセット。 既定では、デュアル インターフェイスは <see langword="TKIND_DISPATCH" /> を返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary vsli:raw="A set of enumerators.">列挙子のセットです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary vsli:raw="A type that has virtual functions, all of which are pure.">すべて純粋仮想関数である仮想関数を持つ型です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary vsli:raw="End-of-enumeration marker.">列挙体末尾のマーカー。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary vsli:raw="A module that can have only static functions and data (for example, a DLL).">静的関数および静的データ (DLL など) だけを保持できるモジュール。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary vsli:raw="A structure with no methods.">メソッドを持たない構造体。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary vsli:raw="A union of all members that have an offset of zero.">ゼロのオフセットを持つ、すべてのメンバーの和集合。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary vsli:raw="Identifies a particular type library and provides localization support for member names.">特定のタイプ ライブラリを識別し、メンバー名のローカライズ サポートを提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary vsli:raw="Represents a globally unique library ID of a type library.">タイプ ライブラリのグローバル一意ライブラリ識別子を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary vsli:raw="Represents a locale ID of a type library.">タイプ ライブラリのロケール ID を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary vsli:raw="Represents the target hardware platform of a type library.">タイプ ライブラリの対象のハードウェア プラットフォームを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary vsli:raw="Represents library flags.">ライブラリ フラグを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary vsli:raw="Represents the major version number of a type library.">タイプ ライブラリのメジャー バージョン番号を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary vsli:raw="Represents the minor version number of a type library.">タイプ ライブラリのマイナー バージョン番号を表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary vsli:raw="Describes a variable, constant, or data member.">変数、定数、またはデータ メンバーを記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary vsli:raw="Contains information about a variable.">変数に関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary vsli:raw="Contains the variable type.">変数を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary vsli:raw="This field is reserved for future use.">このフィールドは将来使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary vsli:raw="Indicates the member ID of a variable.">変数のメンバー ID を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary vsli:raw="Defines how to marshal a variable.">変数をマーシャリングする方法を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary vsli:raw="Defines the properties of a variable.">変数のプロパティを指定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary vsli:raw="Contains information about a variable.">変数に関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary vsli:raw="Describes a symbolic constant.">記号定数を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary vsli:raw="Indicates the offset of this variable within the instance.">インスタンス内でこの変数のオフセットを示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a variable.">変数のプロパティを定義する定数を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary vsli:raw="The variable supports data binding.">変数はデータ連結をサポートしています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in type information can have this attribute.">変数は、オブジェクトを最もよく表す単一のプロパティです。 型情報の 1 つの変数だけが、この属性を持つことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">コンパイラが "abc" の型で "xyz" という名前のメンバーを検索する場合に最適化を許可します。 そのようなメンバーが見つかり、既定のコレクション要素のアクセサー関数であることを示すフラグが付いている場合、そのメンバー関数の呼び出しが生成されます。 dispinterface およびインターフェイスのメンバーでは許可されますが、モジュールでは許可されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary vsli:raw="The variable is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE&quot; /&gt; must also be set.">変数は、連結できる状態でユーザーに表示されます。 <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> も設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary vsli:raw="The variable should not be displayed to the user in a browser, although it exists and is bindable.">連結できる変数が存在しますが、ユーザーのブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">変数は、個別のバインド可能なプロパティとして割り当てられます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">変数はオブジェクト ブラウザーに表示されますが、プロパティ ブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary vsli:raw="Assignment to the variable should not be allowed.">変数への割り当ては許可しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">インターフェイスが既定の動作を備えていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any attempt to directly change the property results in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the change is accepted.">設定した場合は、そのプロパティを直接変更しようとすると <see langword="IPropertyNotifySink::OnRequestEdit" /> が呼び出されます。 <see langword="OnRequestEdit" /> の実装は、変更を受け入れるかどうかを判断します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary vsli:raw="The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.">変数は、マクロ言語からはアクセスできません。 このフラグは、システム レベル変数または型ブラウザーに表示しない変数で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary vsli:raw="The variable returns an object that is a source of events.">変数は、イベントの発生元のオブジェクトを返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary vsli:raw="The variable is the default display in the user interface.">変数は、ユーザー インターフェイスの既定の表示です。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary vsli:raw="Defines the kind of variable.">変数の種類を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary vsli:raw="The &lt;see langword=&quot;VARDESC&quot; /&gt; structure describes a symbolic constant. There is no memory associated with it.">
        <see langword="VARDESC" /> 構造体は、記号定数を記述します。 記号定数に関連付けられたメモリはありません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary vsli:raw="The variable can be accessed only through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">変数には、<see langword="IDispatch::Invoke" /> を使用したときにだけアクセスできます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary vsli:raw="The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.">変数は、フィールドまたは型のメンバーです。 それぞれの型のインスタンス内の固定オフセットに存在します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary vsli:raw="There is only one instance of the variable.">変数のインスタンスは 1 つしか存在しません。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.">COM で使用できるように登録したアセンブリの登録を解除するときに呼び出すメソッドを指定します。これにより、登録解除中にユーザー記述コードを実行できます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers">
      <summary vsli:raw="Class for managing wrappers of COM IUnknown types.">COM IUnknown 型のラッパーを管理するためのクラスです。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.#ctor">
      <summary vsli:raw="Instance constructor.">インスタンス コンストラクター。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)">
      <summary vsli:raw="Computes the desired Vtable for &lt;paramref name=&quot;obj&quot; /&gt;, respecting the values of &lt;paramref name=&quot;flags&quot; /&gt;.">
        <paramref name="flags" /> の値を考慮して、<paramref name="obj" /> の目的の Vtable を計算します。</summary>
      <param name="obj" vsli:raw="Target of the returned Vtables.">返された Vtables のターゲット。</param>
      <param name="flags" vsli:raw="Flags used to compute Vtables.">Vtables の計算に使用されるフラグ。</param>
      <param name="count" vsli:raw="The number of elements contained in the returned memory.">返されたメモリに格納されている要素の数。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry&quot; /&gt; pointer containing memory for all COM interface entries.">すべての COM インターフェイス エントリのメモリを格納している <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary vsli:raw="Creates a managed object for the object that &lt;paramref name=&quot;externalComObject&quot; /&gt; points to, respecting the values of &lt;paramref name=&quot;flags&quot; /&gt;.">
        <paramref name="flags" /> の値を考慮して、<paramref name="externalComObject" /> がポイントするマネージド オブジェクトを作成します。</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">.NET ランタイムに使用するためにインポートするオブジェクト。</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">外部オブジェクトを説明するために使用されるフラグ。</param>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">指定された外部 COM オブジェクトに関連付けられているマネージド オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)">
      <summary vsli:raw="Gets the runtime-provided IUnknown implementation.">ランタイム指定の IUnknown 実装を取得します。</summary>
      <param name="fpQueryInterface" vsli:raw="Function pointer to QueryInterface.">QueryInterface への関数ポインター。</param>
      <param name="fpAddRef" vsli:raw="Function pointer to AddRef.">AddRef への関数ポインター。</param>
      <param name="fpRelease" vsli:raw="Function pointer to Release.">Release への関数ポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)">
      <summary vsli:raw="Creates a COM representation of the supplied object that can be passed to a non-managed environment.">管理されていない環境に渡すことができる、指定されたオブジェクトの COM 表現を作成します。</summary>
      <param name="instance" vsli:raw="The managed object to expose outside the .NET runtime.">.NET ランタイムの外部に公開するマネージド オブジェクト。</param>
      <param name="flags" vsli:raw="Flags used to configure the generated interface.">生成されたインターフェイスを構成するために使用されるフラグ。</param>
      <returns vsli:raw="The generated COM interface, as a pointer to the &lt;code&gt;IUnknown&lt;/code&gt; interface implementation, that can be passed outside the .NET runtime.">.NET ランタイムの外部で渡すことができる生成された COM インターフェイス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary vsli:raw="Gets the currently registered managed object or creates a new managed object and registers it.">現在登録されているマネージド オブジェクトを取得するか、新しいマネージド オブジェクトを作成して登録します。</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">.NET ランタイムに使用するためにインポートするオブジェクト。</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">外部オブジェクトを説明するために使用されるフラグ。</param>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">指定された外部 COM オブジェクトに関連付けられているマネージド オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)">
      <summary vsli:raw="Gets the currently registered managed object or uses the supplied managed object and registers it.">現在登録されているマネージド オブジェクトを取得するか、指定されたマネージド オブジェクトを使用して登録します。</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">.NET ランタイムに使用するためにインポートするオブジェクト。</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">外部オブジェクトを説明するために使用されるフラグ。</param>
      <param name="wrapper" vsli:raw="The object to use as the wrapper for the external object.">外部オブジェクトのラッパーとして使用するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The wrapper instance is already associated with an external object.">ラッパー インスタンスは、既に外部オブジェクトに関連付けられています。</exception>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">指定された外部 COM オブジェクトに関連付けられているマネージド オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)">
      <summary vsli:raw="Registers a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers&quot; /&gt; instance to be used as the global instance for marshalling in the runtime.">ランタイムでマーシャリングするためのグローバル インスタンスとして使用する <see cref="T:System.Runtime.InteropServices.ComWrappers" /> インスタンスを登録します。</summary>
      <param name="instance" vsli:raw="The instance to register.">登録するインスタンス。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method was called more than once.">メソッドは複数回呼び出されました。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)">
      <summary vsli:raw="Registers a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers&quot; /&gt; instance to be used as the global instance for reference tracker support.">参照トラッカー サポートのグローバル インスタンスとして使用する <see cref="T:System.Runtime.InteropServices.ComWrappers" /> インスタンスを登録します。</summary>
      <param name="instance" vsli:raw="The instance to register.">登録するインスタンス。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method was called more than once.">メソッドは複数回呼び出されました。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)">
      <summary vsli:raw="Releases a collection of objects outside of the normal object or COM interface lifetime.">通常のオブジェクトまたは COM インターフェイスの有効期間外のオブジェクトのコレクションを解放します。</summary>
      <param name="objects" vsli:raw="Collection of objects to release.">解放するオブジェクトのコレクション。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch">
      <summary vsli:raw="An application binary interface for function dispatch of a COM interface.">COM インターフェイスの関数ディスパッチ用のアプリケーション バイナリ インターフェイス。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.Vtable">
      <summary vsli:raw="Field that represents the virtual function table (vtable) in the IUnknown instance layout.">IUnknown インスタンス レイアウトの仮想関数テーブル (vtable) を表すフィールド。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance``1(System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*)">
      <summary vsli:raw="Given an &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; from a generated Vtable, converts it to the target type.">生成された Vtable から <see cref="T:System.IntPtr" /> を指定すると、ターゲットの型に変換されます。</summary>
      <param name="dispatchPtr" vsli:raw="Pointer to Vtable function entry.">Vtable 関数エントリへのポインター。</param>
      <typeparam name="T" vsli:raw="Desired type.">必要な型。</typeparam>
      <returns vsli:raw="An instance of the type associated with the dispatched function call.">ディスパッチされた関数呼び出しに関連付けられている型のインスタンス。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry">
      <summary vsli:raw="Interface type and pointer to targeted VTable.">インターフェイスの種類と対象となる VTable へのポインター。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.IID">
      <summary vsli:raw="Interface identifier.">インターフェイス識別子。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.Vtable">
      <summary vsli:raw="A pointer to the virtual lookup table of functions.">関数の仮想参照テーブルへのポインター。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateComInterfaceFlags">
      <summary vsli:raw="Specifies flags for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" /> メソッドのフラグを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.CallerDefinedIUnknown">
      <summary vsli:raw="&lt;para&gt;The caller will provide an IUnknown Vtable.&lt;/para&gt;&lt;para&gt;This flag is useful in scenarios when the caller has no need to rely on an IUnknown instance that's used when it's not possible to run managed code (that is, during a garbage collection). This is common in traditional COM scenarios, but scenarios where Reference Tracker hosting calls the IUnknown API during a garbage collection are possible.&lt;/para&gt;">呼び出し元が IUnknown Vtable を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.None">
      <summary vsli:raw="Flag used to indicate no flags set.">フラグが設定されていないことを示すフラグ。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport">
      <summary vsli:raw="&lt;para&gt;Flag used to indicate the COM interface should implement IReferenceTrackerTarget.&lt;/para&gt;&lt;para&gt;When this flag is passed, the resulting COM interface will have an internal implementation of IUnknown, therefore, none should be supplied by the caller.&lt;/para&gt;">COM インターフェイスで IReferenceTrackerTarget を実装する必要があることを示すために使用されるフラグです。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateObjectFlags">
      <summary vsli:raw="Specifies flags for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" /> メソッドのフラグを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.None">
      <summary vsli:raw="Flag used to indicate no flags set.">フラグが設定されていないことを示すフラグ。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject">
      <summary vsli:raw="Indicates that the supplied external COM object implements the IReferenceTracker.">指定された外部 COM オブジェクトによって IReferenceTracker が実装されることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.UniqueInstance">
      <summary vsli:raw="Indicates to ignore internal caching and always create a unique instance.">内部キャッシュを無視し、常に一意のインスタンスを作成することを示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_CY&quot; /&gt;.">マーシャラーが <see langword="VT_CY" /> としてマーシャリングする必要があるオブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">ラップされ、型 <see langword="Decimal" /> としてマーシャリングされる <see langword="VT_CY" /> を指定して、<see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj" vsli:raw="The &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">ラップされ、<see langword="Decimal" /> としてマーシャリングされる <see langword="VT_CY" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">ラップされ、型 <see langword="Decimal" /> としてマーシャリングされる <see langword="VT_CY" /> を格納しているオブジェクトを指定して、<see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj" vsli:raw="The object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">ラップされ、<see langword="Decimal" /> としてマーシャリングされる <see langword="VT_CY" /> を格納しているオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; type.">
        <paramref name="obj" /> パラメーターが <see cref="T:System.Decimal" /> 型ではありません。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">型 <see langword="VT_CY" /> としてマーシャリングされる、ラップされたオブジェクトを取得します。</summary>
      <returns vsli:raw="The wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">型 <see langword="VT_CY" /> としてマーシャリングされる、ラップされたオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method's IUnknown::QueryInterface calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">
        <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> メソッドの IUnknown::QueryInterface 呼び出しで <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> インターフェイスを使用できるかどうかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary vsli:raw="IUnknown::QueryInterface method calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface. When you use this value, the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method overload functions like the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)&quot; /&gt; overload.">IUnknown::QueryInterface メソッドの呼び出しは <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> インターフェイスを使用できます。 この値を使用する場合、<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> メソッド オーバーロードは、<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> オーバーロードと同じように動作します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary vsli:raw="IUnknown::QueryInterface method calls should ignore the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">IUnknown::QueryInterface メソッドの呼び出しは <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> インターフェイスを無視する必要があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary vsli:raw="Provides return values for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> メソッドの戻り値を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary vsli:raw="The interface for a specific interface ID is not available. In this case, the returned interface is &lt;see langword=&quot;null&quot; /&gt;. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.">特定のインターフェイス ID のインターフェイスを使用できません。 この場合、返されるインターフェイスは <see langword="null" /> です。 IUnknown::QueryInterface の呼び出し元に E_NOINTERFACE が返されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary vsli:raw="The interface pointer that is returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method can be used as the result of IUnknown::QueryInterface.">
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> メソッドから返されるインターフェイス ポインターは、IUnknown::QueryInterface の結果として使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary vsli:raw="The custom &lt;see langword=&quot;QueryInterface&quot; /&gt; was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.">カスタムの <see langword="QueryInterface" /> は使用されていません。 代わりに、IUnknown::QueryInterface の既定の実装を使用する必要があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary vsli:raw="Specifies the value of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; enumeration. This class cannot be inherited.">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 列挙体の値を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultCharSetAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; value.">指定した <see cref="T:System.Runtime.InteropServices.CharSet" /> 値を使用して、<see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="charSet" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; values.">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary vsli:raw="Gets the default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> の任意の呼び出しに対する <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> の既定値を取得します。</summary>
      <returns vsli:raw="The default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> の任意の呼び出しに対する <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> の既定値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">プラットフォーム呼び出しの機能を提供する DLL の検索に使用されるパスを指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; class, specifying the paths to use when searching for the targets of platform invokes.">プラットフォームの対象の検索を呼び出すときに使用するパスを指定して、<see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="paths" vsli:raw="A bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">
        <c>LoadLibraryEx</c> 関数がプラットフォーム呼び出しの間に検索するパスを指定する列挙値のビットごとの組み合わせ。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary vsli:raw="Gets a bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">
        <c>LoadLibraryEx</c> 関数がプラットフォーム呼び出しの間に検索するパスを指定する列挙値のビットごとの組み合わせを取得します。</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify search paths for platform invokes.">プラットフォーム呼び出しの検索パスを指定する列挙値のビットごとの組み合わせ。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary vsli:raw="Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.">既定のパラメーターをサポートする言語から呼び出された場合の、パラメーターの既定値を設定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultParameterValueAttribute&quot; /&gt; class with the default value of a parameter.">パラメーターの既定値を使用して、<see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An object that represents the default value of a parameter.">パラメーターの既定値を表すオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary vsli:raw="Gets the default value of a parameter.">パラメーターの既定値を取得します。</summary>
      <returns vsli:raw="An object that represents the default value of a parameter.">パラメーターの既定値を表すオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_DISPATCH&quot; /&gt;.">マーシャラーが <see langword="VT_DISPATCH" /> としてマーシャリングする必要があるオブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt; class with the object being wrapped.">
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> クラスの新しいインスタンスを、ラップするオブジェクトを使用して初期化します。</summary>
      <param name="obj" vsli:raw="The object to be wrapped and converted to &lt;see cref=&quot;F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH&quot; /&gt;.">ラップして <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" /> に変換するオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a class or an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; does not support &lt;see langword=&quot;IDispatch&quot; /&gt;.">
        <paramref name="obj" /> がクラスまたは配列ではありません。  
  
- または - 
 <paramref name="obj" /> では、<see langword="IDispatch" /> はサポートされていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter was marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;obj&quot; /&gt; parameter inherits from a type marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> パラメーターは、値 <see langword="false" /> を渡された <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 属性でマークされました。  
  
- または - 
<paramref name="obj" /> パラメーターは、値 <see langword="false" /> を渡された <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 属性でマークされた型から継承します。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> がラップするオブジェクトを取得します。</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">オブジェクトは <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> によってラップされます。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary vsli:raw="Specifies the COM dispatch identifier (DISPID) of a method, field, or property.">メソッド、フィールドまたはプロパティの COM ディスパッチ識別子 (DISPID) を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;DispIdAttribute&quot; /&gt; class with the specified DISPID.">指定した DISPID を使用して、<see langword="DispIdAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dispId" vsli:raw="The DISPID for the member.">メンバーの DISPID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary vsli:raw="Gets the DISPID for the member.">メンバーの DISPID を取得します。</summary>
      <returns vsli:raw="The DISPID for the member.">メンバーの DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary vsli:raw="Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.">属性付きメソッドがアンマネージ ダイナミックリンク ライブラリ (DLL) によって静的エントリ ポイントとして公開されることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">Unicode 文字を ANSI 文字に変換するときの、最適マッピング動作のオン/オフを切り替えます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary vsli:raw="Indicates the calling convention of an entry point.">エントリ ポイントの呼び出し規約を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method and controls name mangling.">文字列パラメーターをメソッドにマーシャリングし、名前マングルを制御する方法を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary vsli:raw="Indicates the name or ordinal of the DLL entry point to be called.">呼び出す DLL エントリ ポイントの名前または序数を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary vsli:raw="Controls whether the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.CharSet&quot; /&gt; field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.">
        <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> フィールドで、指定された名前以外のエントリ ポイント名をアンマネージ DLL から共通言語ランタイムに検索させるかどうかを制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary vsli:raw="Indicates whether unmanaged methods that have &lt;see langword=&quot;HRESULT&quot; /&gt; return values are directly translated or whether &lt;see langword=&quot;HRESULT&quot; /&gt; return values are automatically converted to exceptions.">戻り値が <see langword="HRESULT" /> または <see langword="retval" /> であるアンマネージ メソッドを直接変換するか、戻り値 <see langword="HRESULT" /> または <see langword="retval" /> を自動的に例外に変換するかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee sets an error (&lt;see langword=&quot;SetLastError&quot; /&gt; on Windows or &lt;see langword=&quot;errno&quot; /&gt; on other platforms) before returning from the attributed method.">属性付きメソッドから戻る前に、呼び出し先が <see langword="SetLastError" /> Windows API 関数を呼び出すかどうかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt; class with the name of the DLL containing the method to import.">
        <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> クラスの新しいインスタンスを、インポートするメソッドを格納した DLL の名前を使用して初期化します。</summary>
      <param name="dllName" vsli:raw="The name of the DLL that contains the unmanaged method. In .NET Framework, this can include an assembly display name, if the DLL is included in an assembly.">アンマネージ メソッドを格納する DLL の名前。 DLL がアセンブリに含まれている場合、これにはアセンブリの表示名を含めることができます。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary vsli:raw="Gets the name of the DLL file that contains the entry point.">エントリ ポイントを含む DLL ファイルの名前を取得します。</summary>
      <returns vsli:raw="The name of the DLL file that contains the entry point.">エントリ ポイントを含む DLL ファイルの名前。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary vsli:raw="Provides a delegate used to resolve native libraries via callback.">コールバック経由でネイティブ ライブラリを解決するためのデリゲートを提供します。</summary>
      <param name="libraryName" vsli:raw="The native library to resolve.">解決するネイティブ ライブラリ。</param>
      <param name="assembly" vsli:raw="The assembly requesting the resolution.">解決を要求するアセンブリ。</param>
      <param name="searchPath" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the PInvoke, if any. Otherwise, the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the assembly, if any. Otherwise &lt;see langword=&quot;null&quot; /&gt;.">PInvoke 上の <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> (存在する場合)。 それ以外の場合、アセンブリ上の <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> (存在する場合)。 それ以外の場合は <see langword="null" /> を返します。</param>
      <returns vsli:raw="The handle for the loaded native library on success, or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; on failure.">成功した場合は、読み込まれたネイティブ ライブラリのハンドル。失敗した場合は、<see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">プラットフォーム呼び出しの機能を提供する DLL の検索に使用されるパスを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary vsli:raw="Include the application directory in the DLL search path.">DLL 検索パスのアプリケーション ディレクトリを含めます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary vsli:raw="When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. When used in Native AOT and single-file deployment models, the application's installation directory is considered the &quot;assembly directory&quot; and is searched.">アセンブリの依存関係を検索する場合、アセンブリ自体を含むディレクトリを含め、そのディレクトリを最初に検索します。 この値は .NET Framework で、パスが Win32 LoadLibraryEx 関数に渡される前に使用されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary vsli:raw="Search the application directory, and then call the Win32 LoadLibraryEx function with the &lt;c&gt;LOAD_WITH_ALTERED_SEARCH_PATH&lt;/c&gt; flag. This value is ignored if any other value is specified. Operating systems that do not support the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; attribute use this value, and ignore other values.">アプリケーション ディレクトリを検索し、次に <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> フラグを持つ Win32 LoadLibraryEx 関数を呼び出します。 この値は、他の値が指定されていない場合は無視されます。 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 属性をサポートしていないオペレーティング システムではこの値を使用し、他の値は無視されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary vsli:raw="Include the application directory, the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory, and user directories in the DLL search path.">アプリケーション ディレクトリ、<see langword="%WinDir%\System32" /> ディレクトリ、および DLL 検索パスのユーザー ディレクトリを含めます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary vsli:raw="Include the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory in the DLL search path.">DLL 検索パスの <see langword="%WinDir%\System32" /> ディレクトリを含めます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary vsli:raw="Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.">DLL が別のフォルダーを検索する前に位置するフォルダーの DLL 依存関係を検索します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary vsli:raw="Include any path that was explicitly added to the process-wide search path by using the Win32 &lt;c&gt;AddDllDirectory&lt;/c&gt; function.">Win32 <c>AddDllDirectory</c> 関数を使用してプロセス全体の検索パスに明示的に追加された任意のパスを含めます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute">
      <summary vsli:raw="Attribute required by any type that is returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" /> によって返されるあらゆる型で必須となる属性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute.#ctor">
      <summary vsli:raw="Instance constructor.">インスタンス コンストラクター。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_ERROR&quot; /&gt;.">マーシャラーが <see langword="VT_ERROR" /> としてマーシャリングする必要があるオブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT that corresponds to the exception supplied.">
        <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> クラスの新しいインスタンスを、提供される例外に対応する HRESULT を使用して初期化します。</summary>
      <param name="e" vsli:raw="The exception to be converted to an error code.">エラー コードに変換する例外。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT of the error.">
        <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> クラスの新しいインスタンスを、エラーの HRESULT を使用して初期化します。</summary>
      <param name="errorCode" vsli:raw="The HRESULT of the error.">エラーの HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with an object containing the HRESULT of the error.">
        <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> クラスの新しいインスタンスを、エラーの HRESULT を格納しているオブジェクトを使用して初期化します。</summary>
      <param name="errorCode" vsli:raw="The object containing the HRESULT of the error.">エラーの HRESULT を格納しているオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;errorCode&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">
        <paramref name="errorCode" /> パラメーターが <see cref="T:System.Int32" /> 型ではありません。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary vsli:raw="Gets the error code of the wrapper.">ラッパーのエラー コードを取得します。</summary>
      <returns vsli:raw="The HRESULT of the error.">エラーの HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary vsli:raw="Supplies an explicit &lt;see cref=&quot;T:System.Guid&quot; /&gt; when an automatic GUID is undesirable.">自動 GUID が望ましくない場合に、明示的な <see cref="T:System.Guid" /> を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.GuidAttribute&quot; /&gt; class with the specified GUID.">指定した GUID を使用して、<see cref="T:System.Runtime.InteropServices.GuidAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; to be assigned.">割り当てる <see cref="T:System.Guid" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">クラスの <see cref="T:System.Guid" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">クラスの <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary vsli:raw="Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.">保留状態のハンドルを追跡し、指定したしきい値に達したときに、強制的にガベージ コレクションを実行します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name and a threshold at which to begin handle collection.">名前およびハンドル コレクションを開始するしきい値を使用して、<see cref="T:System.Runtime.InteropServices.HandleCollector" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="A name for the collector. This parameter allows you to name collectors that track handle types separately.">コレクターの名前。 このパラメーターにより、ハンドルの種類を個別に追跡するコレクターに名前を付けることができます。</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">コレクションを開始するポイントを指定する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.">
        <paramref name="initialThreshold" /> パラメーターが 0 未満です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.">名前、ハンドル コレクションを開始するしきい値、およびハンドル コレクションを強制的に実行するしきい値を使用して、<see cref="T:System.Runtime.InteropServices.HandleCollector" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="A name for the collector.  This parameter allows you to name collectors that track handle types separately.">コレクターの名前。  このパラメーターにより、ハンドルの種類を個別に追跡するコレクターに名前を付けることができます。</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">コレクションを開始するポイントを指定する値。</param>
      <param name="maximumThreshold" vsli:raw="A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.">コレクションを強制的に実行するポイントを指定する値。 この値は、使用できるハンドルの最大数に設定する必要があります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than 0.">
        <paramref name="initialThreshold" /> パラメーターが 0 未満です。  
  
- または - 
<paramref name="maximumThreshold" /> パラメーターが 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than the &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter.">
        <paramref name="maximumThreshold" /> パラメーターが <paramref name="initialThreshold" /> パラメーター未満です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary vsli:raw="Increments the current handle count.">現在のハンドル カウントをインクリメントします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> プロパティが 0 未満です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary vsli:raw="Decrements the current handle count.">現在のハンドル カウントをデクリメントします。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> プロパティが 0 未満です。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary vsli:raw="Gets the number of handles collected.">収集したハンドルの数を取得します。</summary>
      <returns vsli:raw="The number of handles collected.">収集したハンドルの数。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections should begin.">コレクションを開始するポイントを指定する値を取得します。</summary>
      <returns vsli:raw="A value that specifies the point at which collections should begin.">コレクションを開始するポイントを指定する値。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections must occur.">コレクションを強制的に実行するポイントを指定する値を取得します。</summary>
      <returns vsli:raw="A value that specifies the point at which collections must occur.">コレクションを強制的に実行するポイントを指定する値。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.HandleCollector" /> オブジェクトの名前を取得します。</summary>
      <returns vsli:raw="This &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Name&quot; /&gt; property allows you to name collectors that track handle types separately.">この <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> プロパティにより、ハンドルの種類を個別に追跡するコレクターに名前を付けることができます。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary vsli:raw="Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.">プラットフォーム呼び出しを使用してアンマネージド コードに渡されるリソースへのハンドルを保持しているマネージド オブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; class with the object to wrap and a handle to the resource used by unmanaged code.">ラップするオブジェクトと、アンマネージ コードで使用するリソースへのハンドルを指定して、<see cref="T:System.Runtime.InteropServices.HandleRef" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="wrapper" vsli:raw="A managed object that should not be finalized until the platform invoke call returns.">プラットフォーム呼び出しが返されるまで終了しないマネージド オブジェクト。</param>
      <param name="handle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that indicates a handle to a resource.">リソースへのハンドルを示す <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary vsli:raw="Returns the handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">指定した <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクトのリソースへのハンドルを返します。</summary>
      <param name="value" vsli:raw="The object that needs a handle.">ハンドルを必要とするオブジェクト。</param>
      <returns vsli:raw="The handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">指定した <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクトのリソースへのハンドル。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary vsli:raw="Returns the internal integer representation of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクトの内部整数表現を返します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object to retrieve an internal integer representation from.">内部整数表現の取得元の <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; object that represents a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">
        <see cref="T:System.IntPtr" /> オブジェクトを表す <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary vsli:raw="Gets the handle to a resource.">リソースへのハンドルを取得します。</summary>
      <returns vsli:raw="The handle to a resource.">リソースへのハンドル。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary vsli:raw="Gets the object holding the handle to a resource.">リソースへのハンドルを保持しているオブジェクトを取得します。</summary>
      <returns vsli:raw="The object holding the handle to a resource.">リソースへのハンドルを保持しているオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary vsli:raw="Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.">クライアントが、カスタム マーシャラーによって渡されるアダプター オブジェクトではなく、実際のオブジェクトにアクセスできるようにします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary vsli:raw="Provides access to the underlying object wrapped by a custom marshaler.">カスタム マーシャラーによってラップされたオブジェクトにアクセスできるようにします。</summary>
      <returns vsli:raw="The object contained by the adapter object.">アダプター オブジェクトに格納されているオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary vsli:raw="Enables users to write activation code for managed objects that extend &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt;.">
        <see cref="T:System.MarshalByRefObject" /> を拡張するマネージド オブジェクトのアクティベーション コードを、ユーザーが書き込むことができるようにします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary vsli:raw="Creates a new instance of the specified type.">指定した型の新しいインスタンスを作成します。</summary>
      <param name="serverType" vsli:raw="The type to activate.">アクティブにする型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt; associated with the specified type.">指定した型に関連付けられた <see cref="T:System.MarshalByRefObject" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary vsli:raw="Provides custom wrappers for handling method calls.">メソッド呼び出しを処理するためのカスタム ラッパーを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary vsli:raw="Performs necessary cleanup of the managed data when it is no longer needed.">不要になったときに、マネージド データの必要なクリーンアップを実行します。</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be destroyed.">破棄するマネージド オブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary vsli:raw="Performs necessary cleanup of the unmanaged data when it is no longer needed.">不要になったときに、アンマネージ データの必要なクリーンアップを実行します。</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be destroyed.">破棄するアンマネージ データを指すポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary vsli:raw="Returns the size of the native data to be marshaled.">マーシャリングするネイティブ データのサイズを返します。</summary>
      <returns vsli:raw="The size, in bytes, of the native data.">ネイティブ データのバイト単位のサイズ。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary vsli:raw="Converts the managed data to unmanaged data.">マネージド データをアンマネージド データに変換します。</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be converted.">変換されるマネージド オブジェクト。</param>
      <returns vsli:raw="A pointer to the COM view of the managed object.">マネージド オブジェクトの COM ビューへのポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary vsli:raw="Converts the unmanaged data to managed data.">アンマネージド データをマネージド データに変換します。</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be wrapped.">ラップするアンマネージ データを指すポインター。</param>
      <returns vsli:raw="An object that represents the managed view of the COM data.">COM データのマネージド ビューを表すオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary vsli:raw="Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.">IUnknown::QueryInterface(REFIID riid, void **ppvObject) メソッドのカスタムのマネージド実装を開発者が提供できるようにします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Returns an interface according to a specified interface ID.">指定したインターフェイス ID に従ってインターフェイスを返します。</summary>
      <param name="iid" vsli:raw="The GUID of the requested interface.">要求されたインターフェイスの GUID。</param>
      <param name="ppv" vsli:raw="A reference to the requested interface, when this method returns.">要求されたインターフェイスへの参照 (このメソッドから制御が戻るとき)。</param>
      <returns vsli:raw="One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.">IUnknown::QueryInterface のカスタム実装が使用されたかどうかを示す列挙値の 1 つ。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.IDynamicInterfaceCastable">
      <summary vsli:raw="Interface used to participate in a type cast failure.">型キャスト エラーに参加するためのインターフェイス。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)">
      <summary vsli:raw="Called during interface dispatch when the given interface type cannot be found in the class's metadata.">指定のインターフェイス型がクラスのメタデータで見つからない場合に、インターフェイスのディスパッチ中に呼び出されます。</summary>
      <param name="interfaceType" vsli:raw="The interface type.">インターフェイスの型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The returned type is not an interface type, or it was not marked with the &lt;see cref=&quot;T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute&quot; /&gt;.">戻り値の型はインターフェイス型ではありません。あるいは、<see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" /> のマークが付けられませんでした。</exception>
      <returns vsli:raw="The type that should be used to dispatch for &lt;paramref name=&quot;interfaceType&quot; /&gt; on the current object.">現在のオブジェクトで <paramref name="interfaceType" /> のディスパッチに使用する型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)">
      <summary vsli:raw="Called when an implementing class instance is cast to an interface type that is not contained in the class's metadata.">クラスのメタデータに含まれていないインターフェイス型に実装クラス インスタンスがキャスとされるときに呼び出されます。</summary>
      <param name="interfaceType" vsli:raw="The interface type.">インターフェイスの型。</param>
      <param name="throwIfNotImplemented" vsli:raw="Indicates if the function should throw an exception instead of returning &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="false" /> を返す代わりに関数で例外をスローするかどうかを示します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be cast to the given interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトを指定のインターフェイスにキャストできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary vsli:raw="Indicates that the types defined within an assembly were originally defined in a type library.">アセンブリ内で定義された型が、タイプ ライブラリで初めに定義されたことを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute&quot; /&gt; class with the name of the original type library file.">元のタイプ ライブラリ ファイルの名前を使用して、<see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tlbFile" vsli:raw="The location of the original type library file.">元のタイプ ライブラリ ファイルの位置。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary vsli:raw="Gets the name of the original type library file.">元のタイプ ライブラリ ファイルの名前を取得します。</summary>
      <returns vsli:raw="The name of the original type library file.">元のタイプ ライブラリ ファイルの名前。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary vsli:raw="Indicates whether a managed interface is dual, dispatch-only, or &lt;see langword=&quot;IUnknown&quot; /&gt; -only when exposed to COM.">COM への公開時に、マネージド インターフェイスがデュアル、ディスパッチ専用、または <see langword="IUnknown" /> 専用のいずれであるかを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">指定した <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="interfaceType" vsli:raw="Describes how the interface should be exposed to COM clients.">インターフェイスを COM クライアントに公開する方法を記述します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">指定した <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="interfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; values that describes how the interface should be exposed to COM clients.">インターフェイスを COM クライアントに公開する方法を記述する <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 値の 1 つ。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">インターフェイスを COM に公開する方法を記述する <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">インターフェイスを COM に公開する方法を記述する <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary vsli:raw="The exception thrown when an invalid COM object is used.">無効な COM オブジェクトを使用したときにスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with default properties.">
        <see langword="InvalidComObjectException" /> のインスタンスを既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;COMException&quot; /&gt; class from serialization data.">シリアル化データから、<see langword="COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with a message.">メッセージを使用して <see langword="InvalidComObjectException" /> のインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidComObjectException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary vsli:raw="The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.">マネージド コードにマーシャリングできないバリアント型の引数が見つかった場合に、マーシャラーによってスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with default values.">
        <see langword="InvalidOleVariantTypeException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class from serialization data.">シリアル化データから、<see langword="InvalidOleVariantTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with a specified message.">指定したメッセージを使用して、<see langword="InvalidOleVariantTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidOleVariantTypeException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary vsli:raw="Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.">メソッドのアンマネージ シグネチャにロケール識別子 (LCID) パラメーターが必要であることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;LCIDConversionAttribute&quot; /&gt; class with the position of the LCID in the unmanaged signature.">アンマネージ シグネチャ内での LCID の位置を指定して、<see langword="LCIDConversionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="lcid" vsli:raw="Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.">アンマネージ シグネチャ内での引数 LCID の位置を示します。0 は、最初の引数を示します。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary vsli:raw="Gets the position of the LCID argument in the unmanaged signature.">アンマネージ シグネチャ内での引数 LCID の位置を取得します。</summary>
      <returns vsli:raw="The position of the LCID argument in the unmanaged signature, where 0 is the first argument.">アンマネージ シグネチャ内での引数 LCID の位置。0 は、最初の引数を示します。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary vsli:raw="Provides support for user customization of interop stubs in managed-to-COM interop scenarios.">マネージ型から COM への相互運用シナリオにおけるユーザーによる相互運用スタブのカスタマイズのサポートを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute&quot; /&gt; class with the specified class type and method name.">指定されたクラス型とメソッド名を使用して、<see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="classType" vsli:raw="The class that contains the required stub method.">必要なスタブ メソッドを格納するクラス。</param>
      <param name="methodName" vsli:raw="The name of the stub method.">スタブ メソッドの名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodName&quot; /&gt; cannot be found.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is not static or non-generic.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method's parameter list does not match the expected parameter list for the stub.">
        <paramref name="methodName" /> が見つかりません。  
  
- または - 
メソッドが静的メソッドまたは非ジェネリック メソッドではありません。  
  
- または - 
メソッドのパラメーター リストが、スタブに必要なパラメーター リストと一致していません。</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.">スタブ メソッドのアクセシビリティが private または protected であるか、セキュリティ上の問題があるために、マネージド相互運用メソッドを格納しているインターフェイスがスタブ メソッドにアクセスできません。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary vsli:raw="Gets the class that contains the required stub method.">必要なスタブ メソッドを格納するクラスを取得します。</summary>
      <returns vsli:raw="The class that contains the customized interop stub.">カスタマイズされた相互運用スタブを格納するクラス。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary vsli:raw="Gets the name of the stub method.">スタブ メソッドの名前を取得します。</summary>
      <returns vsli:raw="The name of a customized interop stub.">カスタマイズされた相互運用スタブの名前。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.">アンマネージド コードを扱うときに使用できるさまざまなメソッドを提供します。これらのメソッドを使用すると、アンマネージド メモリの割り当て、アンマネージド メモリ ブロックのコピー、マネージド型からアンマネージド型への変換などができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary vsli:raw="Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.">システムの既定の文字サイズを表します。Unicode システムの既定の文字サイズは 2 で、ANSI システムの場合は 1 です。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary vsli:raw="Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.">現在のオペレーティング システムでの 2 バイト文字セット (DBCS) サイズの上限をバイト単位で表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary vsli:raw="Increments the reference count on the specified interface.">指定したインターフェイスの参照カウントをインクリメントします。</summary>
      <param name="pUnk" vsli:raw="The interface reference count to increment.">インクリメントするインターフェイスの参照カウント。</param>
      <returns vsli:raw="The new value of the reference count on the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">
        <paramref name="pUnk" /> パラメーターの参照カウントの新しい値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary vsli:raw="Allocates a block of memory of specified size from the COM task memory allocator.">COM タスク メモリ アロケーターから、指定したサイズのメモリ ブロックを割り当てます。</summary>
      <param name="cb" vsli:raw="The size of the block of memory to be allocated.">割り当てるメモリ ブロックのサイズ。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">メモリが不足しているため要求を満たせません。</exception>
      <returns vsli:raw="An integer representing the address of the block of memory allocated. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">割り当てられたメモリ ブロックのアドレスを表す整数。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> を使用して解放する必要があります。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the specified number of bytes.">指定したバイト数を使用して、プロセスのアンマネージ メモリからメモリを割り当てます。</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">メモリ内で必要なバイト数。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">メモリが不足しているため要求を満たせません。</exception>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">新しく割り当てられたメモリへのポインター。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> メソッドを使用して解放する必要があります。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.">指定したバイト数へのポインターを使用して、プロセスのアンマネージ メモリからメモリを割り当てます。</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">メモリ内で必要なバイト数。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">メモリが不足しているため要求を満たせません。</exception>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">新しく割り当てられたメモリへのポインター。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> メソッドを使用して解放する必要があります。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary vsli:raw="Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.">任意のコンテキストからのランタイム呼び出し可能ラッパー (RCW: Runtime Callable Wrapper) をクリーンアップに使用できるかどうかを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are any RCWs available for cleanup; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">任意の RCW をクリーンアップに使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary vsli:raw="Gets an interface pointer identified by the specified moniker.">指定したモニカーによって識別されるインターフェイス ポインターを取得します。</summary>
      <param name="monikerName" vsli:raw="The moniker corresponding to the desired interface pointer.">必要なインターフェイス ポインターに対応するモニカー。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="An unrecognized HRESULT was returned by the unmanaged &lt;see langword=&quot;BindToMoniker&quot; /&gt; method.">アンマネージド <see langword="BindToMoniker" /> メソッドから、認識されない HRESULT が返されました。</exception>
      <returns vsli:raw="An object containing a reference to the interface pointer identified by the &lt;paramref name=&quot;monikerName&quot; /&gt; parameter. A moniker is a name, and in this case, the moniker is defined by an interface.">
        <paramref name="monikerName" /> パラメーターによって識別されるインターフェイス ポインターへの参照を格納しているオブジェクト。 モニカーは名前であり、この場合、モニカーはインターフェイスによって定義されます。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary vsli:raw="Changes the strength of an object's COM Callable Wrapper (CCW) handle.">オブジェクトの COM 呼び出し可能ラッパー (CCW) ハンドルの強度を変更します。</summary>
      <param name="otp" vsli:raw="The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.">参照カウント付きハンドルを保持する CCW を持つオブジェクト。 CCW の参照カウントがゼロを超える場合はハンドルが strong。それ以外の場合は weak。</param>
      <param name="fIsWeak" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to change the strength of the handle on the &lt;paramref name=&quot;otp&quot; /&gt; parameter to weak, regardless of its reference count; &lt;see langword=&quot;false&quot; /&gt; to reset the handle strength on &lt;paramref name=&quot;otp&quot; /&gt; to be reference counted.">参照カウントに関係なく、<paramref name="otp" /> パラメーターのハンドルの強さを weak に変更する場合は <see langword="true" />。<paramref name="otp" /> のハンドルの強さをリセットしてカウントされた参照にする場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary vsli:raw="Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.">現在のコンテキストで割り当てられたすべてのランタイム呼び出し可能ラッパー (RCW) をクリーンアップすることをランタイムに通知します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.">1 次元の 8 ビット符号なし整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">コピー元の 1 次元配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">コピー先のメモリ ポインター。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.">1 次元の文字列のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">コピー元の 1 次元配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">コピー先のメモリ ポインター。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.">1 次元の倍精度浮動小数点数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">コピー元の 1 次元配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">コピー先のメモリ ポインター。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.">1 次元の 16 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">コピー元の 1 次元配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">コピー先のメモリ ポインター。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.">1 次元の 32 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">コピー元の 1 次元配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">コピー先のメモリ ポインター。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" /> または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.">1 次元の 64 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">コピー元の 1 次元配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">コピー先のメモリ ポインター。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.">アンマネージド メモリ ポインターのデータを 8 ビット符号なし整数のマネージド配列にコピーします。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">コピー元のメモリ ポインター。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed character array.">アンマネージド メモリ ポインターのデータを文字列のマネージド配列にコピーします。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">コピー元のメモリ ポインター。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.">アンマネージド メモリ ポインターのデータを倍精度浮動小数点数のマネージド配列にコピーします。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">コピー元のメモリ ポインター。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.">アンマネージド メモリ ポインターのデータを 16 ビット符号付き整数のマネージド配列にコピーします。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">コピー元のメモリ ポインター。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.">アンマネージド メモリ ポインターのデータを 32 ビット符号付き整数のマネージド配列にコピーします。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">コピー元のメモリ ポインター。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.">アンマネージド メモリ ポインターのデータを 64 ビット符号付き整数のマネージド配列にコピーします。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">コピー元のメモリ ポインター。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array.">アンマネージド メモリ ポインターのデータをマネージド <see cref="T:System.IntPtr" /> 配列にコピーします。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">コピー元のメモリ ポインター。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.">アンマネージド メモリ ポインターのデータを単精度浮動小数点数のマネージド配列にコピーします。</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">コピー元のメモリ ポインター。</param>
      <param name="destination" vsli:raw="The array to copy to.">コピー先の配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array to an unmanaged memory pointer.">1 次元の <see cref="T:System.IntPtr" /> マネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">コピー元の 1 次元配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">コピー先のメモリ ポインター。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.">1 次元の単精度浮動小数点数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">コピー元の 1 次元配列。</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">コピー先のメモリ ポインター。</param>
      <param name="length" vsli:raw="The number of array elements to copy.">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary vsli:raw="Aggregates a managed object with the specified COM object.">指定した COM オブジェクトを使用してマネージド オブジェクトを集約します。</summary>
      <param name="pOuter" vsli:raw="The outer &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">外部 <see langword="IUnknown" /> ポインター。</param>
      <param name="o" vsli:raw="An object to aggregate.">集約するオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> は Windows ランタイム オブジェクト。</exception>
      <returns vsli:raw="The inner &lt;see langword=&quot;IUnknown&quot; /&gt; pointer of the managed object.">マネージド オブジェクトの内部 <see langword="IUnknown" /> ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Aggregates a managed object of the specified type with the specified COM object.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定した COM オブジェクトを使用して、指定した型のマネージド オブジェクトを集約します。</summary>
      <param name="pOuter" vsli:raw="The outer IUnknown pointer.">外部 IUnknown ポインター。</param>
      <param name="o" vsli:raw="The managed object to aggregate.">集計するマネージド オブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of the managed object to aggregate.">集約するマネージド オブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> は Windows ランタイム オブジェクト。</exception>
      <returns vsli:raw="The inner IUnknown pointer of the managed object.">内部 IUnknown マネージド オブジェクトのポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary vsli:raw="Wraps the specified COM object in an object of the specified type.">指定した型のオブジェクト内の、指定した COM オブジェクトをラップします。</summary>
      <param name="o" vsli:raw="The object to be wrapped.">ラップされるオブジェクト。</param>
      <param name="t" vsli:raw="The type of wrapper to create.">作成するラッパーの型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> は <see langword="__ComObject" /> から派生する必要があります。  
  
または 
 <paramref name="t" /> は Windows ランタイム 型です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the destination type because it does not support all required interfaces.">
        <paramref name="o" /> はすべての必要なインターフェイスをサポートしていないため、ソース オブジェクトをターゲットの型に変換することはできません。</exception>
      <returns vsli:raw="The newly wrapped object that is an instance of the desired type.">指定した型のインスタンスとなる新しくラップされたオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Wraps the specified COM object in an object of the specified type.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定した型のオブジェクト内の、指定した COM オブジェクトをラップします。</summary>
      <param name="o" vsli:raw="The object to be wrapped.">ラップされるオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of object to wrap.">ラップするオブジェクトの型。</typeparam>
      <typeparam name="TWrapper" vsli:raw="The type of object to return.">返すオブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;typeparamref name=&quot;T&quot; /&gt; is a Windows Runtime type.">
        <typeparamref name="T" /> は <see langword="__ComObject" /> から派生する必要があります。  
  
または 
 <typeparamref name="T" /> は Windows ランタイム 型です。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the &lt;paramref name=&quot;TWrapper&quot; /&gt; because it does not support all required interfaces.">必要なすべてのインターフェイスをサポートしていないため、<paramref name="o" /> は <paramref name="TWrapper" /> に変換できません。</exception>
      <returns vsli:raw="The newly wrapped object.">新しくラップされたオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Frees all substructures that the specified unmanaged memory block points to.">指定したアンマネージ メモリ ブロックが指す、すべてのサブ構造体を解放します。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">アンマネージ メモリ ブロックへのポインター。</param>
      <param name="structuretype" vsli:raw="Type of a formatted class. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">書式指定クラスの型。 これは、<paramref name="ptr" /> パラメーター内のバッファーを削除するために必要なレイアウト情報を提供します。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <paramref name="structureType" /> のレイアウトが自動レイアウトです。 代わりに、sequential または explicit を使用します。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Frees all substructures of a specified type that the specified unmanaged memory block points to.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定したアンマネージ メモリ ブロックが指す、指定した型のすべてのサブ構造体を解放します。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">アンマネージ メモリ ブロックへのポインター。</param>
      <typeparam name="T" vsli:raw="The type of the formatted structure. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">形式構造体の型です。 これは、<paramref name="ptr" /> パラメーター内のバッファーを削除するために必要なレイアウト情報を提供します。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <typeparamref name="T" /> のレイアウトが自動レイアウトです。 代わりに、sequential または explicit を使用します。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary vsli:raw="Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.">ランタイム呼び出し可能ラッパー (RCW) の参照カウントを 0 に設定することによって、RCW へのすべての参照を解放します。</summary>
      <param name="o" vsli:raw="The RCW to be released.">解放する RCW。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> は有効な COM オブジェクトではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The new value of the reference count of the RCW associated with the &lt;paramref name=&quot;o&quot; /&gt; parameter, which is 0 (zero) if the release is successful.">RCW の参照カウントの新しい値に関連付けられている、<paramref name="o" /> パラメーターで、このリリースでは、成功した場合は 0 (ゼロ)。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a &lt;see langword=&quot;BSTR&quot; /&gt; using the COM SysFreeString function.">COM  SysFreeString  関数を使用して、<see langword="BSTR" /> を解放します。</summary>
      <param name="ptr" vsli:raw="The address of the BSTR to be freed.">解放する BSTR のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary vsli:raw="Frees a block of memory allocated by the unmanaged COM task memory allocator.">アンマネージ COM タスク メモリ アロケーターによって割り当てられたメモリ ブロックを解放します。</summary>
      <param name="ptr" vsli:raw="The address of the memory to be freed.">解放するメモリのアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary vsli:raw="Frees memory previously allocated from the unmanaged memory of the process.">以前にプロセスのアンマネージ メモリから割り当てられたメモリを解放します。</summary>
      <param name="hglobal" vsli:raw="The handle returned by the original matching call to &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> への元の一致する呼び出しによって返されたハンドル。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary vsli:raw="Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).">指定した型のグローバル一意識別子 (GUID: Globally Unique Identifier) を返すか、タイプ ライブラリ エクスポーター (Tlbexp.exe) で使用されるアルゴリズムを使用して GUID を生成します。</summary>
      <param name="type" vsli:raw="The type to generate a GUID for.">GUID 生成の対象となる型。</param>
      <returns vsli:raw="An identifier for the specified type.">指定した型の識別子。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary vsli:raw="Returns a programmatic identifier (ProgID) for the specified type.">指定した型のプログラム ID (ProgID) を返します。</summary>
      <param name="type" vsli:raw="The type to get a ProgID for.">ProgID を取得する対象の型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.">
        <paramref name="type" /> パラメーターは、COM で作成できるクラスではありません。 クラスはパブリックであり、パラメーターなしのパブリック コンストラクターがあり、COM 参照可能である必要があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The ProgID of the specified type.">指定した型の ProgID。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.">指定したオブジェクトの指定したインターフェイスを表す IUnknown インターフェイスへのポインターを返します。 カスタム クエリ インターフェイス アクセスは既定で有効になっています。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">インターフェイスを提供するオブジェクト。</param>
      <param name="T" vsli:raw="The type of interface that is requested.">要求されるインターフェイスの型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">
        <typeparamref name="T" /> パラメーターがインターフェイスではありません。  
  
または 
型が COM から参照できません。  
  
または 
<typeparamref name="T" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the requested interface.">
        <paramref name="o" /> パラメーターが要求されたインターフェイスをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> パラメーターが <see langword="null" /> です。  
  
または 
<typeparamref name="T" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The interface pointer that represents the specified interface for the object.">オブジェクトの指定したインターフェイスを表すインターフェイス ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.">指定したオブジェクトの指定したインターフェイスを表す IUnknown インターフェイスへのポインターを返します。 カスタム クエリ インターフェイス アクセスは、指定したカスタマイズ モードで制御されます。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">インターフェイスを提供するオブジェクト。</param>
      <param name="T" vsli:raw="The type of interface that is requested.">要求されるインターフェイスの型。</param>
      <param name="mode" vsli:raw="One of the enumeration values that indicates whether to apply an &lt;see langword=&quot;IUnknown::QueryInterface&quot; /&gt; customization that is supplied by an &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> によって提供される <see langword="IUnknown::QueryInterface" /> カスタマイズを適用するかどうかを示す列挙値のいずれか。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">
        <typeparamref name="T" /> パラメーターがインターフェイスではありません。  
  
または 
型が COM から参照できません。  
  
または 
<typeparamref name="T" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The object &lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">オブジェクト <paramref name="o" /> が要求されたインターフェイスをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> パラメーターが <see langword="null" /> です。  
  
または 
<typeparamref name="T" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The interface pointer that represents the interface for the object.">オブジェクトのインターフェイスを表すインターフェイス ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.">[.NET Framework 4.5.1 以降のバージョンでサポート] 
指定した型のオブジェクトの指定したインターフェイスを表す IUnknown インターフェイスへのポインターを返します。 カスタム クエリ インターフェイス アクセスは既定で有効になっています。</summary>
      <param name="o" vsli:raw="The object that provides the interface.">インターフェイスを提供するオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;o&quot; /&gt;.">
        <paramref name="o" /> の型。</typeparam>
      <typeparam name="TInterface" vsli:raw="The type of interface to return.">返すインターフェイスの型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TInterface&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is an open generic type.">
        <paramref name="TInterface" /> パラメーターがインターフェイスではありません。  
  
または 
型が COM から参照できません。  
  
または 
<typeparamref name="T" /> パラメーターがオープン ジェネリック型です。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">
        <paramref name="o" /> パラメーターが <paramref name="TInterface" /> インターフェイスをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The interface pointer that represents the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">
        <paramref name="TInterface" /> インターフェイスを表すインターフェイス ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary vsli:raw="Retrieves data that is referenced by the specified key from the specified COM object.">指定した COM オブジェクトから、指定したキーによって参照されているデータを取得します。</summary>
      <param name="obj" vsli:raw="The COM object that contains the data that you want.">目的のデータを格納している COM オブジェクト。</param>
      <param name="key" vsli:raw="The key in the internal hash table of &lt;paramref name=&quot;obj&quot; /&gt; to retrieve the data from.">データの取得対象となる <paramref name="obj" /> の内部ハッシュ テーブルにあるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> が <see langword="null" />です。  
  
または 
 <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> はCOM オブジェクトではありません。  
  
または 
 <paramref name="obj" /> は Windows ランタイム オブジェクト。</exception>
      <returns vsli:raw="The data represented by the &lt;paramref name=&quot;key&quot; /&gt; parameter in the internal hash table of the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">
        <paramref name="obj" /> パラメーターの内部ハッシュ テーブルにある <paramref name="key" /> パラメーターで表されるデータ。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary vsli:raw="Converts an unmanaged function pointer to a delegate.">アンマネージ関数ポインターをデリゲートに変換します。</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to be converted.">変換するアンマネージ関数ポインター。</param>
      <param name="t" vsli:raw="The type of the delegate to be returned.">返されるデリゲートの型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is not a delegate or is generic.">
        <paramref name="t" /> パラメーターは、デリゲートでもジェネリックでもありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターが <see langword="null" /> です。  
  
または 
<paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="A delegate instance that can be cast to the appropriate delegate type.">適切なデリゲート型にキャストできるデリゲート インスタンス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an unmanaged function pointer to a delegate of a specified type.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 アンマネージ関数ポインターを指定した型のデリゲートに変換します。</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to convert.">変換するアンマネージ関数ポインター。</param>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate to return.">返すデリゲートの型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TDelegate&quot; /&gt; generic parameter is not a delegate, or it is an open generic type.">
        <paramref name="TDelegate" /> ジェネリック パラメーターはデリゲートでない、またはオープン ジェネリック型です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="A instance of the specified delegate type.">指定したデリゲート型のインスタンス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary vsli:raw="Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.">型が COM に公開されたときの仮想テーブル (V テーブルまたは VTBL) の最後のスロットを取得します。</summary>
      <param name="t" vsli:raw="A type that represents an interface or class.">インターフェイスまたはクラスを表す型。</param>
      <returns vsli:raw="The last VTBL slot of the interface when exposed to COM. If the &lt;paramref name=&quot;t&quot; /&gt; parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.">COM に公開されたときのインターフェイスの最後の VTBL スロット。 <paramref name="t" /> パラメーターがクラスの場合、返された VTBL スロットはそのクラスから生成されるインターフェイス内の最終スロットです。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary vsli:raw="Retrieves a code that identifies the type of the exception that occurred.">発生した例外の型を識別するコードを取得します。</summary>
      <returns vsli:raw="The type of the exception.">例外の型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">指定した HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">変換される HRESULT。</param>
      <returns vsli:raw="An object that represents the converted HRESULT, or &lt;see langword=&quot;null&quot; /&gt; if the HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">変換後の HRESULT を表すオブジェクト。または HRESULT 値がエラー コード (<see langword="S_OK" /> や <see langword="S_FALSE" /> など) ではない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, with additional error information passed in an IErrorInfo interface for the exception object.">例外オブジェクトの IErrorInfoインターフェイスに渡された追加エラー情報を使用して、指定した HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">変換される HRESULT。</param>
      <param name="errorInfo" vsli:raw="A pointer to the &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface and construct the exception just from the error code.">エラーの詳細情報を提供する <see langword="IErrorInfo" /> インターフェイスへのポインター。 <c>IntPtr(0)</c> を指定すると、現在の <see langword="IErrorInfo" /> インターフェイスを使用できます。または <c>IntPtr(-1)</c> を指定すると、現在の <see langword="IErrorInfo" /> インターフェイスを無視し、エラー コードだけを使用して例外を構築できます。</param>
      <returns vsli:raw="An object that represents the converted HRESULT and information obtained from &lt;paramref name=&quot;errorInfo&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if an HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">変換後の HRESULT を表すオブジェクトと <paramref name="errorInfo" /> から取得された情報。または HRESULT 値がエラー コード (<see langword="S_OK" /> や <see langword="S_FALSE" /> など) ではない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary vsli:raw="Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.">例外発生時に、コンピューターに依存しない例外の記述、およびスレッドに対して存在した状態に関する情報を取得します。</summary>
      <returns vsli:raw="A pointer to an EXCEPTION_POINTERS structure.">EXCEPTION_POINTERS 構造体へのポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary vsli:raw="Converts a delegate into a function pointer that is callable from unmanaged code.">アンマネージ コードから呼び出すことができる関数ポインターにデリゲートを変換します。</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">アンマネージ コードに渡されるデリゲート。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">
        <paramref name="d" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">アンマネージド コードに渡すことができる値。アンマネージド コードはこの値を使用して、基になるマネージド デリゲートを呼び出すことができます。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定した型のデリゲートをアンマネージ コードから呼び出すことができる関数ポインターに変換します。</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">アンマネージ コードに渡されるデリゲート。</param>
      <typeparam name="TDelegate" vsli:raw="The type of delegate to convert.">変換するデリゲートの型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">
        <paramref name="d" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">アンマネージド コードに渡すことができる値。アンマネージド コードはこの値を使用して、基になるマネージド デリゲートを呼び出すことができます。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary vsli:raw="Returns the instance handle (HINSTANCE) for the specified module.">指定したモジュールのインスタンス ハンドル (HINSTANCE) を返します。</summary>
      <param name="m" vsli:raw="The module whose HINSTANCE is desired.">目的の HINSTANCE を持つモジュール。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="m" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The HINSTANCE for &lt;paramref name=&quot;m&quot; /&gt;; or -1 if the module does not have an HINSTANCE.">
        <paramref name="m" /> の HINSTANCE。モジュールに HINSTANCE がない場合は -1。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary vsli:raw="Converts the specified exception to an HRESULT.">指定した例外を HRESULT に変換します。</summary>
      <param name="e" vsli:raw="The exception to convert to an HRESULT.">HRESULT に変換する例外。</param>
      <returns vsli:raw="The HRESULT mapped to the supplied exception.">提供された例外に割り当てられる HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary vsli:raw="Returns the HRESULT corresponding to the last error incurred by Win32 code executed using &lt;see cref=&quot;T:System.Runtime.InteropServices.Marshal&quot; /&gt;.">
        <see cref="T:System.Runtime.InteropServices.Marshal" /> を使用して実行した Win32 コードが原因の最終エラーに対応する HRESULT を返します。</summary>
      <returns vsli:raw="The HRESULT corresponding to the last Win32 error code.">最終 Win32 エラー コードに対応する HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary vsli:raw="Returns an IDispatch interface from a managed object.">マネージド オブジェクトから IDispatch インターフェイスを返します。</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IDispatch&quot; /&gt; interface is requested.">要求される <see langword="IDispatch" /> インターフェイスを持つオブジェクト。</param>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">
        <paramref name="o" /> が要求されたインターフェイスをサポートしていません。</exception>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">
        <paramref name="o" /> パラメーターの <see langword="IDispatch" /> ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary vsli:raw="Returns an IUnknown interface from a managed object.">マネージド オブジェクトから IUnknown インターフェイスを返します。</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IUnknown&quot; /&gt; interface is requested.">要求される <see langword="IUnknown" /> インターフェイスを持つオブジェクト。</param>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">
        <paramref name="o" /> パラメーターの <see langword="IUnknown" /> ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary vsli:raw="Returns the error code returned by the last unmanaged function that was called using platform invoke that has the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.SetLastError&quot; /&gt; flag set.">
        <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> フラグが設定され、プラットフォーム呼び出しを使用して呼び出された、最終アンマネージ関数によって返されるエラー コードを返します。</summary>
      <returns vsli:raw="The last error code set by a call to the Win32 SetLastError function.">Win32 SetLastError 関数への呼び出しで最後に設定されたエラー コード。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary vsli:raw="Converts an object to a COM VARIANT.">オブジェクトを COM VARIANT に変換します。</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">COM VARIANT の取得対象となるオブジェクト。</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">
        <paramref name="obj" /> パラメーターに対応する VARIANT を受け取るポインター。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is an instance of a generic type.">
        <paramref name="obj" /> パラメーターがジェネリック型のインスタンスです。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an object of a specified type to a COM VARIANT.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定した型のオブジェクトを COM VARIANT に変換します。</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">COM VARIANT の取得対象となるオブジェクト。</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">
        <paramref name="obj" /> パラメーターに対応する VARIANT を受け取るポインター。</param>
      <typeparam name="T" vsli:raw="The type of the object to convert.">変換対象のオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.">COM オブジェクトを IUnknown インターフェイスへのポインターによって表す型のインスタンスを返します。</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">
        <see langword="IUnknown" /> インターフェイスへのポインター。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pUnk&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="pUnk" /> が <see cref="F:System.IntPtr.Zero" />です。</exception>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">指定したアンマネージ COM オブジェクトを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary vsli:raw="Converts a COM VARIANT to an object.">COM VARIANT をオブジェクトに変換します。</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">COM VARIANT へのポインター。</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> が有効な VARIANT 型ではありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> に、サポートされていない型があります。</exception>
      <returns vsli:raw="An object that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">
        <paramref name="pSrcNativeVariant" /> パラメーターに対応するオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a COM VARIANT to an object of a specified type.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 COM VARIANT を、指定した型のオブジェクトに変換します。</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">COM VARIANT へのポインター。</param>
      <typeparam name="T" vsli:raw="The type to which to convert the COM VARIANT.">COM VARIANT の変換先の型。</typeparam>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> が有効な VARIANT 型ではありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> に、サポートされていない型があります。</exception>
      <returns vsli:raw="An object of the specified type that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">
        <paramref name="pSrcNativeVariant" /> パラメーターに対応する、指定した型のオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary vsli:raw="Converts an array of COM VARIANTs to an array of objects.">COM VARIANTs の配列をオブジェクトの配列に変換します。</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">COM VARIANT の配列の最初の要素へのポインター。</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" /> 内の COM VARIANT の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> は負の値です。</exception>
      <returns vsli:raw="An object array that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" /> に対応するオブジェクト配列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an array of COM VARIANTs to an array of a specified type.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 COM VARIANT の配列を指定した型の配列に変換します。</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">COM VARIANT の配列の最初の要素へのポインター。</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" /> 内の COM VARIANT の数。</param>
      <typeparam name="T" vsli:raw="The type of the array to return.">返す配列の型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> は負の値です。</exception>
      <returns vsli:raw="An array of &lt;typeparamref name=&quot;T&quot; /&gt; objects that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">
        <paramref name="aSrcNativeVariant" />. に対応する <typeparamref name="T" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary vsli:raw="Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.">ユーザー定義のメソッドを格納している、仮想関数テーブル (V テーブルまたは VTBL) の最初のスロットを取得します。</summary>
      <param name="t" vsli:raw="A type that represents an interface or a class.">インターフェイスまたはクラスを表す型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not visible from COM.">
        <paramref name="t" /> は COM から参照できません。</exception>
      <returns vsli:raw="The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.">ユーザー定義のメソッドを格納している最初の VTBL スロット。 IUnknown に基づくインターフェイスの場合、最初のスロットは 3 です。IDispatch に基づくインターフェイスの場合、最初のスロットは 7 です。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary vsli:raw="Returns a managed object of a specified type that represents a COM object.">COM オブジェクトを表す、指定した型のマネージド オブジェクトを返します。</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface of the unmanaged object.">アンマネージ オブジェクトの <see langword="IUnknown" />インターフェイスへのポインター。</param>
      <param name="t" vsli:raw="The type of the requested managed class.">要求されたマネージド クラスの型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not attributed with &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> は <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />を持つ属性ではありません。  
  
または 
 <paramref name="t" /> は Windows ランタイム 型です。</exception>
      <returns vsli:raw="An instance of the class corresponding to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the requested unmanaged COM object.">要求されたアンマネージ COM オブジェクトを表す、<see cref="T:System.Type" /> オブジェクトに対応するクラスのインスタンス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary vsli:raw="Returns the type associated with the specified class identifier (CLSID).">指定したクラス ID (CLSID) に関連付けられている型を返します。</summary>
      <param name="clsid" vsli:raw="The CLSID of the type to return.">返す型の CLSID。</param>
      <returns vsli:raw="&lt;see langword=&quot;System.__ComObject&quot; /&gt; regardless of whether the CLSID is valid.">CLSID が有効かどうかに関係なく <see langword="System.__ComObject" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary vsli:raw="Retrieves the name of the type represented by an ITypeInfo object.">ITypeInfo オブジェクトで表される型の名前を取得します。</summary>
      <param name="typeInfo" vsli:raw="An object that represents an &lt;see langword=&quot;ITypeInfo&quot; /&gt; pointer.">
        <see langword="ITypeInfo" /> ポインターを表すオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeInfo" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The name of the type that the &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter points to.">
        <paramref name="typeInfo" /> パラメーターが指す型の名前。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.">指定した IUnknown インターフェイスの一意のランタイム呼び出し可能ラッパー (RCW) オブジェクトを作成します。</summary>
      <param name="unknown" vsli:raw="A managed pointer to an &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">
        <see langword="IUnknown" /> インターフェイスへのマネージド ポインター。</param>
      <returns vsli:raw="A unique RCW for the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">指定した <see langword="IUnknown" /> インターフェイスの一意の RCW。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary vsli:raw="Indicates whether a specified object represents a COM object.">指定したオブジェクトが COM オブジェクトを表すかどうかを示します。</summary>
      <param name="o" vsli:raw="The object to check.">確認する対象のオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;o&quot; /&gt; parameter is a COM type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> パラメーターが COM 型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary vsli:raw="Indicates whether a type is visible to COM clients.">型が COM クライアントに表示されるかどうかを示します。</summary>
      <param name="t" vsli:raw="The type to check for COM visibility.">COM の参照可能範囲を確認する対象の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is visible to COM; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型が COM から参照できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary vsli:raw="Returns the field offset of the unmanaged form of the managed class.">マネージド クラスのアンマネージド フォームのフィールド オフセットを返します。</summary>
      <param name="t" vsli:raw="A value type or formatted reference type that specifies the managed class. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; to the class.">マネージド クラスを指定する値型または書式指定参照型。 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> をクラスに適用する必要があります。</param>
      <param name="fieldName" vsli:raw="The field within the &lt;paramref name=&quot;t&quot; /&gt; parameter.">
        <paramref name="t" /> パラメーター内のフィールド。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.">クラスを構造体としてエクスポートできません。またはフィールドが非パブリックです。 .NET Framework Version 2.0 から開始すると、フィールドはプライベートになる場合があります。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">プラットフォーム呼び出しによって宣言される指定したクラス内の <paramref name="fieldName" /> パラメーターのバイト単位のオフセット。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the field offset of the unmanaged form of a specified managed class.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定されたマネージド クラスのアンマネージド フォームのフィールド オフセットを返します。</summary>
      <param name="fieldName" vsli:raw="The name of the field in the &lt;paramref name=&quot;T&quot; /&gt; type.">
        <paramref name="T" /> 型内のフィールドの名前。</param>
      <typeparam name="T" vsli:raw="A managed value type or formatted reference type. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; attribute to the class.">マネージド値型または書式指定参照型。 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性をクラスに適用する必要があります。</typeparam>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">プラットフォーム呼び出しによって宣言される指定したクラス内の <paramref name="fieldName" /> パラメーターのバイト単位のオフセット。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary vsli:raw="Executes one-time method setup tasks without calling the method.">メソッドを呼び出さずに、一度だけ実行されるメソッド セットアップ タスクを実行します。</summary>
      <param name="m" vsli:raw="The method to be checked.">チェックするメソッド。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="m" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object.">
        <paramref name="m" /> パラメーターが <see cref="T:System.Reflection.MethodInfo" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary vsli:raw="Performs a pre-link check for all methods on a class.">クラスのすべてのメソッドに対してリンク前の確認を実行します。</summary>
      <param name="c" vsli:raw="The class whose methods are to be checked.">メソッドをチェックするクラス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;c&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="c" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary vsli:raw="Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, and widens each character to UTF-16.">アンマネージド ANSI または UTF-8 文字列から最初の null 文字に遭遇するまでのすべての文字をマネージド <see cref="T:System.String" /> にコピーし、各文字を UTF-16 に拡張します。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">アンマネージ文字列の最初の文字のアドレス。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string. If &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns a null string.">アンマネージド文字列のコピーを保持するマネージド文字列。 <paramref name="ptr" /> が <see langword="null" /> の場合、このメソッドは null 文字列を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド ANSI または UTF-8 文字列から指定した文字数をコピーし、各文字を UTF-16 に拡張します。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">アンマネージ文字列の最初の文字のアドレス。</param>
      <param name="len" vsli:raw="The byte count of the input string to copy.">コピーする入力文字列のバイト数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> が 0 未満です。</exception>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、ネイティブ文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from a string stored in unmanaged memory into it.">マネージド <see cref="T:System.String" /> を割り当て、最初の null 文字に遭遇するまでの文字をアンマネージド メモリに格納されている文字列からすべてコピーします。</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">Unicode プラットフォームの場合は、先頭の Unicode 文字のアドレス。  
  
 または  
  
 ANSI プラットフォームの場合は、先頭の ANSI 文字のアドレス。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies the specified number of characters from a string stored in unmanaged memory into it.">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド メモリに格納されている文字列から指定された数の文字をそれにコピーします。</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">Unicode プラットフォームの場合は、先頭の Unicode 文字のアドレス。  
  
 または  
  
 ANSI プラットフォームの場合は、先頭の ANSI 文字のアドレス。</param>
      <param name="len" vsli:raw="The number of characters to copy.">コピーする文字数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> が 0 未満です。</exception>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、ネイティブ文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a binary string (BSTR) stored in unmanaged memory into it.">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド メモリに格納されている バイナリ文字列 (BSTR)  をコピーします。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">アンマネージ文字列の最初の文字のアドレス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; equals &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="ptr" /> と <see cref="F:System.IntPtr.Zero" /> は等しい。</exception>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string.">アンマネージド文字列のコピーを保持するマネージド文字列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged Unicode string into it.">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド Unicode 文字列から最初の null 文字に遭遇するまでの文字をすべてコピーします。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">アンマネージ文字列の最初の文字のアドレス。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of characters from an unmanaged Unicode string into it.">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド Unicode 文字列から指定された数の文字をコピーします。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">アンマネージ文字列の最初の文字のアドレス。</param>
      <param name="len" vsli:raw="The number of Unicode characters to copy.">コピーする Unicode 文字の数。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged UTF-8 string into it.">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド UTF-8 文字列から最初の null 文字に遭遇するまでの文字をすべてコピーします。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">アンマネージ文字列の最初の文字のアドレス。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of bytes from an unmanaged UTF8 string into it.">マネージド <see cref="T:System.String" /> を割り当て、アンマネージド UTF-8 文字列から指定されたバイト数をコピーします。</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">アンマネージ文字列の最初の文字のアドレス。</param>
      <param name="byteLen" vsli:raw="The number of bytes to copy.">コピーするバイト数。</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a managed object.">アンマネージド メモリ ブロックからマネージド オブジェクトにデータをマーシャリングします。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">アンマネージ メモリ ブロックへのポインター。</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied. This must be an instance of a formatted class.">データのコピー先のオブジェクト。 これは、書式指定クラスのインスタンスである必要があります。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; Structure is a boxed value type.">構造体のレイアウトがシーケンシャルまたは明示的ではありません。  
  
 または  
  
 構造体は、ボックス化された値型です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.">アンマネージド メモリ ブロックから、指定した型の、新しく割り当てられたマネージド オブジェクトにデータをマーシャリングします。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">アンマネージ メモリ ブロックへのポインター。</param>
      <param name="structureType" vsli:raw="The type of object to be created. This object must represent a formatted class or a structure.">作成するオブジェクトの型。 このオブジェクトは、書式指定クラスまたは構造体を表す必要があります。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;structureType&quot; /&gt; parameter layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;structureType&quot; /&gt; parameter is a generic type definition.">
        <paramref name="structureType" /> パラメーターのレイアウトがシーケンシャルまたは明示的ではありません。  
  
または 
<paramref name="structureType" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structureType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;paramref name=&quot;structureType&quot; /&gt; does not have an accessible parameterless constructor.">
        <paramref name="structureType" /> で指定したクラスに、アクセスできるパラメーターなしのコンストラクターがありません。</exception>
      <returns vsli:raw="A managed object containing the data pointed to by the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">
        <paramref name="ptr" /> パラメーターが指すデータを格納しているマネージド オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 アンマネージド メモリ ブロックから、ジェネリック型パラメーターによって指定された型の、新しく割り当てられたマネージド オブジェクトにデータをマーシャリングします。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">アンマネージ メモリ ブロックへのポインター。</param>
      <typeparam name="T" vsli:raw="The type of the object to which the data is to be copied. This must be a formatted class or a structure.">データをコピーする先のオブジェクトの型。 これは、書式指定クラスまたは構造体である必要があります。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The layout of &lt;typeparamref name=&quot;T&quot; /&gt; is not sequential or explicit.">
        <typeparamref name="T" /> のレイアウトがシーケンシャルまたは明示的ではありません。</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;typeparamref name=&quot;T&quot; /&gt; does not have an accessible parameterless constructor.">
        <typeparamref name="T" /> で指定したクラスに、アクセスできるパラメーターなしのコンストラクターがありません。</exception>
      <returns vsli:raw="A managed object that contains the data that the &lt;paramref name=&quot;ptr&quot; /&gt; parameter points to.">
        <paramref name="ptr" /> パラメーターが指すデータを格納しているマネージド オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a managed object of the specified type.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 アンマネージド メモリ ブロックから、指定した型のマネージド オブジェクトにデータをマーシャリングします。</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">アンマネージ メモリ ブロックへのポインター。</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied.">データのコピー先のオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;structure&quot; /&gt;. This must be a formatted class.">
        <paramref name="structure" /> の型。 書式が設定されたクラスである必要があります。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.">構造体のレイアウトがシーケンシャルまたは明示的ではありません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Requests a pointer to a specified interface from a COM object.">COM オブジェクトから指定したインターフェイスへのポインターを要求します。</summary>
      <param name="pUnk" vsli:raw="The interface to be queried.">照会するインターフェイス。</param>
      <param name="iid" vsli:raw="The interface identifier (IID) of the requested interface.">要求したインターフェイスのインターフェイス ID (IID: Interface Identifier)。</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the returned interface.">このメソッドが返されるときに、返されたインターフェイスへの参照を格納します。</param>
      <returns vsli:raw="An HRESULT that indicates the success or failure of the call.">呼び出しの成功または失敗を示す HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary vsli:raw="Reads a single byte from unmanaged memory.">アンマネージ メモリから 1 バイトを読み取ります。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
      <returns vsli:raw="The byte read from unmanaged memory.">アンマネージ メモリから読み取られたバイト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">アンマネージ メモリから、指定したオフセット (またはインデックス) の 1 バイトを読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られたバイト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">アンマネージ メモリから、指定したオフセット (またはインデックス) の 1 バイトを読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られたバイト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary vsli:raw="Reads a 16-bit signed integer from unmanaged memory.">アンマネージ メモリから 16 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory.">アンマネージ メモリから読み取られた 16 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">アンマネージ メモリの指定されたオフセットから 16 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られた 16 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">アンマネージ メモリの指定されたオフセットから 16 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られた 16 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary vsli:raw="Reads a 32-bit signed integer from unmanaged memory.">アンマネージ メモリから 32 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">アンマネージ メモリから読み取られた 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">アンマネージ メモリの指定されたオフセットから 32 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">アンマネージ メモリから読み取られた 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">アンマネージ メモリの指定されたオフセットから 32 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られた 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary vsli:raw="Reads a 64-bit signed integer from unmanaged memory.">アンマネージ メモリから 64 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory.">アンマネージ メモリから読み取られた 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">アンマネージ メモリの指定されたオフセットから 64 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られた 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">アンマネージ メモリの指定されたオフセットから 64 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られた 64 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary vsli:raw="Reads a processor native-sized integer from unmanaged memory.">アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
      <returns vsli:raw="The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.">アンマネージ メモリから読み取られた整数。 32 ビット コンピューター上では 32 ビット整数が返され、64 ビット コンピューター上では 64 ビット整数が返されます。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer at a given offset from unmanaged memory.">アンマネージ メモリの指定されたオフセットからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られた整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer from unmanaged memory.">アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">アンマネージ メモリの指定されたオフセットから読み取られた整数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">以前に <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> を使用して割り当てられたメモリ ブロックのサイズを変更します。</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> を使用して割り当てられたメモリへのポインター。</param>
      <param name="cb" vsli:raw="The new size of the allocated block.">割り当てられたブロックの新しいサイズ。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">メモリが不足しているため要求を満たせません。</exception>
      <returns vsli:raw="An integer representing the address of the reallocated block of memory. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">再割り当てされたメモリ ブロックのアドレスを表す整数。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> を使用して解放する必要があります。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">以前に <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> を使用して割り当てられたメモリ ブロックのサイズを変更します。</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> を使用して割り当てられたメモリへのポインター。</param>
      <param name="cb" vsli:raw="The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type &lt;see cref=&quot;T:System.IntPtr&quot; /&gt;. If you pass a pointer, it is treated as a size.">割り当てられたブロックの新しいサイズ。 これはポインターではありません。<see cref="T:System.IntPtr" /> 型にキャストされた、要求しているバイト数です。 ポインターを渡すと、サイズとして扱われます。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">メモリが不足しているため要求を満たせません。</exception>
      <returns vsli:raw="A pointer to the reallocated memory. This memory must be released using &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt;.">再割り当てされたメモリへのポインター。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> を使用して解放する必要があります。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary vsli:raw="Decrements the reference count on the specified interface.">指定したインターフェイスの参照カウントをデクリメントします。</summary>
      <param name="pUnk" vsli:raw="The interface to release.">解放するインターフェイス。</param>
      <returns vsli:raw="The new value of the reference count on the interface specified by the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">
        <paramref name="pUnk" /> パラメーターで指定したインターフェイスの参照カウントの新しい値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary vsli:raw="Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.">指定した COM オブジェクトに関連付けられている指定したランタイム呼び出し可能ラッパー (RCW) の参照カウントをデクリメントします。</summary>
      <param name="o" vsli:raw="The COM object to release.">解放する COM オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> は有効な COM オブジェクトではありません。</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The new value of the reference count of the RCW associated with &lt;paramref name=&quot;o&quot; /&gt;. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.">
        <paramref name="o" /> に関連付けられている RCW の参照カウントの新しい値。 この値は通常 0 です。RCW は、ラップされた COM オブジェクトへの参照を、それを呼び出しているマネージド クライアントの数に関係なく、1 つしか保持しないためです。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary vsli:raw="Allocates an unmanaged binary string (BSTR) and copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into it.">アンマネージドの  バイナリ文字列 (BSTR) を割り当て、それにマネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">マネージド <see cref="T:System.Security.SecureString" /> の内容をアンマネージド メモリにコピーし、コピー時に ANSI 形式に変換します。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をアンマネージド メモリにコピーします。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">
        <paramref name="s" /> のコピー先となった (アンマネージ メモリ内の) アドレス。<paramref name="s" /> が長さ 0 の <see cref="T:System.Security.SecureString" /> オブジェクトである場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Sets data referenced by the specified key in the specified COM object.">指定した COM オブジェクトに、指定したキーで参照するデータを設定します。</summary>
      <param name="obj" vsli:raw="The COM object in which to store the data.">データを格納する COM オブジェクト。</param>
      <param name="key" vsli:raw="The key in the internal hash table of the COM object in which to store the data.">データを格納する COM オブジェクトの内部ハッシュ テーブルにあるキー。</param>
      <param name="data" vsli:raw="The data to set.">設定するデータ。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> が <see langword="null" />です。  
  
または 
 <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> はCOM オブジェクトではありません。  
  
または 
 <paramref name="obj" /> は Windows ランタイム オブジェクト。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data was set successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">データが正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary vsli:raw="Returns the unmanaged size of an object in bytes.">オブジェクトのアンマネージ サイズをバイト単位で返します。</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">サイズが返されるオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structure" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The size of the specified object in unmanaged code.">アンマネージ コードの指定したオブジェクトのサイズ。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary vsli:raw="Returns the size of an unmanaged type in bytes.">アンマネージ型のサイズを返します (バイト単位)。</summary>
      <param name="t" vsli:raw="The type whose size is to be returned.">サイズが返される型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is a generic type definition.">
        <paramref name="t" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The size of the specified type in unmanaged code.">アンマネージ コードの指定した型のサイズ。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the size of an unmanaged type in bytes.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 アンマネージ型のサイズを返します (バイト単位)。</summary>
      <typeparam name="T" vsli:raw="The type whose size is to be returned.">サイズが返される型。</typeparam>
      <returns vsli:raw="The size, in bytes, of the type that is specified by the &lt;typeparamref name=&quot;T&quot; /&gt; generic type parameter.">
        <typeparamref name="T" /> ジェネリック型パラメーターで指定される型のサイズ (バイト単位)。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the unmanaged size of an object of a specified type in bytes.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定された型のオブジェクトのアンマネージのサイズをバイト数で返します。</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">サイズが返されるオブジェクト。</param>
      <typeparam name="T" vsli:raw="The type of the &lt;paramref name=&quot;structure&quot; /&gt; parameter.">
        <paramref name="structure" /> パラメーターの型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structure" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The size, in bytes, of the specified object in unmanaged code.">アンマネージ コードの指定したオブジェクトのサイズ (バイト単位)。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary vsli:raw="Allocates a BSTR and copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into it.">BSTR を割り当て、それにマネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s" vsli:raw="The managed string to be copied.">コピーするマネージド文字列。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">
        <paramref name="s" /> の長さが範囲外です。</exception>
      <returns vsli:raw="An unmanaged pointer to the &lt;see langword=&quot;BSTR&quot; /&gt;, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is null.">
        <see langword="BSTR" /> へのアンマネージ ポインター。<paramref name="s" /> が null の場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">コピーされるマネージド文字列。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">文字列に割り当てられたメモリ ブロックへのポインターを表す整数。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">コピーされるマネージド文字列。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">
        <paramref name="s" /> の長さが範囲外です。</exception>
      <returns vsli:raw="The allocated memory block, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">割り当てられたメモリ ブロック。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">コピーされるマネージド文字列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if s is &lt;see langword=&quot;null&quot; /&gt;.">文字列に割り当てられたメモリ ブロックへのポインターを表す整数。s が <see langword="null" /> の場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">コピーされるマネージド文字列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">文字列に割り当てられたメモリ ブロックへのポインターを表す整数。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーし、コピー時に ANSI 形式に変換します。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">コピーされるマネージド文字列。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format if required.">マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーし、必要に応じて ANSI 形式に変換します。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">コピーされるマネージド文字列。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the string was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">文字列のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory.">マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーします。</summary>
      <param name="s" vsli:raw="A managed string to be copied.">コピーされるマネージド文字列。</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The method could not allocate enough native heap memory.">メソッドが十分なネイティブ ヒープ メモリを割り当てることができませんでした。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary vsli:raw="Marshals data from a managed object to an unmanaged block of memory.">マネージド オブジェクトからアンマネージド メモリ ブロックにデータをマーシャリングします。</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.">マーシャリングするデータを保持すマネージド オブジェクト。 このオブジェクトは、書式指定クラスの構造体またはインスタンスである必要があります。</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">このメソッドを呼び出す前に割り当てる必要があるアンマネージ メモリ ブロックへのポインター。</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">このメソッドがデータをコピーする前に、<paramref name="ptr" /> パラメーターに対して <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> メソッドを呼び出す場合は <see langword="true" />。 ブロックには有効なデータを含める必要があります。 メモリ ブロックに既にデータが格納されているときに <see langword="false" /> を渡すと、メモリ リークが発生する可能性があることに注意してください。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;structure&quot; /&gt; is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).">
        <paramref name="structure" /> は書式指定クラスではない参照型です。  
  
または 
 <paramref name="structure" /> がジェネリック型のインスタンスです (.NET Framework 4.5 以前のバージョンのみ)</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from a managed object of a specified type to an unmanaged block of memory.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定した型のマネージド オブジェクトから、アンマネージド メモリ ブロックにデータをマーシャリングします。</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.">マーシャリングするデータを保持すマネージド オブジェクト。 オブジェクトは、書式指定クラスの構造体またはインスタンスである必要があります。</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">このメソッドを呼び出す前に割り当てる必要があるアンマネージ メモリ ブロックへのポインター。</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">このメソッドがデータをコピーする前に、<paramref name="ptr" /> パラメーターに対して <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> メソッドを呼び出す場合は <see langword="true" />。 ブロックには有効なデータを含める必要があります。 メモリ ブロックに既にデータが格納されているときに <see langword="false" /> を渡すと、メモリ リークが発生する可能性があることに注意してください。</param>
      <typeparam name="T" vsli:raw="The type of the managed object.">マネージド オブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.">
        <paramref name="structure" /> は書式指定クラスではない参照型です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT value.">特定の失敗 HRESULT 値を使用して例外をスローします。</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">必要な例外に対応する HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.">指定した IErrorInfo インターフェイスに基づいて、特定のエラー HRESULT を使用して例外をスローします。</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">必要な例外に対応する HRESULT。</param>
      <param name="errorInfo" vsli:raw="A pointer to the IErrorInfo interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current IErrorInfo interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current IErrorInfo interface and construct the exception just from the error code.">エラーの詳細情報を提供する IErrorInfo インターフェイスへのポインター。 <c>IntPtr(0)</c> を指定すると、現在の IErrorInfo インターフェイスを使用できます。また <c>IntPtr(-1)</c> を指定すると、現在の IErrorInfo インターフェイスを無視して、エラー コードだけを使用して例外を作成できます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary vsli:raw="Gets the address of the element at the specified index inside the specified array.">指定した配列内の、指定したインデックス位置にある要素のアドレスを取得します。</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">目的の要素を格納している配列。</param>
      <param name="index" vsli:raw="The index in the &lt;paramref name=&quot;arr&quot; /&gt; parameter of the desired element.">必要な要素の、<paramref name="arr" /> パラメーター内のインデックス。</param>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; inside &lt;paramref name=&quot;arr&quot; /&gt;.">
        <paramref name="arr" /> 内の <paramref name="index" /> のアドレス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Gets the address of the element at the specified index in an array of a specified type.">[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 指定された型の配列内の、指定したインデックス位置にある要素のアドレスを取得します。</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">目的の要素を格納している配列。</param>
      <param name="index" vsli:raw="The index of the desired element in the &lt;paramref name=&quot;arr&quot; /&gt; array.">
        <paramref name="arr" /> 配列内の目的の要素のインデックス。</param>
      <typeparam name="T" vsli:raw="The type of the array.">配列の型。</typeparam>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; in &lt;paramref name=&quot;arr&quot; /&gt;.">
        <paramref name="arr" /> 内の <paramref name="index" /> のアドレス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory.">1 バイト値をアンマネージ メモリに書き込みます。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">1 バイトをアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">1 バイトをアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary vsli:raw="Writes a character as a 16-bit integer value to unmanaged memory.">文字を 16 ビット整数としてアンマネージ メモリに書き込みます。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer value to unmanaged memory.">アンマネージ メモリに 16 ビット整数を書き込みます。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in the native heap to write to.">書き込み先となるネイティブ ヒープ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value into unmanaged memory at a specified offset.">16 ビット符号付き整数をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory.">アンマネージ メモリに 32 ビット符号付き整数を書き込みます。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value into unmanaged memory at a specified offset.">32 ビット符号付き整数をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory at a specified offset.">32 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">64 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write.">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory.">アンマネージ メモリに 64 ビット符号付き整数を書き込みます。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">64 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native-sized integer value to unmanaged memory at a specified offset.">アンマネージ メモリの指定されたオフセット位置にプロセッサ ネイティブ サイズの整数値を書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value into unmanaged memory.">アンマネージ メモリにプロセッサ ネイティブ サイズの整数を書き込みます。</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> が認識された形式ではありません。  
  
または 
 <paramref name="ptr" /> が <see langword="null" />です。  
  
または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value to unmanaged memory.">アンマネージ メモリにプロセッサ ネイティブ サイズの整数を書き込みます。</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val" vsli:raw="The value to write.">書き込む値。</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a BSTR pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> メソッドを使用して割り当てられた BSTR ポインターを解放します。</summary>
      <param name="s" vsli:raw="The address of the &lt;see langword=&quot;BSTR&quot; /&gt; to free.">解放する <see langword="BSTR" /> のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)&quot; /&gt; method.">
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary vsli:raw="Indicates how to marshal the data between managed and unmanaged code.">マネージド コードとアンマネージド コードとの間のデータのマーシャリング方法を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary vsli:raw="Specifies the element type of the unmanaged &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.LPArray&quot; /&gt; or &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.ByValArray&quot; /&gt;.">アンマネージの <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> または <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> の要素の型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary vsli:raw="Specifies the parameter index of the unmanaged &lt;see langword=&quot;iid_is&quot; /&gt; attribute used by COM.">COM で使用されるアンマネージ <see langword="iid_is" /> 属性のパラメーター インデックスを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary vsli:raw="Provides additional information to a custom marshaler.">カスタム マーシャラーに追加の情報を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary vsli:raw="Specifies the fully qualified name of a custom marshaler.">カスタム マーシャラーの完全修飾名を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary vsli:raw="Implements &lt;see cref=&quot;F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&quot; /&gt; as a type.">
        <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> を型として実装します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary vsli:raw="Indicates the element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> の要素の型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary vsli:raw="Indicates the user-defined element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> のユーザー定義要素の型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary vsli:raw="Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.">固定長配列の要素の数、またはインポートする文字列の文字数 (バイト数ではない) を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary vsli:raw="Indicates the zero-based parameter that contains the count of array elements, similar to &lt;see langword=&quot;size_is&quot; /&gt; in COM.">COM の <see langword="size_is" /> のように、0 から始まる配列要素のカウントを格納しているパラメーターを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value.">指定した <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 値を使用して、<see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">マーシャリング後のデータの値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; enumeration member.">指定した <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.UnmanagedType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">マーシャリング後のデータの値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">マーシャリング後データの <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">マーシャリング後のデータの <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary vsli:raw="The exception that is thrown by the marshaler when it encounters a &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; it does not support.">マーシャラーが、サポートしていない <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> を検出した場合にスローする例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with default properties.">
        <see langword="MarshalDirectiveException" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class from serialization data.">シリアル化データから、<see langword="MarshalDirectiveException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with a specified error message.">指定したエラー メッセージを使用して、<see langword="MarshalDirectiveException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that specifies the reason for the exception.">例外の原因を指定するエラー メッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalDirectiveException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary vsli:raw="Provides APIs for managing native libraries.">ネイティブ ライブラリを管理するための API を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary vsli:raw="Frees a loaded library with the specified OS handle, or takes no action if the input handle is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">指定した OS ハンドルで読み込まれたライブラリを解放します。または、入力ハンドルが <see cref="F:System.IntPtr.Zero" /> の場合は何も操作を行いません。</summary>
      <param name="handle" vsli:raw="The native library OS handle to be freed.">解放されるネイティブ ライブラリ OS ハンドル。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary vsli:raw="Gets the address of an exported symbol.">エクスポートされたシンボルのアドレスを取得します。</summary>
      <param name="handle" vsli:raw="The native library OS handle.">ネイティブ ライブラリ OS ハンドル。</param>
      <param name="name" vsli:raw="The name of the exported symbol.">エクスポートされたシンボルの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> または <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.EntryPointNotFoundException" vsli:raw="The symbol is not found.">シンボルが見つかりません。</exception>
      <returns vsli:raw="The address of the symbol.">シンボルのアドレス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary vsli:raw="Provides a simple API for loading a native library that wraps the OS loader and uses default flags.">OS ローダーをラップし、既定のフラグを使用するネイティブ ライブラリを読み込むための単純な API を提供します。</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">読み込まれるネイティブ ライブラリの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">ライブラリが見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">ライブラリが無効です。</exception>
      <returns vsli:raw="The OS handle for the loaded native library.">読み込まれたネイティブ ライブラリの OS ハンドル。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary vsli:raw="Provides a high-level API for loading a native library.">ネイティブ ライブラリを読み込むための高度な API を提供します。</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">読み込まれるネイティブ ライブラリの名前。</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">ネイティブ ライブラリを読み込むアセンブリ。</param>
      <param name="searchPath" vsli:raw="The search path.">検索パス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryName&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryName" /> または <paramref name="assembly" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> が <see langword="RuntimeAssembly" /> ではありません。</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">ライブラリが見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">ライブラリが無効です。</exception>
      <returns vsli:raw="The OS handle for the loaded library.">読み込まれたライブラリの OS ハンドル。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary vsli:raw="Sets a callback for resolving native library imports from an assembly.">アセンブリからのネイティブ ライブラリのインポートを解決するためのコールバックを設定します。</summary>
      <param name="assembly" vsli:raw="The assembly for which the resolver is registered.">リゾルバーが登録されるアセンブリ。</param>
      <param name="resolver" vsli:raw="The resolver callback to register.">登録するリゾルバー コールバック。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; or &lt;paramref name=&quot;resolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="assembly" /> または <paramref name="resolver" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A resolver is already set for this assembly.">リゾルバーはこのアセンブリに既に設定されています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary vsli:raw="Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.">エクスポートされたシンボルのアドレスを取得し、メソッドの呼び出しが成功したかどうかを示す値を返します。</summary>
      <param name="handle" vsli:raw="The native library OS handle.">ネイティブ ライブラリ OS ハンドル。</param>
      <param name="name" vsli:raw="The name of the exported symbol.">エクスポートされたシンボルの名前。</param>
      <param name="address" vsli:raw="When the method returns, contains the symbol address, if it exists.">メソッドが戻ると、シンボルのアドレスが含まれます (ある場合)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> または <paramref name="name" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the address of the exported symbol was found successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メソッドが正常に戻った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary vsli:raw="Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.">ネイティブ ライブラリを読み込むための単純な API を提供し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">読み込まれるネイティブ ライブラリの名前。</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">メソッドが戻るときの、読み込まれたネイティブ ライブラリの OS ハンドル。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ネイティブ ライブラリが正常に読み込まれた場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary vsli:raw="Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.">ネイティブ ライブラリを読み込む高度な API を提供し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">読み込まれるネイティブ ライブラリの名前。</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">ネイティブ ライブラリを読み込むアセンブリ。</param>
      <param name="searchPath" vsli:raw="The search path.">検索パス。</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">メソッドが戻るときの、読み込まれたネイティブ ライブラリの OS ハンドル。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> または <paramref name="assembly" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> が <see langword="RuntimeAssembly" /> ではありません。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">読み込み操作が成功した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary vsli:raw="Indicates that a parameter is optional.">パラメーターが省略可能であることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;OptionalAttribute&quot; /&gt; class with default values.">
        <see langword="OptionalAttribute" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary vsli:raw="Indicates that the HRESULT signature transformation that takes place during COM interop calls should be suppressed.">COM 相互運用呼び出し中に発生する HRESULT または <see langword="retval" /> シグネチャ変換を中止することを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PreserveSigAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary vsli:raw="Indicates that the attributed assembly is a primary interop assembly.">この属性が適用されたアセンブリが、プライマリ相互運用機能アセンブリであることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute&quot; /&gt; class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.">このアセンブリがプライマリ相互運用機能アセンブリとなるタイプ ライブラリのメジャー バージョン番号とマイナー バージョン番号を指定して、<see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> クラスのインスタンスを初期化します。</summary>
      <param name="major" vsli:raw="The major version of the type library for which this assembly is the primary interop assembly.">作成するアセンブリがプライマリ相互運用機能アセンブリとなるタイプ ライブラリのメジャー バージョン。</param>
      <param name="minor" vsli:raw="The minor version of the type library for which this assembly is the primary interop assembly.">作成するアセンブリがプライマリ相互運用機能アセンブリとなるタイプ ライブラリのマイナー バージョン。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library for which this assembly is the primary interop assembly.">対象のアセンブリがプライマリ相互運用機能アセンブリであるタイプ ライブラリのメジャー バージョン番号を取得します。</summary>
      <returns vsli:raw="The major version number of the type library for which this assembly is the primary interop assembly.">対象のアセンブリがプライマリ相互運用機能アセンブリであるタイプ ライブラリのメジャー バージョン番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library for which this assembly is the primary interop assembly.">対象のアセンブリがプライマリ相互運用機能アセンブリであるタイプ ライブラリのマイナー バージョン番号を取得します。</summary>
      <returns vsli:raw="The minor version number of the type library for which this assembly is the primary interop assembly.">対象のアセンブリがプライマリ相互運用機能アセンブリであるタイプ ライブラリのマイナー バージョン番号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary vsli:raw="Allows the user to specify the ProgID of a class.">ユーザーがクラスの ProgID を指定することを許可します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ProgIdAttribute&quot; /&gt; with the specified ProgID.">指定した ProgID を使用して、<see langword="ProgIdAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="progId" vsli:raw="The ProgID to be assigned to the class.">クラスに割り当てる ProgID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary vsli:raw="Gets the ProgID of the class.">クラスの ProgID を取得します。</summary>
      <returns vsli:raw="The ProgID of the class.">クラスの ProgID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary vsli:raw="Provides a collection of &lt;see langword=&quot;static&quot; /&gt; methods that return information about the common language runtime environment.">共通言語ランタイム環境に関する情報を返す <see langword="static" /> メソッドのコレクションを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary vsli:raw="Tests whether the specified assembly is loaded in the global assembly cache.">指定したアセンブリがグローバル アセンブリ キャッシュに読み込まれているかどうかをテストします。</summary>
      <param name="a" vsli:raw="The assembly to test.">テスト対象のアセンブリ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the assembly is loaded in the global assembly cache; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">アセンブリがグローバル アセンブリ キャッシュに読み込まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary vsli:raw="Returns the directory where the common language runtime is installed.">共通言語ランタイムがインストールされているディレクトリを返します。</summary>
      <returns vsli:raw="A string that contains the path to the directory where the common language runtime is installed.">共通言語ランタイムがインストールされているディレクトリへのパスを含んでいる文字列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary vsli:raw="Returns the specified interface on the specified class.">指定されたクラスの指定されたインターフェイスを返します。</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">目的のクラスの識別子。</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">目的のインターフェイスの識別子。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface エラーです。</exception>
      <returns vsli:raw="An unmanaged pointer to the requested interface.">要求されたインターフェイスへのアンマネージ ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">COM オブジェクトを <see langword="IUnknown" /> インターフェイスへのポインターによって表す型のインスタンスを返します。</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">目的のクラスの識別子。</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">目的のインターフェイスの識別子。</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface エラーです。</exception>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">指定したアンマネージ COM オブジェクトを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary vsli:raw="Gets the version number of the common language runtime that's running the current process.">現在のプロセスを実行している共通言語ランタイムのバージョン番号を取得します。</summary>
      <returns vsli:raw="A string containing the version number of the common language runtime.">共通言語ランタイムのバージョン番号を含んでいる文字列。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary vsli:raw="Gets the path to the system configuration file.">システム構成ファイルへのパスを取得します。</summary>
      <returns vsli:raw="The path to the system configuration file.">システム構成ファイルへのパス。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary vsli:raw="The exception thrown when the rank of an incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the rank specified in the managed signature.">着信 <see langword="SAFEARRAY" /> のランクが、マネージド シグネチャで指定したランクと一致しない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">
        <see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">シリアル化データから、<see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayRankMismatchException&quot; /&gt; class with the specified message.">指定したメッセージを使用して、<see langword="SafeArrayRankMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayRankMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary vsli:raw="The exception thrown when the type of the incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the type specified in the managed signature.">着信 <see langword="SAFEARRAY" /> の型が、マネージド シグネチャで指定した型と一致しない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">
        <see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">シリアル化データから、<see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with the specified message.">指定したメッセージを使用して、<see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayTypeMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary vsli:raw="Represents structured exception handling (SEH) errors.">構造化例外処理 (SEH) エラーを表します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.SEHException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class from serialization data.">シリアル化データから、<see cref="T:System.Runtime.InteropServices.SEHException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified message.">指定したメッセージを使用して、<see cref="T:System.Runtime.InteropServices.SEHException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.SEHException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary vsli:raw="Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.">例外から回復できるかどうか、および例外がスローされたポイントからコードを続行できるかどうかを示します。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;, because resumable exceptions are not implemented.">再開可能な例外は実装されていないため、常に <see langword="false" /> が返されます。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary vsli:raw="Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.">標準の共通言語ランタイム (CLR) フリー スレッド化マーシャラーを標準の OLE STA マーシャラーで置き換えます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.StandardOleMarshalObject&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary vsli:raw="Provides support for type equivalence.">型の等価性に対するサポートを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class.">
        <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> クラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class with the specified scope and identifier.">指定されたスコープと識別子を使用して、<see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scope" vsli:raw="The first type equivalence string.">1 番目の型の同値文字列。</param>
      <param name="identifier" vsli:raw="The second type equivalence string.">2 番目の型の同値文字列。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;identifier&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">
        <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> コンストラクターに渡された <paramref name="identifier" /> パラメーターの値を取得します。</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;identifier&quot; /&gt; parameter.">コンストラクターの <paramref name="identifier" /> パラメーターの値。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;scope&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">
        <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> コンストラクターに渡された <paramref name="scope" /> パラメーターの値を取得します。</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;scope&quot; /&gt; parameter.">コンストラクターの <paramref name="scope" /> パラメーターの値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; that were originally imported for this method from the COM type library.">COM タイプ ライブラリからこのメソッド用に元来インポートされた <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> を格納します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">指定した <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値を使用して、<see langword="TypeLibFuncAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">インポート元のタイプ ライブラリに検出された属性付きメソッドの <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">指定した <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値を使用して、<see langword="TypeLibFuncAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">インポート元のタイプ ライブラリに検出された属性付きメソッドの <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">このメソッドの <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">このメソッドの <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see langword=&quot;FUNCFLAGS&quot; /&gt; in the COM type library from where this method was imported.">このメソッドがインポートされた COM タイプ ライブラリに <see langword="FUNCFLAGS" /> の元の設定を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary vsli:raw="The function that supports data binding.">データ連結をサポートしている関数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary vsli:raw="The function that best represents the object. Only one function in a type information can have this attribute.">オブジェクトを最もよく表す関数です。 型情報の 1 つの関数だけが、この属性を持つことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">型 "abc" で "xyz" という名前のメンバーをコンパイラが検索する場合に最適化を許可します。 そのようなメンバーが見つかり、既定のコレクション要素のアクセサー関数であることを示すフラグが付いている場合、そのメンバー関数の呼び出しが生成されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable&quot; /&gt; must also be set.">ユーザーに対して表示されるバインド可能な関数です。 <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> も設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">関数は存在し、バインド可能ですが、ユーザーに対して表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary vsli:raw="The function is mapped as individual bindable properties.">関数は、個別のバインド可能なプロパティとして割り当てられます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">プロパティはオブジェクト ブラウザーには表示されますが、プロパティ ブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">インターフェイスが既定の動作を備えていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;.">設定した場合は、そのプロパティを設定したメソッドを呼び出すと、初めに <see langword="IPropertyNotifySink::OnRequestEdit" /> が呼び出されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">このフラグは、システムレベル関数または型ブラウザーに表示しない関数で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary vsli:raw="The function returns an object that is a source of events.">関数は、イベントの発生元のオブジェクトを返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">型情報メンバーは、ユーザー インターフェイスに表示する既定のメンバーです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;.">関数は <see langword="GetLastError" /> をサポートしています。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary vsli:raw="Specifies which &lt;see cref=&quot;T:System.Type&quot; /&gt; exclusively uses an interface. This class cannot be inherited.">インターフェイスを排他的に使用する <see cref="T:System.Type" /> を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibImportClassAttribute&quot; /&gt; class specifying the &lt;see cref=&quot;T:System.Type&quot; /&gt; that exclusively uses an interface.">インターフェイスを排他的に使用する <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> を指定して、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="importClass" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">インターフェイスを排他的に使用する <see cref="T:System.Type" /> オブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">インターフェイスを排他的に使用する <see cref="T:System.Type" /> オブジェクトの名前を取得します。</summary>
      <returns vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">インターフェイスを排他的に使用する <see cref="T:System.Type" /> オブジェクトの名前。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; that were originally imported for this type from the COM type library.">COM タイプ ライブラリからこの型用に元来インポートされた <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> を格納します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">指定した <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値を使用して、<see langword="TypeLibTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">インポート元のタイプ ライブラリに検出された属性付き型の <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">指定した <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値を使用して、<see langword="TypeLibTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">インポート元のタイプ ライブラリに検出された属性付き型の <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">この型の <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">この型の <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; in the COM type library from which the type was imported.">この型がインポートされた COM タイプ ライブラリに <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> の元の設定を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary vsli:raw="The class supports aggregation.">クラスは、集約をサポートしています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">
        <see langword="Application" /> オブジェクトを記述する型の説明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">型のインスタンスは、<see langword="ITypeInfo::CreateInstance" /> で作成できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary vsli:raw="The type is a control from which other types will be derived, and should not be displayed to users.">型は他の型の派生元になるコントロールであり、ユーザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly.">インターフェイスが <see langword="IDispatch" /> から直接または間接に派生したものであることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and V-table binding.">インターフェイスは、<see langword="IDispatch" /> と V テーブル バインディングの両方を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary vsli:raw="The type should not be displayed to browsers.">型はブラウザーに表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary vsli:raw="The type is licensed.">型はライセンス付きです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary vsli:raw="The interface cannot add members at run time.">インターフェイスは、実行時にメンバーを追加できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including vtable binding support.">インターフェイスで使用される型は、V テーブル バインディングのサポートを含むオートメーションに完全に準拠しています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">型は定義済みです。 クライアント アプリケーションは、この属性を持つオブジェクトの単一のインスタンスを自動的に作成します。 オブジェクトを指す変数の名前は、そのオブジェクトのクラス名と同じです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">オブジェクトは、<see langword="IConnectionPointWithDefault" /> をサポートし、既定の動作を備えています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level types or types that type browsers should not display.">このフラグは、システム レベルの型または型ブラウザーに表示しない型で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.">名前解決のために基本インターフェイスをチェックしてから子インターフェイスをチェックする必要があることを示します。 これは既定と反対の動作です。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; that were originally imported for this field from the COM type library.">COM タイプ ライブラリからこのフィールド用に元来インポートされた <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> を格納します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">指定した <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値を使用して、<see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">インポート元のタイプ ライブラリに検出された属性付きフィールドの <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">指定した <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値を使用して、<see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">インポート元のタイプ ライブラリに検出された属性付きフィールドの <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">このフィールドの <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">このフィールドの <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; in the COM type library from which the variable was imported.">この変数がインポートされた COM タイプ ライブラリに <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> の元の設定を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary vsli:raw="The variable supports data binding.">変数はデータ連結をサポートしています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in a type info can have this value.">変数は、オブジェクトを最もよく表す単一のプロパティです。 型情報の 1 つの変数だけが、この値を持つことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">型 "abc" で "xyz" という名前のメンバーをコンパイラが検索する場合に最適化を許可します。 そのようなメンバーが見つかり、既定のコレクション要素のアクセサー関数であることを示すフラグが付いている場合、そのメンバー関数の呼び出しが生成されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary vsli:raw="The variable is displayed as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable&quot; /&gt; must also be set.">変数はバインド可能として表示されます。 <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> も設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary vsli:raw="The variable should not be displayed in a browser, though it exists and is bindable.">変数は存在し、バインド可能ですが、ブラウザーには表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">変数は、個別のバインド可能なプロパティとして割り当てられます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">変数はオブジェクト ブラウザーに表示されますが、プロパティ ブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary vsli:raw="Assignment to the variable should not be allowed.">変数への割り当ては許可しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">インターフェイスが既定の動作を備えていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary vsli:raw="Indicates that the property supports the COM &lt;see langword=&quot;OnRequestEdit&quot; /&gt; notification.">プロパティが COM <see langword="OnRequestEdit" /> 通知をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">このフラグは、システムレベル関数または型ブラウザーに表示しない関数で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary vsli:raw="The variable returns an object that is a source of events.">変数は、イベントの発生元のオブジェクトを返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary vsli:raw="The default display in the user interface.">ユーザー インターフェイスの既定の表示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary vsli:raw="Specifies the version number of an exported type library.">エクスポートされたタイプ ライブラリのバージョン番号を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVersionAttribute&quot; /&gt; class with the major and minor version numbers of the type library.">タイプ ライブラリのメジャー バージョン番号とマイナー バージョン番号を使用して、<see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="major" vsli:raw="The major version number of the type library.">タイプ ライブラリのメジャー バージョン番号。</param>
      <param name="minor" vsli:raw="The minor version number of the type library.">タイプ ライブラリのマイナー バージョン番号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library.">タイプ ライブラリのメジャー バージョン番号を取得します。</summary>
      <returns vsli:raw="The major version number of the type library.">タイプ ライブラリのメジャー バージョン番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library.">タイプ ライブラリのマイナー バージョン番号を取得します。</summary>
      <returns vsli:raw="The minor version number of the type library.">タイプ ライブラリのマイナー バージョン番号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_UNKNOWN&quot; /&gt;.">マーシャラーが <see langword="VT_UNKNOWN" /> としてマーシャリングする必要があるオブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt; class with the object to be wrapped.">ラップするオブジェクトを使用して、<see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj" vsli:raw="The object being wrapped.">ラップするオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary vsli:raw="Gets the object contained by this wrapper.">ラッパーに格納されているオブジェクトを取得します。</summary>
      <returns vsli:raw="The wrapped object.">ラップされたオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
      <summary vsli:raw="Any method marked with &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute&quot; /&gt; can be directly called from native code. The function token can be loaded to a local variable using the address-of operator in C# and passed as a callback to a native method.">
        <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> のマークが付いているメソッドは、ネイティブ コードから直接呼び出すことができます。 関数トークンは C# で address-of 演算子を使用してローカル変数に読み込み、コールバックとしてネイティブ メソッドに渡すことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
      <summary vsli:raw="Optional. If omitted, the runtime will use the default platform calling convention.">省略可能。 省略した場合、既定のプラットフォーム呼び出し規約がランタイムで使用されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
      <summary vsli:raw="Optional. If omitted, no named export is emitted during compilation.">省略可能。 省略した場合、名前のないエクスポートがコンパイル中に生成されます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute&quot; /&gt; instance.">新しい <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> インスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary vsli:raw="Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.">アンマネージ コードとの間でアンマネージ関数ポインターとしてやり取りされるデリゲート シグネチャのマーシャリング動作を制御します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">Unicode 文字を ANSI 文字に変換するときの、最適マッピング動作のオン/オフを切り替えます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method, and controls name mangling.">文字列パラメーターをメソッドにマーシャリングする方法を示し、名前マングルを制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee calls the &lt;see langword=&quot;SetLastError&quot; /&gt; Windows API function before returning from the attributed method.">属性付きメソッドから戻る前に、呼び出し先が <see langword="SetLastError" /> Windows API 関数を呼び出すかどうかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute&quot; /&gt; class with the specified calling convention.">呼び出し規約を指定して、<see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="callingConvention" vsli:raw="The specified calling convention.">指定した呼び出し規約。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary vsli:raw="Gets the value of the calling convention.">呼び出し規約の値を取得します。</summary>
      <returns vsli:raw="The value of the calling convention specified by the &lt;see cref=&quot;M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)&quot; /&gt; constructor.">
        <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> コンストラクターによって指定された呼び出し規約の値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>パラメーターまたはフィールドをアンマネージ コードにマーシャリングする方法を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>長さを示すプレフィックスを付けた 1 バイトの ANSI 文字列。 このメンバーは <see cref="T:System.String" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>実行時にオブジェクトの型を確認し、その型としてオブジェクトをマーシャリングする動的な型。 このメンバーは、プラットフォーム呼び出しメソッドにのみ有効です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4 バイトの Boolean 値 (<see langword="true" /> != 0、<see langword="false" /> = 0)。 これは Win32 BOOL 型です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>長さを示すプリフィックスを付けた 2 バイトの Unicode 文字列。 このメンバー (COM の既定の文字列) は、<see cref="T:System.String" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>
        <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> プロパティを <see langword="ByValArray" /> に設定した場合、<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> フィールドは、配列の要素数を示すように設定する必要があります。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> フィールドには、文字列型を区別する必要がある場合に、オプションとして配列要素の <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> を格納できます。 この <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> は、要素が構造体にフィールドとして定義されている配列でのみ使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>構造体に定義されているインライン固定長文字配列で使用します。 <see langword="ByValTStr" /> 型は、構造体内の C スタイルの固定サイズの文字列 (たとえば、<c>char s[5]</c>) のように動作します。 <see langword="ByValTStr" /> で使用する文字型は、格納される構造体に適用する <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性の引数 <see cref="T:System.Runtime.InteropServices.CharSet" /> によって決定されます。 配列のサイズを示す場合は、常に <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> フィールドを使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>通貨型。 10 進値を <see langword="Decimal" /> ではなく、COM 通貨型としてマーシャリングするために、<see cref="T:System.Decimal" /> で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>
        <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> または <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> フィールドと共に使用する場合に、カスタム マーシャラー クラスを指定します。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> フィールドは、カスタム マーシャラーに追加の情報を渡すために使用できます。 このメンバーは任意の参照型で使用できます。 このメンバーは、パラメーターと戻り値にのみ有効です。 フィールドでは使用できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> または <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> に関連付けられたネイティブな型。この型により、パラメーターはエクスポート先のタイプ ライブラリに HRESULT としてエクスポートされます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>C スタイルの関数ポインターとして使用できる整数値。 このメンバーは、<see cref="T:System.Delegate" /> データ型または <see cref="T:System.Delegate" /> から継承した型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Windows ランタイム 文字列。 このメンバーは <see cref="T:System.String" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>1 バイト符号付き整数。 このメンバーを使用すると、Boolean 値を 1 バイトの C スタイル <see langword="bool" /> (<see langword="true" /> = 1、<see langword="false" /> = 0) に変換できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>2 バイト符号付き整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>4 バイト符号付き整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>8 バイト符号付き整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>COM の <see langword="IDispatch" /> ポインター (Microsoft Visual Basic 6.0 では <see langword="Object" />)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Windows ランタイム インターフェイス ポインター。 このメンバーは <see cref="T:System.Object" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM インターフェイス ポインター。 インターフェイスの <see cref="T:System.Guid" /> は、クラス メタデータから取得します。 インターフェイス型を直接指定する場合、またはクラスに適用する場合は既定のインターフェイス型を指定する場合に、このメンバーを使用します。 このメンバーは、<see cref="T:System.Object" /> データ型に適用すると、<see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> と同じ動作を生成します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COM <see langword="IUnknown" /> ポインター。 このメンバーは <see cref="T:System.Object" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>C スタイル配列の最初の要素へのポインター。 マネージド コードからアンマネージド コードにマーシャリングする場合、配列長はマネージド配列長によって決定されます。 アンマネージド コードからマネージド コードにマーシャリングする場合、配列の長さは <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> フィールドと <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> フィールドによって決まります。文字列の型を区別する必要がある場合は、配列内の要素のアンマネージド型も考慮されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>終端が null の 1 バイトの ANSI 文字列。 このメンバーは、<see cref="T:System.String" /> データ型および <see cref="T:System.Text.StringBuilder" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>マネージド書式指定クラスをマーシャリングするときに使用する C スタイル構造体へのポインター。 このメンバーは、プラットフォーム呼び出しメソッドにのみ有効です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>プラットフォームに依存する文字列。Windows 98 では ANSI、Windows NT と Windows XP では Unicode。 型 <see langword="LPTStr" /> の文字列のエクスポートがサポートされていないため、この値は COM 相互運用ではサポートされず、プラットフォーム呼び出しのみでサポートされます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>UTF-8 でエンコードされた文字列へのポインター。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>終端が null の 2 バイトの Unicode 文字列。 文字列がアンマネージド <see langword="CoTaskMemAlloc" /> 関数を使用して作成されない限り、アンマネージド文字列で <see langword="LPWStr" /> 値を使用することはできません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4 バイトの浮動小数点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8 バイトの浮動小数点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>
        <see langword="SafeArray" /> は、関連付けられた配列データの型、ランク、および境界を格納する自己記述型の配列です。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> フィールドと併せてこのメンバーを使用することによって、既定の要素の型をオーバーライドできます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>マネージド書式指定クラスと値型をマーシャリングするために使用する VARIANT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>プラットフォーム依存、符号付き整数: 32 ビット Windows では 4 バイト、64 ビット Windows では 8 バイト。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>プラットフォーム依存、符号なし整数: 32 ビット Windows では 4 バイト、64 ビット Windows では 8 バイト。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>長さを示すプレフィックスを付けた、プラットフォームに依存する <see langword="char" /> 文字列。Windows 98 では ANSI、Windows NT では Unicode。 この BSTR に似たメンバーを使用することはほとんどありません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>1 バイト符号なし整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>2 バイト符号なし整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>4 バイト符号なし整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>8 バイト符号なし整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2 バイトの OLE 定義 VARIANT_BOOL 型 (<see langword="true" /> = -1、<see langword="false" /> = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Visual Basic で、アンマネージド コードの文字列を変更し、結果をマネージド コードに反映できるようにする値。 この値は、プラットフォーム呼び出しでだけサポートされます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary vsli:raw="Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">配列が <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> としてマネージド コードからアンマネージド コードにマーシャリングされる場合の、配列要素のマーシャリング方法を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;SAFEARRAY&quot; /&gt; pointer.">
        <see langword="SAFEARRAY" /> ポインターを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary vsli:raw="Indicates length prefixed bytes.">長さのプリフィックスが付いたバイトを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary vsli:raw="Indicates that a blob contains an object.">BLOB がオブジェクトを格納していることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary vsli:raw="Indicates a Boolean value.">ブール値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary vsli:raw="Indicates a BSTR string.">BSTR 文字列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary vsli:raw="Indicates that a value is a reference.">値が参照であることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary vsli:raw="Indicates a C style array.">C スタイル配列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary vsli:raw="Indicates the clipboard format.">クリップボード形式を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary vsli:raw="Indicates a class ID.">クラス ID を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary vsli:raw="Indicates a currency value.">通貨値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary vsli:raw="Indicates a DATE value.">DATE 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;decimal&quot; /&gt; value.">
        <see langword="decimal" /> 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IDispatch&quot; /&gt; pointer.">
        <see langword="IDispatch" /> ポインターを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary vsli:raw="Indicates that a value was not specified.">値が指定されなかったことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary vsli:raw="Indicates an SCODE.">SCODE を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary vsli:raw="Indicates a FILETIME value.">FILETIME 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary vsli:raw="Indicates an HRESULT.">HRESULT を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;char&quot; /&gt; value.">
        <see langword="char" /> 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;short&quot; /&gt; integer.">
        <see langword="short" /> 整数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;long&quot; /&gt; integer.">
        <see langword="long" /> 整数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary vsli:raw="Indicates a 64-bit integer.">64 ビット整数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary vsli:raw="Indicates an integer value.">整数値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary vsli:raw="Indicates a null-terminated string.">null で終わる文字列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary vsli:raw="Indicates a wide string terminated by &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" /> で終わるワイド文字列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary vsli:raw="Indicates a null value, similar to a null value in SQL.">Null 値を示します。これは、SQL における Null 値に相当します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary vsli:raw="Indicates a pointer type.">ポインター型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;float&quot; /&gt; value.">
        <see langword="float" /> 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;double&quot; /&gt; value.">
        <see langword="double" /> 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary vsli:raw="Indicates a user defined type.">ユーザー定義型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary vsli:raw="Indicates a SAFEARRAY. Not valid in a VARIANT.">SAFEARRAY を示します。 VARIANT では有効ではありません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary vsli:raw="Indicates that the name of a storage follows.">ストレージの名前が続くことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary vsli:raw="Indicates that a storage contains an object.">ストレージがオブジェクトを格納していることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary vsli:raw="Indicates that the name of a stream follows.">ストリームの名前が続くことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary vsli:raw="Indicates that a stream contains an object.">ストリームがオブジェクトを格納していることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;byte&quot; /&gt;.">
        <see langword="byte" /> を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;short&quot; /&gt;.">
        <see langword="unsigned" />
        <see langword="short" /> を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;long&quot; /&gt;.">
        <see langword="unsigned" />
        <see langword="long" /> を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary vsli:raw="Indicates an 64-bit unsigned integer.">64 ビット符号なし整数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt; integer value.">
        <see langword="unsigned" /> 整数値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">
        <see langword="IUnknown" /> ポインターを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary vsli:raw="Indicates a user defined type.">ユーザー定義型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary vsli:raw="Indicates a VARIANT &lt;see langword=&quot;far&quot; /&gt; pointer.">VARIANT <see langword="far" /> ポインターを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary vsli:raw="Indicates a simple, counted array.">カウントされた単純な配列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary vsli:raw="Indicates a C style &lt;see langword=&quot;void&quot; /&gt;.">C スタイル <see langword="void" /> を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_VARIANT | VT_BYREF&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">
        <see langword="VT_VARIANT | VT_BYREF" /> 型のデータをマネージド コードからアンマネージド コードにマーシャリングします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; class for the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; parameter.">指定した <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> パラメーターの <see cref="T:System.Object" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj" vsli:raw="The object to marshal.">マーシャリングするオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> オブジェクトによってラップされたオブジェクトを取得します。</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> オブジェクトによってラップされたオブジェクト。</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary vsli:raw="Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.">不要になったときにコンピューターのメモリから削除するなどして機密を保持する必要があるテキストを表します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class.">
        <see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this instance.">このインスタンスの値を暗号化または復号化するときにエラーが発生しました。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">この操作は、このプラットフォームではサポートされていません。</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class from a subarray of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.  &#xA;  &#xA; This constructor is not CLS-compliant. The CLS-compliant alternative is &lt;see cref=&quot;M:System.Security.SecureString.#ctor&quot; /&gt;.">
        <see cref="T:System.Char" /> オブジェクトのサブ配列から <see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。  
  
このコンストラクターは、CLS 準拠ではありません。 CLS 準拠の代わりとして <see cref="M:System.Security.SecureString.#ctor" /> を使用できます。</summary>
      <param name="value" vsli:raw="A pointer to an array of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.">
        <see cref="T:System.Char" /> オブジェクトの配列へのポインター。</param>
      <param name="length" vsli:raw="The number of elements of &lt;paramref name=&quot;value&quot; /&gt; to include in the new instance.">新しいインスタンスに含める <paramref name="value" /> の要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero or greater than 65,536.">
        <paramref name="length" /> が 0 未満か、65,536 を超えています。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">この操作は、このプラットフォームではサポートされていません。</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary vsli:raw="Appends a character to the end of the current secure string.">現在のセキュリティ文字列の末尾に、文字を 1 つ追加します。</summary>
      <param name="c" vsli:raw="A character to append to this secure string.">このセキュリティ文字列に追加される文字。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">このセキュリティ文字列は読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Performing this operation would make the length of this secure string greater than 65,536 characters.">この操作を実行すると、このセキュリティ文字列の長さが 65,536 文字を超えます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary vsli:raw="Deletes the value of the current secure string.">現在のセキュリティ文字列の値を削除します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">このセキュリティ文字列は読み取り専用です。</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary vsli:raw="Creates a copy of the current secure string.">現在のセキュリティ文字列のコピーを作成します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
      <returns vsli:raw="A duplicate of this secure string.">このセキュリティ文字列の複製。</returns>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object.">現在の <see cref="T:System.Security.SecureString" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary vsli:raw="Inserts a character in this secure string at the specified index position.">このセキュリティ文字列の指定したインデックス位置に文字を挿入します。</summary>
      <param name="index" vsli:raw="The index position where parameter &lt;paramref name=&quot;c&quot; /&gt; is inserted.">パラメーター <paramref name="c" /> が挿入されるインデックス位置。</param>
      <param name="c" vsli:raw="The character to insert.">挿入する文字。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">このセキュリティ文字列は読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than the length of this secure string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Performing this operation would make the length of this secure string greater than 65,536 characters.">
        <paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さを超えています。  
  
- または - 
この操作を実行すると、このセキュリティ文字列の長さが 65,536 文字を超えます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary vsli:raw="Indicates whether this secure string is marked read-only.">このセキュリティ文字列が読み取り専用としてマークされているかどうかを示します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this secure string is marked read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このセキュリティ文字列が読み取り専用にマークされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary vsli:raw="Makes the text value of this secure string read-only.">このセキュリティ文字列のテキスト値を読み取り専用にします。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the character at the specified index position from this secure string.">このセキュリティ文字列の指定されたインデックス位置にある文字を削除します。</summary>
      <param name="index" vsli:raw="The index position of a character in this secure string.">このセキュリティ文字列に含まれる文字のインデックス位置。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">このセキュリティ文字列は読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さ以上です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary vsli:raw="Replaces the existing character at the specified index position with another character.">指定されたインデックス位置にある既存の文字を別の文字に置き換えます。</summary>
      <param name="index" vsli:raw="The index position of an existing character in this secure string.">このセキュリティ文字列に含まれる既存の文字のインデックス位置。</param>
      <param name="c" vsli:raw="A character that replaces the existing character.">既存の文字を置換する文字。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">このセキュリティ文字列は読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さ以上です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary vsli:raw="Gets the number of characters in the current secure string.">現在のセキュリティ文字列内の文字数を取得します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">このセキュリティ文字列は既に破棄されています。</exception>
      <returns vsli:raw="The number of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects in this secure string.">このセキュリティ文字列に含まれる <see cref="T:System.Char" /> オブジェクトの数。</returns>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory and copying unmanaged memory blocks.">アンマネージ メモリを割り当て、アンマネージ メモリ ブロックをコピーするメソッドのコレクションを提供します。</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">マネージド <see cref="T:System.Security.SecureString" /> の内容をアンマネージド メモリにコピーし、コピー時に ANSI 形式に変換します。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をアンマネージド メモリにコピーします。</summary>
      <param name="s" vsli:raw="The managed object to copy.">コピーするマネージド オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">使用できるメモリが不足しています。</exception>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">
        <paramref name="s" /> のコピー先となった (アンマネージ メモリ内の) アドレス。<paramref name="s" /> が長さ 0 の <see cref="T:System.Security.SecureString" /> オブジェクトである場合は 0。</returns>
    </member>
  </members>
</doc>
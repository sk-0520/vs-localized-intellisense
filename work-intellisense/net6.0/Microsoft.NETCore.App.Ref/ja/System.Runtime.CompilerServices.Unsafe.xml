<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>ポインターを操作するための一般的な低レベルの機能が含まれています。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>指定した参照に要素のオフセットを加算します。</summary>
      <param name="source">オフセットを加算する参照。</param>
      <param name="elementOffset">加算するオフセット。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>ポインターに対するオフセットの加算を反映する新しい参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>指定した参照に要素のオフセットを加算します。</summary>
      <param name="source">オフセットを加算する参照。</param>
      <param name="elementOffset">加算するオフセット。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>ポインターに対するオフセットの加算を反映する新しい参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>指定された void ポインターに要素のオフセットを加算します。</summary>
      <param name="source">オフセットを加算する void ポインター。</param>
      <param name="elementOffset">加算するオフセット。</param>
      <typeparam name="T">Void ポインターの型。</typeparam>
      <returns>指定されたポインターへのオフセットの加算を反映する新しい void ポインター。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>指定した参照にバイト オフセットを加算します。</summary>
      <param name="source">オフセットを加算する参照。</param>
      <param name="byteOffset">加算するオフセット。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>ポインターに対するバイト オフセットの加算を反映する新しい参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>指定した参照が同じ場所を指すかどうかを判断します。</summary>
      <param name="left">比較する 1 つ目の参照。</param>
      <param name="right">比較する 2 つ目の参照。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> が同じ場所を指している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>指定したオブジェクトを指定した型にキャストします。</summary>
      <param name="o">キャストするオブジェクト。</param>
      <typeparam name="T">オブジェクトのキャスト先となる型。</typeparam>
      <returns>指定した型にキャストされる、元のオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>指定した参照を <typeparamref name="TTo" /> 型の値への参照として再解釈します。</summary>
      <param name="source">再解釈する参照。</param>
      <typeparam name="TFrom">再解釈する参照の型。</typeparam>
      <typeparam name="TTo">参照の必要な型。</typeparam>
      <returns>
        <typeparamref name="TTo" /> 型の値への参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>指定した参照渡しパラメーターへのポインターを返します。</summary>
      <param name="value">ポインターを取得するオブジェクト。</param>
      <typeparam name="T">オブジェクトの型。</typeparam>
      <returns>指定した値へのポインター。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>指定した読み取り専用参照を参照として再解釈します。</summary>
      <param name="source">再解釈する読み取り専用参照。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>
        <typeparamref name="T" /> 型の値への参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>指定した場所を <typeparamref name="T" /> 型の値への参照として再解釈します。</summary>
      <param name="source">参照する値の場所。</param>
      <typeparam name="T">解釈された場所の型。</typeparam>
      <returns>
        <typeparamref name="T" /> 型の値への参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>指定した参照の origin から target までのバイト オフセットを判断します。</summary>
      <param name="origin">origin への参照。</param>
      <param name="target">target への参照。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>origin から target までのバイト オフセットとは、つまり <paramref name="target" /> - <paramref name="origin" /> です。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>指定した場所に <typeparamref name="T" /> 型の値をコピーします。</summary>
      <param name="destination">コピー先の場所。</param>
      <param name="source">コピーする値へのポインター。</param>
      <typeparam name="T">コピーする値の型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>指定した場所に <typeparamref name="T" /> 型の値をコピーします。</summary>
      <param name="destination">コピー先の場所。</param>
      <param name="source">コピーする値への参照。</param>
      <typeparam name="T">コピーする値の型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>コピー元のアドレスからコピー先のアドレスにバイトをコピーします。</summary>
      <param name="destination">コピー先のアドレス。</param>
      <param name="source">コピー元のアドレス。</param>
      <param name="byteCount">コピーするバイト数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>コピー元のアドレスからコピー先のアドレスにバイトをコピーします。</summary>
      <param name="destination">コピー先のアドレス。</param>
      <param name="source">コピー元のアドレス。</param>
      <param name="byteCount">コピーするバイト数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>アーキテクチャに依存するアドレスの配置を考慮せずに、コピー元アドレスからコピー先アドレスにバイトをコピーします。</summary>
      <param name="destination">コピー先のアドレス。</param>
      <param name="source">コピー元のアドレス。</param>
      <param name="byteCount">コピーするバイト数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>アーキテクチャに依存するアドレスの配置を考慮せずに、コピー元アドレスからコピー先アドレスにバイトをコピーします。</summary>
      <param name="destination">コピー先のアドレス。</param>
      <param name="source">コピー元のアドレス。</param>
      <param name="byteCount">コピーするバイト数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>指定した場所のメモリ ブロックを指定した初期値で初期化します。</summary>
      <param name="startAddress">初期化するメモリ ブロックの開始アドレス。</param>
      <param name="value">ブロックを初期化する値。</param>
      <param name="byteCount">初期化するバイトの数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>指定した場所のメモリ ブロックを指定した初期値で初期化します。</summary>
      <param name="startAddress">初期化するメモリ ブロックの開始アドレス。</param>
      <param name="value">ブロックを初期化する値。</param>
      <param name="byteCount">初期化するバイトの数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>アーキテクチャに依存するアドレスの配置を考慮せずに、指定した場所のメモリ ブロックを指定した初期値で初期化します。</summary>
      <param name="startAddress">初期化するメモリ ブロックの開始アドレス。</param>
      <param name="value">ブロックを初期化する値。</param>
      <param name="byteCount">初期化するバイトの数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>アーキテクチャに依存するアドレスの配置を考慮せずに、指定した場所のメモリ ブロックを指定した初期値で初期化します。</summary>
      <param name="startAddress">初期化するメモリ ブロックの開始アドレス。</param>
      <param name="value">ブロックを初期化する値。</param>
      <param name="byteCount">初期化するバイトの数。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>指定された参照が指定したもう 1 つの参照より大きいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
      <typeparam name="T">参照の型。</typeparam>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> より大きい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>指定された参照が指定したもう 1 つの参照より小さいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初の値です。</param>
      <param name="right">比較する 2 番目の値です。</param>
      <typeparam name="T">参照の型。</typeparam>
      <returns>
        <paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsNullRef``1(``0@)">
      <param name="source" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.NullRef``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>指定した場所から <typeparamref name="T" /> 型の値を読み取ります。</summary>
      <param name="source">読み取る元の場所。</param>
      <typeparam name="T">読み取る型。</typeparam>
      <returns>指定した場所から読み取られた <typeparamref name="T" /> 型のオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>アーキテクチャに依存するアドレスの配置を考慮せずに、指定した場所から <typeparamref name="T" /> 型の値を読み取ります。</summary>
      <param name="source">読み取る元の場所。</param>
      <typeparam name="T">読み取る型。</typeparam>
      <returns>指定した場所から読み取られた <typeparamref name="T" /> 型のオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>アーキテクチャに依存するアドレスの配置を考慮せずに、指定した場所から <typeparamref name="T" /> 型の値を読み取ります。</summary>
      <param name="source">読み取る元の場所。</param>
      <typeparam name="T">読み取る型。</typeparam>
      <returns>指定した場所から読み取られた <typeparamref name="T" /> 型のオブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>指定した型パラメーターのオブジェクトのサイズを返します。</summary>
      <typeparam name="T">サイズを取得するオブジェクトの型。</typeparam>
      <returns>型 <typeparamref name="T" /> のオブジェクトのサイズ。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SkipInit``1(``0@)">
      <summary>指定された値に対する明確な代入規則をバイパスします。</summary>
      <param name="value">初期化されていないオブジェクト。</param>
      <typeparam name="T">初期化されていないオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>指定した参照から要素のオフセットを減算します。</summary>
      <param name="source">オフセットを減算する参照。</param>
      <param name="elementOffset">減算するオフセット。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>ポインターからのオフセットの減算を反映する新しい参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>指定した参照から要素のオフセットを減算します。</summary>
      <param name="source">オフセットを減算する参照。</param>
      <param name="elementOffset">減算するオフセット。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>ポインターからのオフセットの減算を反映する新しい参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>指定された void ポインターから要素のオフセットを減算します。</summary>
      <param name="source">オフセットを減算する void ポインター。</param>
      <param name="elementOffset">減算するオフセット。</param>
      <typeparam name="T">Void ポインターの型。</typeparam>
      <returns>指定されたポインターからのオフセットの減算を反映する新しい void ポインター。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>指定した参照からバイト オフセットを減算します。</summary>
      <param name="source">オフセットを減算する参照。</param>
      <param name="byteOffset">減算するオフセット。</param>
      <typeparam name="T">参照の種類。</typeparam>
      <returns>ポインターからのバイト オフセットの減算を反映する新しい参照。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>ボックス化された値に <see langword="mutable ref" /> を返します。</summary>
      <param name="box">ボックス化解除する値。</param>
      <typeparam name="T">ボックス化解除する型。</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" /> は <see langword="null" /> です。<typeparamref name="T" /> は null 非許容値型です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> はボックス化された値型ではありません。
         
- または -

<paramref name="box" /> はボックス化された <typeparamref name="T" /> ではありません。</exception>
      <exception cref="T:System.TypeLoadException">
        <typeparamref name="T" /> が見つかりません。</exception>
      <returns>ボックス化された値 <paramref name="box" /> への <see langword="mutable ref" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>指定した場所に <typeparamref name="T" /> 型の値を書き込みます。</summary>
      <param name="destination">書き込み先の場所。</param>
      <param name="value">書き込む値。</param>
      <typeparam name="T">書き込む値の型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>アーキテクチャに依存するアドレスの配置を考慮せずに、指定した場所に <typeparamref name="T" /> 型の値を書き込みます。</summary>
      <param name="destination">書き込み先の場所。</param>
      <param name="value">書き込む値。</param>
      <typeparam name="T">書き込む値の型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>アーキテクチャに依存するアドレスの配置を考慮せずに、指定した場所に <typeparamref name="T" /> 型の値を書き込みます。</summary>
      <param name="destination">書き込み先の場所。</param>
      <param name="value">書き込む値。</param>
      <typeparam name="T">書き込む値の型。</typeparam>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct handles comments.">Define como o struct <see cref="T:System.Text.Json.Utf8JsonReader" /> manipula comentários.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary vsli:raw="Allows comments within the JSON input and treats them as valid tokens. While reading, the caller can access the comment values.">Permite comentários dentro da entrada JSON e trata-os como tokens válidos. Durante a leitura, o chamador pode acessar os valores dos comentários.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary vsli:raw="Doesn't allow comments within the JSON input. Comments are treated as invalid JSON if found, and a &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; is thrown. This is the default value.">Não permite comentários na entrada JSON. Se ele for encontrado, os comentários serão tratados como um JSON inválido e uma <see cref="T:System.Text.Json.JsonException" /> será gerada. Este é o valor padrão.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary vsli:raw="Allows comments within the JSON input and ignores them. The &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; behaves as if no comments are present.">Permite comentários dentro do JSON de entrada e ignora-os. O <see cref="T:System.Text.Json.Utf8JsonReader" /> comporta-se como se nenhum comentário estivesse presente.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary vsli:raw="Provides a mechanism for examining the structural content of a JSON value without automatically instantiating data values.">Fornece um mecanismo para examinar o conteúdo estrutural de um valor JSON sem criar automaticamente instâncias de valores de dados.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonDocument&quot;&gt;&lt;/xref&gt; instance.">Libera os recursos usados por esta instância <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a sequence as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analisa uma sequência como texto codificado em UTF-8 que representa um único valor de byte JSON em um JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">O texto JSON a ser analisado.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opções para controlar o comportamento do leitor durante a análise.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> contém opções sem suporte.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Uma representação de JsonDocument do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analisa um <see cref="T:System.IO.Stream" /> como dados codificados em UTF-8 que representam um único valor JSON em um JsonDocument. O fluxo é lido até a conclusão.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Os dados JSON a serem analisados.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opções para controlar o comportamento do leitor durante a análise.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> contém opções sem suporte.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Uma representação de JsonDocument do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses memory as UTF-8-encoded text representing a single JSON value into a JsonDocument.">Analisa memória como texto codificado em UTF-8 que representa um único valor JSON em um JsonDocument.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">O texto JSON a ser analisado.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opções para controlar o comportamento do leitor durante a análise.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> contém opções sem suporte.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Uma representação de JsonDocument do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON value into a JsonDocument.">Analisa texto que representa um único valor de caractere JSON em um JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">O texto JSON a ser analisado.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opções para controlar o comportamento do leitor durante a análise.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> contém opções sem suporte.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Uma representação de JsonDocument do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary vsli:raw="Parses text representing a single JSON string value into a JsonDocument.">Analisa texto que representa um único valor de cadeia de caracteres JSON em um JsonDocument.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">O texto JSON a ser analisado.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opções para controlar o comportamento do leitor durante a análise.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> contém opções sem suporte.</exception>
      <returns vsli:raw="A JsonDocument representation of the JSON value.">Uma representação de JsonDocument do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; as UTF-8-encoded data representing a single JSON value into a JsonDocument. The stream is read to completion.">Analisa um <see cref="T:System.IO.Stream" /> como dados codificados em UTF-8 que representam um único valor JSON em um JsonDocument. O fluxo é lido até a conclusão.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Os dados JSON a serem analisados.</param>
      <param name="options" vsli:raw="Options to control the reader behavior during parsing.">Opções para controlar o comportamento do leitor durante a análise.</param>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests.">O token a se monitorar para solicitações de cancelamento.</param>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; does not represent a valid single JSON value.">
        <paramref name="utf8Json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; contains unsupported options.">
        <paramref name="options" /> contém opções sem suporte.</exception>
      <returns vsli:raw="A task to produce a JsonDocument representation of the JSON value.">Uma tarefa para produzir uma representação de JsonDocument do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary vsli:raw="Parses one JSON value (including objects or arrays) from the provided reader.">Analisa um valor JSON (incluindo matrizes ou objetos) do leitor fornecido.</summary>
      <param name="reader" vsli:raw="The reader to read.">O leitor a ser lido.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> contém opções sem suporte.

- ou -

O token <paramref name="reader" /> atual não inicia ou representa um valor.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Não foi possível ler um valor do leitor.</exception>
      <returns vsli:raw="A JsonDocument representing the value (and nested values) read from the reader.">Um JsonDocument que representa o valor (e valores aninhados) lido do leitor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary vsli:raw="Attempts to parse one JSON value (including objects or arrays) from the provided reader.">Tenta analisar um valor JSON (incluindo matrizes ou objetos) do leitor fornecido.</summary>
      <param name="reader" vsli:raw="The reader to read.">O leitor a ser lido.</param>
      <param name="document" vsli:raw="When the method returns, contains the parsed document.">Quando retorna, o método contém o documento analisado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains unsupported options.&#xA;&#xA;-or-&#xA;&#xA;The current &lt;paramref name=&quot;reader&quot; /&gt; token does not start or represent a value.">
        <paramref name="reader" /> contém opções sem suporte.

- ou -

O token <paramref name="reader" /> atual não inicia ou representa um valor.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="A value could not be read from the reader.">Não foi possível ler um valor do leitor.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a value was read and parsed into a JsonDocument; &lt;see langword=&quot;false&quot; /&gt; if the reader ran out of data while parsing. All other situations result in an exception being thrown.">
        <see langword="true" /> se um valor foi lido e analisado em um JsonDocument; <see langword="false" /> se o leitor ficou sem dados durante a análise. Todas as outras situações resultam no lançamento de uma exceção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the document to the provided writer as a JSON value.">Grava o documento no gravador fornecido como um valor JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the document.">O gravador no qual gravar o documento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="writer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this &lt;see cref=&quot;P:System.Text.Json.JsonDocument.RootElement&quot; /&gt; would result in invalid JSON.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> deste <see cref="P:System.Text.Json.JsonDocument.RootElement" /> resultaria em um JSON inválido.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary vsli:raw="Gets the root element of this JSON document.">Obtém o elemento raiz deste documento JSON.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the document.">Um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor do documento.</returns>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when parsing JSON to create a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Fornece ao usuário a capacidade de definir um comportamento personalizado ao analisar o JSON para criar um <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Obtém ou define um valor que indica se uma vírgula extra é permitida (e ignorada) no final de uma lista de valores JSON em um objeto ou uma matriz no conteúdo JSON que está sendo lido.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. Default is &lt;see langword=&quot;false&quot; /&gt;">
        <see langword="true" /> se uma vírgula extra no final de uma lista de valores JSON em um objeto ou matriz for permitida; caso contrário, <see langword="false" /> . O padrão é <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; handles comments when reading through the JSON data.">Obtém ou define um valor que determina como o <see cref="T:System.Text.Json.JsonDocument" /> manipula os comentários ao ler os dados JSON.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">A enumeração de manipulação de comentário é definida como um valor não compatível (ou que não está dentro do intervalo de enumeração <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Um dos valores de enumeração que indica como os comentários são tratados.</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when parsing JSON data, with the default (that is, 0) indicating a maximum depth of 64.">Obtém ou define a profundidade máxima permitida ao analisar dados JSON, sendo que o valor padrão (ou seja, 0) indica uma profundidade máxima de 64.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">A profundidade máxima está definida como um valor negativo.</exception>
      <returns vsli:raw="The maximum depth allowed when parsing JSON data.">A profundidade máxima permitida ao analisar dados JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary vsli:raw="Represents a specific JSON value within a &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Representa um valor JSON específico em um <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary vsli:raw="Gets a JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Obtém um JsonElement que pode ser armazenado com segurança além do tempo de vida do <see cref="T:System.Text.Json.JsonDocument" /> original.</summary>
      <returns vsli:raw="A JsonElement that can be safely stored beyond the lifetime of the original &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt;.">Um JsonElement que pode ser armazenado com segurança além do tempo de vida do <see cref="T:System.Text.Json.JsonDocument" /> original.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary vsli:raw="Gets an enumerator to enumerate the values in the JSON array represented by this JsonElement.">Obtém um enumerador para enumerar os valores na matriz JSON representada por esse JsonElement.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="An enumerator to enumerate the values in the JSON array represented by this JsonElement.">Um enumerador para enumerar os valores na matriz JSON representada por esse JsonElement.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary vsli:raw="Gets an enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Obtém um enumerador para enumerar as propriedades no objeto JSON representado por esse JsonElement.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="An enumerator to enumerate the properties in the JSON object represented by this JsonElement.">Um enumerador para enumerar as propriedades no objeto JSON representado por esse JsonElement.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary vsli:raw="Gets the number of values contained within the current array value.">Obtém o número de valores contidos no valor de matriz atual.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The number of values contained within the current array value.">O número de valores contidos no valor de matriz atual.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Obtém o valor do elemento como um <see cref="T:System.Boolean" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.True&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.False&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.True" /> nem <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">O valor do elemento como um <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.Byte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">O número JSON atual como um <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary vsli:raw="Gets the value of the element as a byte array.">Obtém o valor do elemento como uma matriz de bytes.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text and hence cannot be decoded to bytes.">O valor não está codificado como texto Base64 e, portanto, não pode ser decodificado para bytes.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The value decoded as a byte array.">O valor decodificado como uma matriz de bytes.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Obtém o valor do elemento como um <see cref="T:System.DateTime" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">O valor não pode ser lido como um <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">O valor do elemento como um <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Obtém o valor do elemento como um <see cref="T:System.DateTimeOffset" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">O valor não pode ser lido como um <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">O valor do elemento como um <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.Decimal" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">O número JSON atual como um <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.Double" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">O número JSON atual como um <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Obtém o valor do elemento como um <see cref="T:System.Guid" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">O valor do elemento como um <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.Int16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">O número JSON atual como um <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.Int32" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">O número JSON atual como um <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.Int64" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">O número JSON atual como um <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;utf8PropertyName&quot; /&gt;.">Obtém um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor de uma propriedade obrigatória identificada por <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 representation (with no Byte-Order-Mark (BOM)) of the name of the property to return.">A representação UTF-8 (sem nenhuma marca de ordem de byte) do nome da propriedade a ser retornada.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Nenhuma propriedade foi encontrada com o nome solicitado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor da propriedade solicitada.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Obtém um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor de uma propriedade obrigatória identificada por <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">O nome da propriedade cujo valor deve ser retornado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Nenhuma propriedade foi encontrada com o nome solicitado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor da propriedade solicitada.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of a required property identified by &lt;paramref name=&quot;propertyName&quot; /&gt;.">Obtém um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor de uma propriedade obrigatória identificada por <paramref name="propertyName" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property whose value is to be returned.">O nome da propriedade cujo valor deve ser retornado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="No property was found with the requested name.">Nenhuma propriedade foi encontrada com o nome solicitado.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Text.Json.JsonElement&quot; /&gt; representing the value of the requested property.">Um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor da propriedade solicitada.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary vsli:raw="Gets a string that represents the original input data backing this value.">Obtém uma cadeia de caracteres que representa os dados de entrada originais que dão suporte a esse valor.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The original input data backing this value.">Os dados de entrada originais que dão suporte a esse valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary vsli:raw="Gets the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.SByte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">O número JSON atual como um <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.Single" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">O número JSON atual como um <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary vsli:raw="Gets the value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Obtém o valor do elemento como um <see cref="T:System.String" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is neither &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt; nor &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" /> nem <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The value of the element as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">O valor do elemento como um <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.UInt16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">O número JSON atual como um <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.UInt32" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">O número JSON atual como um <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary vsli:raw="Gets the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Obtém o número JSON atual como um <see cref="T:System.UInt64" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value cannot be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">O valor não pode ser representado como um <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">O número JSON atual como um <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary vsli:raw="Gets a string representation for the current value appropriate to the value type.">Obtém uma representação de cadeia de caracteres para o valor atual apropriado para o tipo de valor.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="A string representation for the current value appropriate to the value type.">Uma representação de cadeia de caracteres para o valor atual apropriado ao tipo de valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.Byte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando o método é retornado, contém o equivalente em bytes do número JSON atual se a conversão foi bem-sucedida.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Byte" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a byte array, assuming that it is Base64 encoded.">Tenta representar a cadeia de caracteres JSON atual como uma matriz de bytes, supondo que esteja codificada em Base64.</summary>
      <param name="value" vsli:raw="If the method succeeds, contains the decoded binary representation of the Base64 text.">Quando o método é bem-sucedido, contém a representação binária decodificada do texto Base64.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token inteiro for codificado como um texto Base64 válido e puder ser decodificado para bytes com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Tenta representar a cadeia de caracteres JSON atual como uma <see cref="T:System.DateTime" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Quando esse método é retornado, ele contém o valor de data e hora equivalente à cadeia de caracteres JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a cadeia de caracteres puder ser representada como um <see cref="T:System.DateTime" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Tenta representar a cadeia de caracteres JSON atual como uma <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Quando esse método é retornado, ele contém a data e a hora equivalentes à cadeia de caracteres JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a cadeia de caracteres puder ser representada como um <see cref="T:System.DateTimeOffset" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.Decimal" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando esse método é retornado, ele contém o equivalente decimal do número JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Decimal" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.Double" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando esse método é retornado, ele contém o valor de ponto flutuante de precisão dupla equivalente ao número JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Double&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Double" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Attempts to represent the current JSON string as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Tenta representar a cadeia de caracteres JSON atual como uma <see cref="T:System.Guid" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Quando esse método é retornado, ele contém o GUID equivalente à cadeia de caracteres JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string can be represented as a &lt;see cref=&quot;T:System.Guid&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a cadeia de caracteres puder ser representada como um <see cref="T:System.Guid" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando o método é retornado, contém o equivalente inteiro de 16 bits do número JSON atual se a conversão foi bem-sucedida.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Int16" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando esse método é retornado, ele contém o valor do inteiro de 32 bits equivalente ao número JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Int32" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando esse método é retornado, ele contém o valor do inteiro de 64 bits equivalente ao número JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Int64" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;utf8PropertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Procura uma propriedade chamada <paramref name="utf8PropertyName" /> no objeto atual, retornando um valor que indica se essa propriedade existe. Quando a propriedade existe, o método atribui seu valor ao argumento <paramref name="value" />.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 (with no Byte-Order-Mark (BOM)) representation of the name of the property to return.">A representação UTF-8 (sem nenhuma marca de ordem de byte) do nome da propriedade a ser retornada.</param>
      <param name="value" vsli:raw="Receives the value of the located property.">Recebe o valor da propriedade localizada.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a propriedade for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, the method assigns its value to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Procura uma propriedade chamada <paramref name="propertyName" /> no objeto atual, retornando um valor que indica se essa propriedade existe. Quando a propriedade existe, o método atribui seu valor ao argumento <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">O nome da propriedade a ser localizada.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Quando esse método é retornado, ele contém o valor da propriedade especificada.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a propriedade for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary vsli:raw="Looks for a property named &lt;paramref name=&quot;propertyName&quot; /&gt; in the current object, returning a value that indicates whether or not such a property exists. When the property exists, its value is assigned to the &lt;paramref name=&quot;value&quot; /&gt; argument.">Procura uma propriedade chamada <paramref name="propertyName" /> no objeto atual, retornando um valor que indica se essa propriedade existe. Quando a propriedade existe, seu valor é atribuído ao argumento <paramref name="value" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property to find.">O nome da propriedade a ser localizada.</param>
      <param name="value" vsli:raw="When this method returns, contains the value of the specified property.">Quando esse método é retornado, ele contém o valor da propriedade especificada.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Object&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a propriedade for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Attempts to represent the current JSON number as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.SByte" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando o método é retornado, contém o equivalente em bytes com sinal do número JSON atual se a conversão foi bem-sucedida.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.SByte" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.Single" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando esse método é retornado, ele contém o valor de ponto flutuante de precisão simples equivalente ao número JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.Single&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Single" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.UInt16" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando o método é retornado, contém o equivalente inteiro de 16 bits sem sinal do número JSON atual se a conversão foi bem-sucedida.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.UInt16" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.UInt32" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando esse método é retornado, ele contém o valor do inteiro sem sinal de 32 bits equivalente ao número JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.UInt32" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Attempts to represent the current JSON number as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Tenta representar o número JSON atual como um <see cref="T:System.UInt64" />.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando esse método é retornado, ele contém o valor do inteiro sem sinal de 64 bits equivalente ao número JSON atual.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Number&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the number can be represented as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.UInt64" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the text represented by a UTF8-encoded byte span to the string value of this element.">Compara o texto representado por um intervalo de bytes codificado em UTF8 com o valor da cadeia de caracteres desse elemento.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">O texto codificado em UTF-8 a ser comparado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element has the same UTF-8 encoding as&#xA;              &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor da cadeia de caracteres desse elemento tiver a mesma codificação UTF-8 que <paramref name="utf8Text" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares a specified read-only character span to the string value of this element.">Compara um intervalo de caracteres somente leitura especificado com o valor da cadeia de caracteres desse elemento.</summary>
      <param name="text" vsli:raw="The text to compare against.">O texto para comparação.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor desse elemento corresponder a <paramref name="text" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary vsli:raw="Compares a specified string to the string value of this element.">Compara uma cadeia de caracteres especificada com o valor da cadeia de caracteres desse elemento.</summary>
      <param name="text" vsli:raw="The text to compare against.">O texto para comparação.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.String&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the string value of this element matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor desse elemento corresponder a <paramref name="text" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the element to the specified writer as a JSON value.">Grava o elemento no gravador especificado como um valor JSON.</summary>
      <param name="writer" vsli:raw="The writer to which to write the element.">O gravador no qual gravar o elemento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="writer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this value is &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Undefined&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor é <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary vsli:raw="Gets the value at the specified index if the current value is an &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">Obtém o valor no índice especificado se o valor atual é uma <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index" vsli:raw="The item index.">O índice do item.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Array&quot; /&gt;.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not in the range [0, &lt;see cref=&quot;M:System.Text.Json.JsonElement.GetArrayLength&quot; /&gt;()).">
        <paramref name="index" /> não está no intervalo [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The value at the specified index.">O valor no índice especificado.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary vsli:raw="Gets the type of the current JSON value.">Obtém o tipo do valor JSON atual.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
      <returns vsli:raw="The type of the current JSON value.">O tipo do valor JSON atual.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary vsli:raw="Represents an enumerator for the contents of a JSON array.">Representa um enumerador para o conteúdo de uma matriz JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ArrayEnumerator&quot;&gt;&lt;/xref&gt; instance.">Libera os recursos usados por esta instância <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Um enumerador que pode ser usado para iterar na matriz.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Avança o enumerador para o próximo elemento da coleção.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador para uma matriz de <see cref="T:System.Text.Json.JsonElement" /> que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary vsli:raw="Represents an enumerator for the properties of a JSON object.">Representa um enumerador para as propriedades de um objeto JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary vsli:raw="Releases the resources used by this &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Text.Json.JsonElement.ObjectEnumerator&quot;&gt;&lt;/xref&gt; instance.">Libera os recursos usados por esta instância <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates the properties of an object.">Retorna um enumerador que itera pelas propriedades de um objeto.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the object.">Um enumerador que pode ser usado para iterar pelo objeto.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">Avança o enumerador para o próximo elemento da coleção.</summary>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the enumerator was successfully advanced to the next element; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; if the enumerator has passed the end of the collection.">
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador para objetos <see cref="T:System.Text.Json.JsonProperty" /> que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element in the collection at the current position of the enumerator.">Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary vsli:raw="Provides methods to transform UTF-8 or UTF-16 encoded text into a form that is suitable for JSON.">Fornece métodos para transformar texto codificado em UTF-8 ou UTF-16 em um formulário adequado para JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a UTF-8 text value as a JSON string.">Codifica um valor de texto UTF-8 como uma cadeia de caracteres JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded text to convert to JSON encoded text.">O texto codificado em UTF-8 a ser convertido em texto codificado em JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">O codificador a ser usado ao escapar cadeias de caracteres, ou <see langword="null" /> para usar o codificador padrão.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;utf8Value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains invalid UTF-8 bytes.">
        <paramref name="utf8Value" /> é muito grande.

- ou -

<paramref name="utf8Value" /> contém bytes UTF-8 inválidos.</exception>
      <returns vsli:raw="The encoded JSON text.">O texto JSON codificado.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes a specified text value as a JSON string.">Codifica um valor de texto especificado como uma cadeia de caracteres JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">O valor a ser convertido em texto codificado em JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">O codificador a ser usado ao escapar cadeias de caracteres, ou <see langword="null" /> para usar o codificador padrão.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> é muito grande.

- ou -

<paramref name="value" /> contém caracteres UTF-16 inválidos.</exception>
      <returns vsli:raw="The encoded JSON text.">O texto JSON codificado.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary vsli:raw="Encodes the string text value as a JSON string.">Codifica o valor de texto da cadeia de caracteres como uma cadeia de caracteres JSON.</summary>
      <param name="value" vsli:raw="The value to convert to JSON encoded text.">O valor a ser convertido em texto codificado em JSON.</param>
      <param name="encoder" vsli:raw="The encoder to use when escaping the string, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">O codificador a ser usado ao escapar cadeias de caracteres, ou <see langword="null" /> para usar o codificador padrão.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is too large.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains invalid UTF-16 characters.">
        <paramref name="value" /> é muito grande.

- ou -

<paramref name="value" /> contém caracteres UTF-16 inválidos.</exception>
      <returns vsli:raw="The encoded JSON text.">O texto JSON codificado.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance and a specified object, which must also be a &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance, have the same value.">Determina se essa instância e um objeto especificado, que também deve ser uma instância de <see cref="T:System.Text.Json.JsonEncodedText" />, têm o mesmo valor.</summary>
      <param name="obj" vsli:raw="The object to compare to this instance.">O objeto a ser comparado com essa instância.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance and &lt;paramref name=&quot;obj&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt; instance have the same value.">Determina se essa instância e outra instância de <see cref="T:System.Text.Json.JsonEncodedText" /> especificada têm o mesmo valor.</summary>
      <param name="other" vsli:raw="The object to compare to this instance.">O objeto a ser comparado com essa instância.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance and &lt;paramref name=&quot;other&quot; /&gt; have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esta instância e <paramref name="other" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Text.Json.JsonEncodedText&quot; /&gt;.">Retorna o código hash para este <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns vsli:raw="The hash code for this instance.">O código hash para essa instância.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary vsli:raw="Converts the value of this instance to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Converte o valor dessa instância em um <see cref="T:System.String" />.</summary>
      <returns vsli:raw="The underlying UTF-16 encoded string.">A cadeia de caracteres codificada em UTF-16 subjacente.</returns>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary vsli:raw="Gets the UTF-8 encoded representation of the pre-encoded JSON text.">Obtém a representação codificada em UTF-8 do texto JSON pré-codificado.</summary>
      <returns vsli:raw="The UTF-8 encoded representation of the pre-encoded JSON text.">A representação codificada em UTF-8 do texto JSON previamente codificado.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary vsli:raw="Defines a custom exception object that is thrown when invalid JSON text is encountered, the defined maximum depth is passed, or the JSON text is not compatible with the type of a property on an object.">Define um objeto de exceção personalizado que é gerado quando um texto JSON inválido é encontrado, quando a profundidade máxima definida é ultrapassada ou quando o texto JSON não é compatível com o tipo de uma propriedade em um objeto.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Creates a new exception object with serialized data.">Cria um novo objeto de exceção com os dados serializados.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Os dados do objeto serializado sobre a exceção sendo gerada.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Um objeto que contém informações contextuais sobre a fonte ou o destino.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class with a specified error message.">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.JsonException" /> com uma mensagem de erro especificada.</summary>
      <param name="message" vsli:raw="The context-specific error message.">A mensagem de erro específica do contexto.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonException&quot; /&gt; class, with a specified error message and a reference to the inner exception that is the cause of this exception.">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.JsonException" />, com uma mensagem de erro especificada e uma referência à exceção interna que é a causa dessa exceção.</summary>
      <param name="message" vsli:raw="The context-specific error message.">A mensagem de erro específica do contexto.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">A exceção que causou a exceção atual.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary vsli:raw="Creates a new exception object to relay error information to the user.">Cria um objeto de exceção para retransmitir as informações de erro ao usuário.</summary>
      <param name="message" vsli:raw="The context-specific error message.">A mensagem de erro específica do contexto.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">O caminho em que o JSON inválido foi encontrado.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">O número de linha (começando em 0) em que o JSON inválido foi encontrado ao desserializar.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count within the current line (starting at 0) where the invalid JSON was encountered.">O número de bytes dentro da linha atual (começando em 0) em que o JSON inválido foi encontrado.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary vsli:raw="Creates a new exception object to relay error information to the user that includes a specified inner exception.">Cria um objeto de exceção para retransmitir as informações de erro ao usuário, que inclui uma exceção interna especificada.</summary>
      <param name="message" vsli:raw="The context-specific error message.">A mensagem de erro específica do contexto.</param>
      <param name="path" vsli:raw="The path where the invalid JSON was encountered.">O caminho em que o JSON inválido foi encontrado.</param>
      <param name="lineNumber" vsli:raw="The line number (starting at 0) at which the invalid JSON was encountered when deserializing.">O número de linha (começando em 0) em que o JSON inválido foi encontrado ao desserializar.</param>
      <param name="bytePositionInLine" vsli:raw="The byte count (starting at 0) within the current line where the invalid JSON was encountered.">O número de bytes (começando em 0) dentro da linha atual em que o JSON inválido foi encontrado.</param>
      <param name="innerException" vsli:raw="The exception that caused the current exception.">A exceção que causou a exceção atual.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Define o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com informações sobre a exceção.</summary>
      <param name="info" vsli:raw="The serialized object data about the exception being thrown.">Os dados do objeto serializado sobre a exceção sendo gerada.</param>
      <param name="context" vsli:raw="An object that contains contextual information about the source or destination.">Um objeto que contém informações contextuais sobre a fonte ou o destino.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary vsli:raw="Gets the zero-based number of bytes read within the current line before the exception.">Obtém o número baseado em zero de bytes lidos dentro da linha atual antes da exceção.</summary>
      <returns vsli:raw="The zero-based number of bytes read within the current line before the exception.">O número de bytes lidos com base em zero na linha atual antes da exceção.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary vsli:raw="Gets the zero-based number of lines read before the exception.">Obtém o número baseado em zero de linhas lidas antes da exceção.</summary>
      <returns vsli:raw="The zero-based number of lines read before the exception.">O número de linhas com base em zero lido antes da exceção.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary vsli:raw="Gets a message that describes the current exception.">Obtém uma mensagem que descreve a exceção atual.</summary>
      <returns vsli:raw="The error message that describes the current exception.">A mensagem de erro que descreve a exceção atual.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary vsli:raw="Gets The path within the JSON where the exception was encountered.">Obtém o caminho dentro do JSON em que a exceção foi encontrada.</summary>
      <returns vsli:raw="The path within the JSON where the exception was encountered.">O caminho dentro do JSON em que a exceção foi encontrada.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary vsli:raw="Determines the naming policy used to convert a string-based name to another format, such as a camel-casing format.">Determina a política de nomenclatura usada para converter um nome baseado em cadeia de caracteres para outro formato, como o formato camel-case, por exemplo.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Inicializa uma nova instância de <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary vsli:raw="When overridden in a derived class, converts the specified name according to the policy.">Quando substituído em uma classe derivada, converte o nome especificado de acordo com a política.</summary>
      <param name="name" vsli:raw="The name to convert.">O nome a ser convertido.</param>
      <returns vsli:raw="The converted name.">O nome convertido.</returns>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary vsli:raw="Gets the naming policy for camel-casing.">Obtém a política de nomenclatura para camel-case.</summary>
      <returns vsli:raw="The naming policy for camel-casing.">A política de nomenclatura para camel-case.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary vsli:raw="Represents a single property for a JSON object.">Representa uma única propriedade para um objeto JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the specified UTF-8 encoded text to the name of this property.">Compara o texto especificado codificado em UTF-8 com o nome dessa propriedade.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">O texto codificado em UTF-8 a ser comparado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">O <see cref="T:System.Type" /> desse valor não é <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property has the same UTF-8 encoding as &lt;paramref name=&quot;utf8Text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o nome dessa propriedade tiver a mesma codificação UTF-8 que <paramref name="utf8Text" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the specified text as a character span to the name of this property.">Compara o texto especificado como um intervalo de caracteres com o nome dessa propriedade.</summary>
      <param name="text" vsli:raw="The text to compare against.">O texto para comparação.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">O <see cref="T:System.Type" /> desse valor não é <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o nome dessa propriedade corresponder a <paramref name="text" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary vsli:raw="Compares the specified string to the name of this property.">Compara a cadeia de caracteres especificada com o nome dessa propriedade.</summary>
      <param name="text" vsli:raw="The text to compare against.">O texto para comparação.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This value's &lt;see cref=&quot;T:System.Type&quot; /&gt; is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;.">O <see cref="T:System.Type" /> desse valor não é <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name of this property matches &lt;paramref name=&quot;text&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o nome dessa propriedade corresponder a <paramref name="text" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary vsli:raw="Provides a string representation of the property for debugging purposes.">Fornece uma representação de cadeia de caracteres da propriedade para fins de depuração.</summary>
      <returns vsli:raw="A string containing the uninterpreted value of the property, beginning at the declaring open-quote and ending at the last character that is part of the value.">Uma cadeia de caracteres que contém o valor não interpretado da propriedade, começando nas aspas de abertura declarativas e terminando no último caractere que faz parte do valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary vsli:raw="Writes the property to the provided writer as a named JSON object property.">Grava a propriedade no gravador fornecido como uma propriedade de objeto JSON nomeada.</summary>
      <param name="writer" vsli:raw="The writer to which to write the property.">O gravador no qual gravar a propriedade.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Text.Json.JsonProperty.Name&quot; /&gt; is too large to be a JSON object property.">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> é grande demais para ser uma propriedade de objeto JSON.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Text.Json.JsonElement.ValueKind&quot; /&gt; of this JSON property's &lt;see cref=&quot;P:System.Text.Json.JsonProperty.Value&quot; /&gt; would result in invalid JSON.">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> do <see cref="P:System.Text.Json.JsonProperty.Value" /> desta propriedade JSON resultaria em um JSON inválido.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The parent &lt;see cref=&quot;T:System.Text.Json.JsonDocument&quot; /&gt; has been disposed.">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary vsli:raw="Gets the name of this property.">Obtém o nome dessa propriedade.</summary>
      <returns vsli:raw="The name of this property.">O nome dessa propriedade.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary vsli:raw="Gets the value of this property.">Obtém o valor dessa propriedade.</summary>
      <returns vsli:raw="The value of this property.">O valor dessa propriedade.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary vsli:raw="Provides the ability for the user to define custom behavior when reading JSON.">Fornece ao usuário a capacidade de definir um comportamento personalizado ao ler um JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary vsli:raw="Gets or sets a value that defines whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being read.">Obtém ou define um valor que define se uma vírgula extra é permitida (e ignorada) no final de uma lista de valores JSON em um objeto ou uma matriz no conteúdo JSON que está sendo lido.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma is allowed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se uma vírgula extra for permitida; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary vsli:raw="Gets or sets a value that determines how the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; handles comments when reading through the JSON data.">Obtém ou define um valor que determina como o <see cref="T:System.Text.Json.Utf8JsonReader" /> manipula os comentários ao ler os dados JSON.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is being set to a value that is not a member of the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enumeration.">A propriedade está sendo definida como um valor que não é membro da enumeração <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
      <returns vsli:raw="One of the enumeration values that indicates how comments are handled.">Um dos valores de enumeração que indica como os comentários são tratados.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when reading JSON, with the default (that is, 0) indicating a maximum depth of 64.">Obtém ou define a profundidade máxima permitida durante a leitura de JSON, com o padrão (ou seja, 0) que indica uma profundidade máxima de 64.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The maximum depth is being set to a negative value.">A profundidade máxima está sendo definida como um valor negativo.</exception>
      <returns vsli:raw="The maximum depth allowed when reading JSON.">A profundidade máxima permitida durante a leitura de JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary vsli:raw="Defines an opaque type that holds and saves all the relevant state information, which must be provided to the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; to continue reading after processing incomplete data.">Define um tipo opaco que mantém e salva todas as informações de estado relevantes, que precisam ser fornecidas ao <see cref="T:System.Text.Json.Utf8JsonReader" /> para continuar a leitura após o processamento de dados incompletos.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonReaderState&quot; /&gt; instance.">Constrói uma nova instância de <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that is different from the JSON RFC (for example how to handle comments, or the maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly (comments within the JSON are invalid) and reads up to a maximum depth of 64.">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonReader" /> que é diferente do RFC do JSON (por exemplo, como manipular comentários ou a profundidade máxima permitida durante a leitura). Por padrão, o <see cref="T:System.Text.Json.Utf8JsonReader" /> segue estritamente o RFC do JSON (os comentários no JSON são inválidos) e lê até uma profundidade máxima de 64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The maximum depth is set to a non-positive value (&amp;lt; 0).">A profundidade máxima é definida como um valor não positivo (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary vsli:raw="Gets the custom behavior to use when reading JSON data using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct that may deviate from strict adherence to the JSON specification, which is the default behavior.">Obtém o comportamento personalizado a ser usado ao ler dados JSON usando o struct <see cref="T:System.Text.Json.Utf8JsonReader" />, que pode desviar da especificação de JSON estrita, que é o comportamento padrão.</summary>
      <returns vsli:raw="The custom behavior to use when reading JSON data.">O comportamento personalizado a ser usado ao ler dados JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary vsli:raw="Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.">Fornece funcionalidade para serializar objetos ou tipos de valor para JSON e para desserializar JSON em objetos ou tipos de valor.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.">Analisa o texto codificado em UTF-8 que representa um único valor JSON em uma instância de um tipo especificado.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">O texto JSON a ser analisado.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">O tipo do objeto a ser convertido e retornado.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opções para controlar o comportamento durante a análise.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">O JSON é inválido.

- ou -

<typeparamref name="returnType" /> não é compatível com o JSON.

- ou -

Há dados restantes no intervalo além de um único valor JSON.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="returnType" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Uma representação <paramref name="returnType" /> do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of a specified type.">Analisa o texto que representa um único valor JSON em uma instância de um tipo especificado.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">O texto JSON a ser analisado.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">O tipo do objeto a ser convertido e retornado.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opções para controlar o comportamento durante a análise.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> ou <paramref name="returnType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">O JSON é inválido.
          
- ou -

<typeparamref name="TValue" /> não é compatível com o JSON.

- ou -

Há dados restantes na cadeia de caracteres além de um único valor JSON.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="returnType" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Uma representação <paramref name="returnType" /> do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.">Lê um valor JSON (incluindo objetos ou matrizes) do leitor fornecido e o converte em uma instância de um tipo especificado.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">O leitor do qual o JSON é lido.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">O tipo do objeto a ser convertido e retornado.</param>
      <param name="options" vsli:raw="Options to control the serializer behavior during reading.">Opções para controlar o comportamento do serializador durante a leitura.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;returnType&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">O JSON é inválido.
          
- ou -

<typeparamref name="returnType" /> não é compatível com o JSON.

- ou -

Não foi possível ler um valor do leitor.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is using unsupported options.">
        <paramref name="reader" /> está usando opções incompatíveis.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="returnType" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Uma representação <paramref name="returnType" /> do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analisa o texto codificado em UTF-8 que representa um único valor JSON em uma instância do tipo especificado por um parâmetro de tipo genérico.</summary>
      <param name="utf8Json" vsli:raw="The JSON text to parse.">O texto JSON a ser analisado.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opções para controlar o comportamento durante a análise.</param>
      <typeparam name="TValue" vsli:raw="The target type of the UTF-8 encoded text.">O tipo de destino do texto codificado UTF-8.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the span beyond a single JSON value.">O JSON é inválido.

- ou -

<typeparamref name="TValue" /> não é compatível com o JSON.

- ou -

Há dados restantes no intervalo além de um único valor JSON.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <typeparamref name="TValue" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Uma representação <typeparamref name="TValue" /> do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.">Analisa o texto que representa um único valor JSON em uma instância do tipo especificado por um parâmetro de tipo genérico.</summary>
      <param name="json" vsli:raw="The JSON text to parse.">O texto JSON a ser analisado.</param>
      <param name="options" vsli:raw="Options to control the behavior during parsing.">Opções para controlar o comportamento durante a análise.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">O tipo de destino do valor JSON.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="json" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the string beyond a single JSON value.">O JSON é inválido.

- ou -

<typeparamref name="TValue" /> não é compatível com o JSON.

- ou -

Há dados restantes na cadeia de caracteres além de um único valor JSON.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <typeparamref name="TValue" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Uma representação <typeparamref name="TValue" /> do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.">Lê um valor JSON (incluindo objetos ou matrizes) do leitor fornecido dentro de uma instância do tipo especificado por um parâmetro de tipo genérico.</summary>
      <param name="reader" vsli:raw="The reader to read the JSON from.">O leitor do qual o JSON é lido.</param>
      <param name="options" vsli:raw="Options to control serializer behavior during reading.">Opções para controlar o comportamento do serializador durante a leitura.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">O tipo de destino do valor JSON.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;A value could not be read from the reader.">O JSON é inválido.

- ou -

<typeparamref name="TValue" /> não é compatível com o JSON.

- ou -

Não foi possível ler um valor do leitor.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; uses unsupported options.">
        <paramref name="reader" /> usa opções não compatíveis.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <typeparamref name="TValue" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Uma representação <typeparamref name="TValue" /> do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type. The stream will be read to completion.">Lê de forma assíncrona o texto codificado em UTF-8 que representa um único valor JSON em uma instância de um tipo especificado. O fluxo será lido até a conclusão.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Os dados JSON a serem analisados.</param>
      <param name="returnType" vsli:raw="The type of the object to convert to and return.">O tipo do objeto a ser convertido e retornado.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Opções para controlar o comportamento durante a leitura.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token that may be used to cancel the read operation.">Um token de cancelamento que pode ser usado para cancelar a operação de leitura.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;returnType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> ou <paramref name="returnType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">O JSON é inválido.

- ou -

<typeparamref name="TValue" /> não é compatível com o JSON.

- ou -

Há dados restantes no fluxo.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;returnType&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="returnType" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A &lt;paramref name=&quot;returnType&quot; /&gt; representation of the JSON value.">Uma representação <paramref name="returnType" /> do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter. The stream will be read to completion.">Lê de forma assíncrona o texto codificado em UTF-8 que representa um único valor JSON em uma instância de um tipo especificado por um parâmetro de tipo genérico. O fluxo será lido até a conclusão.</summary>
      <param name="utf8Json" vsli:raw="The JSON data to parse.">Os dados JSON a serem analisados.</param>
      <param name="options" vsli:raw="Options to control the behavior during reading.">Opções para controlar o comportamento durante a leitura.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the read operation.">Um token que pode ser usado para cancelar a operação de leitura.</param>
      <typeparam name="TValue" vsli:raw="The target type of the JSON value.">O tipo de destino do valor JSON.</typeparam>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="The JSON is invalid.&#xA;&#xA;-or-&#xA;&#xA;&lt;typeparamref name=&quot;TValue&quot; /&gt; is not compatible with the JSON.&#xA;&#xA;-or-&#xA;&#xA;There is remaining data in the stream.">O JSON é inválido.

- ou -

<typeparamref name="TValue" /> não é compatível com o JSON.

- ou -

Há dados restantes no fluxo.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <typeparamref name="TValue" /> nem para os respectivos membros serializáveis.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt;is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> é <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; representation of the JSON value.">Uma representação <typeparamref name="TValue" /> do valor JSON.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a specified type into a JSON string.">Converte o valor de um tipo especificado em uma cadeia de caracteres JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">O valor a ser convertido.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">O tipo do <paramref name="value" /> a ser convertido.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opções para controlar o comportamento de conversão.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> não é compatível com <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="inputType" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="The JSON string representation of the value.">A representação da cadeia de caracteres JSON do valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of the specified type to the provided writer.">Grava a representação JSON do tipo especificado para o gravador fornecido.</summary>
      <param name="writer" vsli:raw="The JSON writer to write to.">Um gravador JSON no qual gravar.</param>
      <param name="value" vsli:raw="The value to convert and write.">O valor a ser convertido e gravado.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">O tipo do <paramref name="value" /> a ser convertido.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opções para controlar o comportamento de serialização.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;">
        <paramref name="inputType" /> não é compatível com <paramref name="value" /></exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; or &lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> ou <paramref name="inputType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="inputType" /> nem para os respectivos membros serializáveis.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string.">Converte o valor de um tipo especificado por um parâmetro de tipo genérico em uma cadeia de caracteres JSON.</summary>
      <param name="value" vsli:raw="The value to convert.">O valor a ser convertido.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opções para controlar o comportamento de serialização.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">O tipo de valor a serializar.</typeparam>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <typeparamref name="TValue" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A JSON string representation of the value.">Uma representação de cadeia de caracteres JSON do valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes the JSON representation of a type specified by a generic type parameter to the provided writer.">Grava a representação JSON de um tipo especificado por um parâmetro de tipo genérico no gravador fornecido.</summary>
      <param name="writer" vsli:raw="A JSON writer to write to.">Um gravador JSON no qual gravar.</param>
      <param name="value" vsli:raw="The value to convert and write.">O valor a ser convertido e gravado.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opções para controlar o comportamento de serialização.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">O tipo de valor a serializar.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <typeparamref name="TValue" /> nem para os respectivos membros serializáveis.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.">Converte de forma assíncrona o valor de um tipo especificado para texto JSON codificado em UTF-8 e o grava no fluxo especificado.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">O fluxo UTF-8 para gravação.</param>
      <param name="value" vsli:raw="The value to convert.">O valor a ser convertido.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">O tipo do <paramref name="value" /> a ser convertido.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opções para controlar o comportamento de serialização.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Um token que pode ser usado para cancelar a operação de gravação.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> não é compatível com <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; or &lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> ou <paramref name="inputType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="inputType" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Uma tarefa que representa a operação de gravação assíncrona.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.">De maneira assíncrona, converte um valor de um tipo especificado por um parâmetro de tipo genérico para texto JSON codificado em UTF-8 e o grava em um fluxo.</summary>
      <param name="utf8Json" vsli:raw="The UTF-8 stream to write to.">O fluxo UTF-8 para gravação.</param>
      <param name="value" vsli:raw="The value to convert.">O valor a ser convertido.</param>
      <param name="options" vsli:raw="Options to control serialization behavior.">Opções para controlar o comportamento de serialização.</param>
      <param name="cancellationToken" vsli:raw="A token that may be used to cancel the write operation.">Um token que pode ser usado para cancelar a operação de gravação.</param>
      <typeparam name="TValue" vsli:raw="The type of the value to serialize.">O tipo de valor a serializar.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <typeparamref name="TValue" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A task that represents the asynchronous write operation.">Uma tarefa que representa a operação de gravação assíncrona.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.">Converte um valor do tipo especificado em uma cadeia de caracteres JSON codificada como UTF-8 bytes.</summary>
      <param name="value" vsli:raw="The value to convert.">O valor a ser convertido.</param>
      <param name="inputType" vsli:raw="The type of the &lt;paramref name=&quot;value&quot; /&gt; to convert.">O tipo do <paramref name="value" /> a ser convertido.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opções para controlar o comportamento de conversão.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is not compatible with &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="inputType" /> não é compatível com <paramref name="value" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;inputType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;inputType&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="inputType" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Uma representação da cadeia de caracteres JSON do valor codificada como bytes UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.">Converte o valor de um tipo especificado por um parâmetro de tipo genérico em uma cadeia de caracteres JSON codificada em bytes UTF-8.</summary>
      <param name="value" vsli:raw="The value to convert.">O valor a ser convertido.</param>
      <param name="options" vsli:raw="Options to control the conversion behavior.">Opções para controlar o comportamento de conversão.</param>
      <typeparam name="TValue" vsli:raw="The type of the value.">O tipo do valor.</typeparam>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;typeparamref name=&quot;TValue&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <typeparamref name="TValue" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="A JSON string representation of the value, encoded as UTF-8 bytes.">Uma representação da cadeia de caracteres JSON do valor codificada como bytes UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerDefaults">
      <summary vsli:raw="Specifies scenario-based default serialization options that can be used to construct a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance.">Especifica quais opções padrão são usadas pelo <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.General">
      <summary vsli:raw="&lt;para&gt;General-purpose option values. These are the same settings that are applied if a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt; member isn't specified.&lt;/para&gt;&lt;para&gt;For information about the default property values that are applied, see JsonSerializerOptions properties.&lt;/para&gt;">Especifica que os valores de finalidade geral devem ser usados. Essas são as mesmas configurações aplicadas caso um <see cref="T:System.Text.Json.JsonSerializerDefaults" /> não seja especificado.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
      <summary vsli:raw="&lt;para&gt;Option values appropriate to Web-based scenarios.&lt;/para&gt;&lt;para&gt;This member implies that:&lt;/para&gt;&lt;para&gt;- Property names are treated as case-insensitive.&lt;/para&gt;&lt;para&gt;- &quot;camelCase&quot; name formatting should be employed.&lt;/para&gt;&lt;para&gt;- Quoted numbers (JSON strings for number properties) are allowed.&lt;/para&gt;">Especifica que os valores devem ser usados mais apropriadamente para cenários baseados na Web.</summary>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary vsli:raw="Provides options to be used with &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt;.">Fornece opções a serem usadas com <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.JsonSerializerOptions" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance with a predefined set of options determined by the specified &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt;.">Constrói uma instância <see cref="T:System.Text.Json.JsonSerializerOptions" /> com um conjunto predefinido de opções determinado pelo <see cref="T:System.Text.Json.JsonSerializerDefaults" /> especificado.</summary>
      <param name="defaults" vsli:raw="The &lt;see cref=&quot;T:System.Text.Json.JsonSerializerDefaults&quot; /&gt; to reason about.">O <see cref="T:System.Text.Json.JsonSerializerDefaults" /> para entender.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Copies the options from a &lt;see cref=&quot;T:System.Text.Json.JsonSerializerOptions&quot; /&gt; instance to a new instance.">Copia as opções de uma instância <see cref="T:System.Text.Json.JsonSerializerOptions" /> para uma nova instância.</summary>
      <param name="options" vsli:raw="The options instance to copy options from.">A instância de opções da qual as opções devem ser copiadas.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary vsli:raw="Returns the converter for the specified type.">Retorna o conversor para o tipo especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type to return a converter for.">O tipo para o qual retornar um conversor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The configured &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;typeToConvert&quot; /&gt; returned an invalid converter.">O <see cref="System.Text.Json.Serialization.JsonConverter" /> configurado para <paramref name="typeToConvert" /> retornou um conversor inválido.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="There is no compatible &lt;see cref=&quot;System.Text.Json.Serialization.JsonConverter&quot; /&gt; for &lt;paramref name=&quot;typeToConvert&quot; /&gt; or its serializable members.">Não há nenhum <see cref="System.Text.Json.Serialization.JsonConverter" /> compatível para <paramref name="typeToConvert" /> nem para os respectivos membros serializáveis.</exception>
      <returns vsli:raw="The first converter that supports the given type.">O primeiro conversor que dá suporte ao tipo fornecido ou, se não houver um conversor, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary vsli:raw="Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.">Obtém ou define um valor que indica se uma vírgula extra é permitida (e ignorada) no final de uma lista de valores JSON em um objeto ou uma matriz no conteúdo JSON que está sendo desserializado.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propriedade foi definida após a serialização ou desserialização.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> se uma vírgula extra no final de uma lista de valores JSON em um objeto ou matriz for permitida (e ignorada); <see langword="false" /> caso contrário.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary vsli:raw="Gets the list of user-defined converters that were registered.">Obtém a lista de conversores definidos pelo usuário que foram registrados.</summary>
      <returns vsli:raw="The list of custom converters.">A lista de conversores personalizados.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary vsli:raw="Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.">Obtém ou define o tamanho do buffer padrão, em bytes, a ser usado ao criar buffers temporários.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer size is less than 1.">O tamanho do buffer é menor que 1.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propriedade foi definida após a serialização ou desserialização.</exception>
      <returns vsli:raw="The default buffer size in bytes.">O tamanho do buffer padrão em bytes.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
      <summary vsli:raw="Gets or sets a value that determines when properties with default values are ignored during serialization or deserialization.&#xA; The default value is &lt;see cref=&quot;F:System.Text.Json.Serialization.JsonIgnoreCondition.Never&quot; /&gt;.">Especifica uma condição para determinar quando as propriedades com valores padrão são ignoradas durante a serialização ou desserialização.
O valor padrão é <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="This property is set to &lt;see cref=&quot;F:System.Text.Json.Serialization.JsonIgnoreCondition.Always&quot; /&gt;.">Essa propriedade é definida como <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues&quot; /&gt; has been set to &lt;see langword=&quot;true&quot; /&gt;. These properties cannot be used together.">Essa propriedade é definida após a serialização ou a desserialização ter ocorrido.

- ou -

<see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> foi definido como <see langword="true" />. Essas propriedades não podem ser usadas juntas.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary vsli:raw="Gets or sets the policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format, such as camel-casing.">Obtém ou define a política usada para converter o nome de uma chave <see cref="T:System.Collections.IDictionary" /> em outro formato, como minúsculas concatenadas.</summary>
      <returns vsli:raw="The policy used to convert a &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; key's name to another format.">A política usada para converter o <see cref="T:System.Collections.IDictionary" /> nome de uma chave em outro formato.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Obtém ou define o codificador a ser usado ao escapar cadeias de caracteres ou <see langword="null" /> para usar o codificador padrão.</summary>
      <returns vsli:raw="The JavaScript character encoding.">A codificação de caracteres JavaScript.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary vsli:raw="Gets or sets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; values are ignored during serialization and deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtém ou define um valor que determina se os valores de <see langword="null" /> são ignorados durante a serialização e desserialização. O valor padrão é <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.&#xA;&#xA;-or-&#xA;&#xA;&lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition&quot; /&gt; has been set to a non-default value. These properties cannot be used together.">Esta propriedade foi definida após a serialização ou desserialização.

- ou -

<see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> foi definida com um valor não padrão. Essas propriedades não podem ser usadas juntas.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if null values are ignored during serialization and deserialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para ignorar valores nulos durante a serialização e desserialização; caso contrário, consulte langword = "false"/ &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
      <summary vsli:raw="Gets or sets a value that indicates whether read-only fields are ignored during serialization. A field is read-only if it is marked with the &lt;see langword=&quot;readonly&quot; /&gt; keyword. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Determina se os campos somente leitura são ignorados durante a serialização. Uma propriedade será somente leitura se não estiver marcada com a palavra-chave <see langword="readonly" />. O valor padrão é <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Essa propriedade é definida após a serialização ou a desserialização ter ocorrido.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only fields are ignored during serialization; &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" /> Se os campos somente leitura devem ser ignorados durante a serialização; <see langword="false" /> caso contrário.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary vsli:raw="Gets a value that indicates whether read-only properties are ignored during serialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtém um valor que determina se as propriedades somente leitura são ignoradas durante a serialização. O valor padrão é <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propriedade foi definida após a serialização ou desserialização.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if read-only properties are ignored during serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para ignorar propriedades somente leitura durante a serialização; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
      <summary vsli:raw="Gets or sets a value that indicates whether fields are handled during serialization and deserialization.&#xA;            The default value is &lt;see langword=&quot;false&quot; /&gt;.">Determina se os campos são manipulados com serialização e desserialização.
O valor padrão é <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Essa propriedade é definida após a serialização ou a desserialização ter ocorrido.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary vsli:raw="Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.">Obtém ou define a profundidade máxima permitida ao serializar ou desserializar JSON, com o valor padrão de 0, indicando uma profundidade máxima de 64.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propriedade foi definida após a serialização ou desserialização.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The max depth is set to a negative value.">A profundidade máxima está definida como um valor negativo.</exception>
      <returns vsli:raw="The maximum depth allowed when serializing or deserializing JSON.">A profundidade máxima permitida ao serializar ou desserializar JSON.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
      <summary vsli:raw="Gets or sets an object that specifies how number types should be handled when serializing or deserializing.">Especifica como os tipos de números devem ser manipulados ao serializar ou desserializar.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property is set after serialization or deserialization has occurred.">Essa propriedade é definida após a serialização ou a desserialização ter ocorrido.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary vsli:raw="Gets or sets a value that indicates whether a property's name uses a case-insensitive comparison during deserialization. The default value is &lt;see langword=&quot;false&quot; /&gt;.">Obtém ou define um valor que determina se o nome de uma propriedade usa uma comparação que não diferencia maiúsculas de minúsculas durante a desserialização. O valor padrão é <see langword="false" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if property names are compared case-insensitively; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para comparar nomes de propriedade usando a comparação que não diferencia maiúsculas de minúsculas; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary vsli:raw="Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Obtém ou define um valor que especifica a política usada para converter o nome de uma propriedade em um objeto em outro formato, como minúsculas e maiúsculas concatenadas, ou <see langword="null" /> para manter os nomes de propriedade inalterados.</summary>
      <returns vsli:raw="A property naming policy, or &lt;see langword=&quot;null&quot; /&gt; to leave property names unchanged.">Uma política de nomenclatura de propriedade ou <see langword="null" /> para deixar os nomes de propriedade inalterados.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary vsli:raw="Gets or sets a value that defines how comments are handled during deserialization.">Obtém ou define um valor que define como os comentários são tratados durante a desserialização.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propriedade foi definida após a serialização ou desserialização.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The comment handling enum is set to a value that is not supported (or not within the &lt;see cref=&quot;T:System.Text.Json.JsonCommentHandling&quot; /&gt; enum range).">A enumeração de manipulação de comentário é definida como um valor não compatível (ou que não está dentro do intervalo de enumeração <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
      <returns vsli:raw="A value that indicates whether comments are allowed, disallowed, or skipped.">Um valor que indica se os comentários são permitidos, não permitidos ou ignorados.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
      <summary vsli:raw="Gets or sets an object that specifies how object references are handled when reading and writing JSON.">Configura o modo como as referências de objeto são tratadas durante a leitura e a gravação do JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary vsli:raw="Gets or sets a value that indicates whether JSON should use pretty printing. By default, JSON is serialized without any extra white space.">Obtém ou define um valor que define se JSON deve usar reformatação automática. Por padrão, JSON é serializado sem nenhum espaço em branco extra.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This property was set after serialization or deserialization has occurred.">Esta propriedade foi definida após a serialização ou desserialização.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if JSON is pretty printed on serialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se JSON deve ser bastante impresso na serialização; caso contrário, <see langword="false" /> . O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary vsli:raw="Defines the various JSON tokens that make up a JSON text.">Define os vários tokens JSON que compõem um texto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary vsli:raw="The token type is a comment string.">O tipo de token é uma cadeia de caracteres de comentário.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary vsli:raw="The token type is the end of a JSON array.">O tipo de token é o fim de uma matriz JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary vsli:raw="The token type is the end of a JSON object.">O tipo de token é o fim de um objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary vsli:raw="The token type is the JSON literal false.">O tipo de token é o literal JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;). This is the default token type if no data has been read by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Não há nenhum valor (diferente de <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary vsli:raw="The token type is the JSON literal null.">O tipo de token é o literal JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary vsli:raw="The token type is a JSON number.">O tipo de token é um número JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary vsli:raw="The token type is a JSON property name.">O tipo de token é um nome de propriedade JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary vsli:raw="The token type is the start of a JSON array.">O tipo de token é o início de uma matriz JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary vsli:raw="The token type is the start of a JSON object.">O tipo de token é o início de um objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary vsli:raw="The token type is a JSON string.">O tipo de token é uma cadeia de caracteres JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary vsli:raw="The token type is the JSON literal true.">O tipo de token é o literal JSON true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary vsli:raw="Specifies the data type of a JSON value.">Especifica o tipo de dados de um valor JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary vsli:raw="A JSON array.">Uma matriz JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary vsli:raw="The JSON value false.">O valor JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary vsli:raw="The JSON value null.">O valor JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary vsli:raw="A JSON number.">Um número JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary vsli:raw="A JSON object.">Um objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary vsli:raw="A JSON string.">Uma cadeia de caracteres JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary vsli:raw="The JSON value true.">O valor JSON true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary vsli:raw="There is no value (as distinct from &lt;see cref=&quot;F:System.Text.Json.JsonValueKind.Null&quot; /&gt;).">Não há nenhum valor (diferente de <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary vsli:raw="Allows the user to define custom behavior when writing JSON using the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;.">Permite que o usuário defina o comportamento personalizado ao gravar JSON usando o <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary vsli:raw="Gets or sets the encoder to use when escaping strings, or &lt;see langword=&quot;null&quot; /&gt; to use the default encoder.">Obtém ou define o codificador a ser usado ao escapar cadeias de caracteres ou <see langword="null" /> para usar o codificador padrão.</summary>
      <returns vsli:raw="The JavaScript character encoder used to override the escaping behavior.">O codificador de caracteres JavaScript usado para substituir o comportamento de escape.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should format the JSON output, which includes indenting nested JSON tokens, adding new lines, and adding white space between property names and values.">Obtém ou define um valor que indica se o <see cref="T:System.Text.Json.Utf8JsonWriter" /> deve formatar a saída JSON, o que inclui o recuo dos tokens JSON aninhados, a adição de novas linhas e a adição de espaço em branco entre os nomes e valores de propriedade.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON output is formatted; &lt;see langword=&quot;false&quot; /&gt; if the JSON is written without any extra white space. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para formatar a saída JSON; <see langword="false" /> para gravar sem nenhum espaço em branco extra. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; should skip structural validation and allow the user to write invalid JSON.">Obtém ou define um valor que indica se o <see cref="T:System.Text.Json.Utf8JsonWriter" /> deve ignorar a validação estrutural e permitir que o usuário grave um JSON inválido.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if structural validation is skipped and invalid JSON is allowed; &lt;see langword=&quot;false&quot; /&gt; if an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown on any attempt to write invalid JSON.">
        <see langword="true" /> para ignorar a validação estrutural e permitir JSON inválido; <see langword="false" /> para gerar um <see cref="T:System.InvalidOperationException" /> em qualquer tentativa de gravação de JSON inválido.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary vsli:raw="Provides the base class for serialization attributes.">Fornece a classe base para atributos de serialização.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonAttribute&quot; /&gt;.">Cria uma nova instância do <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
      <summary vsli:raw="When placed on a constructor, indicates that the constructor should be used to create instances of the type on deserialization.">Quando colocada em um construtor, indica que o construtor deve ser usado para criar instâncias do tipo na desserialização.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConstructorAttribute&quot; /&gt;.">Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary vsli:raw="Converts an object or value to or from JSON.">Converte um objeto ou valor de/para JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary vsli:raw="When overridden in a derived class, determines whether the converter instance can convert the specified object type.">Quando substituído em uma classe derivada, determina se a instância do conversor pode converter o tipo de objeto especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type of the object to check whether it can be converted by this converter instance.">O tipo de objeto a verificar se pode ser convertido por esta instância do conversor.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance can convert the specified object type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a instância puder converter o tipo de objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary vsli:raw="Converts an object or value to or from JSON.">Converte um objeto ou valor de/para JSON.</summary>
      <typeparam name="T" vsli:raw="The type of object or value handled by the converter.">O tipo de objeto ou valor manipulado pelo conversor.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter`1&quot; /&gt; instance.">Inicializa uma nova instância <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted.">Determina se é possível converter o tipo especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type to compare against.">O tipo com o qual comparar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o tipo puder ser convertido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Reads and converts the JSON to type &lt;typeparamref name=&quot;T&quot; /&gt;.">Lê e converte o JSON para o tipo <typeparamref name="T" />.</summary>
      <param name="reader" vsli:raw="The reader.">O leitor.</param>
      <param name="typeToConvert" vsli:raw="The type to convert.">O tipo a ser convertido.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Um objeto que especifica as opções de serialização a serem usadas.</param>
      <returns vsli:raw="The converted value.">O valor convertido.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Writes a specified value as JSON.">Grava um valor especificado como JSON.</summary>
      <param name="writer" vsli:raw="The writer to write to.">O gravador no qual gravar.</param>
      <param name="value" vsli:raw="The value to convert to JSON.">O valor a ser convertido para JSON.</param>
      <param name="options" vsli:raw="An object that specifies serialization options to use.">Um objeto que especifica as opções de serialização a serem usadas.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
      <summary vsli:raw="Gets a value that indicates whether &lt;see langword=&quot;null&quot; /&gt; should be passed to the converter on serialization, and whether &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt; should be passed on deserialization.">Indica se <see langword="null" /> deve ser passado para o conversor na serialização e se <see cref="F:System.Text.Json.JsonTokenType.Null" /> deve ser passado na desserialização.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary vsli:raw="When placed on a property or type, specifies the converter type to use.">Quando colocado em uma propriedade ou tipo, especifica o tipo de conversor a ser usado.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;.">Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt; with the specified converter type.">Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> com o tipo de conversor especificado.</summary>
      <param name="converterType" vsli:raw="The type of the converter.">O tipo do conversor.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary vsli:raw="When overridden in a derived class and &lt;see cref=&quot;P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, allows the derived class to create a &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverter&quot; /&gt; in order to pass additional state.">Quando substituído em uma classe derivada e <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> é <see langword="null" />, permite que a classe derivada crie um <see cref="T:System.Text.Json.Serialization.JsonConverter" /> para passar o estado adicional.</summary>
      <param name="typeToConvert" vsli:raw="The type of the converter.">O tipo do conversor.</param>
      <returns vsli:raw="The custom converter.">O conversor personalizado.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary vsli:raw="Gets the type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">Obtém o tipo do <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />, ou <see langword="null" /> se ele foi criado sem um tipo.</summary>
      <returns vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterAttribute&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if it was created without a type.">O tipo de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> , ou <see langword="null" /> se foi criado sem um tipo.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary vsli:raw="Supports converting several types by using a factory pattern.">É compatível com a conversão de vários tipos usando um padrão de fábrica.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary vsli:raw="When overridden in a derived class, initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonConverterFactory&quot; /&gt; class.">Quando substituído em uma classe derivada, inicializa uma nova instância da classe <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for a specified type.">Cria um conversor para um tipo especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">O tipo tratado pelo conversor.</param>
      <param name="options" vsli:raw="The serialization options to use.">As opções de serialização a serem usadas.</param>
      <returns vsli:raw="A converter for which &lt;typeparamref name=&quot;T&quot; /&gt; is compatible with &lt;paramref name=&quot;typeToConvert&quot; /&gt;.">Um conversor em que <typeparamref name="T" /> é compatível com <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary vsli:raw="When placed on a property of type &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.">Quando colocadas em uma propriedade do tipo <see cref="T:System.Collections.Generic.IDictionary`2" />, todas as propriedades que não têm um membro correspondente são adicionadas a esse dicionário durante a desserialização e gravadas durante a serialização.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonExtensionDataAttribute&quot; /&gt; class.">Cria uma nova instância da classe <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary vsli:raw="Prevents a property from being serialized or deserialized.">Impede que uma propriedade seja serializada ou desserializada.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt;.">Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
      <summary vsli:raw="Gets or sets the condition that must be met before a property will be ignored.">Especifica a condição que deve ser atendida antes que uma propriedade seja ignorada.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
      <summary vsli:raw="Controls how the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIgnoreAttribute&quot; /&gt; ignores properties on serialization and deserialization.">Controla como o <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> ignora propriedades na serialização e desserialização.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
      <summary vsli:raw="Property is always ignored.">A propriedade sempre será ignorada.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
      <summary vsli:raw="Property is always serialized and deserialized, regardless of &lt;see cref=&quot;P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues&quot; /&gt; configuration.">A propriedade sempre será serializada e desserializada, independentemente da configuração de <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
      <summary vsli:raw="Property is ignored only if it equals the default value for its type.">A propriedade só será ignorada se for <see langword="null" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
      <summary vsli:raw="Property is ignored if its value is &lt;see langword=&quot;null&quot; /&gt;. This is applied only to reference-type properties and fields.">Se o valor for <see langword="null" />, a propriedade será ignorada durante a serialização. Isso é aplicado somente aos campos e às propriedades do tipo de referência.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
      <summary vsli:raw="Indicates that the member should be included for serialization and deserialization.">Indica que o membro deve ser incluído para serialização e desserialização.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The attribute is applied to a non-public property.">O atributo é aplicado a uma propriedade não pública.</exception>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonIncludeAttribute&quot; /&gt;.">Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
      <summary vsli:raw="Determines how &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; handles numbers when serializing and deserializing.">Determina como <see cref="T:System.Text.Json.JsonSerializer" /> lida com números ao serializar e desserializar.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
      <summary vsli:raw="The &quot;NaN&quot;, &quot;Infinity&quot;, and &quot;-Infinity&quot; &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; tokens can be read as floating-point constants, and the &lt;see cref=&quot;T:System.Single&quot; /&gt; and &lt;see cref=&quot;T:System.Double&quot; /&gt; values for these constants will be written as their corresponding JSON string representations.">Os tokens <see cref="F:System.Text.Json.JsonTokenType.String" /> "NaN", "Infinity" e "-Infinity" podem ser lidos como constantes de ponto flutuante, e os valores de <see cref="T:System.Single" /> e <see cref="T:System.Double" /> para essas constantes serão gravados como suas representações de cadeia de caracteres JSON correspondentes.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
      <summary vsli:raw="Numbers can be read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; tokens. Does not prevent numbers from being read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt; token.">Os números podem ser lidos de tokens <see cref="F:System.Text.Json.JsonTokenType.String" />. Não impede que os números sejam lidos do token <see cref="F:System.Text.Json.JsonTokenType.Number" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
      <summary vsli:raw="Numbers will only be read from &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt; tokens and will only be written as JSON numbers (without quotes).">Os números só serão lidos de tokens <see cref="F:System.Text.Json.JsonTokenType.Number" /> e serão gravados apenas como números JSON (sem aspas).</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
      <summary vsli:raw="Numbers will be written as JSON strings (with quotes), not as JSON numbers.">Os números serão gravados como cadeias de caracteres JSON (com aspas), não como números JSON.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
      <summary vsli:raw="When placed on a type, property, or field, indicates what &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonNumberHandling&quot; /&gt; settings should be used when serializing or deserializing numbers.">Quando colocado em um tipo, propriedade ou campo, indica quais configurações <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> devem ser usadas ao serializar ou desserializar números.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonNumberHandlingAttribute&quot; /&gt;.">Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" />.</summary>
      <param name="handling" vsli:raw="A bitwise combination of the enumeration values that specify how number types should be handled when serializing or deserializing.">Uma combinação de bit a bit dos valores de enumeração que especificam como os tipos de números devem ser tratados na serialização ou desserialização.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
      <summary vsli:raw="Indicates what settings should be used when serializing or deserializing numbers.">Indica quais configurações devem ser usadas ao serializar ou desserializar números.</summary>
      <returns vsli:raw="An object that determines the number serialization and deserialization settings.">Um objeto que determina as configurações de serialização e desserialização de número.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary vsli:raw="Specifies the property name that is present in the JSON when serializing and deserializing. This overrides any naming policy specified by &lt;see cref=&quot;T:System.Text.Json.JsonNamingPolicy&quot; /&gt;.">Especifica o nome da propriedade que está presente no JSON ao serializar e desserializar. Isso substitui qualquer política de nomenclatura especificada por <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonPropertyNameAttribute&quot; /&gt; with the specified property name.">Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> com o nome de propriedade especificado.</summary>
      <param name="name" vsli:raw="The name of the property.">O nome da propriedade.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the name of the property.">Obtém o nome da propriedade.</summary>
      <returns vsli:raw="The name of the property.">O nome da propriedade.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary vsli:raw="Converts enumeration values to and from strings.">Converte valores de enumeração de/para cadeias de caracteres.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with the default naming policy that allows integer values.">Inicializa uma instância da classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> com a política de nomenclatura padrão que permite valores inteiros.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary vsli:raw="Initializes an instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.JsonStringEnumConverter&quot; /&gt; class with a specified naming policy and a value that indicates whether undefined enumeration values are allowed.">Inicializa uma instância da classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> com uma política de nomenclatura especificada e um valor que indica se são permitidos valores de enumeração indefinidos.</summary>
      <param name="namingPolicy" vsli:raw="The optional naming policy for writing enum values.">A política de nomenclatura opcional para gravar valores de enumeração.</param>
      <param name="allowIntegerValues" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow undefined enum values; otherwise, &lt;see langword=&quot;false&quot; /&gt;. When &lt;see langword=&quot;true&quot; /&gt;, if an enum value isn't defined, it will output as a number rather than a string.">
        <see langword="true" /> para permitir valores de enumeração indefinidos; caso contrário, <see langword="false" />. Quando <see langword="true" />, se não for definido um valor de enumeração, será retornado como saída um número em vez de uma cadeia de caracteres.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary vsli:raw="Determines whether the specified type can be converted to an enum.">Determina se é possível converter o tipo especificado para uma enumeração.</summary>
      <param name="typeToConvert" vsli:raw="The type to be checked.">O tipo a ser verificado.</param>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if the type can be converted; otherwise, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt;.">
        <see langword="true" /> se o tipo puder ser convertido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary vsli:raw="Creates a converter for the specified type.">Cria um conversor para o tipo especificado.</summary>
      <param name="typeToConvert" vsli:raw="The type handled by the converter.">O tipo tratado pelo conversor.</param>
      <param name="options" vsli:raw="The serialization options to use.">As opções de serialização a serem usadas.</param>
      <returns vsli:raw="A converter for which &lt;code data-dev-comment-type=&quot;typeparamref&quot;&gt;T&lt;/code&gt; is compatible with &lt;code data-dev-comment-type=&quot;paramref&quot;&gt;typeToConvert&lt;/code&gt;.">Um conversor em que <typeparamref name="T" /> é compatível com <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.">Essa classe define como o <see cref="T:System.Text.Json.JsonSerializer" /> lida com referências na serialização e desserialização.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceHandler&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.Serialization.ReferenceHandler" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; used for each serialization call.">Retorna o <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> usado para cada chamada de serialização.</summary>
      <returns vsli:raw="The resolver to use for serialization and deserialization.">O resolvedor a ser usado para serialização e desserialização.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
      <summary vsli:raw="Gets an object that indicates whether metadata properties are honored when JSON objects and arrays are deserialized into reference types, and written when reference types are serialized. This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.">Propriedades de metadados serão respeitadas ao desserializar objetos JSON e matrizes em tipos de referência e gravadas ao serializar tipos de referência. Isso é necessário para criar JSON de ida e volta de objetos que contêm ciclos ou referências duplicadas.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.">Essa classe define como o <see cref="T:System.Text.Json.JsonSerializer" /> lida com referências na serialização e desserialização.</summary>
      <typeparam name="T" vsli:raw="The type of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; to create on each serialization or deserialization call.">O tipo do a <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> ser criado em cada chamada de serialização ou desserialização.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceHandler`1&quot; /&gt; generic class that can create a &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; instance of the specified type.">Inicializa uma nova instância da classe genérica <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" /> que pode criar uma instância de <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> do especificado <typeparam name="T" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; of type &lt;typeparamref name=&quot;T&quot; /&gt; used for each serialization call.">Cria um <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> do tipo <typeparamref name="T" /> usado para cada chamada de serialização.</summary>
      <returns vsli:raw="The new resolver to use for serialization and deserialization.">O novo resolvedor a ser usado para serialização e desserialização.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceResolver">
      <summary vsli:raw="Defines how the &lt;see cref=&quot;T:System.Text.Json.JsonSerializer&quot; /&gt; deals with references on serialization and deserialization.&#xA; Defines the core behavior of preserving references on serialization and deserialization.">Essa classe define como o <see cref="T:System.Text.Json.JsonSerializer" /> lida com referências na serialização e desserialização.
Define o comportamento principal de preservar referências na serialização e desserialização.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Serialization.ReferenceResolver&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
      <summary vsli:raw="Adds an entry to the bag of references using the specified id and value.&#xA; This method gets called when an $id metadata property from a JSON object is read.">Adiciona uma entrada ao recipiente de referências usando a ID e o valor especificados.
Este método é chamado quando uma propriedade de metadados $id de um objeto JSON é lida.</summary>
      <param name="referenceId" vsli:raw="The identifier of the JSON object or array.">O identificador do objeto ou da matriz JSON.</param>
      <param name="value" vsli:raw="The value of the CLR reference type object that results from parsing the JSON object.">O valor do objeto do tipo de referência CLR que resulta da análise do objeto JSON.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
      <summary vsli:raw="Gets the reference identifier of the specified value if exists; otherwise a new id is assigned.&#xA; This method gets called before a CLR object is written so we can decide whether to write $id and enumerate the rest of its properties or $ref and step into the next object.">Obtém o identificador de referência do valor especificado, se existir; caso contrário, uma nova ID será atribuída.
Este método é chamado antes de um objeto CLR ser escrito para que possamos decidir se é preciso gravar $id e enumerar o restante de suas propriedades ou $ref e passar para o próximo objeto.</summary>
      <param name="value" vsli:raw="The value of the CLR reference type object to get an id for.">O valor do objeto de tipo de referência CLR para o qual obter uma ID.</param>
      <param name="alreadyExists" vsli:raw="When this method returns, &lt;see langword=&quot;true&quot; /&gt; if a reference to value already exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Quando este método é retornado, <see langword="true" /> se uma referência ao valor já existe; caso contrário, <see langword="false" />.</param>
      <returns vsli:raw="The reference id for the specified object.">A ID de referência para o objeto especificado.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
      <summary vsli:raw="Returns the CLR reference type object related to the specified reference id.&#xA; This method gets called when $ref metadata property is read.">Retorna o objeto do tipo de referência CLR relacionado à ID de referência especificada. Este método é chamado quando a propriedade de metadados $ref é lida.</summary>
      <param name="referenceId" vsli:raw="The reference id related to the returned object.">A ID de referência relacionada ao objeto retornado.</param>
      <returns vsli:raw="The reference type object related to the specified reference id.">O objeto de tipo de referência relacionado à ID de referência especificada.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary vsli:raw="Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.">Fornece uma API de alto desempenho para acesso somente leitura e somente de encaminhamento ao texto JSON codificado em UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.">Inicializa uma nova instância da estrutura <see cref="T:System.Text.Json.Utf8JsonReader" /> que processa uma sequência somente leitura de texto codificado em UTF-8 e indica se a entrada contém todo o texto a ser processado.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">O texto JSON codificado em UTF-8 a ser processado.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> para indicar que a sequência de entrada contém todos os dados a serem processados; <see langword="false" /> para indicar que a extensão de entrada contém dados parciais com mais dados a serem seguidos.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Um objeto que contém o estado do leitor. Se esta for a primeira chamada para o construtor, passe o estado padrão; caso contrário, passe o valor da propriedade <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> da instância anterior de <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only sequence of UTF-8 encoded text using the specified options.">Inicializa uma nova instância da estrutura <see cref="T:System.Text.Json.Utf8JsonReader" /> que processa uma sequência somente leitura de texto codificado em UTF-8 usando as opções especificadas.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">O texto JSON codificado em UTF-8 a ser processado.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonReader" /> que é diferente do RFC do JSON (por exemplo, como manipular comentários ou a profundidade máxima permitida durante a leitura). Por padrão, o <see cref="T:System.Text.Json.Utf8JsonReader" /> segue estritamente o RFC do JSON; comentários no JSON são inválidos e a profundidade máxima é 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.">Inicializa uma nova instância da estrutura <see cref="T:System.Text.Json.Utf8JsonReader" /> que processa um intervalo somente leitura de texto codificado em UTF-8 e indica se a entrada contém todo o texto a ser processado.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">O texto JSON codificado em UTF-8 a ser processado.</param>
      <param name="isFinalBlock" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the input sequence contains the entire data to process; &lt;see langword=&quot;false&quot; /&gt; to indicate that the input span contains partial data with more data to follow.">
        <see langword="true" /> para indicar que a sequência de entrada contém todos os dados a serem processados; <see langword="false" /> para indicar que a extensão de entrada contém dados parciais com mais dados a serem seguidos.</param>
      <param name="state" vsli:raw="The reader state. If this is the first call to the constructor, pass the default state; otherwise, pass the value of the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.CurrentState&quot; /&gt; property from the previous instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Um objeto que contém o estado do leitor. Se esta for a primeira chamada para o construtor, passe o estado padrão; caso contrário, passe o valor da propriedade <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> da instância anterior de <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; structure that processes a read-only span of UTF-8 encoded text using the specified options.">Inicializa uma nova instância da estrutura <see cref="T:System.Text.Json.Utf8JsonReader" /> que processa um intervalo somente leitura de texto codificado em UTF-8 usando as opções especificadas.</summary>
      <param name="jsonData" vsli:raw="The UTF-8 encoded JSON text to process.">O texto JSON codificado em UTF-8 a ser processado.</param>
      <param name="options" vsli:raw="Options that define customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; that differs from the JSON RFC (for example, how to handle comments or maximum depth allowed when reading). By default, the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonReader" /> que é diferente do RFC do JSON (por exemplo, como manipular comentários ou a profundidade máxima permitida durante a leitura). Por padrão, o <see cref="T:System.Text.Json.Utf8JsonReader" /> segue estritamente o RFC do JSON; comentários no JSON são inválidos e a profundidade máxima é 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary vsli:raw="Reads the next JSON token value from the source as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Lê o próximo valor do token JSON da fonte como um <see cref="T:System.Boolean" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a Boolean value (that is, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;).">O valor do token JSON não é um valor booliano (ou seja, <see cref="F:System.Text.Json.JsonTokenType.True" /> ou <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.True&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.False&quot; /&gt;.">
        <see langword="true" /> se o <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> é <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> se o <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> é <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Analisa o valor do token JSON atual da fonte como um <see cref="T:System.Byte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">O formato numérico do valor do token JSON está incorreto (por exemplo, contém um valor fracionário ou está escrito em notação científica).
          
- ou -

O valor do token JSON representa um número menor que <see cref="F:System.Byte.MinValue" /> ou maior que <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns vsli:raw="The value of the UTF-8 encoded token.">O valor do token codificado em UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary vsli:raw="Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.">Analisa o valor do token JSON atual da origem e decodifica a cadeia de caracteres JSON codificada em Base64 como uma matriz de bytes.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">O tipo do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The value is not encoded as Base64 text, so it can't be decoded to bytes.&#xA;&#xA;-or-&#xA;&#xA;The value contains invalid or more than two padding characters.&#xA;&#xA;-or-&#xA;&#xA;The value is incomplete. That is, the JSON string length is not a multiple of 4.">O valor não é codificado como texto Base64; portanto, ele não pode ser decodificado em bytes.

- ou -

O valor contém caracteres de preenchimento inválidos ou mais de dois caracteres de preenchimento.

- ou -

O valor está incompleto. Ou seja, o comprimento da cadeia de caracteres JSON não é um múltiplo de 4.</exception>
      <returns vsli:raw="The byte array that represents the current JSON token value.">A matriz de bytes que representa o valor do token JSON atual.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary vsli:raw="Parses the current JSON token value from the source as a comment and transcodes it as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Analisa o valor do token JSON atual da origem como um comentário, transcodificando-o como um <see cref="T:System.String" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a comment.">O token JSON não é um comentário.</exception>
      <returns vsli:raw="The comment that represents the current JSON token value.">O comentário que representa o valor do token JSON atual.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.DateTime" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&#xA;        &#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">O valor do token JSON não pode ser lido como um <see cref="T:System.DateTime" />.
        
- ou - 
O valor inteiro do token codificado em UTF-8 não pode ser analisado como um valor <see cref="T:System.DateTime" />.

- ou -

O valor do token JSON está em um formato sem suporte.</exception>
      <returns vsli:raw="The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.">O valor de data e hora, se o valor inteiro do token codificado em UTF-8 inteiro puder ser analisado com êxito.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.DateTimeOffset" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value cannot be read as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.&#xA;&#xA;-or-&#xA;        &#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value is of an unsupported format.">O valor do token JSON não pode ser lido como um <see cref="T:System.DateTimeOffset" />.

- ou - 
O valor inteiro do token codificado em UTF-8 não pode ser analisado como um valor <see cref="T:System.DateTimeOffset" />.

- ou -

O valor do token JSON está em um formato sem suporte.</exception>
      <returns vsli:raw="The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.">O deslocamento de data e hora, se o valor inteiro do token codificado em UTF-8 puder ser analisado com êxito.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Decimal" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">O valor do token JSON representa um número menor que <see cref="F:System.Decimal.MinValue" /> ou maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Double" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">O valor do token JSON representa um número menor que <see cref="F:System.Double.MinValue" /> ou maior que <see cref="F:System.Double.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Guid&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Guid" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is in an unsupported format for a Guid.&#xA;        &#xA;-or-&#xA;&#xA;The entire UTF-8 encoded token value cannot be parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value.">O valor do token JSON está em um formato sem suporte para um GUID.
        
- ou -

O valor inteiro do token codificado em UTF-8 não pode ser analisado como um valor <see cref="T:System.Guid" />.</exception>
      <returns vsli:raw="The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.">O valor GUID, se o valor inteiro do token codificado em UTF-8 puder ser analisado com êxito.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Analisa o valor do token JSON atual da fonte como um <see cref="T:System.Int16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">O formato numérico do valor do token JSON está incorreto (por exemplo, contém um valor fracionário ou está escrito em notação científica).
          
- ou -

O valor do token JSON representa um número menor que <see cref="F:System.Int16.MinValue" /> ou maior que <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Int32" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">O valor do token JSON está no formato numérico incorreto. Por exemplo, ele contém um decimal ou é escrito em notação científica.
            
- ou -

O valor do token JSON representa um número menor que <see cref="F:System.Int32.MinValue" /> ou maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Int64" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">O valor do token JSON está no formato numérico incorreto. Por exemplo, ele contém um decimal ou é escrito em notação científica.
            
- ou -

O valor do token JSON representa um número menor que <see cref="F:System.Int64.MinValue" /> ou maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary vsli:raw="Parses the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Analisa o valor do token JSON atual da fonte como um <see cref="T:System.SByte" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">O formato numérico do valor do token JSON está incorreto (por exemplo, contém um valor fracionário ou está escrito em notação científica).
          
- ou -

O valor do token JSON representa um número menor que <see cref="F:System.SByte.MinValue" /> ou maior que <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Single" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">O valor do token JSON representa um número menor que <see cref="F:System.Single.MinValue" /> ou maior que <see cref="F:System.Single.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.Single&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary vsli:raw="Reads the next JSON token value from the source unescaped and transcodes it as a string.">Lê o próximo valor do token JSON da fonte, sem escape e transcodificado como uma cadeia de caracteres.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a string (that is, not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;, &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;, or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.">O valor do token JSON não é uma cadeia de caracteres (ou seja, não é um <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> nem <see cref="F:System.Text.Json.JsonTokenType.Null" />).

- ou -

A cadeia de caracteres JSON contém bytes de UTF-8 ou alternativas de UTF-16 inválidos.</exception>
      <returns vsli:raw="The token value parsed to a string, or &lt;see langword=&quot;null&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.TokenType&quot; /&gt; is &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Null&quot; /&gt;.">O valor do token analisado como uma cadeia de caracteres ou, se <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> for <see cref="F:System.Text.Json.JsonTokenType.Null" />, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary vsli:raw="Parses the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">Analisa o valor do token JSON atual da fonte como um <see cref="T:System.UInt16" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).&#xA;          &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">O formato numérico do valor do token JSON está incorreto (por exemplo, contém um valor fracionário ou está escrito em notação científica).
          
- ou -

O valor do token JSON representa um número menor que <see cref="F:System.UInt16.MinValue" /> ou maior que <see cref="F:System.UInt16.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.UInt32" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;&#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">O valor do token JSON está no formato numérico incorreto. Por exemplo, ele contém um decimal ou é escrito em notação científica.

- ou -

O valor do token JSON representa um número menor que <see cref="F:System.UInt32.MinValue" /> ou maior que <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary vsli:raw="Reads the next JSON token value from the source and parses it to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.UInt64" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="The JSON token value is of the incorrect numeric format. For example, it contains a decimal or is written in scientific notation.&#xA;            &#xA;-or-&#xA;&#xA;The JSON token value represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">O valor do token JSON está no formato numérico incorreto. Por exemplo, ele contém um decimal ou é escrito em notação científica.
            
- ou -

O valor do token JSON representa um número menor que <see cref="F:System.UInt64.MinValue" /> ou maior que <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns vsli:raw="The UTF-8 encoded token value parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">O valor do token codificado em UTF-8 analisado para um <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary vsli:raw="Reads the next JSON token from the input source.">Lê o próximo token JSON da fonte de entrada.</summary>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token according to the JSON RFC is encountered.&#xA;        &#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Um token JSON inválido de acordo com o RFC do JSON foi encontrado.
        
- ou -

A profundidade atual excede o limite recursivo definido pela profundidade máxima.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the token was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o token foi lido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary vsli:raw="Skips the children of the current JSON token.">Ignora os filhos do token JSON atual.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader was given partial data with more data to follow (that is, &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.IsFinalBlock&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).">O leitor recebeu dados parciais com mais dados a serem seguidos (ou seja, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> é <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;&#xA;-or-&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Foi encontrado um token JSON inválido ao ignorar, de acordo com o RFC do JSON.

- ou -

A profundidade atual excede o limite recursivo definido pela profundidade máxima.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Byte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Byte" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Byte" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem, decodifica a cadeia de caracteres JSON codificada em Base64 como uma matriz de bytes e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decoded binary representation of the Base64 text.">Quando é retornado, esse método contém a representação binária decodificada do texto Base64.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">O token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token inteiro for codificado como um texto Base64 válido e puder ser decodificado para bytes com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.DateTime" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTime.MinValue&quot; /&gt; if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.DateTime" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.DateTimeOffset" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the date and time value equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.DateTimeOffset.MinValue&quot; /&gt; if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.DateTimeOffset" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Decimal" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the decimal equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Decimal" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Double&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Double" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains a double-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Double" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Guid&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Guid" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the GUID equivalent to the current JSON string if the conversion succeeded, or &lt;see cref=&quot;P:System.Guid.Empty&quot; /&gt; if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The value of the JSON token isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt;.">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Guid" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Int16" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Int16" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Int32" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Int32" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.Int64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Int64" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Int64" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as an &lt;see cref=&quot;T:System.SByte&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.SByte" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the signed byte equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.SByte&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.SByte" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.Single&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Single" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the single-precision floating point value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to an &lt;see cref=&quot;T:System.Single&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Single" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.UInt16" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains the unsigned 16-bit integer value equivalent of the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.UInt16" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.UInt32" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 32-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.UInt32" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary vsli:raw="Tries to parse the current JSON token value from the source as a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.UInt64" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value" vsli:raw="When this method returns, contains unsigned 64-bit integer value equivalent to the current JSON number if the conversion succeeded, or 0 if the conversion failed.">Quando este método retorna, ele contém o valor analisado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token value isn't a &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.Number&quot; /&gt;.">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the entire UTF-8 encoded token value can be successfully parsed to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.UInt64" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary vsli:raw="Tries to skip the children of the current JSON token.">Tenta ignorar os filhos do token JSON atual.</summary>
      <exception cref="T:System.Text.Json.JsonException" vsli:raw="An invalid JSON token was encountered while skipping, according to the JSON RFC.&#xA;          &#xA;-or -&#xA;&#xA;The current depth exceeds the recursive limit set by the maximum depth.">Foi encontrado um token JSON inválido ao ignorar, de acordo com o RFC do JSON.
          
-ou-

A profundidade atual excede o limite recursivo definido pela profundidade máxima.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there was enough data for the children to be skipped successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se houver dados suficientes para que os filhos sejam ignorados com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compara o texto codificado em UTF-8 em um intervalo de bytes somente leitura com o valor do token JSON sem escape na origem e retorna um valor que indica se eles são correspondentes.</summary>
      <param name="utf8Text" vsli:raw="The UTF-8 encoded text to compare against.">O texto codificado em UTF-8 a ser comparado.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">O token JSON não é uma cadeia de caracteres JSON (ou seja, não é <see cref="F:System.Text.Json.JsonTokenType.String" /> nem <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token JSON na origem corresponder ao texto de pesquisa codificado em UTF-8; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compara o texto em um intervalo de caracteres somente leitura com o valor do token JSON sem escape na origem e retorna um valor que indica se eles são correspondentes.</summary>
      <param name="text" vsli:raw="The text to compare against.">O texto para comparação.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">O token JSON não é uma cadeia de caracteres JSON (ou seja, não é <see cref="F:System.Text.Json.JsonTokenType.String" /> nem <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token JSON na origem corresponder ao texto de pesquisa; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary vsli:raw="Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.">Compara o texto da cadeia de caracteres com o valor do token JSON sem escape na origem e retorna um valor que indica se eles são correspondentes.</summary>
      <param name="text" vsli:raw="The text to compare against.">O texto para comparação.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The JSON token is not a JSON string (that is, it is not &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.String&quot; /&gt; or &lt;see cref=&quot;F:System.Text.Json.JsonTokenType.PropertyName&quot; /&gt;).">O token JSON não é uma cadeia de caracteres JSON (ou seja, não é <see cref="F:System.Text.Json.JsonTokenType.String" /> nem <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the JSON token value in the source matches the lookup text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor do token JSON na origem corresponder ao texto de pesquisa; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary vsli:raw="Gets the total number of bytes consumed so far by this instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt;.">Obtém o número total de bytes consumidos até o momento por esta instância do <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns vsli:raw="The total number of bytes consumed so far.">O número total de bytes consumidos até agora.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Obtém a profundidade do token atual.</summary>
      <returns vsli:raw="The depth of the current token.">A profundidade do token atual.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; state to pass to a &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; constructor with more data.">Obtém o estado de <see cref="T:System.Text.Json.Utf8JsonReader" /> atual para ser passado para um construtor <see cref="T:System.Text.Json.Utf8JsonReader" /> com mais dados.</summary>
      <returns vsli:raw="The current reader state.">O estado atual do leitor.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary vsli:raw="Gets a value that indicates which &lt;c&gt;Value&lt;/c&gt; property to use to get the token value.">Obtém um valor que indica qual propriedade de <c>Valor</c> deve ser usada para obter o valor do token.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSequence&quot; /&gt; should be used to get the token value; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;P:System.Text.Json.Utf8JsonReader.ValueSpan&quot; /&gt; should be used instead.">
        <see langword="true" /> Se <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> deve ser usado para obter o valor do token; <see langword="false" /> se <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> deve ser usado em vez disso.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary vsli:raw="Gets a value that indicates whether all the JSON data was provided or there is more data to come.">Obtém o modo dessa instância do <see cref="T:System.Text.Json.Utf8JsonReader" /> que indica se todos os dados JSON foram fornecidos ou se há mais dados a receber.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader was constructed with the input span or sequence containing the entire JSON data to process; &lt;see langword=&quot;false&quot; /&gt; if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.">
        <see langword="true" /> Se o leitor foi construído com o span de entrada ou a sequência que contém os dados JSON inteiros a serem processados; <see langword="false" /> se o leitor foi construído com um Span ou uma sequência de entrada que pode conter dados JSON parciais com mais dados a serem seguidos.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">Obtém a <see cref="T:System.SequencePosition" /> atual dentro do ReadOnlySequence&lt;byte&gt; de entrada codificado em UTF-8 fornecido ou uma <see cref="T:System.SequencePosition" /> padrão se o struct <see cref="T:System.Text.Json.Utf8JsonReader" /> foi construído com um ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; within the provided UTF-8 encoded input ReadOnlySequence&amp;lt;byte&amp;gt; or a default &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; if the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonReader&quot; /&gt; struct was constructed with a ReadOnlySpan&amp;lt;byte&amp;gt;.">O atual <see cref="T:System.SequencePosition" /> no ReadOnlySequence byte de entrada codificada UTF-8 fornecido &lt; &gt; ou um padrão <see cref="T:System.SequencePosition" /> se o <see cref="T:System.Text.Json.Utf8JsonReader" /> struct foi construído com um &lt; byte ReadOnlySpan &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary vsli:raw="Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.">Obtém o índice em que o último token JSON processado começa (dentro do texto de entrada codificado em UTF-8 fornecido), ignorando qualquer espaço em branco.</summary>
      <returns vsli:raw="The starting index of the last processed JSON token within the given UTF-8 encoded input text.">O índice inicial do último token JSON processado dentro do texto de entrada codificado em UTF-8 fornecido.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary vsli:raw="Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.">Obtém o tipo do último token JSON processado em texto JSON codificado em UTF-8.</summary>
      <returns vsli:raw="The type of the last processed JSON token.">O tipo do último token JSON processado.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySequence&amp;lt;byte&amp;gt; slice of the input payload, only if the token is contained within multiple segments.">Obtém o valor bruto do último token processado como uma fatia de ReadOnlySequence&lt;byte&gt; do conteúdo de entrada, somente se o token estiver contido em vários segmentos.</summary>
      <returns vsli:raw="A byte read-only sequence.">Uma sequência somente leitura de byte.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary vsli:raw="Gets the raw value of the last processed token as a ReadOnlySpan&amp;lt;byte&amp;gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&amp;lt;byte&amp;gt;.">Obtém o valor bruto do último token processado como uma fatia de ReadOnlySpan&lt;byte&gt; do conteúdo de entrada, se o token couber em um único segmento ou se o leitor foi construído com um conteúdo JSON contido em um ReadOnlySpan&lt;byte&gt;.</summary>
      <returns vsli:raw="A read-only span of bytes.">Uma extensão de somente leitura de bytes.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary vsli:raw="Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.">Fornece uma API de alto desempenho para gravação somente de encaminhamento e sem cache, de texto JSON codificado em UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; to write the output to and customization options.">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> usando o <see cref="T:System.Buffers.IBufferWriter`1" /> especificado para gravar as opções de saída e de personalização.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">O destino para gravar texto JSON.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonWriter" />. Por padrão, ele grava JSON minimizado (sem espaços em branco extra) e valida que o JSON sendo gravado é estruturalmente válido de acordo com o RFC do JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; class using the specified stream to write the output to and customization options.">Inicializa uma nova instância da classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> usando o fluxo especificado para gravar as opções de saída e de personalização.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">O destino para gravar texto JSON.</param>
      <param name="options" vsli:raw="Defines the customized behavior of the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt;. By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonWriter" />. Por padrão, ele grava JSON minimizado (sem espaços em branco extra) e valida que o JSON sendo gravado é estruturalmente válido de acordo com o RFC do JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary vsli:raw="Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Confirma qualquer texto JSON restante que ainda não foi liberado e libera todos os recursos usados pela instância atual.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary vsli:raw="Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.">Confirma de maneira assíncrona qualquer texto JSON restante que ainda não foi liberado e libera todos os recursos usados pela instância atual.</summary>
      <returns vsli:raw="A task representing the asynchronous dispose operation.">Uma tarefa que representa a operação assíncrona de descarte.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary vsli:raw="Commits the JSON text written so far, which makes it visible to the output destination.">Confirma o texto JSON gravado até o momento, o que o torna visível para o destino de saída.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">A instância foi descartada.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously commits the JSON text written so far, which makes it visible to the output destination.">Confirma de maneira assíncrona o texto JSON escrito até o momento, o que o torna visível para o destino de saída.</summary>
      <param name="cancellationToken" vsli:raw="The token to monitor for cancellation requests. The default value is &lt;see cref=&quot;P:System.Threading.CancellationToken.None&quot; /&gt;.">O token a se monitorar para solicitações de cancelamento. O valor padrão é <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">A instância foi descartada.</exception>
      <returns vsli:raw="A task representing the asynchronous flush operation.">Uma tarefa que representa a operação de liberação assíncrona.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused.">Redefine o estado interno dessa instância para que ela possa ser reutilizada.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">A instância foi descartada.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">Redefine o estado interno dessa instância para que ela possa ser reutilizada com uma nova instância de <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter" vsli:raw="The destination for writing JSON text.">O destino para gravar texto JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bufferWriter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bufferWriter" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">A instância foi descartada.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary vsli:raw="Resets the internal state of this instance so that it can be reused with a new instance of &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">Redefine o estado interno dessa instância para que ela possa ser reutilizada com uma nova instância de <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json" vsli:raw="The destination for writing JSON text.">O destino para gravar texto JSON.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;utf8Json&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="utf8Json" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This instance has been disposed.">A instância foi descartada.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade e o valor de bytes brutos (como uma cadeia de caracteres JSON codificada em Base64) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded name of the property to write.">O nome codificado em UTF-8 da propriedade a ser gravada.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Os dados binários a serem gravados como texto codificado Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade e o valor de bytes brutos (como uma cadeia de caracteres JSON codificada em Base64) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Os dados binários a serem gravados como texto codificado Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade e o valor de bytes brutos (como uma cadeia de caracteres JSON codificada em Base64) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Os dados binários a serem gravados como texto codificado Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de bytes brutos (como uma cadeia de caracteres JSON codificada em Base64) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON-encoded name of the property to write.">O nome codificado em JSON da propriedade a ser gravada.</param>
      <param name="bytes" vsli:raw="The binary data to write as Base64 encoded text.">Os dados binários a serem gravados como texto codificado Base64.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.">Grava o valor de bytes brutos como uma cadeia de caracteres JSON codificada em Base64 como um elemento de uma matriz JSON.</summary>
      <param name="bytes" vsli:raw="The binary data to be written as a Base64 encoded JSON string element of a JSON array.">Os dados binários a serem gravados como um elemento de cadeia de caracteres JSON codificada em Base64 de uma matriz JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">O valor a ser gravado como um literal JSON true ou false como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">O valor a ser gravado como um literal JSON true ou false como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">O valor a ser gravado como um literal JSON true ou false como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as part of the name/value pair.">O valor a ser gravado como um literal JSON true ou false como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value (as a JSON literal true or false) as an element of a JSON array.">Grava um valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON literal true or false as an element of a JSON array.">O valor a ser gravado como um literal JSON true ou false como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value as a JSON comment.">Grava um valor de texto UTF-8 como um comentário JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">O valor codificado em UTF-8 a ser gravado como um comentário JSON dentro de <c> / *..* / .</c>..</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;utf8Value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">O valor especificado é muito grande.
        
- ou -

<paramref name="utf8Value" /> contém um delimitador de comentário (ou seja, <c>*/</c> ).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value as a JSON comment.">Grava um valor de texto UTF-16 como um comentário JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">O valor codificado em UTF-16 a ser gravado como um comentário JSON transcodificado em UTF-8 dentro de <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">O valor especificado é muito grande.
        
- ou -

<paramref name="value" /> contém um delimitador de comentário (ou seja, <c>*/</c> ).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary vsli:raw="Writes a string text value as a JSON comment.">Grava um valor de texto de cadeia de caracteres como um comentário JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within &lt;c&gt;/*..*/&lt;/c&gt;.">O valor codificado em UTF-16 a ser gravado como um comentário JSON transcodificado em UTF-8 dentro de <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;value&quot; /&gt; contains a comment delimiter (that is, &lt;c&gt;*/&lt;/c&gt;).">O valor especificado é muito grande.
        
- ou -

<paramref name="value" /> contém um delimitador de comentário (ou seja, <c>*/</c> ).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary vsli:raw="Writes the end of a JSON array.">Grava o fim de uma matriz JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary vsli:raw="Writes the end of a JSON object.">Grava o fim de um objeto JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and the JSON literal null as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura e o literal JSON null como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a read-only character span and the JSON literal null as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura e o literal JSON null como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary vsli:raw="Writes a property name specified as a string and the JSON literal null as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e o literal JSON null como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and the JSON literal null as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o literal JSON null como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary vsli:raw="Writes the JSON literal null as an element of a JSON array.">Grava o literal JSON null como um elemento de uma matriz JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only span of bytes and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary vsli:raw="Writes a property name specified as a string and an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON number as part of the name/value pair.">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Grava um valor de <see cref="T:System.Decimal" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Grava um valor de <see cref="T:System.Double" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Grava um valor de <see cref="T:System.Int32" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Grava um valor de <see cref="T:System.Int64" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Grava um valor de <see cref="T:System.Single" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Grava um valor de <see cref="T:System.UInt32" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value (as a JSON number) as an element of a JSON array.">Grava um valor de <see cref="T:System.UInt64" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON number as an element of a JSON array.">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Grava o nome da propriedade UTF-8 (como uma cadeia de caracteres JSON) como a primeira parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Grava o nome da propriedade (como uma cadeia de caracteres JSON) como a primeira parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary vsli:raw="Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Grava o nome da propriedade (como uma cadeia de caracteres JSON) como a primeira parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada (como uma cadeia de caracteres JSON) como a primeira parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this write operation would produce invalid JSON.">A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary vsli:raw="Writes the beginning of a JSON array.">Grava o início de uma matriz JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and this write operation would produce invalid JSON.">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.

- ou -

A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.">Grava o início de uma matriz JSON com um nome de propriedade especificado como um intervalo de bytes somente leitura como a chave.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON array to be written.">O nome da propriedade codificado em UTF-8 da matriz JSON a ser gravada.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.

- ou -
       
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.">Grava o início de uma matriz JSON com um nome de propriedade especificado como um intervalo de caracteres somente leitura como a chave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 da matriz JSON a ser transcodificada e gravada como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.

- ou -
       
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON array with a property name specified as a string as the key.">Grava o início de uma matriz JSON com um nome de propriedade especificado como uma cadeia de caracteres como a chave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 da matriz JSON a ser transcodificada e gravada como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.

- ou -
       
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON array with a pre-encoded property name as the key.">Grava o início de uma matriz JSON com um nome de propriedade pré-codificada como a chave.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON da matriz JSON a ser transcodificada e gravada como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;    &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">A profundidade do JSON excedeu a profundidade máxima de 1.000.
    
- ou -

A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary vsli:raw="Writes the beginning of a JSON object.">Grava o início de um objeto JSON.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000.&#xA;&#xA;-or-&#xA;&#xA;Validation is enabled, and the operation would result in writing invalid JSON.">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.

- ou -

A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.">Grava o início de um objeto JSON com um nome de propriedade especificado como um intervalo de bytes somente leitura como a chave.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">A profundidade do JSON ultrapassa a profundidade máxima de 1.000. 

- ou -
       
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a read-only character span as the key.">Grava o início de um objeto JSON com um nome de propriedade especificado como um intervalo de caracteres somente leitura como a chave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">A profundidade do JSON ultrapassa a profundidade máxima de 1.000. 

- ou -
       
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary vsli:raw="Writes the beginning of a JSON object with a property name specified as a string as the key.">Grava o início de um objeto JSON com um nome de propriedade especificado como uma cadeia de caracteres como a chave.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON exceeds the maximum depth of 1,000. &#xA;&#xA;-or-&#xA;       &#xA;Validation is enabled, and this write operation would produce invalid JSON.">A profundidade do JSON ultrapassa a profundidade máxima de 1.000. 

- ou -
       
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the beginning of a JSON object with a pre-encoded property name as the key.">Grava o início de um objeto JSON com um nome de propriedade pré-codificada como a chave.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The depth of the JSON has exceeded the maximum depth of 1,000.&#xA;          &#xA;-or-&#xA;&#xA;Validation is enabled, and this method would result in writing invalid JSON.">A profundidade do JSON excedeu a profundidade máxima de 1.000.
          
- ou -

A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-8 e um valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-8 e um valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary vsli:raw="Writes a UTF-8 property name and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-8 e um valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-8 e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-8 e o valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary vsli:raw="Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-8 e o valor de texto de uma cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade UTF-8 e o valor pré-codificado (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName" vsli:raw="The UTF-8 encoded property name of the JSON object to be written.">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em JSON a ser gravado como uma cadeia de caracteres JSON transcodificada em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and this method would result in writing invalid JSON.">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary vsli:raw="Writes a property name specified as a read-only character span and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-16 e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-16 e o valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary vsli:raw="Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome de uma propriedade UTF-16 e o valor de texto de uma cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade e o valor pré-codificado (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em JSON a ser gravado como uma cadeia de caracteres JSON transcodificada em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary vsli:raw="Writes a property name specified as a string and a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary vsli:raw="Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name or value is too large.">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade e o valor pré-codificado (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em JSON a ser gravado como uma cadeia de caracteres JSON transcodificada em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified property name is too large.">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;propertyName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary vsli:raw="Writes the pre-encoded property name and &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de texto (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON transcodificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary vsli:raw="Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor a ser gravado como uma cadeia de caracteres JSON transcodificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.">Grava o nome da propriedade pré-codificada e o valor pré-codificado (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName" vsli:raw="The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.">O valor codificado em JSON a ser gravado como uma cadeia de caracteres JSON transcodificada em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Grava um valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Grava um valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Guid&quot; /&gt; value (as a JSON string) as an element of a JSON array.">Grava um valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The value to be written as a JSON string as an element of a JSON array.">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the operation would result in writing invalid JSON.">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.">Grava um valor de texto UTF-8 (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="utf8Value" vsli:raw="The UTF-8 encoded value to be written as a JSON string element of a JSON array.">O valor codificado em UTF-8 a ser gravado como um elemento de cadeia de caracteres JSON de uma matriz JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.">Grava um valor de texto UTF-16 (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">O valor codificado em UTF-16 a ser gravado como um elemento de cadeia de caracteres JSON transcodificado em UTF-8 de uma matriz JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary vsli:raw="Writes a string text value (as a JSON string) as an element of a JSON array.">Grava um valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">O valor codificado em UTF-16 a ser gravado como um elemento de cadeia de caracteres JSON transcodificado em UTF-8 de uma matriz JSON.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified value is too large.">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary vsli:raw="Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.">Grava o valor de texto pré-codificado (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value" vsli:raw="The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.">O valor codificado em JSON a ser gravado como um elemento de cadeia de caracteres JSON transcodificado em UTF-8 de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Validation is enabled, and the write operation would produce invalid JSON.">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary vsli:raw="Gets the total number of bytes committed to the output by the current instance so far.">Obtém o número total de bytes confirmados para a saída pela instância atual até o momento.</summary>
      <returns vsli:raw="The total number of bytes committed to the output by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far.">O número total de bytes confirmados na saída até o <see cref="T:System.Text.Json.Utf8JsonWriter" /> momento.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary vsli:raw="Gets the number of bytes written by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; so far that have not yet been flushed to the output and committed.">Obtém o número de bytes gravados pelo <see cref="T:System.Text.Json.Utf8JsonWriter" /> até o momento que ainda não foram liberados para a saída e confirmados.</summary>
      <returns vsli:raw="The number of bytes written so far by the &lt;see cref=&quot;T:System.Text.Json.Utf8JsonWriter&quot; /&gt; that have not yet been flushed to the output and committed.">O número de bytes gravados até o momento pelo <see cref="T:System.Text.Json.Utf8JsonWriter" /> que ainda não foram liberados para a saída e confirmados.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary vsli:raw="Gets the depth of the current token.">Obtém a profundidade do token atual.</summary>
      <returns vsli:raw="The depth of the current token.">A profundidade do token atual.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary vsli:raw="Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.">Obtém o comportamento personalizado ao gravar JSON usando essa instância, que indica se a saída precisa ser formatada durante a gravação e se a validação estrutural de JSON deve ser ignorada e quais caracteres devem ser para escape.</summary>
      <returns vsli:raw="The custom behavior of this instance of the writer for formatting, validating, and escaping.">O comportamento personalizado dessa instância do gravador para formatação, validação e saída.</returns>
    </member>
  </members>
</doc>
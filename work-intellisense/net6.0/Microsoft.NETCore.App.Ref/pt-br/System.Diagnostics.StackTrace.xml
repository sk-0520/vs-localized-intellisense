<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>Fornece informações sobre um <see cref="T:System.Diagnostics.StackFrame" />, que representa uma chamada de função na pilha de chamadas do thread atual.</summary>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>Define o valor que é retornado do método <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> ou <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> quando o deslocamento nativo ou MSIL (Microsoft Intermediate Language) é desconhecido. Este campo é constante.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" />.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" />, com a opção de capturar informações de origem.</summary>
      <param name="needFileInfo" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" /> que corresponde a um quadro acima do registro de ativação atual.</summary>
      <param name="skipFrames">O número de quadros acima na pilha para ignorar.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" /> que corresponde a um quadro acima do registro de ativação atual, capturando opcionalmente informações de origem.</summary>
      <param name="skipFrames">O número de quadros acima na pilha para ignorar.</param>
      <param name="needFileInfo" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" /> que contém somente o nome do arquivo determinado e o número de linha.</summary>
      <param name="fileName">O nome de arquivo.</param>
      <param name="lineNumber">O número de linha no arquivo especificado.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackFrame" /> que contém somente o nome do arquivo determinado, o número de linha e o número da coluna.</summary>
      <param name="fileName">O nome de arquivo.</param>
      <param name="lineNumber">O número de linha no arquivo especificado.</param>
      <param name="colNumber">O número da coluna no arquivo especificado.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>Obtém o número da coluna no arquivo que contém o código que está em execução. Normalmente, essas informações são extraídas de símbolos de depuração para o executável.</summary>
      <returns>O número da coluna do arquivo ou 0 (zero), se o número da coluna do arquivo não puder ser determinado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>Obtém o número de linha no arquivo que contém o código que está em execução. Normalmente, essas informações são extraídas de símbolos de depuração para o executável.</summary>
      <returns>O número de linha do arquivo ou 0 (zero), se o número de linha do arquivo não puder ser determinado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>Obtém o nome do arquivo que contém o código que está em execução. Normalmente, essas informações são extraídas de símbolos de depuração para o executável.</summary>
      <returns>O nome do arquivo ou <see langword="null" />, se o nome de arquivo não puder ser determinado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>Obtém o deslocamento do início do código MSIL (Microsoft Intermediate Language) para o método que está sendo executado. Esse deslocamento pode ser uma aproximação dependendo se o compilador JIT (Just-In-Time) está gerando o código de depuração. A geração dessas informações de depuração é controlada pelo <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns>O deslocamento do início do código MSIL para o método que está sendo executado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>Obtém o método no qual o quadro está em execução.</summary>
      <returns>O método no qual o quadro está em execução.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>Obtém o deslocamento do início do código compilado JIT (Just-In-Time) nativo para o método que está sendo executado. A geração dessas informações de depuração é controlada pela classe <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns>O deslocamento do início do código compilado JIT para o método que está sendo executado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>Cria uma representação legível do rastreamento de pilha.</summary>
      <returns>Uma representação legível do rastreamento de pilha.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary>Fornece métodos de extensão para a classe <see cref="T:System.Diagnostics.StackFrame" />, que representa uma chamada de função na pilha de chamadas do thread atual.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary>Retorna um ponteiro para o endereço básico da imagem nativa na qual esse registro de ativação está sendo executado.</summary>
      <param name="stackFrame">Um registro de ativação.</param>
      <returns>Um ponteiro para o endereço básico da imagem nativa ou <see cref="F:System.IntPtr.Zero" /> se o destino for o .NET Framework.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary>Obtém um ponteiro de interface para o início do código nativo para o método que está sendo executado.</summary>
      <param name="stackFrame">Um registro de ativação.</param>
      <returns>Um ponteiro de interface para o início do código nativo do método que está sendo executado ou <see cref="F:System.IntPtr.Zero" /> se o .NET Framework for o destino.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary>Indica se um deslocamento do início do código do nível de integridade para o método que está sendo executado está disponível.</summary>
      <param name="stackFrame">Um registro de ativação.</param>
      <returns>
        <see langword="true" /> se a opção estiver disponível; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary>Indica se as informações sobre o método no qual o quadro especificado está em execução estão disponíveis.</summary>
      <param name="stackFrame">Um registro de ativação.</param>
      <returns>
        <see langword="true" /> se as informações sobre o método no qual o quadro atual está em execução estão disponíveis; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary>Indica se a imagem nativa está disponível para o registro de ativação especificado.</summary>
      <param name="stackFrame">Um registro de ativação.</param>
      <returns>
        <see langword="true" /> se uma imagem nativa estiver disponível para este registro de ativação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary>Indica se o arquivo que contém o código que o registro de ativação especificado está executando está disponível.</summary>
      <param name="stackFrame">Um registro de ativação.</param>
      <returns>
        <see langword="true" /> se o código que o registro de ativação está executando está disponível; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>Representa um rastreamento de pilha, que é uma coleção ordenada de um ou mais registros de ativação.</summary>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>Define o padrão para o número de métodos a ser omitido do rastreamento de pilha. Este campo é constante.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> do quadro do chamador.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> do quadro do chamador, capturando originalmente as informações de origem.</summary>
      <param name="fNeedFileInfo">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> que contém um único quadro.</summary>
      <param name="frame">O quadro que o objeto <see cref="T:System.Diagnostics.StackTrace" /> deve conter.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> usando o objeto de exceção fornecido.</summary>
      <param name="e">O objeto de exceção do qual o rastreamento de pilha será construído.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="e" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" />, usando o objeto de exceção fornecido e, opcionalmente, capturando as informações de origem.</summary>
      <param name="e">O objeto de exceção do qual o rastreamento de pilha será construído.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="e" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" />, usando o objeto de exceção fornecido e ignorando o número especificado de quadros.</summary>
      <param name="e">O objeto de exceção do qual o rastreamento de pilha será construído.</param>
      <param name="skipFrames">O número de quadros na pilha do qual iniciar o rastreamento.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="e" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="skipFrames" /> é negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> usando o objeto de exceção fornecido, ignorando o número especificado de quadros e, opcionalmente, capturando informações de origem.</summary>
      <param name="e">O objeto de exceção do qual o rastreamento de pilha será construído.</param>
      <param name="skipFrames">O número de quadros na pilha do qual iniciar o rastreamento.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="e" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="skipFrames" /> é negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> com base no quadro do chamador, ignorando o número de quadros especificado.</summary>
      <param name="skipFrames">O número de quadros na pilha do qual iniciar o rastreamento.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="skipFrames" /> é negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.StackTrace" /> com base no quadro do chamador, ignorando o número especificado de quadros e, opcionalmente, capturando informações de origem.</summary>
      <param name="skipFrames">O número de quadros na pilha do qual iniciar o rastreamento.</param>
      <param name="fNeedFileInfo">
        <see langword="true" /> para capturar o nome de arquivo, o número de linha e o número de coluna; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="skipFrames" /> é negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>Obtém o registro de ativação especificado.</summary>
      <param name="index">O índice do registro de ativação solicitado.</param>
      <returns>O registro de ativação especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>Retorna uma cópia de todos os quadros de pilha no rastreamento de pilha atual.</summary>
      <returns>Uma matriz do tipo <see cref="T:System.Diagnostics.StackFrame" /> que representa as chamadas de função no rastreamento de pilha.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>Cria uma representação legível do rastreamento de pilha.</summary>
      <returns>Uma representação legível do rastreamento de pilha.</returns>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>Obtém o número de quadros no rastreamento da pilha.</summary>
      <returns>O número de quadros no rastreamento de pilha.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary>Representa um associador de símbolos para código gerenciado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary>Obtém a interface do leitor de símbolo para o arquivo atual.</summary>
      <param name="importer">A interface de importação de metadados.</param>
      <param name="filename">O nome do arquivo para o qual a interface de leitor é necessária.</param>
      <param name="searchPath">O caminho de pesquisa usado para localizar o arquivo de símbolo.</param>
      <returns>A interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> que lê os símbolos de depuração.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary>Representa um associador de símbolos para código gerenciado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary>Obtém a interface do leitor de símbolo para o arquivo atual.</summary>
      <param name="importer">Um <see cref="T:System.IntPtr" /> que se refere à interface de importação de metadados.</param>
      <param name="filename">O nome do arquivo para o qual a interface de leitor é necessária.</param>
      <param name="searchPath">O caminho de pesquisa usado para localizar o arquivo de símbolo.</param>
      <returns>A interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> que lê os símbolos de depuração.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary>Representa um documento referenciado por um repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary>Retorna a linha mais próxima que é um ponto de sequência, considerando uma linha no documento atual que pode ou não ser um ponto de sequência.</summary>
      <param name="line">A linha especificada no documento.</param>
      <returns>A linha mais próxima e que seja um ponto de sequência.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary>Obtém a soma de verificação.</summary>
      <returns>A soma de verificação.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Obtém a origem do documento inserido para o intervalo especificado.</summary>
      <param name="startLine">A linha inicial no documento atual.</param>
      <param name="startColumn">A coluna de inicial no documento atual.</param>
      <param name="endLine">A linha final no documento atual.</param>
      <param name="endColumn">A coluna final no documento atual.</param>
      <returns>A origem do documento para o intervalo especificado.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary>Obtém o identificador do algoritmo de soma de verificação.</summary>
      <returns>Um GUID que identifica o algoritmo de soma de verificação. O valor será todos os zeros, se não houver nenhuma soma de verificação.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary>Obtém o tipo do documento atual.</summary>
      <returns>O tipo de documento atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary>Verifica se o documento atual está armazenado no repositório de símbolos.</summary>
      <returns>
        <see langword="true" /> Se o documento atual estiver armazenado no repositório de símbolos; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary>Obtém o idioma do documento atual.</summary>
      <returns>O idioma do documento atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary>Obtém a o fornecedor do idioma do documento atual.</summary>
      <returns>O fornecedor de idioma do documento atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary>Obtém o comprimento, em bytes, da origem inserida.</summary>
      <returns>O comprimento de origem do documento atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary>Obtém a URL do documento atual.</summary>
      <returns>A URL do documento atual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>Representa um documento referenciado por um repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>Define informações de soma de verificação.</summary>
      <param name="algorithmId">O GUID que representa a ID de algoritmo.</param>
      <param name="checkSum">A soma de verificação.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>Armazena a origem bruta de um documento no repositório de símbolos.</summary>
      <param name="source">A origem do documento representada como bytes sem sinal.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary>Representa um método em um repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary>Obtém o namespace no qual o método atual está definido.</summary>
      <returns>O namespace no qual o método atual está definido.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtém o deslocamento do MSIL (Microsoft Intermediate Language) dentro do método que corresponde à posição especificada.</summary>
      <param name="document">O documento para o qual o deslocamento é solicitado.</param>
      <param name="line">A linha do documento correspondente ao deslocamento.</param>
      <param name="column">A coluna do documento correspondente ao deslocamento.</param>
      <returns>O deslocamento dentro do documento especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary>Obtém os parâmetros para o método atual.</summary>
      <returns>A matriz de parâmetros do método atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtém uma matriz de pares de deslocamentos de início e término que correspondem aos intervalos do MSIL (Microsoft Intermediate Language) que uma posição especificada cobre dentro desse método.</summary>
      <param name="document">O documento para o qual o deslocamento é solicitado.</param>
      <param name="line">A linha do documento correspondente a intervalos.</param>
      <param name="column">A coluna do documento correspondente a intervalos.</param>
      <returns>Uma matriz de pares de deslocamento de início e término.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary>Retorna o escopo léxico mais delimitador quando é fornecido um deslocamento dentro de um método.</summary>
      <param name="offset">O deslocamento de bytes no método do escopo léxico.</param>
      <returns>O escopo léxico mais delimitador para o deslocamento de bytes fornecido dentro de um método.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Obtém os pontos de sequência para o método atual.</summary>
      <param name="offsets">A matriz de deslocamentos de bytes do início do método para os pontos de sequência.</param>
      <param name="documents">A matriz de documentos em que os pontos de sequência estão localizados.</param>
      <param name="lines">A matriz de linhas nos documentos em que os pontos de sequência estão localizados.</param>
      <param name="columns">A matriz de colunas nos documentos em que os pontos de sequência estão localizados.</param>
      <param name="endLines">A matriz de linhas nos documentos em que a sequência de pontos termina.</param>
      <param name="endColumns">A matriz de colunas nos documentos em que a sequência de pontos termina.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary>Obtém as posições inicial e final da fonte de dados do método atual.</summary>
      <param name="docs">Os documentos de origem iniciais e finais.</param>
      <param name="lines">As linhas iniciais e finais nos documentos de origem correspondentes.</param>
      <param name="columns">As colunas iniciais e finais nos documentos de origem correspondentes.</param>
      <returns>
        <see langword="true" /> se as posições foram definidas, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary>Obtém o escopo do léxico raiz do método atual. Esse escopo abrange todo o método.</summary>
      <returns>O escopo do léxico raiz que abrange todo o método.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary>Obtém uma contagem dos pontos de sequência no método.</summary>
      <returns>A contagem dos pontos de sequência no método.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary>Obtém o <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> que contém os metadados do método atual.</summary>
      <returns>O token de metadados para o método atual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary>Representa um namespace em um repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary>Obtém os membros filho do namespace atual.</summary>
      <returns>Os membros filho do namespace atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary>Obtém todas as variáveis definidas no escopo global do namespace atual.</summary>
      <returns>As variáveis definidas no escopo global do namespace atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary>Obtém o namespace atual.</summary>
      <returns>O namespace atual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary>Representa um leitor de símbolo para código gerenciado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Obtém um documento especificado por idioma, fornecedor e tipo.</summary>
      <param name="url">A URL que identifica o documento.</param>
      <param name="language">O idioma do documento. É possível especificar esse parâmetro como <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor">A identidade do fornecedor para o idioma do documento. É possível especificar esse parâmetro como <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType">O tipo do documento. É possível especificar esse parâmetro como <see cref="F:System.Guid.Empty" />.</param>
      <returns>O documento especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary>Obtém uma matriz de todos os documentos definidos no repositório de símbolos.</summary>
      <returns>Uma matriz de todos os documentos definidos no repositório de símbolos.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary>Obtém todas as variáveis globais no módulo.</summary>
      <returns>Uma matriz de todas as variáveis no módulo.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Obtém um objeto do método de leitor de símbolo quando o identificador de um método é fornecido.</summary>
      <param name="method">O token de metadados do método.</param>
      <returns>O objeto do método de leitor de símbolo para o identificador do método especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary>Obtém um objeto do método de leitor de símbolo quando é fornecido o identificador de um método e sua versão de edição e continuação.</summary>
      <param name="method">O token de metadados do método.</param>
      <param name="version">A versão de edição e continuação do método.</param>
      <returns>O objeto do método de leitor de símbolo para o identificador do método especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtém um objeto do método de leitor de símbolo que contém uma posição especificada em um documento.</summary>
      <param name="document">O documento no qual o método está localizado.</param>
      <param name="line">A posição da linha dentro do documento. As linhas são numeradas, começando com 1.</param>
      <param name="column">A posição da coluna dentro do documento. As colunas são numeradas, começando com 1.</param>
      <returns>O objeto do método de leitor para a posição especificada no documento.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary>Obtém os namespaces que são definidos no escopo global no repositório de símbolos atual.</summary>
      <returns>Os namespaces definidos no escopo global no repositório de símbolos atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary>Obtém um valor de atributo quando é fornecido o nome do atributo.</summary>
      <param name="parent">O token de metadados do objeto para o qual o atributo é solicitado.</param>
      <param name="name">O nome do atributo.</param>
      <returns>O valor do atributo.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Obtém as variáveis que não são locais quando é fornecido o pai.</summary>
      <param name="parent">O token de metadados do tipo para o qual as variáveis são solicitadas.</param>
      <returns>Uma matriz de variáveis para o pai.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary>Obtém o token de metadados para o método especificado como o ponto de entrada do usuário para o módulo, caso haja algum.</summary>
      <returns>O token de metadados para o método que é o ponto de entrada do usuário para o módulo.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary>Representa um escopo léxico em <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" />, fornecendo acesso aos deslocamentos inicial e final do escopo, bem como aos escopos pai e filho.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary>Obtém os escopos léxicos filho do escopo léxico atual.</summary>
      <returns>Os escopos léxicos filho do escopo léxico atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary>Obtém as variáveis locais dentro do escopo léxico atual.</summary>
      <returns>As variáveis locais dentro do escopo léxico atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary>Obtém os namespaces que são usados dentro do escopo atual.</summary>
      <returns>Os namespaces que são usados dentro do escopo atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary>Obtém o deslocamento final do escopo léxico atual.</summary>
      <returns>O deslocamento final do escopo léxico atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary>Obtém o método que contém o escopo léxico atual.</summary>
      <returns>O método que contém o escopo léxico atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary>Obtém o escopo léxico pai do escopo atual.</summary>
      <returns>O escopo léxico pai do escopo atual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary>Obtém o deslocamento inicial do escopo léxico atual.</summary>
      <returns>O deslocamento inicial do escopo léxico atual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary>Representa uma variável em um repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary>Obtém a assinatura da variável.</summary>
      <returns>A assinatura da variável como um blob opaco.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary>Obtém o primeiro endereço de uma variável.</summary>
      <returns>O primeiro endereço da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary>Obtém o segundo endereço de uma variável.</summary>
      <returns>O segundo endereço da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary>Obtém o terceiro endereço de uma variável.</summary>
      <returns>O terceiro endereço da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary>Obtém o valor <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> que descreve o tipo de endereço.</summary>
      <returns>O tipo do endereço. Um dos valores de <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary>Obtém os atributos da variável.</summary>
      <returns>Os atributos da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary>Obtém o deslocamento final de uma variável no escopo da variável.</summary>
      <returns>O deslocamento final da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary>Obtém o nome da variável.</summary>
      <returns>O nome da variável.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary>Obtém o deslocamento inicial da variável no escopo da variável.</summary>
      <returns>O deslocamento inicial da variável.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary>Representa um gravador de símbolo do código gerenciado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary>Fecha <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> e confirma os símbolos no repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary>Fecha o método atual.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary>Fecha o namespace mais recente.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary>Fecha o escopo léxico atual.</summary>
      <param name="endOffset">Os pontos após a última instrução no escopo.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Define um documento de origem.</summary>
      <param name="url">A URL que identifica o documento.</param>
      <param name="language">O idioma do documento. Esse parâmetro pode ser <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor">A identidade do fornecedor para o idioma do documento. Esse parâmetro pode ser <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType">O tipo do documento. Esse parâmetro pode ser <see cref="F:System.Guid.Empty" />.</param>
      <returns>O objeto que representa o documento.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Define um campo em um tipo ou um campo global.</summary>
      <param name="parent">O tipo de metadados ou método de token.</param>
      <param name="name">O nome do campo.</param>
      <param name="attributes">Uma combinação bit a bit dos atributos do campo.</param>
      <param name="signature">A assinatura de campo.</param>
      <param name="addrKind">Os tipos de endereço para <paramref name="addr1" /> e <paramref name="addr2" />.</param>
      <param name="addr1">O primeiro endereço para a especificação do campo.</param>
      <param name="addr2">O segundo endereço para a especificação de campo.</param>
      <param name="addr3">O terceiro endereço para a especificação de campo.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Define uma única variável global.</summary>
      <param name="name">O nome da variável global.</param>
      <param name="attributes">Uma combinação bit a bit dos atributos da variável global.</param>
      <param name="signature">A assinatura da variável global.</param>
      <param name="addrKind">Os tipos de endereço de <paramref name="addr1" />, <paramref name="addr2" /> e <paramref name="addr3" />.</param>
      <param name="addr1">O primeiro endereço para a especificação da variável global.</param>
      <param name="addr2">O segundo endereço para a especificação da variável global.</param>
      <param name="addr3">O terceiro endereço para a especificação da variável global.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Define uma única variável no escopo léxico atual.</summary>
      <param name="name">O nome da variável local.</param>
      <param name="attributes">Uma combinação bit a bit dos atributos da variável local.</param>
      <param name="signature">A assinatura da variável local.</param>
      <param name="addrKind">Os tipos de endereço de <paramref name="addr1" />, <paramref name="addr2" /> e <paramref name="addr3" />.</param>
      <param name="addr1">O primeiro endereço para a especificação da variável local.</param>
      <param name="addr2">O segundo endereço para a especificação da variável local.</param>
      <param name="addr3">O terceiro endereço para a especificação da variável local.</param>
      <param name="startOffset">O deslocamento inicial da variável. Se este parâmetro for zero, ele será ignorado e a variável será definida ao longo de todo o escopo. Se o parâmetro for diferente de zero, a variável estará dentro dos deslocamentos do escopo atual.</param>
      <param name="endOffset">O deslocamento final da variável. Se este parâmetro for zero, ele será ignorado e a variável será definida ao longo de todo o escopo. Se o parâmetro for diferente de zero, a variável estará dentro dos deslocamentos do escopo atual.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Define um único parâmetro no método atual. O tipo de cada parâmetro é obtido da sua posição dentro a assinatura do método.</summary>
      <param name="name">O nome do parâmetro.</param>
      <param name="attributes">Uma combinação bit a bit dos atributos de parâmetro.</param>
      <param name="sequence">A assinatura do parâmetro.</param>
      <param name="addrKind">Os tipos de endereço de <paramref name="addr1" />, <paramref name="addr2" /> e <paramref name="addr3" />.</param>
      <param name="addr1">O primeiro endereço para a especificação de parâmetro.</param>
      <param name="addr2">O segundo endereço para a especificação de parâmetro.</param>
      <param name="addr3">O terceiro endereço para a especificação de parâmetro.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Define um grupo de pontos de sequência dentro do método atual.</summary>
      <param name="document">O objeto de documento para o qual os pontos de sequência estão sendo definidos.</param>
      <param name="offsets">Os deslocamentos dos pontos de sequência medidos do início dos métodos.</param>
      <param name="lines">As linhas do documento para os pontos de sequência.</param>
      <param name="columns">As posições no documento para os pontos de sequência.</param>
      <param name="endLines">As linhas finais do documento para os pontos de sequência.</param>
      <param name="endColumns">As posições das linhas finais do documento para os pontos de sequência.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary>Define a interface do emissor de metadados a ser associada a um gravador.</summary>
      <param name="emitter">A interface do emissor de metadados.</param>
      <param name="filename">O nome do arquivo para o qual os símbolos de depuração são gravados. Alguns gravadores exigem um nome de arquivo, outros não. Se um nome de arquivo for especificado para um gravador que não use nomes de arquivo, esse parâmetro será ignorado.</param>
      <param name="fFullBuild">
        <see langword="true" /> indica que se trata de uma recompilação completa; <see langword="false" /> indica uma compilação incremental.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Abre um método no qual as informações de símbolo serão colocadas.</summary>
      <param name="method">O token de metadados do método a ser aberto.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary>Abre um novo namespace.</summary>
      <param name="name">O nome do novo namespace.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary>Abre um novo escopo léxico no método atual.</summary>
      <param name="startOffset">O deslocamento, em bytes, do início do método até a primeira instrução no escopo léxico.</param>
      <returns>Um identificador de escopo opaco que pode ser usado com <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> para definir os deslocamentos de início e término de um escopo em um momento posterior. Nesse caso, os deslocamentos passados para <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> e <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> são ignorados. Um identificador de escopo é válido somente no método atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary>Especifica os verdadeiros início e término de um método de dentro de um arquivo de origem. Use <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> para especificar a extensão de um método, independente dos pontos de sequência que existem dentro do método.</summary>
      <param name="startDoc">O documento que contém a posição inicial.</param>
      <param name="startLine">O número de linha inicial.</param>
      <param name="startColumn">A coluna inicial.</param>
      <param name="endDoc">O documento que contém a posição final.</param>
      <param name="endLine">O número de linha final.</param>
      <param name="endColumn">O número de coluna final.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary>Define o intervalo de deslocamento do escopo léxico especificado.</summary>
      <param name="scopeID">O identificador do escopo léxico.</param>
      <param name="startOffset">O deslocamento de bytes do início do escopo léxico.</param>
      <param name="endOffset">O deslocamento de bytes do fim do escopo léxico.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary>Define um atributo quando é fornecido o nome e o valor do atributo.</summary>
      <param name="parent">O token de metadados para o qual o atributo está sendo definido.</param>
      <param name="name">O nome do atributo.</param>
      <param name="data">O valor do atributo.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary>Define o <see langword="ISymUnmanagedWriter" /> subjacente (a interface não gerenciada correspondente) que um <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> gerenciado usa para emitir símbolos.</summary>
      <param name="underlyingWriter">Um ponteiro para o código que representa o gravador subjacente.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Identifica o método definido pelo usuário como o ponto de entrada do módulo atual.</summary>
      <param name="entryMethod">O token de metadados do método que é o ponto de entrada do usuário.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary>Especifica que o nome totalmente qualificado do namespace fornecido é usado dentro do escopo léxico aberto.</summary>
      <param name="fullName">O nome totalmente qualificado do namespace.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary>Especifica os tipos de endereço para variáveis locais, parâmetros e campos nos métodos <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> e <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> da interface <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary>Um campo de bits. O parâmetro <paramref name="addr1" /> é a posição em que o campo é iniciado e o parâmetro <paramref name="addr2" /> é o tamanho do campo.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary>Um deslocamento MSIL (Microsoft Intermediate Language). O parâmetro <paramref name="addr1" /> é o índice de parâmetro ou variável local da MSIL.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary>Um deslocamento nativo. O parâmetro <paramref name="addr1" /> é o deslocamento do início do pai.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary>Um endereço de registro nativo. O parâmetro <paramref name="addr1" /> é o registro no qual a variável é armazenada.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary>Um endereço relativo ao registro. O parâmetro <paramref name="addr1" /> é o registro de ordem inferior e o parâmetro <paramref name="addr2" /> é o registro de ordem superior.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary>Um endereço relativo ao registro. O parâmetro <paramref name="addr1" /> é o registro e o parâmetro <paramref name="addr2" /> é o deslocamento.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary>Um endereço relativo ao registro. O parâmetro <paramref name="addr1" /> é o registro de ordem inferior, o parâmetro <paramref name="addr2" /> é o registro de pilha e o <paramref name="addr3" /> parâmetro é o deslocamento do ponteiro de pilha até a parte de ordem superior do valor.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary>Um RVA (Endereço Virtual Relevante) nativo. O parâmetro <paramref name="addr1" /> é o RVA no módulo.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary>Um deslocamento de seção nativo. O parâmetro <paramref name="addr1" /> é a seção e o parâmetro <paramref name="addr2" /> é o deslocamento.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary>Um endereço relativo ao registro. O parâmetro <paramref name="addr1" /> é o registro de pilha, o parâmetro <paramref name="addr2" /> é o deslocamento do ponteiro de pilha até a parte de ordem inferior do valor e o parâmetro <paramref name="addr3" /> é o registro de ordem superior.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary>A estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> é uma representação de objeto de um token que representa informações simbólicas.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> quando um valor é determinado.</summary>
      <param name="val">O valor a ser usado para o token.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Determina se <paramref name="obj" /> é igual a esta instância.</summary>
      <param name="obj">O <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> a ser verificado.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for igual a essa instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary>Determina se <paramref name="obj" /> é uma instância de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> e é igual a esta instância.</summary>
      <param name="obj">O objeto a ser verificado.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for uma instância de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> e for igual a esta instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary>Gera o código hash para o token atual.</summary>
      <returns>O código hash para o token atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary>Obtém o valor do token atual.</summary>
      <returns>O valor do token atual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Retorna um valor que indica se dois objetos <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> são iguais.</summary>
      <param name="a">Uma estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b">Uma estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="a" /> e <paramref name="b" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Retorna um valor que indica se dois objetos <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> não são iguais.</summary>
      <param name="a">Uma estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b">Uma estrutura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="a" /> e <paramref name="b" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary>Retém os GUIDs públicos para tipos de documento a serem usados com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary>Especifica o GUID do tipo de documento a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" />.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary>Retém os GUIDs públicos para tipos de linguagem a serem usados com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary>Especifica o GUID do tipo de linguagem Basic a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary>Especifica o GUID do tipo de linguagem C a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary>Especifica o GUID do tipo de linguagem Cobol a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary>Especifica o GUID do tipo de linguagem C++ a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary>Especifica o GUID do tipo de linguagem C# a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary>Especifica o GUID do tipo de linguagem ILAssembly a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary>Especifica o GUID do tipo de linguagem Java a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary>Especifica o GUID do tipo de linguagem JScript a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary>Especifica o GUID do tipo de linguagem C++ a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary>Especifica o GUID do tipo de linguagem Pascal a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary>Especifica o GUID do tipo de linguagem SMC a ser usado com o repositório de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" />.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary>Retém os GUIDs públicos para fornecedores de linguagem a serem usados com o repositório de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary>Especifica o GUID do fornecedor de linguagem da Microsoft.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" />.</summary>
    </member>
  </members>
</doc>
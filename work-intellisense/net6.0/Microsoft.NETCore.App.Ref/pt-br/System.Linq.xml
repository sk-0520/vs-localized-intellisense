<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Linq.Enumerable">
      <summary>Fornece um conjunto de métodos <see langword="static" /> (<see langword="Shared" /> no Visual Basic) para consultar objetos que implementam <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>Aplica uma função de acumulador a uma sequência.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> no qual será feita a agregação.</param>
      <param name="func">Uma função de acumulador a ser invocada em cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="func" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor final do acumulador.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Aplica uma função de acumulador a uma sequência. O valor de semente especificado é usado como o valor inicial do acumulador.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> no qual será feita a agregação.</param>
      <param name="seed">O valor inicial do acumulador.</param>
      <param name="func">Uma função de acumulador a ser invocada em cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">O tipo do valor do acumulador.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="func" /> é <see langword="null" />.</exception>
      <returns>O valor final do acumulador.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Aplica uma função de acumulador a uma sequência. O valor de semente especificado é usado como o valor inicial do acumulador e a função especificada é usada para selecionar o valor do resultado.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> no qual será feita a agregação.</param>
      <param name="seed">O valor inicial do acumulador.</param>
      <param name="func">Uma função de acumulador a ser invocada em cada elemento.</param>
      <param name="resultSelector">Uma função para transformar o valor final do acumulador no valor de resultado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">O tipo do valor do acumulador.</typeparam>
      <typeparam name="TResult">O tipo do valor resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="func" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns>O valor final do acumulador transformado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determina se todos os elementos de uma sequência atendem a uma condição.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos aos quais o predicado será aplicado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se todos os elementos da sequência de origem passarem no teste no predicado especificado ou se a sequência for vazia; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Determina se uma sequência contém elementos.</summary>
      <param name="source">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> a ser verificado se está vazio.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se a sequência de origem contiver elementos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determina se algum elemento de uma sequência atende a uma condição.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> a cujos elementos o predicado será aplicado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se a sequência de origem não estiver vazia e pelo menos um dos elementos passar no teste no predicado especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Acrescenta um valor ao final da sequência.</summary>
      <param name="source">Uma sequência de valores.</param>
      <param name="element">O valor a ser acrescentado a <paramref name="source" />.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Uma nova sequência que termina com <paramref name="element" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna a entrada digitada como <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source">A sequência a ser digitada como <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A sequência de entrada digitada como <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Double" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Int32" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Int64" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma dos elementos na sequência é maior do que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma dos elementos na sequência é maior do que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma dos elementos na sequência é maior do que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos para cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Single" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> para realizar o cálculo da média.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Decimal" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <exception cref="T:System.OverflowException">A soma dos elementos na sequência é maior do que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Double" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Int32" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <exception cref="T:System.OverflowException">A soma dos elementos na sequência é maior do que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Int64" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos da fonte.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <exception cref="T:System.OverflowException">A soma dos elementos na sequência é maior do que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Decimal" /> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma dos elementos na sequência é maior do que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Double" /> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Int32" /> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma dos elementos na sequência é maior do que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Int64" /> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Single" /> que permitem valor nulo obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores que são <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Single" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>A média da sequência de valores.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>Converte os elementos de um <see cref="T:System.Collections.IEnumerable" /> para o tipo especificado.</summary>
      <param name="source">O <see cref="T:System.Collections.IEnumerable" /> que contém os elementos a serem convertidos no tipo <paramref name="TResult" />.</param>
      <typeparam name="TResult">O tipo no qual os elementos de <paramref name="source" /> deverão ser convertidos.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">Um elemento na sequência não pode ser convertido para o tipo <paramref name="TResult" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém cada elemento da sequência de origem convertido para o tipo especificado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatena duas sequências.</summary>
      <param name="first">A primeira sequência a ser concatenada.</param>
      <param name="second">A sequência a ser concatenada com a primeira sequência.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos concatenados das duas sequências de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Determina se uma sequência contém um elemento especificado usando o comparador de igualdade padrão.</summary>
      <param name="source">Uma sequência na qual um valor será localizado.</param>
      <param name="value">O valor a ser localizado na sequência.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se a sequência de origem contiver um elemento que tem o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se uma sequência contém um elemento especificado usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="source">Uma sequência na qual um valor será localizado.</param>
      <param name="value">O valor a ser localizado na sequência.</param>
      <param name="comparer">Um comparador de igualdade para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se a sequência de origem contiver um elemento que tem o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna o número de elementos em uma sequência.</summary>
      <param name="source">Uma sequência que contém os elementos a serem contados.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">O número de elementos no <paramref name="source" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>O número de elementos na sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna um número que representa quantos elementos na sequência especificada atendem a uma condição.</summary>
      <param name="source">Uma sequência que contém os elementos a serem testados e contados.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">O número de elementos no <paramref name="source" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Um número que representa quantos elementos na sequência atendem à condição na função de predicado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retornará os elementos da sequência especificada ou o valor padrão do parâmetro de tipo em uma coleção de singletons se a sequência estiver vazia.</summary>
      <param name="source">A sequência para a qual será retornado um valor padrão se ela estiver vazia.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um objeto <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém o valor padrão do tipo <paramref name="TSource" /> se <paramref name="source" /> estiver vazio; caso contrário, <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Retorna os elementos da sequência especificada ou o valor especificado em uma coleção de singletons se a sequência está vazia.</summary>
      <param name="source">A sequência para a qual será retornado o valor especificado se ela estiver vazia.</param>
      <param name="defaultValue">O valor a ser retornado se a sequência estiver vazia.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém <paramref name="defaultValue" /> se <paramref name="source" /> está vazio; caso contrário, <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna os elementos distintos de uma sequência usando o comparador de igualdade padrão para comparar valores.</summary>
      <param name="source">A sequência da qual os elementos duplicados serão removidos.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos distintos da sequência de origem.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Retorna os elementos distintos de uma sequência usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar valores.</summary>
      <param name="source">A sequência da qual os elementos duplicados serão removidos.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos distintos da sequência de origem.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Retorna o elemento de um índice especificado em uma sequência.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual um elemento será retornado.</param>
      <param name="index">O índice baseado em zero do elemento a ser recuperado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0 ou maior ou igual ao número de elementos em <paramref name="source" />.</exception>
      <returns>O elemento na posição especificada na sequência de origem.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Retorna o elemento em um índice especificado em uma sequência ou um valor padrão se o índice estiver fora do intervalo.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual um elemento será retornado.</param>
      <param name="index">O índice baseado em zero do elemento a ser recuperado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) se o índice estiver fora dos limites da sequência de origem; caso contrário, o elemento na posição especificada na sequência de origem.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>Retorna um <see cref="T:System.Collections.Generic.IEnumerable`1" /> vazio que tem o argumento do tipo especificado.</summary>
      <typeparam name="TResult">O tipo a ser atribuído ao parâmetro de tipo genérico <see cref="T:System.Collections.Generic.IEnumerable`1" /> retornado.</typeparam>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> vazio cujo tipo de argumento é <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produz a diferença de conjunto de duas sequências usando o comparador de igualdade padrão para comparar os valores.</summary>
      <param name="first">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos que não estão presentes também no <paramref name="second" /> serão retornados.</param>
      <param name="second">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos que também ocorrem na primeira sequência farão com que esses elementos sejam removidos da sequência retornada.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>Uma sequência que contém a diferença de conjunto dos elementos das duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produz a diferença de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar os valores.</summary>
      <param name="first">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos que não estão presentes também no <paramref name="second" /> serão retornados.</param>
      <param name="second">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos que também ocorrem na primeira sequência farão com que esses elementos sejam removidos da sequência retornada.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>Uma sequência que contém a diferença de conjunto dos elementos das duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna o primeiro elemento de uma sequência.</summary>
      <param name="source">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual o primeiro elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uma sequência de origem está vazia.</exception>
      <returns>O primeiro elemento na sequência especificada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o primeiro elemento em uma sequência que satisfaz uma condição especificada.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  
  
- ou - 
Uma sequência de origem está vazia.</exception>
      <returns>O primeiro elemento na sequência que passa o teste na função de predicado especificada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna o primeiro elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="source">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual o primeiro elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) se <paramref name="source" /> estiver vazio; caso contrário, o primeiro elemento em <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o primeiro elemento da sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) se <paramref name="source" /> estiver vazio ou se nenhum elemento for aprovado no teste especificado por <paramref name="predicate" />; caso contrário, o primeiro elemento em <paramref name="source" /> que for aprovado no teste especificado por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função de seletor de chave especificada.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> em C# ou <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> no Visual Basic em que cada objeto <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos e uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e compara as chaves usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> em C# ou <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> no Visual Basic em que cada objeto <see cref="T:System.Linq.IGrouping`2" /> contém uma coleção de objetos e uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Agrupa os elementos de uma sequência de acordo com a função de seletor de chave especificada e projeta os elementos de cada grupo usando uma função especificada.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector">Uma função para mapear cada elemento de origem para um elemento no <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos no <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="elementSelector" /> é <see langword="null" />.</exception>
      <returns>Um <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> em C# ou <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> no Visual Basic em que cada objeto <see cref="T:System.Linq.IGrouping`2" /> contém uma coleção de objetos de tipo <paramref name="TElement" /> e uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função de seletor de chave. As chaves são comparadas usando um comparador e os elementos de cada grupo são projetados usando uma função especificada.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos no <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="elementSelector" /> é <see langword="null" />.</exception>
      <returns>Um <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> em C# ou <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> no Visual Basic em que cada objeto <see cref="T:System.Linq.IGrouping`2" /> contém uma coleção de objetos de tipo <paramref name="TElement" /> e uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="resultSelector">Uma função para criar um valor de resultado de cada grupo.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <returns>Uma coleção de elementos do tipo <paramref name="TResult" />, em que cada elemento representa uma projeção em um grupo e sua chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. As chaves são comparadas usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="resultSelector">Uma função para criar um valor de resultado de cada grupo.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> com o qual as chaves serão comparadas.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <returns>Uma coleção de elementos do tipo <paramref name="TResult" />, em que cada elemento representa uma projeção em um grupo e sua chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. Os elementos de cada grupo são projetados usando uma função especificada.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Uma função para criar um valor de resultado de cada grupo.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <returns>Uma coleção de elementos do tipo <paramref name="TResult" />, em que cada elemento representa uma projeção em um grupo e sua chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. Os valores da chave são comparados usando um comparador especificado e os elementos de cada grupo são projetados usando uma função especificada.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Uma função para criar um valor de resultado de cada grupo.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> com o qual as chaves serão comparadas.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <returns>Uma coleção de elementos do tipo <paramref name="TResult" />, em que cada elemento representa uma projeção em um grupo e sua chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados. O comparador de igualdade padrão é usado para comparar chaves.</summary>
      <param name="outer">A primeira sequência a ser ingressada.</param>
      <param name="inner">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector">Uma função para criar um elemento de resultado de um elemento da primeira sequência e uma coleção de elementos correspondentes da segunda sequência.</param>
      <typeparam name="TOuter">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult">O tipo dos elementos de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção agrupada em duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados. Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado é usado para comparar chaves.</summary>
      <param name="outer">A primeira sequência a ser ingressada.</param>
      <param name="inner">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector">Uma função para criar um elemento de resultado de um elemento da primeira sequência e uma coleção de elementos correspondentes da segunda sequência.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para executar hash e comparar chaves.</param>
      <typeparam name="TOuter">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult">O tipo dos elementos de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção agrupada em duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produz a interseção de conjunto de duas sequências usando o comparador de igualdade padrão para comparar os valores.</summary>
      <param name="first">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos que também aparecem em <paramref name="second" /> serão retornados.</param>
      <param name="second">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos que também aparecem na primeira sequência serão retornados.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>Uma sequência que contém os elementos que formam a interseção de conjunto de duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produz a interseção de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar os valores.</summary>
      <param name="first">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos que também aparecem em <paramref name="second" /> serão retornados.</param>
      <param name="second">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos que também aparecem na primeira sequência serão retornados.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>Uma sequência que contém os elementos que formam a interseção de conjunto de duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlaciona os elementos de duas sequências com base em chaves de correspondência. O comparador de igualdade padrão é usado para comparar chaves.</summary>
      <param name="outer">A primeira sequência a ser ingressada.</param>
      <param name="inner">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector">Uma função para criar um elemento de resultado de dois elementos correspondentes.</param>
      <typeparam name="TOuter">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult">O tipo dos elementos de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> com elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção interna em duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlaciona os elementos de duas sequências com base em chaves de correspondência. Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado é usado para comparar chaves.</summary>
      <param name="outer">A primeira sequência a ser ingressada.</param>
      <param name="inner">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector">Uma função para criar um elemento de resultado de dois elementos correspondentes.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para executar hash e comparar chaves.</param>
      <typeparam name="TOuter">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult">O tipo dos elementos de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> com elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção interna em duas sequências.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna o último elemento de uma sequência.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual o último elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uma sequência de origem está vazia.</exception>
      <returns>O valor na última posição na sequência de origem.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o último elemento de uma sequência que satisfaz uma condição especificada.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  
  
- ou - 
Uma sequência de origem está vazia.</exception>
      <returns>O último elemento na sequência que passa o teste na função de predicado especificada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna o último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual o último elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) se a sequência de origem estiver vazia; caso contrário, o último elemento no <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o último elemento de uma sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="default" />(<paramref name="TSource" />) se a sequência for vazia ou se nenhum elemento passar no teste na função de predicado; caso contrário, o último elemento que passar no teste na função de predicado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna um <see cref="T:System.Int64" /> que representa o número total de elementos em uma sequência.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos a serem contados.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">O número de elementos excede <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>O número de elementos na sequência de origem.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna um <see cref="T:System.Int64" /> que representa quantos elementos na sequência atendem a uma condição.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos a serem contados.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">O número de elementos correspondentes excede <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>Um número que representa quantos elementos na sequência atendem à condição na função de predicado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> da qual será determinado o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Double" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> da qual será determinado o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Int32" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> da qual será determinado o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Int64" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> da qual será determinado o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Decimal" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> anuláveis para determinar o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Decimal&gt;</c> em C# ou <c>Nullable(Of Decimal)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Double" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> anuláveis para determinar o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Double&gt;</c> em C# ou <c>Nullable(Of Double)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Int32" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> anuláveis para determinar o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Int32&gt;</c> em C# ou <c>Nullable(Of Int32)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Int64" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> anuláveis para determinar o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Int64&gt;</c> em C# ou <c>Nullable(Of Int64)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Single" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> anuláveis para determinar o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Single&gt;</c> em C# ou <c>Nullable(Of Single)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Retorna o valor máximo em uma sequência de valores <see cref="T:System.Single" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> da qual será determinado o valor máximo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna o valor máximo em uma sequência genérica.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Nenhum objeto no <paramref name="source" /> implementa o <see cref="T:System.IComparable" /> ou a interface <see cref="T:System.IComparable`1" />.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Decimal" /> máximo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Double" /> máximo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Int32" /> máximo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Int64" /> máximo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Decimal" /> máximo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Decimal&gt;</c> em C# ou <c>Nullable(Of Decimal)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Double" /> máximo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Double&gt;</c> em C# ou <c>Nullable(Of Double)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Int32" /> máximo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Int32&gt;</c> em C# ou <c>Nullable(Of Int32)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Int64" /> máximo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Int64&gt;</c> em C# ou <c>Nullable(Of Int64)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Single" /> máximo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Single&gt;</c> em C# ou <c>Nullable(Of Single)</c> no Visual Basic que corresponde ao valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Single" /> máximo.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência genérica e retorna o maior valor resultante.</summary>
      <param name="source">Uma sequência de valores para determinação do valor máximo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo do valor retornado por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor máximo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> para determinação do valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Double" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> para determinação do valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Int32" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> para determinação do valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Int64" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> para determinação do valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Decimal" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> anuláveis dos quais determinar o valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Decimal&gt;</c> em C# ou <c>Nullable(Of Decimal)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Double" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> anuláveis dos quais determinar o valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Double&gt;</c> em C# ou <c>Nullable(Of Double)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Int32" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> anuláveis dos quais determinar o valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Int32&gt;</c> em C# ou <c>Nullable(Of Int32)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Int64" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> anuláveis dos quais determinar o valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Int64&gt;</c> em C# ou <c>Nullable(Of Int64)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Single" /> anuláveis.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> anuláveis dos quais determinar o valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um valor do tipo <c>Nullable&lt;Single&gt;</c> em C# ou <c>Nullable(Of Single)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Retorna o valor mínimo em uma sequência de valores <see cref="T:System.Single" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> para determinação do valor mínimo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna o valor mínimo em uma sequência genérica.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Nenhum objeto no <paramref name="source" /> implementa o <see cref="T:System.IComparable" /> ou a interface <see cref="T:System.IComparable`1" />.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Decimal" /> mínimo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Double" /> mínimo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Int32" /> mínimo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Int64" /> mínimo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Decimal" /> mínimo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Decimal&gt;</c> em C# ou <c>Nullable(Of Decimal)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Double" /> mínimo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Double&gt;</c> em C# ou <c>Nullable(Of Double)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Int32" /> mínimo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Int32&gt;</c> em C# ou <c>Nullable(Of Int32)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Int64" /> mínimo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Int64&gt;</c> em C# ou <c>Nullable(Of Int64)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Single" /> mínimo que permite valor nulo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor do tipo <c>Nullable&lt;Single&gt;</c> em C# ou <c>Nullable(Of Single)</c> no Visual Basic que corresponde ao valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência e retorna o valor <see cref="T:System.Single" /> mínimo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invoca uma função de transformação em cada elemento de uma sequência genérica e retorna o menor valor resultante.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor mínimo.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo do valor retornado por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>O valor mínimo na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Filtra os elementos de um <see cref="T:System.Collections.IEnumerable" /> com base em um tipo especificado.</summary>
      <param name="source">O <see cref="T:System.Collections.IEnumerable" /> cujos elementos serão filtrados.</param>
      <typeparam name="TResult">O tipo no qual filtrar os elementos da sequência.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos da sequência de entrada de tipo <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Classifica os elementos de uma sequência em ordem crescente de acordo com uma chave.</summary>
      <param name="source">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector">Uma função para extrair uma chave de um elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Classifica os elementos de uma sequência em ordem crescente usando um comparador especificado.</summary>
      <param name="source">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector">Uma função para extrair uma chave de um elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Classifica os elementos de uma sequência em ordem decrescente de acordo com uma chave.</summary>
      <param name="source">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector">Uma função para extrair uma chave de um elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Classifica os elementos de uma sequência em ordem decrescente usando um comparador especificado.</summary>
      <param name="source">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector">Uma função para extrair uma chave de um elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Adiciona um valor ao início da sequência.</summary>
      <param name="source">Uma sequência de valores.</param>
      <param name="element">O valor a ser precedido a <paramref name="source" />.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Uma nova sequência que começa com <paramref name="element" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Gera uma sequência de números integrais dentro de um intervalo especificado.</summary>
      <param name="start">O valor do primeiro inteiro na sequência.</param>
      <param name="count">O número de inteiros sequenciais a serem gerados.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> é menor que 0.  
  
- ou - 
 <paramref name="start" /> + <paramref name="count" /> -1 é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Um <c>IEnumerable&lt;Int32&gt;</c> em C# ou <c>IEnumerable(Of Int32)</c> no Visual Basic que contém um intervalo de números inteiros sequenciais.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Gera uma sequência que contém um valor repetido.</summary>
      <param name="element">O valor a ser repetido.</param>
      <param name="count">O número de vezes para repetir o valor na sequência gerada.</param>
      <typeparam name="TResult">O tipo do valor a ser repetido na sequência de resultado.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> é menor que 0.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém um valor repetido.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Inverte a ordem dos elementos em uma sequência.</summary>
      <param name="source">Uma sequência de valores a ser revertida.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Uma sequência cujos elementos correspondem aos elementos da sequência de entrada em ordem inversa.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Projeta cada elemento de uma sequência em um novo formulário.</summary>
      <param name="source">Uma sequência de valores na qual uma função de transformação será invocada.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo do valor retornado por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado da invocação da função de transformação em cada elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projeta cada elemento de uma sequência em um novo formulário, incorporando o índice do elemento.</summary>
      <param name="source">Uma sequência de valores na qual uma função de transformação será invocada.</param>
      <param name="selector">Uma função de transformação para aplicar a cada elemento de origem; o segundo parâmetro da função representa o índice do elemento de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo do valor retornado por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado da invocação da função de transformação em cada elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> e nivela as sequências resultantes em uma sequência.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência retornada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são resultado da invocação da função de transformação de um para muitos em cada elemento da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> e nivela as sequências resultantes em uma sequência. O índice de cada elemento de origem é usado no formulário projetado desse elemento.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="selector">Uma função de transformação para aplicar a cada elemento de origem; o segundo parâmetro da função representa o índice do elemento de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência retornada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado da invocação da função de transformação um-para-muitos em cada elemento de uma sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" />, mescla as sequências resultantes em uma sequência e chama uma função de seletor de resultado em cada elemento contido nele.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="collectionSelector">Uma função de transformação a ser aplicada a cada elemento da sequência de entrada.</param>
      <param name="resultSelector">Uma função de transformação a ser aplicada a cada elemento da sequência intermediária.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">O tipo dos elementos intermediários coletados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="collectionSelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado de chamar a função de transformação de um para muitos <paramref name="collectionSelector" /> em cada elemento de <paramref name="source" /> e, em seguida, mapear cada um desses elementos de sequência e seu elemento de origem correspondente para um elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" />, mescla as sequências resultantes em uma sequência e chama uma função de seletor de resultado em cada elemento contido nele. O índice de cada elemento de origem é usado no formulário projetado intermediário do elemento.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="collectionSelector">Uma função de transformação para aplicar a cada elemento de origem; o segundo parâmetro da função representa o índice do elemento de origem.</param>
      <param name="resultSelector">Uma função de transformação a ser aplicada a cada elemento da sequência intermediária.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">O tipo dos elementos intermediários coletados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="collectionSelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado de chamar a função de transformação de um para muitos <paramref name="collectionSelector" /> em cada elemento de <paramref name="source" /> e, em seguida, mapear cada um desses elementos de sequência e seu elemento de origem correspondente para um elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determina se duas sequências são iguais comparando os elementos usando o comparador de igualdade padrão para o tipo.</summary>
      <param name="first">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> para comparar com <paramref name="second" />.</param>
      <param name="second">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> para comparar com a primeira sequência.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se as duas sequências de origem forem de mesmo comprimento e seus elementos correspondentes forem iguais de acordo com o comparador de igualdade padrão para seu tipo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se duas sequências são iguais, comparando seus elementos usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="first">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> para comparar com <paramref name="second" />.</param>
      <param name="second">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> para comparar com a primeira sequência.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usado para comparar elementos.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se as duas sequências de origem tiverem o mesmo tamanho e seus elementos correspondentes forem comparados como iguais de acordo com o <paramref name="comparer" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retornará o único elemento de uma sequência e lançará uma exceção se não houver exatamente um elemento na sequência.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual o único elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A sequência de entrada contém mais de um elemento.  
  
 - ou -  
  
 A sequência de entrada está vazia.</exception>
      <returns>O único elemento de uma sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o único elemento de uma sequência que satisfaz uma condição especificada e gera uma exceção se houver mais de um tal elemento.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual retornar um único elemento.</param>
      <param name="predicate">Uma função para testar um elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  
  
- ou - 
Mais de um elemento satisfaz a condição na <paramref name="predicate" />.  
  
- ou - 
Uma sequência de origem está vazia.</exception>
      <returns>O único elemento da sequência de entrada que atende a uma condição.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Retorna o único elemento de uma sequência ou um valor padrão se a sequência é vazia; esse método gera uma exceção se há mais de um elemento na sequência.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual o único elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A sequência de entrada contém mais de um elemento.</exception>
      <returns>O único elemento da sequência de entrada, ou <see langword="default" />(<paramref name="TSource" />), se a sequência não contiver elementos.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o único elemento de uma sequência que satisfaz uma condição especificada ou um valor padrão se esse elemento não existir. Esse método lança uma exceção se mais de um elemento satisfizer a condição.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual retornar um único elemento.</param>
      <param name="predicate">Uma função para testar um elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Mais de um elemento satisfaz a condição na <paramref name="predicate" />.</exception>
      <returns>O único elemento da sequência de entrada que atende à condição ou <see langword="default" />(<paramref name="TSource" />) se esse elemento não for encontrado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Ignora um número especificado de elementos em uma sequência e retorna os elementos restantes.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual os elementos serão retornados.</param>
      <param name="count">O número de elementos a serem ignorados antes de retornar os elementos restantes.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos que ocorrem após o índice especificado na sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Retorna uma nova coleção enumerável que contém os elementos de <paramref name="source" /> com os últimos elementos de <paramref name="count" /> da coleção de origem omitidos.</summary>
      <param name="source">Uma instância da coleção enumerável.</param>
      <param name="count">O número de elementos a ser omitido do final da coleção.</param>
      <typeparam name="TSource">O tipo dos elementos na coleção enumerável.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Uma nova coleção enumerável que contém os elementos de <paramref name="source" /> menos os elementos de <paramref name="count" /> do final da coleção.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual os elementos serão retornados.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos da sequência de entrada, começando no primeiro elemento da série linear que não passa no teste especificado por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes. O índice do elemento é usado na lógica da função de predicado.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> do qual os elementos serão retornados.</param>
      <param name="predicate">Uma função para testar cada elemento de origem em relação a uma condição; o segundo parâmetro da função representa o índice do elemento de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos da sequência de entrada, começando no primeiro elemento da série linear que não passa no teste especificado por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Double" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Int32" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Int64" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Single" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> para cálculo da soma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>A soma dos valores na sequência.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Decimal" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Double" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Int32" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Int64" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Decimal" /> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Double" /> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Int32" /> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Int64" /> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Single" /> anuláveis obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Single" /> obtidos pela invocação de uma função de transformação em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma soma.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <returns>A soma dos valores projetados.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Retorna um número especificado de elementos contíguos do início de uma sequência.</summary>
      <param name="source">A sequência da qual os elementos serão retornados.</param>
      <param name="count">O número de elementos a serem retornados.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém o número especificado de elementos do início da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Retorna uma nova coleção enumerável que contém os últimos elementos de <paramref name="count" /> de <paramref name="source" />.</summary>
      <param name="source">Uma instância da coleção enumerável.</param>
      <param name="count">O número de elementos a ser retirado do final da coleção.</param>
      <typeparam name="TSource">O tipo dos elementos na coleção enumerável.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Uma nova coleção enumerável que contém os últimos elementos de <paramref name="count" /> de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna os elementos de uma sequência contanto que uma condição especificada seja verdadeira.</summary>
      <param name="source">Uma sequência a qual retornar os elementos.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos da sequência de entrada que ocorrem antes do elemento no qual o teste não é mais aprovado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Retorna os elementos de uma sequência contanto que uma condição especificada seja verdadeira. O índice do elemento é usado na lógica da função de predicado.</summary>
      <param name="source">A sequência da qual os elementos serão retornados.</param>
      <param name="predicate">Uma função para testar cada elemento de origem em relação a uma condição; o segundo parâmetro da função representa o índice do elemento de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos da sequência de entrada que ocorrem antes do elemento no qual o teste não é mais aprovado.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente de acordo com uma chave.</summary>
      <param name="source">Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente, de acordo com uma chave.</summary>
      <param name="source">Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria uma matriz de um <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> para criar uma matriz.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Uma matriz que contém os elementos da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Cria um <see cref="T:System.Collections.Generic.Dictionary`2" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" />, de acordo com uma função de seletor de chave especificada.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Collections.Generic.Dictionary`2" /> será criado.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="keySelector" /> gera uma chave que é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> gera chaves duplicatas para dois elementos.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.Dictionary`2" /> que contém chaves e valores. Os valores dentro de cada grupo estão na mesma ordem que no <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Cria um <see cref="T:System.Collections.Generic.Dictionary`2" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" />, de acordo com uma função de seletor de chave especificada e um comparador de chaves.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Collections.Generic.Dictionary`2" /> será criado.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="keySelector" /> gera uma chave que é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> gera chaves duplicatas para dois elementos.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.Dictionary`2" /> que contém chaves e valores. Os valores dentro de cada grupo estão na mesma ordem que no <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Cria um <see cref="T:System.Collections.Generic.Dictionary`2" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" />, de acordo com as funções especificadas de seletor de chave e seletor de elemento.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Collections.Generic.Dictionary`2" /> será criado.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="elementSelector">Uma função de transformação para produzir um valor de elemento de resultado de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo do valor retornado por <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="elementSelector" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="keySelector" /> gera uma chave que é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> gera chaves duplicatas para dois elementos.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.Dictionary`2" /> que contém valores do tipo <paramref name="TElement" /> selecionados da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Cria um <see cref="T:System.Collections.Generic.Dictionary`2" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de acordo com uma função de seletor de chave, um comparador e uma função de seletor de elemento especificados.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Collections.Generic.Dictionary`2" /> será criado.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="elementSelector">Uma função de transformação para produzir um valor de elemento de resultado de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo do valor retornado por <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="elementSelector" /> é <see langword="null" />.  
  
- ou - 
 <paramref name="keySelector" /> gera uma chave que é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> gera chaves duplicatas para dois elementos.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.Dictionary`2" /> que contém valores do tipo <paramref name="TElement" /> selecionados da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria um <see cref="T:System.Collections.Generic.HashSet`1" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Collections.Generic.HashSet`1" /> será criado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Collections.Generic.HashSet`1" /> que contém os valores do tipo TSource selecionados da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cria um <see cref="T:System.Collections.Generic.HashSet`1" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" /> usando o <paramref name="comparer" /> para comparar chaves.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Collections.Generic.HashSet`1" /> será criado.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Collections.Generic.HashSet`1" /> que contém valores do tipo <paramref name="TSource" /> selecionados da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria um <see cref="T:System.Collections.Generic.List`1" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Collections.Generic.List`1" /> será criado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.List`1" /> que contém elementos da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Cria um <see cref="T:System.Linq.Lookup`2" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" />, de acordo com uma função de seletor de chave especificada.</summary>
      <param name="source">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Linq.Lookup`2" /> será criado.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.Lookup`2" /> que contém chaves e valores. Os valores dentro de cada grupo estão na mesma ordem que no <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Cria um <see cref="T:System.Linq.Lookup`2" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" />, de acordo com uma função de seletor de chave especificada e um comparador de chaves.</summary>
      <param name="source">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Linq.Lookup`2" /> será criado.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.Lookup`2" /> que contém chaves e valores. Os valores dentro de cada grupo estão na mesma ordem que no <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Cria um <see cref="T:System.Linq.Lookup`2" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" />, de acordo com as funções especificadas de seletor de chave e seletor de elemento.</summary>
      <param name="source">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Linq.Lookup`2" /> será criado.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="elementSelector">Uma função de transformação para produzir um valor de elemento de resultado de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo do valor retornado por <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="elementSelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.Lookup`2" /> que contém valores do tipo <paramref name="TElement" /> selecionados da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Cria um <see cref="T:System.Linq.Lookup`2" /> de um <see cref="T:System.Collections.Generic.IEnumerable`1" /> de acordo com uma função de seletor de chave, um comparador e uma função de seletor de elemento especificados.</summary>
      <param name="source">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> por meio do qual um <see cref="T:System.Linq.Lookup`2" /> será criado.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="elementSelector">Uma função de transformação para produzir um valor de elemento de resultado de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada por <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo do valor retornado por <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="elementSelector" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Linq.Lookup`2" /> que contém valores do tipo <paramref name="TElement" /> selecionados da sequência de entrada.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produz a união de conjunto de duas sequências usando o comparador de igualdade padrão.</summary>
      <param name="first">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos formam o primeiro conjunto da união.</param>
      <param name="second">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos formam o segundo conjunto da união.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos de ambas as sequências de entrada, excluindo as duplicatas.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produz a união de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="first">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos formam o primeiro conjunto da união.</param>
      <param name="second">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos formam o segundo conjunto da união.</param>
      <param name="comparer">O <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém os elementos de ambas as sequências de entrada, excluindo as duplicatas.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Filtra uma sequência de valores com base em um predicado.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> a ser filtrado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos da sequência de entrada que atendem à condição.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filtra uma sequência de valores com base em um predicado. O índice de cada elemento é usado na lógica da função de predicado.</summary>
      <param name="source">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> a ser filtrado.</param>
      <param name="predicate">Uma função para testar cada elemento de origem em relação a uma condição; o segundo parâmetro da função representa o índice do elemento de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos da sequência de entrada que atendem à condição.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary>Produz uma sequência de tuplas com elementos das duas sequências especificadas.</summary>
      <param name="first">A primeira sequência a ser mesclada.</param>
      <param name="second">A segunda sequência a ser mesclada.</param>
      <typeparam name="TFirst">O tipo de elementos na primeira sequência de entrada.</typeparam>
      <typeparam name="TSecond">O tipo de elementos na segunda sequência de entrada.</typeparam>
      <returns>Uma sequência de tuplas com elementos extraídos da primeira e segunda sequências, nessa ordem.</returns>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Aplica uma função especificada para os elementos correspondentes de duas sequências, produzindo uma sequência dos resultados.</summary>
      <param name="first">A primeira sequência a ser mesclada.</param>
      <param name="second">A segunda sequência a ser mesclada.</param>
      <param name="resultSelector">Uma função que especifica como mesclar os elementos das duas sequências.</param>
      <typeparam name="TFirst">O tipo de elementos na primeira sequência de entrada.</typeparam>
      <typeparam name="TSecond">O tipo de elementos na segunda sequência de entrada.</typeparam>
      <typeparam name="TResult">O tipo de elementos na sequência de resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> ou <paramref name="second" /> é <see langword="null" />.</exception>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contém elementos mesclados de duas sequências de entrada.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Representa uma coleção de objetos que têm uma chave comum.</summary>
      <typeparam name="TKey">O tipo da chave de <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TElement">O tipo dos valores em <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Obtém a chave do <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns>A chave do <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Define um indexador, a propriedade de tamanho e o método de pesquisa booliana para estruturas de dados que mapeiam chaves para sequências <see cref="T:System.Collections.Generic.IEnumerable`1" /> de valores.</summary>
      <typeparam name="TKey">O tipo das chaves no <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos nas sequências <see cref="T:System.Collections.Generic.IEnumerable`1" /> que compõem os valores de <see cref="T:System.Linq.ILookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Determina se uma chave especificada existe no <see cref="T:System.Linq.ILookup`2" />.</summary>
      <param name="key">Uma chave pela qual pesquisar no <see cref="T:System.Linq.ILookup`2" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="key" /> estiver no <see cref="T:System.Linq.ILookup`2" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Obtém o número de pares da coleção chave-valor no <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>O número de pares de coleção de chave/valor no <see cref="T:System.Linq.ILookup`2" /> .</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Obtém o sequência de valores <see cref="T:System.Collections.Generic.IEnumerable`1" /> indexados por uma chave especificada.</summary>
      <param name="key">A chave da sequência de valores desejada.</param>
      <returns>A sequência de valores <see cref="T:System.Collections.Generic.IEnumerable`1" /> indexados pela chave especificada.</returns>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Representa uma sequência classificada.</summary>
      <typeparam name="TElement">O tipo dos elementos da sequência.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Executa uma ordenação subsequente nos elementos de uma <see cref="T:System.Linq.IOrderedEnumerable`1" /> de acordo com uma chave.</summary>
      <param name="keySelector">O <see cref="T:System.Func`2" /> usado para extrair a chave de cada elemento.</param>
      <param name="comparer">O <see cref="T:System.Collections.Generic.IComparer`1" /> usado para comparar chaves para posicionamento na sequência retornada.</param>
      <param name="descending">
        <see langword="true" /> para classificar os elementos em ordem decrescente; <see langword="false" /> para classificar os elementos em ordem crescente.</param>
      <typeparam name="TKey">O tipo da chave produzida por <paramref name="keySelector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IOrderedEnumerable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Representa uma coleção de chaves, cada uma mapeada para um ou mais valores.</summary>
      <typeparam name="TKey">O tipo das chaves no <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos de cada valor <see cref="T:System.Collections.Generic.IEnumerable`1" /> no <see cref="T:System.Linq.Lookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Aplica uma função de transformação a cada chave e seus valores associados e retorna os resultados.</summary>
      <param name="resultSelector">Uma função para projetar um valor de resultado de cada chave e seus valores associados.</param>
      <typeparam name="TResult">O tipo dos valores de resultado produzidos por <paramref name="resultSelector" /> .</typeparam>
      <returns>Uma coleção que contém um valor para cada par da coleção chave-valor no <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Determina se uma chave especificada está no <see cref="T:System.Linq.Lookup`2" />.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Linq.Lookup`2" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="key" /> estiver no <see cref="T:System.Linq.Lookup`2" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Retorna um enumerador genérico que itera por <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>Um enumerador para o <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera por meio de <see cref="T:System.Linq.Lookup`2" />. Essa classe não pode ser herdada.</summary>
      <returns>Um enumerador para o <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Obtém o número de pares da coleção chave-valor no <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>O número de pares de coleção de chave/valor no <see cref="T:System.Linq.Lookup`2" /> .</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Obtém a coleção de valores indexados pela chave especificada.</summary>
      <param name="key">A chave da coleção de valores desejada.</param>
      <returns>A coleção de valores indexada pela chave especificada.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.Serialization.Json</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.DateTimeFormat">
      <summary vsli:raw="Specifies date-time format options.">指定日期時間格式選項。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DateTimeFormat&quot; /&gt; class using the format string.">使用格式字串初始化 <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> 類別的新執行個體。</summary>
      <param name="formatString" vsli:raw="The format string.">格式字串。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String,System.IFormatProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.DateTimeFormat&quot; /&gt; class using the format string and format provider.">使用格式字串和格式提供者，初始化 <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> 類別的新執行個體。</summary>
      <param name="formatString" vsli:raw="The format sting.">格式字串。</param>
      <param name="formatProvider" vsli:raw="The format provider.">格式提供者。</param>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.DateTimeStyles">
      <summary vsli:raw="Gets or sets the formatting options that customize string parsing for some date and time parsing methods.">取得或設定格式化選項，這些選項會自訂一些日期和時間剖析方法的字串剖析。</summary>
      <returns vsli:raw="The formatting options that customize string parsing for some date and time parsing methods.">格式化選項，這些選項會自訂一些日期和時間剖析方法的字串剖析。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatProvider">
      <summary vsli:raw="Gets an object that controls formatting.">取得控制格式設定的物件。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatString">
      <summary vsli:raw="Gets the format strings to control the formatting produced when a date or time is represented as a string.">取得當日期或時間表示為字串時，用來控制所產生格式的格式字串。</summary>
      <returns vsli:raw="The format strings to control the formatting produced when a date or time is represented as a string.">當日期或時間表示為字串時，用來控制生成格式的格式字串。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EmitTypeInformation">
      <summary vsli:raw="Specifies how often to emit type information.">指定發出型別資訊的頻率。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Always">
      <summary vsli:raw="Always to emit type information.">永遠要發出型別資訊。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.AsNeeded">
      <summary vsli:raw="As needed emit type information.">視需要發出型別資訊。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Never">
      <summary vsli:raw="Never to emit type information.">永遠不要發出型別資訊。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      <summary vsli:raw="Serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to objects. This class cannot be inherited.">將物件序列化為 JavaScript 物件標記法 (JSON) 以及將 JSON 資料還原序列化為物件。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type.">初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，以序列化或還原序列化所指定型別的物件。</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">已序列化或還原序列化之執行個體的型別。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type, with a collection of known types that may be present in the object graph.">初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，以序列化或還原序列化所指定型別的物件，以及可能存在物件圖形中的已知型別集合。</summary>
      <param name="type" vsli:raw="The type of the instances that are serialized or deserialized.">已序列化或還原序列化之執行個體的型別。</param>
      <param name="knownTypes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Type" />，其中包含可能存在物件圖形中的型別。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of the specified type and serializer settings.">初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，以序列化或還原序列化所指定型別及序列化程式設定的物件。</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">已序列化或還原序列化之執行個體的型別。</param>
      <param name="settings" vsli:raw="The serializer settings for the JSON serializer.">JSON 序列化程式的序列化程式設定。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter.">初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，使用參數所指定的 XML 根項目來序列化或還原序列化指定型別的物件。</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">已序列化或還原序列化之執行個體的型別。</param>
      <param name="rootName" vsli:raw="The name of the XML element that encloses the content to serialize or deserialize.">內含要序列化或還原序列化之內容的 XML 項目名稱。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter, with a collection of known types that may be present in the object graph.">初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，使用參數所指定的 XML 根項目來序列化或還原序列化指定型別的物件，以及可能存在物件圖形中的已知型別集合。</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">已序列化或還原序列化之執行個體的型別。</param>
      <param name="rootName" vsli:raw="The name of the XML element that encloses the content to serialize or deserialize. The default is &quot;root&quot;.">內含要序列化或還原序列化之內容的 XML 項目名稱。 預設為 "root"。</param>
      <param name="knownTypes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Type" />，其中包含可能存在物件圖形中的型別。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter of type &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;.">初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，使用 <see cref="T:System.Xml.XmlDictionaryString" /> 型別之參數所指定的 XML 根項目來序列化或還原序列化指定型別的物件。</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">已序列化或還原序列化之執行個體的型別。</param>
      <param name="rootName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that contains the root element name of the content.">
        <see cref="T:System.Xml.XmlDictionaryString" />，其中包含內容的根項目名稱。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; class to serialize or deserialize an object of a specified type using the XML root element specified by a parameter of type &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt;, with a collection of known types that may be present in the object graph.">初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，使用 <see cref="T:System.Xml.XmlDictionaryString" /> 型別之參數所指定的 XML 根項目來序列化或還原序列化指定型別的物件，以及可能存在物件圖形中的已知型別集合。</summary>
      <param name="type" vsli:raw="The type of the instances that is serialized or deserialized.">已序列化或還原序列化之執行個體的型別。</param>
      <param name="rootName" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryString&quot; /&gt; that contains the root element name of the content.">
        <see cref="T:System.Xml.XmlDictionaryString" />，其中包含內容的根項目名稱。</param>
      <param name="knownTypes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; of &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the types that may be present in the object graph.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Type" />，其中包含可能存在物件圖形中的型別。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary vsli:raw="Gets a value that specifies whether the &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; is positioned over an XML element that represents an object the serializer can deserialize from.">取得值，這個值會指定 <see cref="T:System.Xml.XmlDictionaryReader" /> 是否位於表示序列化程式能夠還原序列化之物件的 XML 項目上。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML stream mapped from JSON.">用來讀取從 JSON 對應之 XML 資料流的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned correctly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器位於正確位置則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is positioned on an object that can be deserialized.">判斷 <see cref="T:System.Xml.XmlReader" /> 是否置於可還原序列化的物件上。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML stream.">用來讀取 XML 資料流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned correctly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器位於正確位置則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <summary vsli:raw="Reads a document stream in the JSON (JavaScript Object Notation) format and returns the deserialized object.">讀取 JSON (JavaScript 物件標記法) 格式的文件資料流，然後傳回已還原序列化的物件。</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; to be read.">要讀取的 <see cref="T:System.IO.Stream" />。</param>
      <returns vsli:raw="The deserialized object.">還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary vsli:raw="Reads the XML document mapped from JSON (JavaScript Object Notation) with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; and returns the deserialized object.">使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 讀取從 JSON (JavaScript 物件標記法) 對應的 XML 文件，然後傳回已還原序列化的物件。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML document mapped from JSON.">
        <see cref="T:System.Xml.XmlDictionaryReader" />，用於讀取從 JSON 對應的 XML 文件。</param>
      <returns vsli:raw="The deserialized object.">還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary vsli:raw="Reads the XML document mapped from JSON with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; and returns the deserialized object; it also enables you to specify whether the serializer should verify that it is positioned on an appropriate element before attempting to deserialize.">使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 讀取從 JSON 對應的 XML 文件，然後傳回已還原序列化的物件。它也可以讓您指定序列化程式在嘗試還原序列化前是否檢查位於適當的項目上。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; used to read the XML document mapped from JSON.">
        <see cref="T:System.Xml.XmlDictionaryReader" />，用於讀取從 JSON 對應的 XML 文件。</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check whether the enclosing XML element name and namespace correspond to the expected name and namespace; otherwise, &lt;see langword=&quot;false&quot; /&gt; to skip the verification. The default is &lt;see langword=&quot;true&quot; /&gt;.">若要檢查內含的 XML 項目名稱和命名空間是否對應至預期的名稱以及命名空間，則為 <see langword="true" />，否則為 <see langword="false" />，將會略過驗證。 預設為 <see langword="true" />。</param>
      <returns vsli:raw="The deserialized object.">還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)">
      <summary vsli:raw="Reads the XML document mapped from JSON (JavaScript Object Notation) with an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and returns the deserialized object.">使用 <see cref="T:System.Xml.XmlReader" /> 讀取從 JSON (JavaScript 物件標記法) 對應的 XML 文件，然後傳回已還原序列化的物件。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML document mapped from JSON.">
        <see cref="T:System.Xml.XmlReader" />，用於讀取從 JSON 對應的 XML 文件。</param>
      <returns vsli:raw="The deserialized object.">還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Reads an XML document mapped from JSON with an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and returns the deserialized object; it also enables you to specify whether the serializer should verify that it is positioned on an appropriate element before attempting to deserialize.">使用 <see cref="T:System.Xml.XmlReader" /> 讀取從 JSON 對應的 XML 文件，然後傳回已還原序列化的物件。它也可以讓您指定序列化程式在嘗試還原序列化前是否檢查位於適當的項目上。</summary>
      <param name="reader" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to read the XML document mapped from JSON.">
        <see cref="T:System.Xml.XmlReader" />，用於讀取從 JSON 對應的 XML 文件。</param>
      <param name="verifyObjectName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check whether the enclosing XML element name and namespace correspond to the expected name and namespace; otherwise, &lt;see langword=&quot;false&quot; /&gt;, which skips the verification. The default is &lt;see langword=&quot;true&quot; /&gt;.">若要檢查內含的 XML 項目名稱和命名空間是否對應至預期的名稱以及命名空間，則為 <see langword="true" />，否則為 <see langword="false" />，將會略過驗證。 預設為 <see langword="true" />。</param>
      <returns vsli:raw="The deserialized object.">還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary vsli:raw="Writes the closing XML element to an XML document, using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;, which can be mapped to JavaScript Object Notation (JSON).">使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 將結尾 XML 項目寫入可以對應至 JavaScript 物件標記法 (JSON) 的 XML 文件。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML document to map to JSON.">
        <see cref="T:System.Xml.XmlDictionaryWriter" />，可用來撰寫要對應至 JSON 的 XML 文件。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary vsli:raw="Writes the closing XML element to an XML document, using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;, which can be mapped to JavaScript Object Notation (JSON).">使用 <see cref="T:System.Xml.XmlWriter" /> 將結尾 XML 項目寫入可以對應至 JavaScript 物件標記法 (JSON) 的 XML 文件。</summary>
      <param name="writer" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document mapped to JSON.">
        <see cref="T:System.Xml.XmlWriter" />，可用來撰寫對應至 JSON 的 XML 文件。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary vsli:raw="Serializes a specified object to JavaScript Object Notation (JSON) data and writes the resulting JSON to a stream.">將指定物件序列化為 JavaScript 物件標記法 (JSON) 資料，然後將產生的 JSON 寫入資料流。</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; that is written to.">要寫入的 <see cref="T:System.IO.Stream" />。</param>
      <param name="graph" vsli:raw="The object that contains the data to write to the stream.">包含要寫入至資料流之資料的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Serializes an object to XML that may be mapped to JavaScript Object Notation (JSON). Writes all the object data, including the starting XML element, content, and closing element, with an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">將物件序列化為可以對應至 JavaScript 物件標記法 (JSON) 的 XML。 使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 來寫入所有的物件資料，包括起始 XML 項目、內容和結尾項目。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML document or stream to map to JSON.">用來撰寫要對應至 JSON 之 XML 文件或資料流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph" vsli:raw="The object that contains the data to write.">包含要寫入之資料的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Serializes an object to XML that may be mapped to JavaScript Object Notation (JSON). Writes all the object data, including the starting XML element, content, and closing element, with an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將物件序列化為可以對應至 JavaScript 物件標記法 (JSON) 的 XML。 使用 <see cref="T:System.Xml.XmlWriter" /> 來寫入所有的物件資料，包括起始 XML 項目、內容和結尾項目。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML document to map to JSON.">用來撰寫要對應至 JSON 之 XML 文件的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object that contains the data to write.">包含要寫入之資料的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes the XML content that can be mapped to JavaScript Object Notation (JSON) using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 來撰寫可以對應至 JavaScript 物件標記法 (JSON) 的 XML 內容。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; to write to.">要寫入的目標 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph" vsli:raw="The object to write.">要寫入的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes the XML content that can be mapped to JavaScript Object Notation (JSON) using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlWriter" /> 來撰寫可以對應至 JavaScript 物件標記法 (JSON) 的 XML 內容。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write to.">用來寫入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object to write.">要寫入的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException" vsli:raw="The type being serialized does not conform to data contract rules. For example, the &lt;see cref=&quot;T:System.Runtime.Serialization.DataContractAttribute&quot; /&gt; attribute has not been applied to the type.">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="There is a problem with the instance being written.">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException" vsli:raw="The maximum number of objects to serialize has been exceeded. Check the &lt;see cref=&quot;P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph&quot; /&gt; property.">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary vsli:raw="Writes the opening XML element for serializing an object to XML that can be mapped to JavaScript Object Notation (JSON) using an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 寫入開頭 XML 項目，將物件序列化為可以對應至 JavaScript 物件標記法 (JSON) 的 XML。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; used to write the XML start element.">用於寫入 XML 開始項目的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph" vsli:raw="The object to write.">要寫入的物件。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Writes the opening XML element for serializing an object to XML that can be mapped to JavaScript Object Notation (JSON) using an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlWriter" /> 寫入開頭 XML 項目，將物件序列化為可以對應至 JavaScript 物件標記法 (JSON) 的 XML。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; used to write the XML start element.">用於寫入 XML 開始項目的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph" vsli:raw="The object to write.">要寫入的物件。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat">
      <summary vsli:raw="Gets the format of the date and time type items in object graph.">取得物件圖形中日期和時間型別項目的格式。</summary>
      <returns vsli:raw="The format of the date and time type items in object graph.">物件圖形中日期和時間型別項目的格式。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation">
      <summary vsli:raw="Gets or sets the data contract JSON serializer settings to emit type information.">取得或設定要發出型別資訊的資料合約 JSON 序列化程式設定。</summary>
      <returns vsli:raw="The data contract JSON serializer settings to emit type information.">要發出型別資訊的資料合約 JSON 序列化程式設定。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.IgnoreExtensionDataObject">
      <summary vsli:raw="Gets a value that specifies whether unknown data is ignored on deserialization and whether the &lt;see cref=&quot;T:System.Runtime.Serialization.IExtensibleDataObject&quot; /&gt; interface is ignored on serialization.">取得值，這個值會指定還原序列化時是否忽略未知資料，以及序列化時是否忽略 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> 介面。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore unknown data and &lt;see cref=&quot;T:System.Runtime.Serialization.IExtensibleDataObject&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要忽略未知資料和 <see langword="true" /> 則為 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <summary vsli:raw="Gets a collection of types that may be present in the object graph serialized using this instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt;.">取得型別的集合，這些型別可能會存在於使用這個 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 執行個體所序列化的物件圖形中。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; that contains the expected types passed in as known types to the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; constructor.">
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，其中包含已當做已知型別傳入至 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 建構函式的預期型別。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.MaxItemsInObjectGraph">
      <summary vsli:raw="Gets the maximum number of items in an object graph that the serializer serializes or deserializes in one read or write call.">取得物件圖形中序列化程式在一次讀取或寫入呼叫中，序列化或還原序列化的最大項目數。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The number of items exceeds the maximum value.">超過最大值的項目數。</exception>
      <returns vsli:raw="The maximum number of items to serialize or deserialize.">要序列化或還原序列化的最大項目數。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes">
      <summary vsli:raw="Gets or sets a value that specifies whether to serialize read only types.">取得或設定值，指定是否要序列化唯讀型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to serialize read only types; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示序列化唯讀型別，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat">
      <summary vsli:raw="Gets a value that specifies whether to use a simple dictionary format.">取得值，指定是否要使用簡單的字典格式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a simple dictionary format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示使用一個簡單的字典格式，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings">
      <summary vsli:raw="Specifies &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializer&quot; /&gt; settings.">指定 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 設定。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings&quot; /&gt; class.">初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.DateTimeFormat">
      <summary vsli:raw="Gets or sets a DateTimeFormat that defines the culturally appropriate format of displaying dates and times.">取得或設定 DateTimeFormat，定義日期和時間在文化特性上適當的顯示格式。</summary>
      <returns vsli:raw="The DateTimeFormat that defines the culturally appropriate format of displaying dates and times.">DateTimeFormat，可定義日期和時間在文化特性上適當的顯示格式。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.EmitTypeInformation">
      <summary vsli:raw="Gets or sets the data contract JSON serializer settings to emit type information.">取得或設定要發出型別資訊的資料合約 JSON 序列化程式設定。</summary>
      <returns vsli:raw="The data contract JSON serializer settings to emit type information.">要發出型別資訊的資料合約 JSON 序列化程式設定。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.IgnoreExtensionDataObject">
      <summary vsli:raw="Gets or sets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.">取得或設定值，這個值會指定當類別序列化或還原序列化時，是否略過類別延伸所提供的資料。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore data supplied by an extension of the class when the class is being serialized or deserialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示當類別序列化或還原序列化時，是否略過類別延伸所提供的資料，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.KnownTypes">
      <summary vsli:raw="Gets or sets a collection of types that may be present in the object graph serialized using this instance the DataContractJsonSerializerSettings.">取得或設定型別的集合，這些型別可能會存在於使用這個 DataContractJsonSerializerSettings 執行個體所序列化的物件圖形中。</summary>
      <returns vsli:raw="A collection of types that may be present in the object graph serialized using this instance the DataContractJsonSerializerSettings.">型別的集合，這些型別可能會存在於使用這個 DataContractJsonSerializerSettings 執行個體所序列化的物件圖形中。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.MaxItemsInObjectGraph">
      <summary vsli:raw="Gets or sets the maximum number of items in an object graph to serialize or deserialize.">取得或設定物件圖形中要序列化或還原序列化的最大項目數。</summary>
      <returns vsli:raw="The maximum number of items in an object graph to serialize or deserialize.">物件圖形中要序列化或還原序列化的最大項目數。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.RootName">
      <summary vsli:raw="Gets or sets the root name of the selected object.">取得或設定所選取物件的根名稱。</summary>
      <returns vsli:raw="The root name of the selected object.">所選物件的根名稱。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.SerializeReadOnlyTypes">
      <summary vsli:raw="Gets or sets a value that specifies whether to serialize read only types.">取得或設定值，指定是否要序列化唯讀型別。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to serialize read only types; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示序列化唯讀型別，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.UseSimpleDictionaryFormat">
      <summary vsli:raw="Gets or sets a value that specifies whether to use a simple dictionary format.">取得或設定值，指定是否要使用簡單的字典格式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a simple dictionary format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示使用一個簡單的字典格式，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer">
      <summary vsli:raw="Specifies the interface for initializing a JavaScript Object Notation (JSON) reader when reusing them to read from a particular stream or buffer.">當重複使用 JavaScript Object Notation (JSON) 讀取器從特定資料流或緩衝區讀取時，指定初始化該讀取器所使用的介面。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified buffer that contains JSON-encoded data.">將啟用 JavaScript 物件標記法 (JSON) 的讀取器重新初始化為含有 JSON 編碼資料的指定緩衝區。</summary>
      <param name="buffer" vsli:raw="The input &lt;see cref=&quot;T:System.Byte&quot; /&gt; buffer array from which to read.">要從其中讀取的輸入 <see cref="T:System.Byte" /> 緩衝區陣列。</param>
      <param name="offset" vsli:raw="The starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">要在 <paramref name="buffer" /> 中進行讀取的起始位置。</param>
      <param name="count" vsli:raw="The number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以從 <paramref name="buffer" /> 中讀取的位元組數目。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; used by the reader.">此讀取器使用的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要套用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="The &lt;see cref=&quot;T:System.Xml.OnXmlDictionaryReaderClose&quot; /&gt; delegate to call when the reader is closed.">關閉讀取器時要呼叫的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委派 (Delegate)。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Reinitializes a JavaScript Object Notation (JSON) enabled reader to a specified stream that contains JSON-encoded data.">將啟用 JavaScript 物件標記法 (JSON) 的讀取器重新初始化為含有 JSON 編碼資料的指定資料流。</summary>
      <param name="stream" vsli:raw="The input &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which to read.">要從其中讀取的輸入 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; used by the reader.">此讀取器使用的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="quotas" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; to apply.">要套用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="Delegate to call when the reader is closed.">關閉讀取器時要呼叫的委派。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
      <summary vsli:raw="Specifies the interface for initializing a JavaScript Object Notation (JSON) writer when reusing them to write to a particular output stream.">當重複使用 JavaScript Object Notation (JSON) 寫入器來寫入特定輸出資料流時，指定初始化寫入器所使用的介面。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary vsli:raw="Initializes (or reinitializes) a JavaScript Object Notation (JSON) writer to a specified output stream with specified character encoding.">將 JavaScript Object Notation (JSON) 寫入器初始化 (或重新初始化) 為具有指定字元編碼的指定輸出資料流。</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; to which the writer writes.">寫入器會將結果寫入至輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding of the output stream.">指定輸出資料流字元編碼的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="ownsStream" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;.">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary vsli:raw="Produces instances of &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset and instances of &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that can map an XML Infoset to JSON and write JSON-encoded data to a stream.">產生 <see cref="T:System.Xml.XmlDictionaryReader" /> 的執行個體，這個執行個體可以從資料流或緩衝區中讀取以 JavaScript 物件標記法 (JSON) 編碼的資料，並將其對應至 XML Infoset 以及 <see cref="T:System.Xml.XmlDictionaryWriter" /> 的執行個體，這個執行個體可以將 XML Infoset 對應至 JSON 並將 JSON 編碼的資料寫入至資料流。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map buffers encoded with JavaScript Object Notation (JSON), with a specified size and offset and character encoding, to an XML Infoset.">建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以將具有指定大小和位移以及字元編碼、以 JavaScript 物件標記法 (JSON) 編碼的緩衝區對應至 XML Infoset。</summary>
      <param name="buffer" vsli:raw="The input &lt;see cref=&quot;T:System.Byte&quot; /&gt; buffer array from which to read.">要從其中讀取的輸入 <see cref="T:System.Byte" /> 緩衝區陣列。</param>
      <param name="offset" vsli:raw="Starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">要在 <paramref name="buffer" /> 中進行讀取的起始位置。</param>
      <param name="count" vsli:raw="Number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以從 <paramref name="buffer" /> 中讀取的位元組數目。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the reader. If &lt;see langword=&quot;null&quot; /&gt; is specified as the value, the reader attempts to auto-detect the encoding.">
        <see cref="T:System.Text.Encoding" />，指定讀取器所使用的字元編碼。 如果指定 <see langword="null" /> 做為值，讀取器會嘗試自動偵測編碼。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="The &lt;see cref=&quot;T:System.Xml.OnXmlDictionaryReaderClose&quot; /&gt; delegate to call when the reader is closed. The default value is &lt;see langword=&quot;null&quot; /&gt;.">關閉讀取器時要呼叫的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委派 (Delegate)。 預設值是 <see langword="null" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read JavaScript Object Notation (JSON).">可以讀取 JavaScript 物件標記法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map buffers encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.">建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以將具有指定大小和位移、以 JavaScript 物件標記法 (JSON) 編碼的緩衝區對應至 XML Infoset。</summary>
      <param name="buffer" vsli:raw="The input &lt;see cref=&quot;T:System.Byte&quot; /&gt; buffer array from which to read.">要從其中讀取的輸入 <see cref="T:System.Byte" /> 緩衝區陣列。</param>
      <param name="offset" vsli:raw="Starting position from which to read in &lt;paramref name=&quot;buffer&quot; /&gt;.">要在 <paramref name="buffer" /> 中進行讀取的起始位置。</param>
      <param name="count" vsli:raw="Number of bytes that can be read from &lt;paramref name=&quot;buffer&quot; /&gt;.">可以從 <paramref name="buffer" /> 中讀取的位元組數目。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read JavaScript Object Notation (JSON).">可以讀取 JavaScript 物件標記法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map buffers encoded with JavaScript Object Notation (JSON) to an XML Infoset.">建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可將以 JavaScript 物件標記法 (JSON) 編碼的緩衝區對應至 XML Infoset。</summary>
      <param name="buffer" vsli:raw="The input &lt;see cref=&quot;T:System.Byte&quot; /&gt; buffer array from which to read.">要從其中讀取的輸入 <see cref="T:System.Byte" /> 緩衝區陣列。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can process JavaScript Object Notation (JSON) data.">可以處理 JavaScript 物件標記法 (JSON) 資料的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map streams encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.">建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以將具有指定大小和位移、以 JavaScript 物件標記法 (JSON) 編碼的資料流對應至 XML Infoset。</summary>
      <param name="stream" vsli:raw="The input &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which to read.">要從其中讀取的輸入 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the reader. If &lt;see langword=&quot;null&quot; /&gt; is specified as the value, the reader attempts to auto-detect the encoding.">
        <see cref="T:System.Text.Encoding" />，指定讀取器所使用的字元編碼。 如果指定 <see langword="null" /> 做為值，讀取器會嘗試自動偵測編碼。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose" vsli:raw="The &lt;see cref=&quot;T:System.Xml.OnXmlDictionaryReaderClose&quot; /&gt; delegate to call when the reader is closed.">關閉讀取器時要呼叫的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委派 (Delegate)。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read JavaScript Object Notation (JSON).">可以讀取 JavaScript 物件標記法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can map streams encoded with JavaScript Object Notation (JSON) to an XML Infoset.">建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可將以 JavaScript 物件標記法 (JSON) 編碼的資料流對應至 XML Infoset。</summary>
      <param name="stream" vsli:raw="The input &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which to read.">要從其中讀取的輸入 <see cref="T:System.IO.Stream" />。</param>
      <param name="quotas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDictionaryReaderQuotas&quot; /&gt; used to prevent Denial of Service attacks when reading untrusted data.">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryReader&quot; /&gt; that can read JavaScript Object Notation (JSON).">可以讀取 JavaScript 物件標記法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream.">建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至資料流。</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream with a specified character encoding.">建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至具有指定之字元編碼的資料流。</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the writer. The default encoding is UTF-8.">
        <see cref="T:System.Text.Encoding" />，指定寫入器所使用的字元編碼。 預設編碼方式為 UTF-8。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream with a specified character encoding.">建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至具有指定之字元編碼的資料流。</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the writer. The default encoding is UTF-8.">
        <see cref="T:System.Text.Encoding" />，指定寫入器所使用的字元編碼。 預設編碼方式為 UTF-8。</param>
      <param name="ownsStream" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。 預設值是 <see langword="true" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream with a specified character.">建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至具有指定之字元的資料流。</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the writer. The default encoding is UTF-8.">
        <see cref="T:System.Text.Encoding" />，指定寫入器所使用的字元編碼。 預設編碼方式為 UTF-8。</param>
      <param name="ownsStream" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。 預設值是 <see langword="true" />。</param>
      <param name="indent" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output uses multiline format, indenting each level properly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果為 <see langword="true" />，輸出會使用多行格式，並正確縮排每個層級，否則為 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to a stream with a specified character.">建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至具有指定之字元的資料流。</summary>
      <param name="stream" vsli:raw="The output &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; for the JSON writer.">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding" vsli:raw="The &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; that specifies the character encoding used by the writer. The default encoding is UTF-8.">
        <see cref="T:System.Text.Encoding" />，指定寫入器所使用的字元編碼。 預設編碼方式為 UTF-8。</param>
      <param name="ownsStream" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output stream is closed by the writer when done; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。 預設值是 <see langword="true" />。</param>
      <param name="indent" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the output uses multiline format, indenting each level properly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果為 <see langword="true" />，輸出會使用多行格式，並正確縮排每個層級，否則為 <see langword="false" />。</param>
      <param name="indentChars" vsli:raw="The string used to indent each level.">用來縮排每個層級的字串。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlDictionaryWriter&quot; /&gt; that writes data encoded with JSON to the stream based on an XML Infoset.">
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
  </members>
</doc>
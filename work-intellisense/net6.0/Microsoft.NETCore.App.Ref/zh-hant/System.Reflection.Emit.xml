<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary vsli:raw="Defines and represents a dynamic assembly.">定義及表示動態組件。</summary>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary vsli:raw="Defines a dynamic assembly that has the specified name and access rights.">定義具有指定名稱和存取模式的動態組件。</summary>
      <param name="name" vsli:raw="The name of the assembly.">組件的名稱。</param>
      <param name="access" vsli:raw="The access rights of the assembly.">組件的存取權限。</param>
      <returns vsli:raw="An object that represents the new assembly.">代表新組件的物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary vsli:raw="Defines a new assembly that has the specified name, access rights, and attributes.">定義具有指定名稱、存取權和屬性的新組件。</summary>
      <param name="name" vsli:raw="The name of the assembly.">組件的名稱。</param>
      <param name="access" vsli:raw="The access rights of the assembly.">組件的存取權限。</param>
      <param name="assemblyAttributes" vsli:raw="A collection that contains the attributes of the assembly.">包含此組件屬性的集合。</param>
      <returns vsli:raw="An object that represents the new assembly.">代表新組件的物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary vsli:raw="Defines a named transient dynamic module in this assembly.">在此組件中定義具名的暫時性動態模組。</summary>
      <param name="name" vsli:raw="The name of the dynamic module.">動態模組的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; begins with white space.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is greater than the system-defined maximum length.">
        <paramref name="name" /> 的開頭為空白字元。  
  
-或- 
<paramref name="name" /> 的長度為零。  
  
-或- 
<paramref name="name" /> 的長度大於系統定義的長度上限。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.ExecutionEngineException" vsli:raw="The assembly for default symbol writer cannot be loaded.&#xA;&#xA; -or-&#xA;&#xA; The type that implements the default symbol writer interface cannot be found.">無法載入預設符號寫入器的組件。  
  
 -或-  
  
 找不到實作預設符號寫入器介面的類型。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; representing the defined dynamic module.">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，代表定義的動態模組。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">傳回值，指出此執行個體是否等於指定的物件。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">傳回已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的所有自訂屬性。</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">這個類型的物件會忽略這個引數。</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">陣列，其中包含自訂屬性；如果沒有屬性，則陣列是空的。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;, and that derive from a specified attribute type.">傳回已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的所有自訂屬性，以及衍生自指定屬性類型的所有自訂屬性。</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">從中衍生屬性的基底類型。</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">這個類型的物件會忽略這個引數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。 例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
      <returns vsli:raw="An array that contains the custom attributes that are derived at any level from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">陣列，其中包含在任何層級衍生自 <paramref name="attributeType" /> 的自訂屬性；如果沒有這類屬性，則陣列是空的。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects that contain information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">傳回 <see cref="T:System.Reflection.CustomAttributeData" /> 物件，其中包含已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的屬性之相關資訊。</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前模組之屬性的資料。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary vsli:raw="Returns the dynamic module with the specified name.">傳回具有指定名稱的動態模組。</summary>
      <param name="name" vsli:raw="The name of the requested dynamic module.">要求之動態模組的名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="A ModuleBuilder object representing the requested dynamic module.">代表要求之動態模組的 ModuleBuilder 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary vsli:raw="Gets the exported types defined in this assembly.">取得這個組件中定義的匯出類型。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented.">這個方法尚未實作。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the exported types defined in this assembly.">
        <see cref="T:System.Type" /> 陣列，其中包含這個組件中定義的匯出類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file in the file table of the manifest of this assembly.">取得指定之檔案的 <see cref="T:System.IO.FileStream" />，這個指定之檔案位於這個組件的資訊清單檔案表中。</summary>
      <param name="name" vsli:raw="The name of the specified file.">指定檔案的名稱。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file, or &lt;see langword=&quot;null&quot; /&gt;, if the file is not found.">若為指定的檔案，則為 <see cref="T:System.IO.FileStream" />，或者如果找不到此檔案，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary vsli:raw="Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.">取得組件資訊清單檔案表中的檔案，指定是否要包含資源模組。</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; objects.">
        <see cref="T:System.IO.FileStream" /> 物件的陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary vsli:raw="Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.">傳回所有屬於這個組件的載入模組，並選擇性地包含資源模組。</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="The loaded modules that are part of this assembly.">屬於這個組件的載入模組。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary vsli:raw="Returns information about how the given resource has been persisted.">傳回指定資源已保存方式的資訊。</summary>
      <param name="resourceName" vsli:raw="The name of the resource.">資源名稱。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.ManifestResourceInfo&quot; /&gt; populated with information about the resource's topology, or &lt;see langword=&quot;null&quot; /&gt; if the resource is not found.">填入此資源拓撲相關資訊的 <see cref="T:System.Reflection.ManifestResourceInfo" />，如果找不到資源，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">載入來自這個組件的指定資訊清單資源。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported on a dynamic assembly. To get the manifest resource names, use &lt;see cref=&quot;M:System.Reflection.Assembly.GetManifestResourceNames&quot; /&gt;.">動態組件不支援這個方法。 若要取得資訊清單資源名稱，請使用 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="An array of type &lt;see langword=&quot;String&quot; /&gt; containing the names of all the resources.">類型 <see langword="String" /> 的陣列，包含所有資源的名稱。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">載入來自這個組件的指定資訊清單資源。</summary>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">所要求的資訊清單資源名稱。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">
        <see cref="T:System.IO.Stream" /> 代表這個資訊清單資源。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary vsli:raw="Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.">從這個組件載入指定資訊清單資源，由指定類型的命名空間限定範圍。</summary>
      <param name="type" vsli:raw="The type whose namespace is used to scope the manifest resource name.">類型，其命名空間是用來限定資訊清單資源名稱的範圍。</param>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">所要求的資訊清單資源名稱。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">
        <see cref="T:System.IO.Stream" /> 代表這個資訊清單資源。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary vsli:raw="Gets the specified module in this assembly.">取得這個組件中的指定模組。</summary>
      <param name="name" vsli:raw="The name of the requested module.">要求模組的名稱。</param>
      <returns vsli:raw="The module being requested, or &lt;see langword=&quot;null&quot; /&gt; if the module is not found.">正在接受要求的模組，如果找不到模組，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary vsli:raw="Gets all the modules that are part of this assembly, and optionally includes resource modules.">取得所有屬於這個組件的模組，並選擇性地包含資源模組。</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="The modules that are part of this assembly.">屬於這個組件的模組。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that was specified when the current dynamic assembly was created, and sets the code base as specified.">取得目前動態組件建立時指定的 <see cref="T:System.Reflection.AssemblyName" />，且依指定方式設定程式碼基底。</summary>
      <param name="copiedName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set the code base to the location of the assembly after it is shadow-copied; &lt;see langword=&quot;false&quot; /&gt; to set the code base to the original location.">若為 <see langword="true" /> 則將程式碼基底設定為組件陰影複製以後的位置，如為 <see langword="false" />則將程式碼基底設定為原始位置。</param>
      <returns vsli:raw="The name of the dynamic assembly.">動態組件的名稱。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary vsli:raw="Gets an incomplete list of &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; objects for the assemblies that are referenced by this &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">取得這個 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 所參考組件之 <see cref="T:System.Reflection.AssemblyName" /> 物件的不完整清單。</summary>
      <returns vsli:raw="An array of assembly names for the referenced assemblies. This array is not a complete list.">受參考組件的組件名稱陣列。 這個陣列不是完整的清單。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the satellite assembly for the specified culture.">取得指定文化特性的附屬組件。</summary>
      <param name="culture" vsli:raw="The specified culture.">指定的文化特性。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">找不到組件。</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; did not match the one specified.">找不到具有相符檔案名稱的附屬組件，但 <see langword="CultureInfo" /> 不符合所指定者。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">此附屬組件不是有效的組件。</exception>
      <returns vsli:raw="The specified satellite assembly.">指定的附屬組件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary vsli:raw="Gets the specified version of the satellite assembly for the specified culture.">取得指定文化特性的附屬組件指定版本。</summary>
      <param name="culture" vsli:raw="The specified culture.">指定的文化特性。</param>
      <param name="version" vsli:raw="The version of the satellite assembly.">附屬組件的版本。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; or the version did not match the one specified.">已找到檔案名稱相符的附屬組件，但 <see langword="CultureInfo" /> 或版本不符合所指定者。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">找不到組件。</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">此附屬組件不是有效的組件。</exception>
      <returns vsli:raw="The specified satellite assembly.">指定的附屬組件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the specified type from the types that have been defined and created in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">由在目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 中定義和建立的類型取得指定的類型。</summary>
      <param name="name" vsli:raw="The name of the type to search for.">要搜尋的類型名稱。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type is not found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，否則為 <see langword="false" />。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore the case of the type name when searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要在搜尋時忽略類型名稱的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="The specified type, or &lt;see langword=&quot;null&quot; /&gt; if the type is not found or has not been created yet.">如果此類型找不到或尚未建立，則為指定的類型或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.">傳回值，這個值表示指定屬性類型的一或多個執行個體是否套用至這個成員。</summary>
      <param name="attributeType" vsli:raw="The type of attribute to test for.">要測試的屬性類型。</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">這個類型的物件會忽略這個引數。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; is applied to this dynamic assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="attributeType" /> 的一或多個執行個體套用至這個動態組件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute on this assembly using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定這個組件上的自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is not a &lt;see langword=&quot;RuntimeConstructorInfo&quot; /&gt; object.">
        <paramref name="con" /> 不是 <see langword="RuntimeConstructorInfo" /> 物件。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute on this assembly using a custom attribute builder.">使用自訂屬性產生器來設定這個組件上的自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary vsli:raw="Gets the location of the assembly, as specified originally (such as in an &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; object).">取得原先指定的組件位置 (例如在 <see cref="T:System.Reflection.AssemblyName" /> 物件中指定的位置)。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="The location of the assembly, as specified originally.">原先指定的組件位置。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary vsli:raw="Returns the entry point of this assembly.">傳回這個組件的進入點。</summary>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="The entry point of this assembly.">這個組件的進入點。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary vsli:raw="Gets the display name of the current dynamic assembly.">取得目前動態組件的顯示名稱。</summary>
      <returns vsli:raw="The display name of the dynamic assembly.">目前動態組件的顯示名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>取得值，這個值表示組件是否從全域組件快取載入。</summary>
      <returns>一定是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary vsli:raw="Gets the host context where the dynamic assembly is being created.">取得建立動態組件所在的主機內容。</summary>
      <returns vsli:raw="A value that indicates the host context where the dynamic assembly is being created.">指出建立動態組件所在之主機內容的值。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>取得將要儲存在含有資訊清單之檔案中的 Common Language Runtime 版本。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <returns>代表 Common Language Runtime 版本的字串。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary vsli:raw="Gets a value that indicates that the current assembly is a dynamic assembly.">取得值，表示目前的組件是動態組件。</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;true&quot; /&gt;.">一定是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary vsli:raw="Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.">如果不是陰影複製，則取得包含資訊清單之已載入檔案的位置 (程式碼基底格式)。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, the &lt;see langword=&quot;Location&quot; /&gt; is that of the file before being shadow-copied.">包含資訊清單之載入檔的位置。 如果載入檔經過陰影複製，則 <see langword="Location" /> 就是陰影複製前的檔案。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary vsli:raw="Gets the module in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt; that contains the assembly manifest.">在目前的 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 中取得模組，其中包含組件資訊清單。</summary>
      <returns vsli:raw="The manifest module.">資訊清單模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary vsli:raw="Gets a value indicating whether the dynamic assembly is in the reflection-only context.">取得值，其會表示此動態組件是否位於僅限反射內容中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic assembly is in the reflection-only context; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此動態組件位於僅限反映的內容，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary vsli:raw="Defines the access modes for a dynamic assembly.">定義動態組件的存取模式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary vsli:raw="The dynamic assembly can be executed, but not saved.">動態組件可以執行，但不能儲存。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary vsli:raw="The dynamic assembly will be automatically unloaded and its memory reclaimed, when it's no longer accessible.">當無法再存取動態組件時，會自動卸載動態組件並回收其記憶體。</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary vsli:raw="Defines and represents a constructor of a dynamic class.">定義及表示動態類別的建構函式。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of this constructor.">定義這個建構函式的參數。</summary>
      <param name="iSequence" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">在參數清單中參數的位置。 第一個參數的參數索引從數字 1 開始。</param>
      <param name="attributes" vsli:raw="The attributes of the parameter.">這個參數的屬性。</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">參數名稱。 名稱可以是 null 字串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;iSequence&quot; /&gt; is less than 0 (zero), or it is greater than the number of parameters of the constructor.">
        <paramref name="iSequence" /> 小於 0 (零) 或大於建構函式的參數數目。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
      <returns vsli:raw="An object that represents the new parameter of this constructor.">物件，代表這個建構函式的新參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">傳回為這個建構函式定義的所有自訂屬性。</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">控制自訂屬性來自基底類別的繼承。 這個參數已忽略。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <returns vsli:raw="An array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">物件陣列，代表這個 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 執行個體所代表的建構函式所有自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">傳回指定類型所識別的自訂屬性。</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">自訂屬性類型。</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">控制自訂屬性來自基底類別的繼承。 這個參數已忽略。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <returns vsli:raw="An object array that represents the attributes of this constructor.">物件陣列，代表這個建構函式的屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">取得這個建構函式的 <see cref="T:System.Reflection.Emit.ILGenerator" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">此建構函式是無參數建構函式。  
  
-或- 
建構函式具有 <see cref="T:System.Reflection.MethodAttributes" /> 或 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，表示它不該有方法主體。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for this constructor.">這個建構函式的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object, with the specified MSIL stream size, that can be used to build a method body for this constructor.">取得 <see cref="T:System.Reflection.Emit.ILGenerator" /> 具有指定的 MSIL 資料流大小的物件，可以用來建置此建構函式的方法主體。</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">MSIL 資料流的大小，以位元組為單位。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">此建構函式是無參數建構函式。  
  
-或- 
建構函式具有 <see cref="T:System.Reflection.MethodAttributes" /> 或 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，表示它不該有方法主體。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">這個建構函式的 <see cref="T:System.Reflection.Emit.ILGenerator" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the method implementation flags for this constructor.">傳回的這個建構函式的方法實作旗標。</summary>
      <returns vsli:raw="The method implementation flags for this constructor.">這個建構函式的方法實作旗標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this constructor.">傳回這個建構函式的參數。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1.">在 .NET Framework 1.0 和 1.1 版中，尚未針對這個建構函式類型呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework version 2.0.">在 .NET Framework 2.0 版中，尚未針對這個建構函式類型呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
      <returns vsli:raw="An array that represents the parameters of this constructor.">陣列，代表這個建構函式的參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified &lt;see langword=&quot;Binder&quot; /&gt;.">在指定的 <see langword="Binder" /> 條件約束下，動態叫用這個執行個體與指定引數反映的建構函式。</summary>
      <param name="obj" vsli:raw="The object that needs to be reinitialized.">必須重新初始化的物件。</param>
      <param name="invokeAttr" vsli:raw="One of the &lt;see langword=&quot;BindingFlags&quot; /&gt; values that specifies the type of binding that is desired.">其中一個 <see langword="BindingFlags" /> 值指定想要的繫結類型。</param>
      <param name="binder" vsli:raw="A &lt;see langword=&quot;Binder&quot; /&gt; that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, then Binder.DefaultBinding is used.">
        <see langword="Binder" />，會使用反映定義一組屬性和啟用繫結、引數類型強制型轉和成員引動過程。 如果 <paramref name="binder" /> 是 <see langword="null" />，則會使用 Binder.DefaultBinding。</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">引數清單。 這是引數陣列，其數目、順序和類型與要叫用的建構函式參數相同。 如果沒有任何參數，則這應該是 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used.">
        <see cref="T:System.Globalization.CultureInfo" />，用來管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">目前不支援這個方法。 您可以使用 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 並在傳回的 <see cref="T:System.Reflection.ConstructorInfo" /> 呼叫 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />，藉此擷取建構函式。</exception>
      <returns vsli:raw="An instance of the class associated with the constructor.">與建構函式相關聯的類別之執行個體。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor represented by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">動態叫用這個執行個體在指定物件上代表的建構函式，並與指定參數一併依指定繫結器的條件約束傳遞。</summary>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，例如 InvokeMethod、NonPublic 等等。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果繫結器為 <see langword="null" />，則會使用預設繫結器。 請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">引數清單。 這是引數陣列，其數目、順序和類型與要叫用的建構函式參數相同。 如果沒有任何參數，則這應該是 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (For example, this is necessary to convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。 (例如，要將代表 1000 的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Double" /> 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">目前不支援這個方法。 您可以使用 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 並在傳回的 <see cref="T:System.Reflection.ConstructorInfo" /> 呼叫 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />，藉此擷取建構函式。</exception>
      <returns vsli:raw="The value returned by the invoked constructor.">叫用的建構函式所傳回的值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">檢查是否已定義指定的自訂屬性類型。</summary>
      <param name="attributeType" vsli:raw="A custom attribute type.">自訂屬性類型。</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">控制自訂屬性來自基底類別的繼承。 這個參數已忽略。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">目前不支援這個方法。 您可以使用 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 並在傳回的 <see cref="T:System.Reflection.ConstructorInfo" /> 呼叫 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />，藉此擷取建構函式。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已定義指定的自訂屬性類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the method implementation flags for this constructor.">設定這個建構函式的方法實作旗標。</summary>
      <param name="attributes" vsli:raw="The method implementation flags.">方法實作旗標。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">傳回這個 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 執行個體做為 <see cref="T:System.String" />。</summary>
      <returns vsli:raw="A string containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.">字串，包含這個建構函式的名稱、屬性和例外狀況，後面接著目前的通用中間語言資料流。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this constructor.">取得這個建構函式的屬性。</summary>
      <returns vsli:raw="The attributes for this constructor.">這個函式的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; value that depends on whether the declaring type is generic.">取得 <see cref="T:System.Reflection.CallingConventions" /> 值，該值取決於宣告的類型是否為泛型。</summary>
      <returns vsli:raw="&lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt; if the declaring type is generic; otherwise, &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">如果宣告的類型是泛型，則為 <see cref="F:System.Reflection.CallingConventions.HasThis" />，否則為 <see cref="F:System.Reflection.CallingConventions.Standard" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this member.">針對宣告此成員的類型，取得 <see cref="T:System.Type" /> 物件的參考。</summary>
      <returns vsli:raw="The type that declares this member.">宣告這個成員的型別。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary vsli:raw="Gets or sets whether the local variables in this constructor should be zero-initialized.">取得或設定這個建構函式中的本機變數是否應該以零初始化。</summary>
      <returns vsli:raw="Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.">讀取/寫入 取得或設定這個建構函式中的本機變數是否應該以零初始化。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary vsli:raw="Gets the internal handle for the method. Use this handle to access the underlying metadata handle.">取得方法的內部控制代碼。 使用此控制代碼來存取基礎中繼資料控制代碼。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported on this class.">這個類別不支援這個屬性。</exception>
      <returns vsli:raw="The internal handle for the method. Use this handle to access the underlying metadata handle.">此方法的內部控制代碼。 使用此控制代碼來存取基礎中繼資料控制代碼。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary vsli:raw="Gets the dynamic module in which this constructor is defined.">取得在其中定義這個建構函式的動態模組。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module in which this constructor is defined.">
        <see cref="T:System.Reflection.Module" /> 物件，代表在其中定義這個建構函式的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary vsli:raw="Retrieves the name of this constructor.">擷取這個建構函式的名稱。</summary>
      <returns vsli:raw="The name of this constructor.">這個建構函式的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary vsli:raw="Holds a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained.">保留從中取得這個物件的 <see cref="T:System.Type" /> 物件參考。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object from which this object was obtained.">從中 <see langword="Type" /> 取得這個物件的物件。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary vsli:raw="Describes and represents an enumeration type.">描述並代表列舉類型。</summary>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this enumeration.">取得代表這種列舉的 <see cref="T:System.Reflection.TypeInfo" /> 物件。</summary>
      <returns vsli:raw="An object that represents this enumeration.">代表這種列舉的物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary vsli:raw="Defines the named static field in an enumeration type with the specified constant value.">使用指定的常數值，定義列舉類型中具名的靜態欄位。</summary>
      <param name="literalName" vsli:raw="The name of the static field.">靜態欄位的名稱。</param>
      <param name="literalValue" vsli:raw="The constant value of the literal.">常值的常數值。</param>
      <returns vsli:raw="The defined field.">定義的欄位。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">依指定傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的公用和非公用建構函式。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的指定建構函式。 如果未定義建構函式，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">傳回為這個建構函式定義的所有自訂屬性。</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">傳回物件陣列，代表 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 執行個體所代表之建構函式的所有自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">傳回指定類型所識別的自訂屬性。</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">套用自訂屬性的 <see langword="Type" /> 物件。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of objects representing the attributes of this constructor that are of &lt;see cref=&quot;T:System.Type&quot; /&gt;&lt;paramref name=&quot;attributeType&quot; /&gt;.">傳回物件陣列，代表屬於 <see cref="T:System.Type" /><paramref name="attributeType" /> 的這個建構函式屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">目前不支援這個方法。</exception>
      <returns vsli:raw="This method is not supported. No value is returned.">不支援這個方法。 沒有傳回值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary vsli:raw="Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.">傳回目前列舉的基礎整數類型，這是在定義列舉產生器時所設定的。</summary>
      <returns vsli:raw="The underlying type.">基礎類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">傳回具有指定名稱的事件。</summary>
      <param name="name" vsli:raw="The name of the event to get.">要取得的事件名稱。</param>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這個引動過程屬性。 必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name. If there are no matches, &lt;see langword=&quot;null&quot; /&gt; is returned.">傳回 <see cref="T:System.Reflection.EventInfo" /> 物件，代表這個類型所宣告或繼承之具有指定名稱的事件。 如果沒有符合項目，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary vsli:raw="Returns the events for the public events declared or inherited by this type.">傳回由這個方法所宣告或繼承之公用事件的事件。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用事件。 如果沒有任何公用事件，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">傳回這個類型所宣告的公用和非公用事件。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.">傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用事件。 依指定，如果沒有的任何事件，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">傳回指定之名稱所指定的欄位。</summary>
      <param name="name" vsli:raw="The name of the field to get.">要取得的欄位名稱。</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.">傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件，代表此類別所宣告或繼承的欄位，並且具有指定的名稱和公用或非公用的修飾詞。 如果沒有符合項目，會傳回 null。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">傳回這個類型所宣告的公用和非公用欄位。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，例如 InvokeMethod、NonPublic 等等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用欄位。 依指定，如果沒有的任何欄位，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.">傳回此類型 (直接或間接) 實作的介面，且具有指定的完整格式名稱。</summary>
      <param name="name" vsli:raw="The name of the interface.">介面的名稱。</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">如果為 <see langword="true" />，搜尋不區分大小寫。 如果為 <see langword="false" />，搜尋會區分大小寫。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">傳回 <see cref="T:System.Type" /> 物件，代表所實作的介面。 如果找不到符合名稱的介面，便傳回 null。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the interface requested.">傳回所要求介面的介面對應。</summary>
      <param name="interfaceType" vsli:raw="The type of the interface for which the interface mapping is to be retrieved.">要擷取介面對應的介面類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type does not implement the interface.">此類型未實作該介面。</exception>
      <returns vsli:raw="The requested interface mapping.">要求的介面對應。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this a class and its base classes.">傳回在這個類別及其基底類別上實作之所有介面的陣列。</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">傳回 <see cref="T:System.Type" /> 物件的陣列，代表所實作的介面。 如果未定義，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all members with the specified name, type, and binding that are declared or inherited by this type.">傳回具有這個類型所宣告或繼承的指定名稱、類型和繫結之所有成員。</summary>
      <param name="name" vsli:raw="The name of the member.">成員的名稱。</param>
      <param name="type" vsli:raw="The type of member that is to be returned.">要傳回的成員類型。</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用成員 ；否則只會傳回公用成員。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified members declared or inherited by this type.">傳回由這個方法所宣告或繼承的指定成員。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用成員。 如果沒有任何成員符合，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">依指定傳回此類型所宣告或繼承的所有公用和非公用方法。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用方法 ；否則只會傳回公用方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified nested type that is declared by this type.">傳回這個類型所宣告的指定巢狀類型。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">
        <see cref="T:System.String" />，其中包含要取得之巢狀類型的名稱。</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。  
  
-或- 
零，表示要針對公用方法執行區分大小寫的搜尋。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Type" /> 物件，表示符合指定之需求的巢狀型別 (如有找到)；否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">傳回這個類型所宣告或繼承的公用和非公用巢狀類型。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">
        <see cref="T:System.Type" /> 物件的陣列，表示在目前 <see cref="T:System.Type" /> 內形成巢狀的所有型別皆符合指定的繫結條件約束。  
  
如果沒有任何型別在目前 <see cref="T:System.Type" /> 內形成巢狀，或沒有巢狀型別符合繫結條件約束，則為 <see cref="T:System.Type" /> 型別的空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">依指定傳回這個類型所宣告或繼承的所有公用和非公用屬性。</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這個引動過程屬性。 必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">傳回 <see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用屬性；否則只會傳回公用屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">叫用指定的成員。 根據指定繫結器和引動過程屬性的條件約束，所要叫用的方法必須可存取，並提供與指定引數清單最特定的符合項目。</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">要叫用之成員的名稱。 可以是建構函式、方法、屬性或欄位。 您必須指定適當的引動過程屬性。 請注意，將空字串當做成員名稱傳遞，可叫用類別的預設成員。</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">引動過程屬性。 必須是來自 <see langword="BindingFlags" /> 的位元旗標。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果繫結器為 <see langword="null" />，則會使用預設繫結器。 請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">要在其上叫用指定成員的物件。 如果是靜態成員，則會忽略這個參數。</param>
      <param name="args" vsli:raw="An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">引數清單。 這是物件陣列，其中包含所要叫用之成員的參數數目、順序和類型。 如果沒有任何參數，則這應該是 null。</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.">與 <paramref name="args" /> 長度相同的陣列，其中的項目代表與所要叫用的成員之引數關聯的屬性。 參數在中繼資料內具有與其相關聯的屬性。 許多互通性服務都會使用這些屬性。 如需詳細資訊，請參閱中繼資料規格。</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)">
        <see langword="CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see langword="CultureInfo" />。 (請注意，要將代表 1000 的字串轉換成雙精度值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">
        <paramref name="namedParameters" /> 陣列中的每個參數會在 <paramref name="args" /> 陣列中取得對應項目的值。 如果 <paramref name="args" /> 的長度大於 <paramref name="namedParameters" /> 的長度，則會依序傳遞其餘引數值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Returns the return value of the invoked member.">傳回所叫用之成員的傳回值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">檢查是否已定義指定的自訂屬性類型。</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">套用自訂屬性的 <see langword="Type" /> 物件。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果將一個或多個 <paramref name="attributeType" /> 的執行個體定義於這個成員，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">
        <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing an array of the current type, with the specified number of dimensions.">傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成且為指定維度個數的陣列。</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array. This number must be less than or equal to 32.">陣列的維度數目。 這個數字必須小於或等於 32。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is less than 1.">
        <paramref name="rank" /> 小於 1。</exception>
      <returns vsli:raw="An object representing an array of the current type, with the specified number of dimensions.">物件，代表由目前類型組成且為指定維度個數的陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">傳回 <see cref="T:System.Type" /> 物件，當作 ref 參數 (在 Visual Basic 中為 ByRef) 傳遞時，代表目前的類型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">
        <see cref="T:System.Type" /> 物件，當作 ref 參數 (在 Visual Basic 中為 ByRef) 傳遞時，代表目前的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">傳回 <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">
        <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this enum definition.">擷取包含這個列舉定義的動態組件。</summary>
      <returns vsli:raw="Read-only. The dynamic assembly that contains this enum definition.">唯讀。 包含這個列舉定義的動態組件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full path of this enum qualified by the display name of the parent assembly.">傳回父組件顯示名稱所限定這個列舉的完整路徑。</summary>
      <returns vsli:raw="Read-only. The full path of this enum qualified by the display name of the parent assembly.">唯讀。 父組件顯示名稱所限定之這個列舉的完整路徑。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary vsli:raw="Returns the parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type which is always &lt;see cref=&quot;T:System.Enum&quot; /&gt;.">傳回一定為 <see cref="T:System.Enum" /> 類型的父代 <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="Read-only. The parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type.">唯讀。 這個類型的父 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">傳回這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 宣告的類型。</summary>
      <returns vsli:raw="Read-only. The type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">唯讀。 這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 宣告的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary vsli:raw="Returns the full path of this enum.">傳回這個列舉的完整路徑。</summary>
      <returns vsli:raw="Read-only. The full path of this enum.">唯讀。 這個列舉的完整路徑。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary vsli:raw="Returns the GUID of this enum.">傳回這個列舉的 GUID。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">不完整的類型目前不支援這個方法。</exception>
      <returns vsli:raw="Read-only. The GUID of this enum.">唯讀。 這個列舉的 GUID。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">取得值，指出這個物件是否表示建構的泛型類型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">擷取包含這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 定義的動態模組。</summary>
      <returns vsli:raw="Read-only. The dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">唯讀。 包含這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 定義的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary vsli:raw="Returns the name of this enum.">傳回這個列舉的名稱。</summary>
      <returns vsli:raw="Read-only. The name of this enum.">唯讀。 這個列舉的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary vsli:raw="Returns the namespace of this enum.">傳回這個列舉的命名空間。</summary>
      <returns vsli:raw="Read-only. The namespace of this enum.">唯讀。 這個列舉的命名空間。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">傳回用來取得這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 的類型。</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">唯讀。 用來取得這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary vsli:raw="Retrieves the internal handle for this enum.">擷取這個列舉的內部控制代碼。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not currently supported.">這個屬性目前不支援。</exception>
      <returns vsli:raw="Read-only. The internal handle for this enum.">唯讀。 這個列舉的內部控制代碼。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary vsli:raw="Returns the underlying field for this enum.">傳回這個列舉的基礎欄位。</summary>
      <returns vsli:raw="Read-only. The underlying field for this enum.">唯讀。 這個列舉的基礎欄位。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this enum.">傳回這個列舉的基礎系統類型。</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">唯讀。 傳回基礎系統類型。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary vsli:raw="Defines events for a class.">定義類別的事件。</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the &quot;other&quot; methods associated with this event. &quot;Other&quot; methods are methods other than the &quot;on&quot; and &quot;raise&quot; methods associated with an event. This function can be called many times to add as many &quot;other&quot; methods.">加入一個與這個事件相關聯的「其他」方法。 「其他」方法是指除了「on」和「raise」方法之外，與這個事件關聯的方法。 您可呼叫這個函式許多次，視需要加入許多「其他」方法。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">表示另一個方法的 <see langword="MethodBuilder" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to subscribe to this event.">設定用來訂閱這個事件的方法。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to subscribe to this event.">
        <see langword="MethodBuilder" /> 物件，表示用來訂閱這個事件的方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">要描述自訂屬性之協助程式的類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to raise this event.">設定用來引發這個事件的方法。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to raise this event.">
        <see langword="MethodBuilder" /> 物件，表示用來引發這個事件的方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to unsubscribe to this event.">設定用來取消訂閱這個事件的方法。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to unsubscribe to this event.">
        <see langword="MethodBuilder" /> 物件，表示用來取消訂閱這個事件的方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary vsli:raw="Defines and represents a field. This class cannot be inherited.">定義和表示欄位。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field.">傳回為這個欄位定義的所有自訂屬性。</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">控制自訂屬性來自基底類別的繼承。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">
        <see cref="T:System.Object" /> 型別的陣列，表示這個 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 執行個體所表示的建構函式的所有自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field identified by the given type.">傳回為這個欄位定義的所有自訂屬性，這個欄位由指定型別所識別。</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">自訂屬性類型。</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">控制自訂屬性來自基底類別的繼承。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">
        <see cref="T:System.Object" /> 型別的陣列，表示這個 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 執行個體所表示的建構函式的所有自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary vsli:raw="Retrieves the value of the field supported by the given object.">擷取欄位值，由指定物件所支援。</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">要在其上存取欄位的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the value of the field reflected by this instance.">
        <see cref="T:System.Object" />，含有這個執行個體所反映的欄位值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether an attribute having the specified type is defined on a field.">指出具有指定型別的屬性是否在欄位上定義。</summary>
      <param name="attributeType" vsli:raw="The type of the attribute.">屬性的類型。</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">控制自訂屬性來自基底類別的繼承。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the field using &lt;see cref=&quot;M:System.Type.GetField(System.String,System.Reflection.BindingFlags)&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;.">目前不支援這個方法。 使用 <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> 擷取欄位，並在傳回 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 上呼叫 <see cref="T:System.Reflection.FieldInfo" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this field; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="attributeType" /> 的一個或多個執行個體在這個欄位上定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this field.">設定這個欄位的預設值。</summary>
      <param name="defaultValue" vsli:raw="The new default value for this field.">這個欄位的新預設值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The field is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the field.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">這個欄位並不是其中一個支援型別。  
  
-或- 
<paramref name="defaultValue" /> 的型別不符合欄位的型別。  
  
-或- 
欄位的型別是 <see cref="T:System.Object" /> 或其他參考型別、<paramref name="defaultValue" /> 不是 <see langword="null" />，而且無法將此值指派給參考型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">這個欄位的父型別是完整的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">這個欄位的父型別是完整的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary vsli:raw="Specifies the field layout.">指定欄位配置。</summary>
      <param name="iOffset" vsli:raw="The offset of the field within the type containing this field.">型別中的欄位位移 (Offset)，型別包含這個欄位。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;iOffset&quot; /&gt; is less than zero.">
        <paramref name="iOffset" /> 小於零。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the value of the field supported by the given object.">設定指定物件所支援的欄位值。</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">要在其上存取欄位的物件。</param>
      <param name="val" vsli:raw="The value to assign to the field.">要指派給欄位的值。</param>
      <param name="invokeAttr" vsli:raw="A member of &lt;see langword=&quot;IBinder&quot; /&gt; that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).">
        <see langword="IBinder" /> 的成員，指定所要的繫結型別 (例如，IBinder.CreateInstance、IBinder.ExactBinding)。</param>
      <param name="binder" vsli:raw="A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.">屬性集和使用反映以啟用繫結、引數型別 (Argument Type) 的強制和成員引動過程。 如果繫結器 (Binder) 為 Null，則會使用 IBinder.DefaultBinding。</param>
      <param name="culture" vsli:raw="The software preferences of a particular culture.">特定文化特性 (Culture) 的軟體喜好設定。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary vsli:raw="Indicates the attributes of this field. This property is read-only.">指出這個欄位的屬性 (Attribute)。 這個屬性是唯讀的。</summary>
      <returns vsli:raw="The attributes of this field.">這個欄位的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary vsli:raw="Indicates a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field. This property is read-only.">指出型別的 <see cref="T:System.Type" /> 物件參考，這個型別會宣告這個欄位。 這個屬性是唯讀的。</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field.">型別的 <see cref="T:System.Type" /> 物件參考，這個型別會宣告這個欄位。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary vsli:raw="Indicates the internal metadata handle for this field. This property is read-only.">指出這個欄位的內部中繼資料 (Metadata) 控制代碼。 這個屬性是唯讀的。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="The internal metadata handle for this field.">這個欄位的內部中繼資料控制代碼。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field. This property is read-only.">指出 <see cref="T:System.Type" /> 物件，表示這個欄位的型別。 這個屬性是唯讀的。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field.">
        <see cref="T:System.Type" /> 物件，表示這個欄位的型別。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that contains this field is being defined.">取得模組，該型別包含定義這個欄位的型別。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the dynamic module in which this field is being defined.">
        <see cref="T:System.Reflection.Module" />，表示要在其中定義這個欄位的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary vsli:raw="Indicates the name of this field. This property is read-only.">指出這個欄位的名稱。 這個屬性是唯讀的。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this field.">
        <see cref="T:System.String" />，包含這個欄位的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary vsli:raw="Indicates the reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained. This property is read-only.">指出取得這個物件的 <see cref="T:System.Type" /> 物件參考。 這個屬性是唯讀的。</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this instance was obtained.">
        <see cref="T:System.Type" /> 物件的參考，就是取得這個執行個體的物件。</returns>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary vsli:raw="Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.">定義和建立動態定義泛型類型和方法的泛型型別參數。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and is equal to the current instance.">測試指定物件是否為 <see langword="EventToken" /> 的執行個體，且是否等於目前的執行個體。</summary>
      <param name="o" vsli:raw="The object to be compared with the current instance.">要與目前執行個體比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and equals the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="o" /> 為 <see langword="true" /> 的執行個體，並等於目前的執行個體，則為 <see langword="EventToken" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">要搜尋的屬性類型。 只會傳回可指派給這種類型的屬性。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="The type referred to by the current array type, pointer type, or &lt;see langword=&quot;ByRef&quot; /&gt; type; or &lt;see langword=&quot;null&quot; /&gt; if the current type is not an array type, is not a pointer type, and is not passed by reference.">目前陣列類型、指標類型或 <see langword="ByRef" /> 類型所參考的類型；如果目前類型不是陣列類型和指標類型，而且不是以傳址方式傳遞，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="name" vsli:raw="Not supported.">不支援。</param>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="name" vsli:raw="Not supported.">不支援。</param>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary vsli:raw="Not valid for generic type parameters.">對泛型型別參數無效。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not valid for generic type parameters.">對泛型型別參數無效。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Not valid for generic type parameters.">對泛型型別參數無效。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not valid for generic type parameters.">對泛型型別參數無效。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary vsli:raw="Returns a 32-bit integer hash code for the current instance.">傳回目前執行個體的 32 位元整數雜湊碼。</summary>
      <returns vsli:raw="A 32-bit integer hash code.">32 位元整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="name" vsli:raw="The name of the interface.">介面的名稱。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search without regard for case; &lt;see langword=&quot;false&quot; /&gt; to make a case-sensitive search.">
        <see langword="true" /> 表示搜尋時不必考慮大小寫；<see langword="false" /> 表示進行區分大小寫的搜尋。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="interfaceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the interface type for which the mapping is to be retrieved.">
        <see cref="T:System.Type" /> 物件，代表要擷取對應的介面類型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="name" vsli:raw="Not supported.">不支援。</param>
      <param name="type" vsli:raw="Not supported.">不支援。</param>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="name" vsli:raw="Not supported.">不支援。</param>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="name" vsli:raw="Not supported.">不支援。</param>
      <param name="invokeAttr" vsli:raw="Not supported.">不支援。</param>
      <param name="binder" vsli:raw="Not supported.">不支援。</param>
      <param name="target" vsli:raw="Not supported.">不支援。</param>
      <param name="args" vsli:raw="Not supported.">不支援。</param>
      <param name="modifiers" vsli:raw="Not supported.">不支援。</param>
      <param name="culture" vsli:raw="Not supported.">不支援。</param>
      <param name="namedParameters" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="c" vsli:raw="The object to test.">要測試的物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">在所有情況下都會擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="attributeType" vsli:raw="Not supported.">不支援。</param>
      <param name="inherit" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <param name="c" vsli:raw="Not supported.">不支援。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary vsli:raw="Returns the type of a one-dimensional array whose element type is the generic type parameter.">傳回一維陣列型別，其元素型別為泛型型別參數。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of a one-dimensional array whose element type is the generic type parameter.">
        <see cref="T:System.Type" /> 物件，表示其元素型別為泛型型別參數的一維陣列型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">傳回陣列的類型，其項目類型是以維度數目指定的泛型類型參數。</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">陣列的維度數目。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid number of dimensions. For example, its value is less than 1.">
        <paramref name="rank" /> 不是有效的維度數目。 例如，其值為小於 1。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">
        <see cref="T:System.Type" /> 物件，代表陣列的類型，其項目類型是以維度數目指定的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">傳回 <see cref="T:System.Type" /> 物件，在做為參考參數傳遞時代表目前的泛型類型參數。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">
        <see cref="T:System.Type" /> 物件，在做為參考參數傳遞時代表目前的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Not valid for incomplete generic type parameters.">不完整的泛型類型參數無效。</summary>
      <param name="typeArguments" vsli:raw="An array of type arguments.">類型引數的陣列。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="This method is invalid for incomplete generic type parameters.">這個方法對不完整的泛型型別參數無效。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">傳回 <see cref="T:System.Type" /> 物件，代表指向目前泛型型別參數的指標。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">
        <see cref="T:System.Type" /> 物件，代表指向目前泛型型別參數的指標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary vsli:raw="Sets the base type that a type must inherit in order to be substituted for the type parameter.">設定基底類型必須繼承才能取代成類型參數的類型。</summary>
      <param name="baseTypeConstraint" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that must be inherited by any type that is to be substituted for the type parameter.">所有類型必須繼承才能取代成型別參數的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attribute.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is a null reference.">
        <paramref name="con" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="binaryAttribute" /> 為 null 參考。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that defines the custom attribute.">定義自訂屬性之協助程式類別的執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary vsli:raw="Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.">設定泛型參數的變異數特性和特殊條件約束，例如無參數建構函式條件約束。</summary>
      <param name="genericParameterAttributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that represent the variance characteristics and special constraints of the generic type parameter.">
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的位元組合，代表泛型型別參數的變異數特性和特殊條件約束。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary vsli:raw="Sets the interfaces a type must implement in order to be substituted for the type parameter.">設定類型必須實作才能取代成型別參數的介面。</summary>
      <param name="interfaceConstraints" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the interfaces a type must implement in order to be substituted for the type parameter.">
        <see cref="T:System.Type" /> 物件的陣列，代表類型必須實作才能取代成類型參數的介面。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary vsli:raw="Returns a string representation of the current generic type parameter.">傳回目前泛型類型參數的字串表示。</summary>
      <returns vsli:raw="A string that contains the name of the generic type parameter.">包含泛型類型參數名稱的字串。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">取得 <see cref="T:System.Reflection.Assembly" /> 所屬的物件，代表包含泛型型別定義目前的型別參數的動態組件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">取得 <see cref="T:System.Reflection.Assembly" /> 所屬的物件，代表包含泛型型別定義目前的型別參數的動態組件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">取得所有情況下的 <see langword="null" />。</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">所有情況下的 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary vsli:raw="Gets the base type constraint of the current generic type parameter.">取得目前泛型型別參數的基底類型條件約束。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the base type constraint of the generic type parameter, or &lt;see langword=&quot;null&quot; /&gt; if the type parameter has no base type constraint.">
        <see cref="T:System.Type" /> 物件，代表泛型型別參數的基底類型條件約束，或如果此類型參數沒有基底類型條件約束，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">取得所有情況下的 <see langword="true" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method.">如果目前的 <see cref="T:System.Reflection.MethodInfo" /> 表示泛型方法的型別參數，則取得表示宣告方法的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果目前的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 表示泛型方法的型別參數，則為代表宣告方法的 <see cref="T:System.Reflection.MethodInfo" />；否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary vsli:raw="Gets the generic type definition or generic method definition to which the generic type parameter belongs.">取得泛型型別參數所屬的泛型類型定義或泛型方法定義。</summary>
      <returns vsli:raw="If the type parameter belongs to a generic type, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that generic type; if the type parameter belongs to a generic method, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that type that declared that generic method.">如果型別參數屬於泛型類型，則 <see cref="T:System.Type" /> 物件代表該泛型類型；如果型別參數屬於泛型方法，則 <see cref="T:System.Type" /> 物件表示宣告該泛型方法的該類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">取得所有情況下的 <see langword="null" />。</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">所有情況下的 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; flags that describe the covariance and special constraints of the current generic type parameter.">取得一組 <see cref="T:System.Reflection.GenericParameterAttributes" /> 旗標，敘述目前泛型類型參數的共變數與特殊條件約束。</summary>
      <returns vsli:raw="A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.">值的位元組合，描述目前泛型類型參數的共變數和特殊條件約束。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">取得類型參數在宣告參數的泛型類型或方法之類型參數清單中的位置。</summary>
      <returns vsli:raw="The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">型別參數在宣告參數的泛型類型或方法之型別參數清單中的位置。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">取得值，指出這個物件是否表示建構的泛型類型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">取得所有情況下的 <see langword="true" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary vsli:raw="Returns &lt;see langword=&quot;false&quot; /&gt; in all cases.">在所有情況下都會傳回 <see langword="false" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets &lt;see langword=&quot;false&quot; /&gt; in all cases.">取得所有情況下的 <see langword="false" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary vsli:raw="Gets the dynamic module that contains the generic type parameter.">取得包含泛型型別參數的動態模組。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module that contains the generic type parameter.">表示包含泛型類型參數之動態模組的 <see cref="T:System.Reflection.Module" /> 物件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary vsli:raw="Gets the name of the generic type parameter.">取得泛型類型參數的名稱。</summary>
      <returns vsli:raw="The name of the generic type parameter.">泛型型別參數的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">取得所有情況下的 <see langword="null" />。</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">所有情況下的 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">取得 <see cref="T:System.Type" /> 物件，用來取得 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">
        <see cref="T:System.Type" /> 物件，用來取得 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">不支援不完整的泛型型別參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary vsli:raw="Gets the current generic type parameter.">取得目前的泛型型別參數。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; object.">目前的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件。</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary vsli:raw="Defines and represents a method (or constructor) on a dynamic class.">定義及表示動態類別上的方法 (或建構函式)。</summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Sets the number of generic type parameters for the current method, specifies their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define their constraints.">設定目前方法的泛型型別參數數目、指定其名稱，並傳回可用來定義其條件約束的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件陣列。</summary>
      <param name="names" vsli:raw="An array of strings that represent the names of the generic type parameters.">由字串組成的陣列，代表泛型類型參數的名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method has been completed already.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)&quot; /&gt; method has been called for the current method.">已定義這個方法的泛型型別參數。  
  
-或- 
這個方法已經完成。  
  
-或- 
已對目前的執行個體呼叫 <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> 為 <see langword="null" />。  
  
-或- 
<paramref name="names" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> 是空陣列。</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters of the generic method.">由 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件組成的陣列，代表泛型方法的型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.">設定參數屬性和這個方法或這個方法傳回值的參數名稱。 傳回可用於套用自訂屬性的 ParameterBuilder。</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.">在參數清單中參數的位置。 第一個參數的參數索引從數字 1 開始，數字 0 表示方法的傳回值。</param>
      <param name="attributes" vsli:raw="The parameter attributes of the parameter.">參數的參數屬性。</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">參數名稱。 名稱可以是 null 字串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">這個方法沒有參數。  
  
-或- 
 <paramref name="position" /> 小於零。  
  
-或- 
 <paramref name="position" /> 大於方法參數的數目。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。  
  
-或- 
針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="Returns a &lt;see langword=&quot;ParameterBuilder&quot; /&gt; object that represents a parameter of this method or the return value of this method.">傳回 <see langword="ParameterBuilder" /> 物件，其表示這個方法的參數或這個方法的傳回值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary vsli:raw="Determines whether the given object is equal to this instance.">判斷指定的物件是否等於這個執行個體。</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance.">與這個 <see langword="MethodBuilder" /> 執行個體相互比較的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;MethodBuilder&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="MethodBuilder" /> 是 <paramref name="obj" /> 的執行個體，並且與這個物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary vsli:raw="Return the base implementation for a method.">傳回方法的基底實作。</summary>
      <returns vsli:raw="The base implementation of this method.">這個方法的基底實作。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this method.">傳回為這個方法定義的所有自訂屬性。</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找自訂屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="T:System.Reflection.MethodInfo" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</exception>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this method.">傳回代表這個方法的所有自訂屬性的物件陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">傳回指定類型所識別的自訂屬性。</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">自訂屬性類型。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找自訂屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="T:System.Reflection.MethodInfo" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</exception>
      <returns vsli:raw="Returns an array of objects representing the attributes of this method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt;.">傳回物件陣列，代表這個方法之屬性的類型為 <paramref name="attributeType" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that represent the type parameters of the method, if it is generic.">如果它是泛型，則傳回 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列，代表此方法的型別參數。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters, if the method is generic, or &lt;see langword=&quot;null&quot; /&gt; if the method is not generic.">
        <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列，代表此類型參數，或者如果此方法不是泛型，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary vsli:raw="Returns this method.">傳回這個方法。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is not generic. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property returns &lt;see langword=&quot;false&quot; /&gt;.">目前的方法不是泛型。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性會傳回 <see langword="false" />。</exception>
      <returns vsli:raw="The current instance of &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">目前的 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 執行個體。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary vsli:raw="Gets the hash code for this method.">取得這個方法的雜湊碼。</summary>
      <returns vsli:raw="The hash code for this method.">這個方法的雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.">針對這個方法傳回具有 64 位元組之預設 Microsoft Intermediate Language (MSIL) 資料流大小的 <see langword="ILGenerator" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">因為其 <see cref="T:System.Reflection.MethodAttributes" /> 或 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，所以此方法不該有主體；例如因為它有 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 旗標。  
  
-或- 
此方法是泛型方法，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">傳回這個方法的 <see langword="ILGenerator" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with the specified Microsoft intermediate language (MSIL) stream size.">傳回具有指定之 Microsoft Intermediate Language (MSIL) 資料流大小的這個方法的 <see langword="ILGenerator" />。</summary>
      <param name="size" vsli:raw="The size of the MSIL stream, in bytes.">MSIL 資料流的大小，以位元組為單位。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">因為其 <see cref="T:System.Reflection.MethodAttributes" /> 或 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，所以此方法不該有主體；例如因為它有 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 旗標。  
  
-或- 
此方法是泛型方法，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">傳回這個方法的 <see langword="ILGenerator" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">傳回方法的實作旗標。</summary>
      <returns vsli:raw="Returns the implementation flags for the method.">傳回方法的實作旗標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this method.">傳回這個方法的參數。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see langword=&quot;GetParameters&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="T:System.Reflection.MethodInfo" /> 上呼叫 <see langword="GetParameters" />。</exception>
      <returns vsli:raw="An array of &lt;see langword=&quot;ParameterInfo&quot; /&gt; objects that represent the parameters of the method.">
        <see langword="ParameterInfo" /> 物件的陣列，代表此方法的參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">動態叫用這個執行個體在指定物件上反映的方法，沿著指定參數，在指定繫結器的條件約束下傳遞。</summary>
      <param name="obj" vsli:raw="The object on which to invoke the specified method. If the method is static, this parameter is ignored.">要在其上叫用指定方法的物件。 如果是靜態方法，則會忽略這個參數。</param>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">此物件能用來啟用繫結、引數的強制型轉、成員的引動過程，以及透過反映來擷取 MemberInfo 物件等功能。 如果繫結器為 <see langword="null" />，則會使用預設繫結器。 如需詳細資訊，請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">引數清單。 這是引數陣列，其數目、順序和類型與要叫用的方法參數相同。 如果沒有任何參數，則這應該是 <see langword="null" />。</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。 (請注意，例如，要將代表 1000 的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Double" /> 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="T:System.Reflection.MethodInfo" /> 上呼叫 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />。</exception>
      <returns vsli:raw="Returns an object containing the return value of the invoked method.">傳回包含已叫用方法之傳回值的物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">檢查是否已定義指定的自訂屬性類型。</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">自訂屬性類型。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找自訂屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="T:System.Reflection.MethodInfo" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已定義指定的自訂屬性類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary vsli:raw="Returns a generic method constructed from the current generic method definition using the specified generic type arguments.">傳回使用指定的泛型類型引數，從目前的泛型方法定義建構的泛型方法。</summary>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the type arguments for the generic method.">由 <see cref="T:System.Type" /> 物件組成的陣列，代表泛型方法的型別引數。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; representing the generic method constructed from the current generic method definition using the specified generic type arguments.">
        <see cref="T:System.Reflection.MethodInfo" />，代表使用指定的泛型類型引數，從目前的泛型方法定義建構的泛型方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">要描述自訂屬性之協助程式的類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the implementation flags for this method.">設定此方法的實作旗標。</summary>
      <param name="attributes" vsli:raw="The implementation flags to set.">要設定的實作旗標。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。  
  
-或- 
針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary vsli:raw="Sets the number and types of parameters for a method.">設定方法的參數類型與數量。</summary>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the parameter types.">
        <see cref="T:System.Type" /> 物件的陣列，代參數類型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">目前的方法是泛型，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary vsli:raw="Sets the return type of the method.">設定方法的傳回型別。</summary>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the return type of the method.">表示方法傳回型別的 <see cref="T:System.Type" /> 物件。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">目前的方法是泛型，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.">設定方法簽章，包含傳回類型、參數類型和傳回類型及參數類型之必要與選擇性自訂修飾詞。</summary>
      <param name="returnType" vsli:raw="The return type of the method.">方法的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一種類型陣列，用來為方法的傳回類型指出必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一種類型陣列，用來為方法的傳回類型指出選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">方法的參數類型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">目前的方法是泛型，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance as a string.">傳回此 <see langword="MethodBuilder" /> 執行個體做為字串。</summary>
      <returns vsli:raw="Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.">傳回字串，包含此方法的名稱、屬性、方法簽章、例外狀況和本機簽章，後面接著目前的 Microsoft Intermediate Language (MSIL) 串流。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this method.">擷取此方法的屬性。</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see langword=&quot;MethodAttributes&quot; /&gt; for this method.">唯讀。 擷取此方法的 <see langword="MethodAttributes" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary vsli:raw="Returns the calling convention of the method.">傳回方法的呼叫慣例。</summary>
      <returns vsli:raw="Read-only. The calling convention of the method.">唯讀。 方法的呼叫慣例。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary vsli:raw="Not supported for this type.">現在支援這種類型。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The invoked method is not supported in the base class.">基底類別不支援叫用的方法。</exception>
      <returns vsli:raw="Not supported.">不支援。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declares this method.">傳回宣告這個方法的類型。</summary>
      <returns vsli:raw="Read-only. The type that declares this method.">唯讀。 宣告這個方法的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary vsli:raw="Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is &lt;see langword=&quot;true&quot; /&gt;.">取得或設定布林值，指定在這個方法中的區域變數是否以零起始。 此屬性的預設值為 <see langword="true" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;. (Get or set.)">針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。 (Get 或 Set。)</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in this method should be zero initialized; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果在這個方法中的區域變數應該以零起始，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary vsli:raw="Gets a value indicating whether the method is a generic method.">取得可指出此方法是否為泛型方法的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法是泛型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method.">取得值，指出目前的 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 物件是否代表泛型方法的定義。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 物件代表泛型方法的定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">在所有情況下。 動態組件不支援這個屬性。</exception>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">在所有情況下。 動態組件不支援這個屬性。</exception>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">在所有情況下。 動態組件不支援這個屬性。</exception>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary vsli:raw="Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.">擷取方法的內部控制代碼。 使用此控制代碼來存取基礎中繼資料控制代碼。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;P:System.Reflection.MethodBase.MethodHandle&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="T:System.Reflection.MethodInfo" /> 上呼叫 <see cref="P:System.Reflection.MethodBase.MethodHandle" />。</exception>
      <returns vsli:raw="Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.">唯讀。 此方法的內部控制代碼。 使用此控制代碼來存取基礎中繼資料控制代碼。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary vsli:raw="Gets the module in which the current method is being defined.">取得所要定義之目前方法中的模組。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the member represented by the current &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; is being defined.">
        <see cref="T:System.Reflection.Module" />，其中的成員會以所要定義的目前 <see cref="T:System.Reflection.MemberInfo" /> 表示。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary vsli:raw="Retrieves the name of this method.">擷取這個方法的名稱。</summary>
      <returns vsli:raw="Read-only. Retrieves a string containing the simple name of this method.">唯讀。 擷取含有這個方法之簡單名稱的字串。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary vsli:raw="Retrieves the class that was used in reflection to obtain this object.">取得用於反映中以取得方法的類別。</summary>
      <returns vsli:raw="Read-only. The type used to obtain this method.">唯讀。 用來取得這個方法的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type of the method, such as whether the return type has custom modifiers.">取得 <see cref="T:System.Reflection.ParameterInfo" /> 物件，這個物件包含方法之傳回型別的相關資訊，例如傳回型別是否具有自訂修飾詞。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The declaring type has not been created.">尚未建立宣告類型。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type.">
        <see cref="T:System.Reflection.ParameterInfo" /> 物件，包含傳回型別的相關資訊。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary vsli:raw="Gets the return type of the method represented by this &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">取得這個 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 所表示之方法的傳回型別。</summary>
      <returns vsli:raw="The return type of the method.">方法的傳回類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary vsli:raw="Returns the custom attributes of the method's return type.">傳回方法之傳回型別的自訂屬性。</summary>
      <returns vsli:raw="Read-only. The custom attributes of the method's return type.">唯讀。 方法之傳回型別的自訂屬性。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary vsli:raw="Defines and represents a module in a dynamic assembly.">定義及表示動態組件中的模組。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary vsli:raw="Completes the global function definitions and global data definitions for this dynamic module.">完成這個動態模組的全域函式定義和全域資料定義。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called previously.">這個方法先前已呼叫過。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines an enumeration type that is a value type with a single non-static field called &lt;paramref name=&quot;value__&quot; /&gt; of the specified type.">定義列舉型別，此列舉型別為實值型別 (Value Type)，具有指定之型別的單一非靜態欄位 (稱為 <paramref name="value__" />)。</summary>
      <param name="name" vsli:raw="The full path of the enumeration type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">列舉型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="visibility" vsli:raw="The type attributes for the enumeration. The attributes are any bits defined by &lt;see cref=&quot;F:System.Reflection.TypeAttributes.VisibilityMask&quot; /&gt;.">列舉型別的型別屬性。 屬性是由 <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" /> 定義的任何位元。</param>
      <param name="underlyingType" vsli:raw="The underlying type for the enumeration. This must be a built-in integer type.">列舉型別的基礎型別。 這必須是內建整數型別 (Integer Type)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Attributes other than visibility attributes are provided.  &#xA;  &#xA; -or-  &#xA;  &#xA; An enumeration with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; The visibility attributes do not match the scope of the enumeration. For example, &lt;see cref=&quot;F:System.Reflection.TypeAttributes.NestedPublic&quot; /&gt; is specified for &lt;paramref name=&quot;visibility&quot; /&gt;, but the enumeration is not a nested type.">提供可視性屬性 (Attribute) 以外的屬性。  
  
-或- 
具有指定名稱的列舉型別存在於這個模組的父組件中。  
  
-或- 
可視性屬性不符合列舉型別範圍。 例如，<see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> 已指定給 <paramref name="visibility" />，但是列舉型別並非巢狀型別。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The defined enumeration.">已定義的列舉型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.">使用指定的名稱、屬性、呼叫慣例、傳回型別和參數型別，來定義全域方法。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">方法的屬性。 <paramref name="attributes" /> 必須包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the method.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">這個方法不是靜態的。 也就是說，<paramref name="attributes" /> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。  
  
-或- 
<see cref="T:System.Type" /> 陣列中的元素為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">之前已呼叫過 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />。</exception>
      <returns vsli:raw="The defined global method.">已定義的全域方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.">使用指定的名稱、屬性、呼叫慣例、傳回型別、傳回型別的自訂修飾詞、參數型別以及參數型別的自訂修飾詞，來定義全域方法。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null characters.">方法的名稱。 <paramref name="name" /> 不能含有內嵌 null 字元。</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">方法的屬性。 <paramref name="attributes" /> 必須包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the method.">方法的傳回類型。</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">型別的陣列，表示傳回型別的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">型別的陣列，表示傳回型別的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每一個型別陣列都表示全域方法之對應參數的必要自訂修飾詞。 如果特定引數沒有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果全域方法沒有任何引數，或者沒有任何引數具有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每一個型別陣列都表示對應參數的選擇性自訂修飾詞。 如果特定引數沒有選擇性的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果全域方法沒有任何引數，或者沒有任何引數具有選擇性自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">這個方法不是靜態的。 也就是說，<paramref name="attributes" /> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。  
  
-或- 
<see cref="T:System.Type" /> 陣列中的元素為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; method has been previously called.">之前已呼叫 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> 方法。</exception>
      <returns vsli:raw="The defined global method.">已定義的全域方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, return type, and parameter types.">使用指定的名稱、屬性、傳回型別和參數型別，來定義全域方法。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">方法的屬性。 <paramref name="attributes" /> 必須包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="returnType" vsli:raw="The return type of the method.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">這個方法不是靜態的。 也就是說，<paramref name="attributes" /> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。  
  
-或- 
<paramref name="name" /> 的長度為零。 
-或- 
<see cref="T:System.Type" /> 陣列中的元素為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">之前已呼叫過 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />。</exception>
      <returns vsli:raw="The defined global method.">已定義的全域方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an initialized data field in the .sdata section of the portable executable (PE) file.">在可攜式執行檔 (PE) 的 .sdata 區段中定義初始化的資料欄位。</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">用來參考資料的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="data" vsli:raw="The binary large object (BLOB) of data.">資料的二進位大型物件 (BLOB)。</param>
      <param name="attributes" vsli:raw="The attributes for the field. The default is &lt;see langword=&quot;Static&quot; /&gt;.">欄位的屬性。 預設為 <see langword="Static" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;data&quot; /&gt; is less than or equal to zero or greater than or equal to 0x3f0000.">
        <paramref name="name" /> 的長度為零。  
  
-或- 
<paramref name="data" /> 的大小是小於等於零，或大於等於 0x3f0000。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 或 <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">之前已呼叫過 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />。</exception>
      <returns vsli:raw="A field to reference the data.">要參考資料的欄位。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">使用指定的名稱、定義方法的 DLL 名稱、方法的屬性、方法的呼叫慣例、方法的傳回型別、方法的參數型別和 <see langword="PInvoke" /> 旗標，來定義 <see langword="PInvoke" /> 方法。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The method's return type.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">原生呼叫慣例。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">方法的原生字元集。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.">方法不是靜態的，或者包含型別 (Containing Type) 是介面。  
  
 -或-  
  
 這是抽象方法。  
  
 -或-  
  
 方法之前已定義過。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 或 <paramref name="dllName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">包含型別先前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 來建立。</exception>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">已定義的 <see langword="PInvoke" /> 方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">使用指定的名稱、定義方法的 DLL 名稱、方法的屬性、方法的呼叫慣例、方法的傳回型別、方法的參數型別和 <see langword="PInvoke" /> 旗標，來定義 <see langword="PInvoke" /> 方法。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">DLL 中的進入點名稱。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The method's return type.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">原生呼叫慣例。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">方法的原生字元集。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined.">方法不是靜態的，或者如果包含型別是介面、方法是抽象的或方法是先前定義的。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 或 <paramref name="dllName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">包含型別先前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 來建立。</exception>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">已定義的 <see langword="PInvoke" /> 方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; for a private type with the specified name in this module.">在這個模組中使用指定的名稱來建構私用型別的 <see langword="TypeBuilder" />。</summary>
      <param name="name" vsli:raw="The full path of the type, including the namespace. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的完整路徑，包含命名空間。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">具有指定名稱的型別存在於這個模組的父組件中。  
  
 -或-  
  
 巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="A private type with the specified name.">具有指定之名稱的私用型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name and the type attributes.">建構 <see langword="TypeBuilder" /> 需指定型別名稱和型別屬性。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">定義型別的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">具有指定名稱的型別存在於這個模組的父組件中。  
  
 -或-  
  
 巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">使用所有要求的屬性建立的 <see langword="TypeBuilder" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given type name, its attributes, and the type that the defined type extends.">建構 <see langword="TypeBuilder" /> 需指定型別名稱、其屬性和定義型別所擴充的型別。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attribute to be associated with the type.">屬性，與型別相關聯。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">型別，定義型別所擴充的。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">具有指定名稱的型別存在於這個模組的父組件中。  
  
 -或-  
  
 巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">使用所有要求的屬性建立的 <see langword="TypeBuilder" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the total size of the type.">建構 <see langword="TypeBuilder" /> 需指定型別名稱、屬性、定義型別所擴充的型別和型別的總共大小。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">定義型別的屬性。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">型別，定義型別所擴充的。</param>
      <param name="typesize" vsli:raw="The total size of the type.">型別的總大小。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">具有指定名稱的型別存在於這個模組的父組件中。  
  
 -或-  
  
 巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">
        <see langword="TypeBuilder" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the packing size of the type.">建構 <see langword="TypeBuilder" /> 需指定型別名稱、屬性、定義型別所擴充的型別和型別的封裝大小。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">定義型別的屬性。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">型別，定義型別所擴充的。</param>
      <param name="packsize" vsli:raw="The packing size of the type.">類型的封裝大小。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">具有指定名稱的型別存在於這個模組的父組件中。  
  
 -或-  
  
 巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">
        <see langword="TypeBuilder" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.">建構 <see langword="TypeBuilder" /> 需指定型別名稱、屬性、定義型別所擴充的型別、定義型別的封裝大小和定義型別的總共大小。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">定義型別的屬性。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">型別，定義型別所擴充的。</param>
      <param name="packingSize" vsli:raw="The packing size of the type.">類型的封裝大小。</param>
      <param name="typesize" vsli:raw="The total size of the type.">型別的總大小。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">具有指定名稱的型別存在於這個模組的父組件中。  
  
 -或-  
  
 巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">使用所有要求的屬性建立的 <see langword="TypeBuilder" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.">建構 <see langword="TypeBuilder" /> 需指定型別名稱、屬性、定義型別所擴充的型別和定義型別實作的介面。</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes to be associated with the type.">屬性，與型別相關聯。</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">型別，定義型別所擴充的。</param>
      <param name="interfaces" vsli:raw="The list of interfaces that the type implements.">介面清單，為型別所實作的。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">具有指定名稱的型別存在於這個模組的父組件中。  
  
 -或-  
  
 巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">使用所有要求的屬性建立的 <see langword="TypeBuilder" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.">在可攜式執行檔 (PE) 的 .sdata 區段中定義未初始化的資料欄位。</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">用來參考資料的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="size" vsli:raw="The size of the data field.">資料欄位的大小。</param>
      <param name="attributes" vsli:raw="The attributes for the field.">欄位的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">
        <paramref name="name" /> 的長度為零。  
  
-或- 
 <paramref name="size" /> 小於或等於零，或者大於或等於 0x003f0000。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">之前已呼叫過 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />。</exception>
      <returns vsli:raw="A field to reference the data.">要參考資料的欄位。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">傳回值，指出此執行個體是否等於指定的物件。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Returns the named method on an array class.">傳回陣列類別上的具名方法。</summary>
      <param name="arrayClass" vsli:raw="An array class.">陣列類別。</param>
      <param name="methodName" vsli:raw="The name of a method on the array class.">陣列類別上方法的名稱。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the method.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; is not an array.">
        <paramref name="arrayClass" /> 不是陣列。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayClass" /> 或 <paramref name="methodName" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The named method on an array class.">陣列類別上的具名方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">傳回已套用至目前 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 的所有自訂屬性。</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">這個類型的物件會忽略這個引數。</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">陣列，其中包含自訂屬性；如果沒有屬性，則陣列是空的。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that derive from a specified attribute type.">傳回已套用至目前 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 的所有自訂屬性，以及衍生自指定屬性類型的所有自訂屬性。</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">從中衍生屬性的基底類型。</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">這個類型的物件會忽略這個引數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。 例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
      <returns vsli:raw="An array that contains the custom attributes that are derived, at any level, from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">陣列，包含衍生自 <paramref name="attributeType" /> 任何層級的自訂屬性，如果沒有這類屬性則為空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, expressed as &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects.">傳回已套用至目前 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 之屬性的相關資訊，表示為 <see cref="T:System.Reflection.CustomAttributeData" /> 物件。</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前模組之屬性的資料。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.">傳回可攜式執行檔 (PE) 的 .sdata 區域中所定義、有指定之名稱和繫結屬性的模組層級欄位。</summary>
      <param name="name" vsli:raw="The field name.">欄位名稱。</param>
      <param name="bindingAttr" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">用來控制搜尋的 <see langword="BindingFlags" /> 位元旗標組合。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <returns vsli:raw="A field that has the specified name and binding attributes, or &lt;see langword=&quot;null&quot; /&gt; if the field does not exist.">有指定之名稱和繫結屬性的欄位，如果欄位不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.">傳回可攜式執行檔 (PE) 的 .sdata 區域中所定義、符合指定之繫結旗標的所有欄位。</summary>
      <param name="bindingFlags" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">用來控制搜尋的 <see langword="BindingFlags" /> 位元旗標組合。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <returns vsli:raw="An array of fields that match the specified flags; the array is empty if no such fields exist.">符合指定之旗標的欄位陣列，如果這類欄位不存在則為空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">傳回這個執行個體的雜湊碼。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the methods that have been defined at the module level for the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that match the specified binding flags.">傳回為目前 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 在模組層級上已定義而且符合指定之繫結旗標的所有方法。</summary>
      <param name="bindingFlags" vsli:raw="A combination of &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">用來控制搜尋的 <see langword="BindingFlags" /> 位元旗標組合。</param>
      <returns vsli:raw="An array that contains all the module-level methods that match &lt;paramref name=&quot;bindingFlags&quot; /&gt;.">陣列，包含符合 <paramref name="bindingFlags" /> 的所有模組層級方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary vsli:raw="Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.">取得值組，表示模組中的程式碼性質，以及模組的目標平台。</summary>
      <param name="peKind" vsli:raw="When this method returns, a combination of the &lt;see cref=&quot;T:System.Reflection.PortableExecutableKinds&quot; /&gt; values indicating the nature of the code in the module.">這個方法會傳回 <see cref="T:System.Reflection.PortableExecutableKinds" /> 值的組合，表示模組中的程式碼性質。</param>
      <param name="machine" vsli:raw="When this method returns, one of the &lt;see cref=&quot;T:System.Reflection.ImageFileMachine&quot; /&gt; values indicating the platform targeted by the module.">這個方法會傳回其中一個 <see cref="T:System.Reflection.ImageFileMachine" /> 值，表示模組的目標平台。</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary vsli:raw="Gets the named type defined in the module.">取得在模組中定義的具名型別。</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">要取得之 <see cref="T:System.Type" /> 的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" /> 的長度為零或大於 1023。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">要求的 <see cref="T:System.Type" /> 是非公用的，而且呼叫端並沒有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 來反映目前組件之外的非公用物件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="An error is encountered while loading the &lt;see cref=&quot;T:System.Type&quot; /&gt;.">在載入 <see cref="T:System.Type" /> 時發生錯誤。</exception>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果此模組中已定義要求的型別則為該型別，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name.">取得模組中定義的具名型別，選擇性地忽略型別名稱的大小寫。</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">要取得之 <see cref="T:System.Type" /> 的名稱。</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">如果為 <see langword="true" />，搜尋不區分大小寫。 如果為 <see langword="false" />，搜尋會區分大小寫。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" /> 的長度為零或大於 1023。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">要求的 <see cref="T:System.Type" /> 是非公用的，而且呼叫端並沒有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 來反映目前組件之外的非公用物件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">叫用類別初始設定式並擲回例外狀況。</exception>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果此模組中已定義要求的型別則為該型別，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.">取得模組中定義的具名型別，選擇性地忽略型別名稱的大小寫。 如果找不到型別，則是選擇性的擲回例外狀況。</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">要取得之 <see cref="T:System.Type" /> 的名稱。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type cannot be found; &lt;see langword=&quot;false&quot; /&gt; to return &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">如果為 <see langword="true" />，搜尋不區分大小寫。 如果為 <see langword="false" />，搜尋會區分大小寫。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">
        <paramref name="className" /> 的長度為零或大於 1023。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">要求的 <see cref="T:System.Type" /> 是非公用的，而且呼叫端並沒有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 來反映目前組件之外的非公用物件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="&lt;paramref name=&quot;throwOnError&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the specified type is not found.">
        <paramref name="throwOnError" /> 為 <see langword="true" />，且找不到指定的型別。</exception>
      <returns vsli:raw="The specified type, if the type is declared in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果此模組中已宣告指定的型別則為該型別，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary vsli:raw="Returns all the classes defined within this module.">傳回在這個模組中定義的所有類別。</summary>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException" vsli:raw="One or more classes in a module could not be loaded.">無法載入模組中的一或多個類別。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
      <returns vsli:raw="An array that contains the types defined within the module that is reflected by this instance.">陣列，含有在這個執行個體反映的模組中定義的型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether the specified attribute type has been applied to this module.">傳回值，這個值表示指定的屬性型別是否已套用至此模組。</summary>
      <param name="attributeType" vsli:raw="The type of custom attribute to test for.">所要測試之自訂屬性的型別。</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">這個類型的物件會忽略這個引數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。 例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; have been applied to this module; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果一個或多個 <paramref name="attributeType" /> 的執行個體已套用至這個模組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary vsli:raw="Gets a value indicating whether the object is a resource.">取得值，指出物件是否為資源。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is a resource; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果物件為資源，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.">以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的欄位。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a field in the module.">識別模組內欄位的中繼資料語彙基元。</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a field in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a field whose parent &lt;see langword=&quot;TypeSpec&quot; /&gt; has a signature containing element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> 在目前模組範圍中不是欄位的語彙基元。  
  
-或- 
 <paramref name="metadataToken" /> 可識別欄位，而此欄位的父代 <see langword="TypeSpec" /> 具有包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的必要泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field that is identified by the specified metadata token.">
        <see cref="T:System.Reflection.FieldInfo" /> 物件，表示指定之中繼資料語彙基元所識別的欄位。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.">以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的型別或成員。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type or member in the module.">識別模組內型別或成員的中繼資料語彙基元。</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type or member in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; or &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a property or event.">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別或成員的語彙基元。  
  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="MethodSpec" /> 或 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的必要泛型型別引數。  
  
-或- 
 <paramref name="metadataToken" /> 識別屬性或事件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object representing the type or member that is identified by the specified metadata token.">
        <see cref="T:System.Reflection.MemberInfo" /> 物件，表示指定之中繼資料語彙基元所識別的型別或成員。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.">以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的方法或建構函式。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a method or constructor in the module.">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a method or constructor in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是方法或建構函式的語彙基元。  
  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="MethodSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; object representing the method that is identified by the specified metadata token.">
        <see cref="T:System.Reflection.MethodBase" /> 物件，表示指定之中繼資料語彙基元所識別的方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary vsli:raw="Returns the signature blob identified by a metadata token.">傳回中繼資料語彙基元所識別的簽章 Blob (二進位大型物件)。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a signature in the module.">識別模組內簽章的中繼資料語彙基元。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid &lt;see langword=&quot;MemberRef&quot; /&gt;, &lt;see langword=&quot;MethodDef&quot; /&gt;, &lt;see langword=&quot;TypeSpec&quot; /&gt;, signature, or &lt;see langword=&quot;FieldDef&quot; /&gt; token in the scope of the current module.">
        <paramref name="metadataToken" />在目前模組的範圍中不是有效的 <see langword="MemberRef" />、<see langword="MethodDef" />、<see langword="TypeSpec" />、簽章或 <see langword="FieldDef" /> 語彙基元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
      <returns vsli:raw="An array of bytes representing the signature blob.">位元組的陣列，表示簽章 Blob。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary vsli:raw="Returns the string identified by the specified metadata token.">傳回指定之中繼資料語彙基元所識別的字串。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a string in the string heap of the module.">中繼資料語彙基元，可識別模組字串堆積中的字串。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a string in the scope of the current module.">
        <paramref name="metadataToken" /> 在目前模組範圍中不是字串的語彙基元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing a string value from the metadata string heap.">
        <see cref="T:System.String" />，包含中繼資料字串堆積中的字串值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.">以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的型別。</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type in the module.">識別模組內型別的中繼資料語彙基元。</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別的語彙基元。  
  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type that is identified by the specified metadata token.">
        <see cref="T:System.Type" /> 物件，表示指定之中繼資料語彙基元所識別的型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.">將自訂屬性套用至這個模組，方式是使用指定的二進位大型物件 (BLOB) 表示該屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte BLOB representing the attribute.">表示屬性的位元組 BLOB。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Applies a custom attribute to this module by using a custom attribute builder.">使用自訂屬性產生器，將自訂屬性套用至這個模組。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that specifies the custom attribute to apply.">用來指定所要套用的自訂屬性的 Helper 類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary vsli:raw="Gets the dynamic assembly that defined this instance of &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">取得定義此 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 執行個體的動態組件。</summary>
      <returns vsli:raw="The dynamic assembly that defined the current dynamic module.">定義目前動態模組的動態組件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary vsli:raw="Gets a &lt;see langword=&quot;String&quot; /&gt; representing the fully qualified name and path to this module.">取得 <see langword="String" />，表示這個模組的完整名稱和路徑。</summary>
      <returns vsli:raw="The fully qualified module name.">完整的模組名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary vsli:raw="Gets the metadata stream version.">取得中繼資料流的版本。</summary>
      <returns vsli:raw="A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.">32 位元的整數，表示中繼資料流的版本。 高順序的兩位元表示主要的版本號碼，而低順序的兩位元則表示次要的版本號碼。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary vsli:raw="Gets a token that identifies the current dynamic module in metadata.">取得語彙基元，可識別中繼資料中的目前動態模組。</summary>
      <returns vsli:raw="An integer token that identifies the current module in metadata.">整數語彙基元，可識別中繼資料中的目前模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary vsli:raw="Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.">取得可用來區別兩個模組版本的全域唯一識別碼 (UUID)。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that can be used to distinguish between two versions of a module.">
        <see cref="T:System.Guid" />，可用來區別兩個模組版本。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary vsli:raw="A string that indicates that this is an in-memory module.">表示這是記憶體中模組的字串。</summary>
      <returns vsli:raw="Text that indicates that this is an in-memory module.">表示這是記憶體中模組的文字。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary vsli:raw="Gets a string that represents the name of the dynamic module.">取得表示動態模組名稱的字串。</summary>
      <returns vsli:raw="The name of the dynamic module.">動態模組的名稱。</returns>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary vsli:raw="Defines the properties for a type.">定義型別的屬性。</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the other methods associated with this property.">加入其中一個與這個屬性相關聯的其他方法。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">表示另一個方法的 <see langword="MethodBuilder" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary vsli:raw="Returns an array of the public and non-public &lt;see langword=&quot;get&quot; /&gt; and &lt;see langword=&quot;set&quot; /&gt; accessors on this property.">傳回這個屬性上的公用 (Public) 和非公用 <see langword="get" /> 和 <see langword="set" /> 存取子的陣列。</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public methods should be returned in the &lt;see langword=&quot;MethodInfo&quot; /&gt; array. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指示非公用方法是否應傳回到 <see langword="MethodInfo" /> 陣列中。 如果非公用方法要包含在內，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="An array of type &lt;see langword=&quot;MethodInfo&quot; /&gt; containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.">
        <see langword="MethodInfo" /> 型別陣列 (包含相符的公用或非公用存取子) 或空陣列 (如果這個屬性上不存在相符的存取子)。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns an array of all the custom attributes for this property.">傳回這個屬性 (Property) 的所有自訂屬性 (Attribute) 陣列。</summary>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">如果為 <see langword="true" />，則沿著這個屬性 (Property) 的繼承 (Inheritance) 鏈結往上尋找自訂屬性 (Attribute)</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="An array of all the custom attributes.">所有自訂屬性的陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns an array of custom attributes identified by &lt;see cref=&quot;T:System.Type&quot; /&gt;.">傳回由 <see cref="T:System.Type" /> 識別的自訂屬性陣列。</summary>
      <param name="attributeType" vsli:raw="An array of custom attributes identified by type.">由型別識別的自訂屬性陣列。</param>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">如果為 <see langword="true" />，則沿著這個屬性 (Property) 的繼承鍊結往上尋找自訂屬性 (Attribute)。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="An array of custom attributes defined on this reflected member, or &lt;see langword=&quot;null&quot; /&gt; if no attributes are defined on this member.">在這個反映成員上定義的自訂屬性陣列，或 <see langword="null" /> (如果這個成員上沒有定義任何屬性)。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary vsli:raw="Returns the public and non-public get accessor for this property.">傳回這個屬性的公用和非公用 get 存取子。</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public get accessors should be returned. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">表示是否應傳回非公用 get 存取子。 如果非公用方法要包含在內，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; object representing the get accessor for this property, if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;. Returns &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt; and the get accessor is non-public, or if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; but no get accessors exist.">
        <see langword="MethodInfo" /> 物件，表示這個屬性的 get 存取子 (如果 <paramref name="nonPublic" /> 為 <see langword="true" />)。 如果 <paramref name="nonPublic" /> 為 <see langword="null" />，並且 get 存取子為非公用，或者，如果 <paramref name="nonPublic" /> 為 <see langword="false" />，但 get 存取子不存在，則傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary vsli:raw="Returns an array of all the index parameters for the property.">傳回屬性的所有索引參數陣列。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="An array of type &lt;see langword=&quot;ParameterInfo&quot; /&gt; containing the parameters for the indexes.">
        <see langword="ParameterInfo" /> 類型的陣列，包含索引的參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary vsli:raw="Returns the set accessor for this property.">傳回這個屬性的 set 存取子。</summary>
      <param name="nonPublic" vsli:raw="Indicates whether the accessor should be returned if it is non-public. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指出若為非公用存取子，是否應該傳回。 如果非公用方法要包含在內，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns vsli:raw="The property's &lt;see langword=&quot;Set&quot; /&gt; method, or &lt;see langword=&quot;null&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the Set method for this property.&lt;/term&gt;&lt;description&gt; The set accessor is public.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is true and non-public methods can be returned.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; null&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;nonPublic&quot; /&gt; is true, but the property is read-only.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is false and the set accessor is non-public.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">這個屬性的 <see langword="Set" /> 方法或 <see langword="null" />，如下表所示。  
  
 <list type="table"><listheader><term> 值</term><description> 條件</description></listheader><item><term><see cref="T:System.Reflection.MethodInfo" /> 物件，表示這個屬性的 Set 方法。</term><description> set 存取子為公用。  
  
 <paramref name="nonPublic" /> 為 true，可傳回非公用方法。</description></item><item><term> null</term><description><paramref name="nonPublic" /> 為 true，但屬性為唯讀。  
  
 <paramref name="nonPublic" /> 為 false，且 set 存取子為非公用。</description></item></list></returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary vsli:raw="Gets the value of the indexed property by calling the property's getter method.">藉由呼叫屬性的 getter 方法，取得索引屬性的值。</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">其屬性值將被傳回的物件。</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="The value of the specified indexed property.">指定的索引屬性值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the value of a property having the specified binding, index, and &lt;see langword=&quot;CultureInfo&quot; /&gt;.">取得屬性值，其具有指定繫結、索引和 <see langword="CultureInfo" />。</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">其屬性值將被傳回的物件。</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">引動過程屬性。 這必須是 <see langword="BindingFlags" /> 中的位元旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。 您必須指定適當的引動過程屬性。 如果將要叫用靜態成員，則必須設定 <see langword="Static" /> 的 <see langword="BindingFlags" /> 旗標。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">
        <see langword="CultureInfo" /> 物件，表示資源將要為其當地語系化的文化特性。 請注意，如果並未為這個文化特性將資源當地語系化，則將在搜尋相符項目時持續呼叫 <see langword="CultureInfo.Parent" /> 方法。 如果這個值為 <see langword="null" />，則 <see langword="CultureInfo" /> 是取自 <see langword="CultureInfo.CurrentUICulture" /> 屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="The property value for &lt;paramref name=&quot;obj&quot; /&gt;.">
        <paramref name="obj" /> 的屬性值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property.">指出 <paramref name="attributeType" /> 的一或多個執行個體是否定義在這個屬性上。</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">套用自訂屬性的 <see langword="Type" /> 物件。</param>
      <param name="inherit" vsli:raw="Specifies whether to walk up this property's inheritance chain to find the custom attributes.">指定是否要沿著這個屬性 (Property) 的繼承鏈結，往上尋找自訂屬性 (Attribute)。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="attributeType" /> 的一或多個執行個體定義在這個屬性上，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this property.">設定這個屬性的預設值。</summary>
      <param name="defaultValue" vsli:raw="The default value of this property.">這個屬性的預設值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">這個屬性並不是其中一個支援型別。  
  
-或- 
<paramref name="defaultValue" /> 的型別不符合屬性的型別。  
  
-或- 
屬性的型別是 <see cref="T:System.Object" /> 或其他參考型別、<paramref name="defaultValue" /> 不是 <see langword="null" />，而且無法將此值指派給參考型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="if &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">如果 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that gets the property value.">設定會取得屬性值的方法。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that gets the property value.">
        <see langword="MethodBuilder" /> 物件，表示取得屬性值的方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that sets the property value.">設定會設定屬性值的方法。</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that sets the property value.">
        <see langword="MethodBuilder" /> 物件，表示設定屬性值的方法。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary vsli:raw="Sets the value of the property with optional index values for index properties.">使用索引屬性的選擇性索引值設定屬性值。</summary>
      <param name="obj" vsli:raw="The object whose property value will be set.">將設定其屬性值的物件。</param>
      <param name="value" vsli:raw="The new value for this property.">這個屬性的新值。</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the property value for the given object to the given value.">設定指定物件的屬性值為指定值。</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">其屬性值將被傳回的物件。</param>
      <param name="value" vsli:raw="The new value for this property.">這個屬性的新值。</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">引動過程屬性。 這必須是 <see langword="BindingFlags" /> 中的位元旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。 您必須指定適當的引動過程屬性。 如果將要叫用靜態成員，則必須設定 <see langword="Static" /> 的 <see langword="BindingFlags" /> 旗標。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">
        <see langword="CultureInfo" /> 物件，表示資源將要為其當地語系化的文化特性。 請注意，如果並未為這個文化特性將資源當地語系化，則將在搜尋相符項目時持續呼叫 <see langword="CultureInfo.Parent" /> 方法。 如果這個值為 <see langword="null" />，則 <see langword="CultureInfo" /> 是取自 <see langword="CultureInfo.CurrentUICulture" /> 屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this property.">取得這個屬性 (Property) 的屬性 (Attribute)。</summary>
      <returns vsli:raw="Attributes of this property.">這個屬性 (Property) 的屬性 (Attribute)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary vsli:raw="Gets a value indicating whether the property can be read.">取得值，指出是否可讀取屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be read; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可讀取這個屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary vsli:raw="Gets a value indicating whether the property can be written to.">取得值，指出是否可寫入屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be written to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可寫入屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">取得宣告這個成員的類別。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object for the class that declares this member.">宣告這個成員之類別的 <see langword="Type" /> 物件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that declares the current property is being defined.">取得用於定義型別的模組，該型別宣告目前的屬性。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the type that declares the current property is defined.">在 <see cref="T:System.Reflection.Module" /> 中定義型別，該型別宣告目前的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary vsli:raw="Gets the name of this member.">取得這個成員的名稱。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this member.">含有這個成員名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary vsli:raw="Gets the type of the field of this property.">取得這個屬性的欄位型別。</summary>
      <returns vsli:raw="The type of this property.">此屬性的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to obtain this instance of &lt;see langword=&quot;MemberInfo&quot; /&gt;.">取得類別物件，是用來取得這個 <see langword="MemberInfo" /> 的執行個體。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object through which this &lt;see langword=&quot;MemberInfo&quot; /&gt; object was obtained.">
        <see langword="Type" /> 物件，用來取得這個 <see langword="MemberInfo" /> 物件。</returns>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary vsli:raw="Defines and creates new instances of classes during run time.">在執行階段定義和建立類別的新執行個體。</summary>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary vsli:raw="Represents that total size for the type is not specified.">代表未指定該類型的總大小。</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary vsli:raw="Adds an interface that this type implements.">加入這個類型所實作的介面。</summary>
      <param name="interfaceType" vsli:raw="The interface that this type implements.">這個類型所實作的介面。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;interfaceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="interfaceType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class. After defining fields and methods on the class, &lt;see langword=&quot;CreateType&quot; /&gt; is called in order to load its &lt;see langword=&quot;Type&quot; /&gt; object.">建立這個類別的 <see cref="T:System.Type" /> 物件。 定義類別上的欄位和方法之後，呼叫 <see langword="CreateType" /> 以載入其 <see langword="Type" /> 物件。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enclosing type has not been created.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is non-abstract and contains an abstract method.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is not an abstract class or an interface and has a method without a method body.">尚未建立封入類型。  
  
 -或-  
  
 這個類型為非抽象，而且包含抽象方法。  
  
 -或-  
  
 這個類型不是抽象類別或介面，而且包含沒有方法主體的方法。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Bad label content in &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;: You have defined a label without calling &lt;see cref=&quot;M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)&quot; /&gt;.">在 <see cref="T:System.Reflection.Emit.ILGenerator" /> 中有錯誤的標籤內容：您已定義標籤，但未呼叫 <see cref="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type contains invalid Microsoft intermediate language (MSIL) code.  &#xA;  &#xA; -or-  &#xA;  &#xA; The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.">這個類型包含無效的 Microsoft Intermediate Language (MSIL) 程式碼。  
  
 -或-  
  
 使用 1 個位元組位移指定分支目標，但目標與分支的距離大於 127 個位元組。</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="The type cannot be loaded. For example, it contains a &lt;see langword=&quot;static&quot; /&gt; method that has the calling convention &lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt;.">無法載入這個類型。 例如，其包含的 <see langword="static" /> 方法具有呼叫慣例 <see cref="F:System.Reflection.CallingConventions.HasThis" />。</exception>
      <returns vsli:raw="Returns the new &lt;see cref=&quot;T:System.Type&quot; /&gt; object for this class.">傳回這個類別的新 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this type.">取得代表這個類型的 <see cref="T:System.Reflection.TypeInfo" /> 物件。</summary>
      <returns vsli:raw="An object that represents this type.">代表這個類型的物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes and signature.">將新的建構函式加入此類型，並指定屬性和簽章。</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">建構函式的屬性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">建構函式的呼叫慣例。</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">建構函式的參數類型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="The defined constructor.">定義的建構函式。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.">將新的建構函式加入此類型，並指定屬性、簽章和自訂修飾詞。</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">建構函式的屬性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">建構函式的呼叫慣例。</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">建構函式的參數類型。</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">
        <paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="The defined constructor.">定義的建構函式。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary vsli:raw="Defines the parameterless constructor. The constructor defined here will simply call the parameterless constructor of the parent.">定義無參數建構函式。 這裡所定義建構函式只會呼叫父代的無參數建構函式。</summary>
      <param name="attributes" vsli:raw="A &lt;see langword=&quot;MethodAttributes&quot; /&gt; object representing the attributes to be applied to the constructor.">表示要套用至建構函式之屬性的 <see langword="MethodAttributes" /> 物件。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The parent type (base type) does not have a parameterless constructor.">父類型 (基底類型) 沒有無參數建構函式。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="Returns the constructor.">傳回建構函式。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary vsli:raw="Adds a new event to the type, with the given name, attributes and event type.">將新事件加入此類型，並指定其名稱、屬性和事件類型。</summary>
      <param name="name" vsli:raw="The name of the event. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">事件的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the event.">事件的屬性。</param>
      <param name="eventtype" vsli:raw="The type of the event.">事件的類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;eventtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="eventtype" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="The defined event.">定義的事件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, and field type.">將新欄位加入類型，指定其名稱、屬性和欄位類型。</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">欄位的名稱。 <paramref name="fieldName" /> 不能包含內嵌的 null。</param>
      <param name="type" vsli:raw="The type of the field.">欄位的類型</param>
      <param name="attributes" vsli:raw="The attributes of the field.">欄位的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">
        <paramref name="fieldName" /> 的長度為零。  
  
-或- 
 <paramref name="type" /> 為 System.Void。  
  
-或- 
為這個欄位的父類別指定了總大小。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="The defined field.">定義的欄位。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.">將新欄位加入此類型，並指定其名稱、屬性、欄位類型和自訂修飾詞。</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">欄位的名稱。 <paramref name="fieldName" /> 不能包含內嵌的 null。</param>
      <param name="type" vsli:raw="The type of the field.">欄位的類型</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">類型陣列，代表欄位的必要自訂修飾詞，例如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">類型陣列，代表欄位的選擇性自訂修飾詞，例如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。</param>
      <param name="attributes" vsli:raw="The attributes of the field.">欄位的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">
        <paramref name="fieldName" /> 的長度為零。  
  
-或- 
 <paramref name="type" /> 為 System.Void。  
  
-或- 
為這個欄位的父類別指定了總大小。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="The defined field.">定義的欄位。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to set their constraints.">定義目前類型的泛型類型參數，即指定其數目和名稱，並傳回可設定其條件約束的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列。</summary>
      <param name="names" vsli:raw="An array of names for the generic type parameters.">泛型類型參數的名稱陣列。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this type.">已定義這個類型的泛型型別參數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> 為 <see langword="null" />。  
  
-或- 
<paramref name="names" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> 是空陣列。</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define the constraints of the generic type parameters for the current type.">
        <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列可用來定義目前類型的泛型型別參數的條件約束。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines initialized data field in the .sdata section of the portable executable (PE) file.">在可攜式執行檔 (PE) 的 .sdata 區段中定義初始化資料欄位。</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">用來參考資料的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="data" vsli:raw="The blob of data.">資料的 blob。</param>
      <param name="attributes" vsli:raw="The attributes for the field.">欄位的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.">
        <paramref name="name" /> 的長度為零。  
  
-或- 
資料的大小小於或等於零，或者大於或等於 0x3f0000。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 或 <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been previously called.">之前已呼叫過 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
      <returns vsli:raw="A field to reference the data.">要參考資料的欄位。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary vsli:raw="Adds a new method to the type, with the specified name and method attributes.">將新方法加入此類型，並指定其名稱和方法屬性。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" /> 的長度為零。  
  
-或- 
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and calling convention.">將新方法加入類型，並指定其名稱、方法屬性和呼叫慣例。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">方法的呼叫慣例。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" /> 的長度為零。  
  
-或- 
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.">將新方法加入此類型，含指定名稱、方法屬性、呼叫慣例和方法簽章。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the method.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">方法的參數類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" /> 的長度為零。  
  
-或- 
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.">將新方法加入此類型，含指定名稱、方法屬性、呼叫慣例、方法簽章和自訂修飾詞。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the method.">方法的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一種類型陣列，用來為方法的傳回類型指出必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一種類型陣列，用來為方法的傳回類型指出選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">方法的參數類型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;parameterTypeRequiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;parameterTypeOptionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">
        <paramref name="name" /> 的長度為零。  
  
-或- 
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。  
  
-或- 
<paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object representing the newly added method.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> 物件，代表新加入的方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and method signature.">將新方法加入此類型中，含指定名稱、方法屬性和方法簽章。</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="returnType" vsli:raw="The return type of the method.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">方法的參數類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">
        <paramref name="name" /> 的長度為零。  
  
-或- 
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="The defined method.">已定義的方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary vsli:raw="Specifies a given method body that implements a given method declaration, potentially with a different name.">指定實作給定方法宣告的給定方法主體，可能會使用其他名稱。</summary>
      <param name="methodInfoBody" vsli:raw="The method body to be used. This should be a &lt;see langword=&quot;MethodBuilder&quot; /&gt; object.">要使用的方法主體。 應該是 <see langword="MethodBuilder" /> 物件。</param>
      <param name="methodInfoDeclaration" vsli:raw="The method whose declaration is to be used.">要使用其宣告的方法。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; does not belong to this class.">
        <paramref name="methodInfoBody" /> 不屬於這個類別。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; or &lt;paramref name=&quot;methodInfoDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfoBody" /> 或 <paramref name="methodInfoDeclaration" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;methodInfoBody&quot; /&gt; is not the type represented by this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
<paramref name="methodInfoBody" /> 的宣告類型不是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 所表示的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary vsli:raw="Defines a nested type, given its name.">定義巢狀類型，並指定其名稱。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">
        <paramref name="name" /> 的長度為零或大於 1023。  
  
-或- 
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The defined nested type.">定義的巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Defines a nested type, given its name and attributes.">定義巢狀類型，並指定其名稱及屬性。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the type.">類型的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">未指定巢狀屬性。  
  
-或- 
這個類型已密封。  
  
-或- 
這個型別是陣列。  
  
-或- 
這個型別是介面，但巢狀型別不是介面。  
  
-或- 
<paramref name="name" /> 的長度為零或大於 1023。  
  
-或- 
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The defined nested type.">定義的巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, and the type that it extends.">定義巢狀類型，並指定其名稱、屬性和擴充的類型。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the type.">類型的屬性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">巢狀型別所擴充的型別。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">未指定巢狀屬性。  
  
-或- 
這個類型已密封。  
  
-或- 
這個型別是陣列。  
  
-或- 
這個型別是介面，但巢狀型別不是介面。  
  
-或- 
<paramref name="name" /> 的長度為零或大於 1023。  
  
-或- 
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The defined nested type.">定義的巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.">定義巢狀型別，指定其名稱、屬性、型別的總大小及其擴充的型別。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the type.">類型的屬性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">巢狀型別所擴充的型別。</param>
      <param name="typeSize" vsli:raw="The total size of the type.">型別的總大小。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">未指定巢狀屬性。  
  
-或- 
這個類型已密封。  
  
-或- 
這個型別是陣列。  
  
-或- 
這個型別是介面，但巢狀型別不是介面。  
  
-或- 
<paramref name="name" /> 的長度為零或大於 1023。  
  
-或- 
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The defined nested type.">定義的巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the packing size.">定義巢狀類型，並指定其名稱、屬性、擴充的類型和封裝大小。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the type.">類型的屬性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">巢狀型別所擴充的型別。</param>
      <param name="packSize" vsli:raw="The packing size of the type.">類型的封裝大小。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">未指定巢狀屬性。  
  
-或- 
這個類型已密封。  
  
-或- 
這個型別是陣列。  
  
-或- 
這個型別是介面，但巢狀型別不是介面。  
  
-或- 
<paramref name="name" /> 的長度為零或大於 1023。  
  
-或- 
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The defined nested type.">定義的巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, size, and the type that it extends.">定義巢狀類型，並指定其名稱、屬性、大小和擴充的類型。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null values.">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null 值。</param>
      <param name="attr" vsli:raw="The attributes of the type.">類型的屬性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">巢狀型別所擴充的型別。</param>
      <param name="packSize" vsli:raw="The packing size of the type.">類型的封裝大小。</param>
      <param name="typeSize" vsli:raw="The total size of the type.">型別的總大小。</param>
      <returns vsli:raw="The defined nested type.">定義的巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.">定義巢狀類型，並指定其名稱、屬性、擴充的類型和實作的介面。</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr" vsli:raw="The attributes of the type.">類型的屬性。</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">巢狀型別所擴充的型別。</param>
      <param name="interfaces" vsli:raw="The interfaces that the nested type implements.">巢狀類型實作的介面。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">未指定巢狀屬性。  
  
-或- 
這個類型已密封。  
  
-或- 
這個型別是陣列。  
  
-或- 
這個型別是介面，但巢狀型別不是介面。  
  
-或- 
<paramref name="name" /> 的長度為零或大於 1023。  
  
-或- 
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of the &lt;paramref name=&quot;interfaces&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
<paramref name="interfaces" /> 陣列的項目是 <see langword="null" />。</exception>
      <returns vsli:raw="The defined nested type.">定義的巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">定義 <see langword="PInvoke" /> 方法指定名稱、方法定義所在的 DLL 名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型和 <see langword="PInvoke" /> 旗標。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The method's return type.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">原生呼叫慣例。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">方法的原生字元集。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is zero.">這個方法不是靜態的。  
  
-或- 
父類型是介面。  
  
-或- 
這是抽象方法。  
  
-或- 
方法之前已定義過。  
  
-或- 
<paramref name="name" /> 或 <paramref name="dllName" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 或 <paramref name="dllName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">已定義的 <see langword="PInvoke" /> 方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">定義 <see langword="PInvoke" /> 方法指定名稱、方法定義所在的 DLL 名稱、進入點名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型和 <see langword="PInvoke" /> 旗標。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">DLL 中的進入點名稱。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The method's return type.">方法的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">原生呼叫慣例。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">方法的原生字元集。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is zero.">這個方法不是靜態的。  
  
-或- 
父類型是介面。  
  
-或- 
這是抽象方法。  
  
-或- 
方法之前已定義過。  
  
-或- 
<paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />
        <paramref name="dllName" /> 或 <paramref name="entryName" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">已定義的 <see langword="PInvoke" /> 方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the &lt;see langword=&quot;PInvoke&quot; /&gt; flags, and custom modifiers for the parameters and return type.">定義 <see langword="PInvoke" /> 方法，方法是指定其名稱、方法定義所在的 DLL 名稱、進入點名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型、<see langword="PInvoke" /> 旗標和這些參數與傳回類型的自訂修飾詞。</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">DLL 中的進入點名稱。</param>
      <param name="attributes" vsli:raw="The attributes of the method.">方法的屬性。</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">方法的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The method's return type.">方法的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一種類型陣列，用來為方法的傳回類型指出必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">一種類型陣列，用來為方法的傳回類型指出選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">方法參數的類型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">原生呼叫慣例。</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">方法的原生字元集。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;parameterTypeRequiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;parameterTypeOptionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">這個方法不是靜態的。  
  
-或- 
父類型是介面。  
  
-或- 
這是抽象方法。  
  
-或- 
方法之前已定義過。  
  
-或- 
<paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的長度為零。  
  
-或- 
<paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">
        <see cref="T:System.Reflection.Emit.MethodBuilder" />，代表定義的 <see langword="PInvoke" /> 方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name, attributes, calling convention, and property signature.">將新屬性加入具有指定名稱、屬性、呼叫慣例和屬性簽章的類型。</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">屬性的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the property.">這個屬性 (Property) 的屬性 (Attribute)。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">屬性存取子的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the property.">屬性的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">屬性的參數類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
<paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="The defined property.">定義的屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.">將新屬性加入具有指定名稱、呼叫慣例、屬性簽章和自訂修飾詞的類型。</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">屬性的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the property.">這個屬性 (Property) 的屬性 (Attribute)。</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">屬性存取子的呼叫慣例。</param>
      <param name="returnType" vsli:raw="The return type of the property.">屬性的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">代表該屬性傳回類型之必要自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">代表該屬性傳回型別之選擇性自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">屬性的參數類型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
<paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="The defined property.">定義的屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name and property signature.">以指定名稱和屬性簽章將新屬性加入此類型。</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">屬性的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the property.">這個屬性 (Property) 的屬性 (Attribute)。</param>
      <param name="returnType" vsli:raw="The return type of the property.">屬性的傳回類型。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">屬性的參數類型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
<paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="The defined property.">定義的屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, property signature, and custom modifiers.">將新屬性加入具有指定名稱、屬性簽章和自訂修飾詞的類型。</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">屬性的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes" vsli:raw="The attributes of the property.">這個屬性 (Property) 的屬性 (Attribute)。</param>
      <param name="returnType" vsli:raw="The return type of the property.">屬性的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">代表該屬性傳回類型之必要自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">代表該屬性傳回型別之選擇性自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">屬性的參數類型。</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="name" /> 是 <see langword="null" />  
  
-或- 
<paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="The defined property.">定義的屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary vsli:raw="Defines the initializer for this type.">定義這個類型的初始設定式。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
      <returns vsli:raw="Returns a type initializer.">傳回類型初始設定式。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the &lt;see langword=&quot;.sdata&quot; /&gt; section of the portable executable (PE) file.">在可攜式執行檔 (PE) 的 <see langword=".sdata" /> 區段中定義未初始化的資料欄位。</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">用來參考資料的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="size" vsli:raw="The size of the data field.">資料欄位的大小。</param>
      <param name="attributes" vsli:raw="The attributes for the field.">欄位的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">
        <paramref name="name" /> 的長度為零。  
  
-或- 
 <paramref name="size" /> 小於或等於零，或者大於或等於 0x003f0000。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
      <returns vsli:raw="A field to reference the data.">要參考資料的欄位。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.">傳回指定建構泛型類型的建構函式，其對應於泛型類型定義的指定建構函式。</summary>
      <param name="type" vsli:raw="The constructed generic type whose constructor is returned.">傳回的是建構泛型類型的建構函式。</param>
      <param name="constructor" vsli:raw="A constructor on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which constructor of &lt;paramref name=&quot;type&quot; /&gt; to return.">指定要傳回哪個 <paramref name="type" /> 建構函式 <paramref name="type" /> 之泛型類型定義的建構函式。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> 不代表泛型類型。  
  
-或- 
 <paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />型別。  
  
-或- 
<paramref name="constructor" /> 的宣告類型不是泛型類型定義。  
  
-或- 
<paramref name="constructor" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; object that represents the constructor of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;constructor&quot; /&gt;, which specifies a constructor belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">表示對應 <paramref name="constructor" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的建構函式) 的 <paramref name="type" /> 建構函式的 <see cref="T:System.Reflection.ConstructorInfo" /> 物件，。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">依指定傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的公用和非公用建構函式。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的指定建構函式。 如果未定義建構函式，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this type.">傳回為這個類型定義的所有自訂屬性。</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">這個方法目前不支援不完整的類型。 使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</exception>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this type.">傳回代表這個類型的所有自訂屬性的物件陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes of the current type that are assignable to a specified type.">傳回可指派給指定類型之目前類型的所有自訂屬性。</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">要搜尋的屬性類型。 只會傳回可指派給這種類型的屬性。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">這個方法目前不支援不完整的類型。 使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type must be a type provided by the underlying runtime system.">類型必須是基礎執行階段系統所提供的類型。</exception>
      <returns vsli:raw="An array of custom attributes defined on the current type.">在目前類型上定義的自訂屬性陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">不支援這個方法。</exception>
      <returns vsli:raw="This method is not supported. No value is returned.">不支援這個方法。 沒有傳回值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">傳回具有指定名稱的事件。</summary>
      <param name="name" vsli:raw="The name of the event to search for.">要搜尋的事件名稱。</param>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">限制搜尋範圍之 <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if there are no matches.">
        <see cref="T:System.Reflection.EventInfo" /> 物件，代表這個類型所宣告或繼承之具有指定名稱的事件；如果沒有相符的項目，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary vsli:raw="Returns the public events declared or inherited by this type.">傳回由這個方法所宣告或繼承的公用事件。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用事件。 如果沒有任何公用事件，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">傳回這個類型所宣告的公用和非公用事件。</summary>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">限制搜尋範圍之 <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.">傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表符合指定繫結旗標的這個類型所宣告或繼承的事件。 如果沒有任何事件符合，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">傳回指定之名稱所指定的欄位。</summary>
      <param name="name" vsli:raw="The name of the field to get.">要取得的欄位名稱。</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then &lt;see langword=&quot;null&quot; /&gt; is returned.">傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件，代表此類別所宣告或繼承的欄位，並且具有指定的名稱和公用或非公用的修飾詞。 如果沒有符合項目，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary vsli:raw="Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.">傳回對應至泛型類型定義指定欄位的指定建構泛型類型的欄位。</summary>
      <param name="type" vsli:raw="The constructed generic type whose field is returned.">傳回欄位的建構泛型類別。</param>
      <param name="field" vsli:raw="A field on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which field of &lt;paramref name=&quot;type&quot; /&gt; to return.">有關 <paramref name="type" /> 的泛型類型定義欄位，指定要傳回的 <paramref name="type" /> 欄位。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> 不代表泛型類型。  
  
-或- 
 <paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />型別。  
  
-或- 
<paramref name="field" /> 的宣告類型不是泛型類型定義。  
  
-或- 
<paramref name="field" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object that represents the field of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;field&quot; /&gt;, which specifies a field belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">代表對應 <paramref name="field" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的欄位) 的 <paramref name="type" /> 欄位的 <see cref="T:System.Reflection.FieldInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">傳回這個類型所宣告的公用和非公用欄位。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用欄位。 依指定，如果沒有的任何欄位，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the type arguments of a generic type or the type parameters of a generic type definition.">傳回 <see cref="T:System.Type" /> 物件的陣列，這些物件代表泛型類型的型別引數，或泛型類型定義的型別參數。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.">
        <see cref="T:System.Type" /> 物件的陣列。 陣列的項目代表泛型類型的型別引數，或泛型類型定義的型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic type definition from which the current type can be obtained.">傳回 <see cref="T:System.Type" /> 物件，代表可從中取得目前類型的泛型類型定義。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type is not generic. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">目前的類型不是泛型。 亦即，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 會傳回 <see langword="false" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a generic type definition from which the current type can be obtained.">
        <see cref="T:System.Type" /> 物件，代表可從中取得目前類型的泛型類型定義。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.">傳回此類別所 (直接或間接) 實作的介面，且完整格式名稱符合指定的介面名稱。</summary>
      <param name="name" vsli:raw="The name of the interface.">介面的名稱。</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">如果為 <see langword="true" />，搜尋不區分大小寫。 如果為 <see langword="false" />，搜尋會區分大小寫。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">傳回 <see cref="T:System.Type" /> 物件，代表所實作的介面。 如果找不到符合名稱的介面，便傳回 null。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the requested interface.">傳回所要求介面的介面對應。</summary>
      <param name="interfaceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the interface for which the mapping is to be retrieved.">要為其擷取對應之介面的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns the requested interface mapping.">傳回要求的介面對應。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this type and its base types.">傳回在這個類型及其基底類型上實作之所有介面的陣列。</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">傳回 <see cref="T:System.Type" /> 物件的陣列，代表所實作的介面。 如果未定義，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public members declared or inherited by this type, as specified.">依指定傳回此類型所宣告或繼承的所有公用和非公用成員。</summary>
      <param name="name" vsli:raw="The name of the member.">成員的名稱。</param>
      <param name="type" vsli:raw="The type of the member to return.">要傳回的成員類型。</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用成員 ；否則只會傳回公用成員。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the members for the public and non-public members declared or inherited by this type.">傳回這個類型所宣告或繼承的公用和非公用成員之成員。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用成員。 如果沒有任何成員符合，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.">傳回對應至泛型類型定義指定方法的指定建構泛型類型的方法。</summary>
      <param name="type" vsli:raw="The constructed generic type whose method is returned.">傳回方法的建構泛型類別。</param>
      <param name="method" vsli:raw="A method on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which method of &lt;paramref name=&quot;type&quot; /&gt; to return.">有關 <paramref name="type" /> 的泛型類型定義方法，指定要傳回的 <paramref name="type" /> 方法。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is a generic method that is not a generic method definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="method" /> 是非泛型方法定義的泛型方法。  
  
-或- 
 <paramref name="type" /> 不代表泛型類型。  
  
-或- 
 <paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />型別。  
  
-或- 
<paramref name="method" /> 的宣告類型不是泛型類型定義。  
  
-或- 
<paramref name="method" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object that represents the method of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;method&quot; /&gt;, which specifies a method belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">表示對應 <paramref name="method" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的方法) 的 <paramref name="type" /> 方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">依指定傳回此類型所宣告或繼承的所有公用和非公用方法。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用方法 ；否則只會傳回公用方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared by this type.">傳回這個類型所宣告的公用和非公用巢狀類型。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">
        <see cref="T:System.String" />，其中包含要取得之巢狀類型的名稱。</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。  
  
-或- 
零，表示要針對公用方法執行區分大小寫的搜尋。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Type" /> 物件，表示符合指定之需求的巢狀型別 (如有找到)；否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">傳回這個類型所宣告或繼承的公用和非公用巢狀類型。</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">
        <see cref="T:System.Type" /> 物件的陣列，表示在目前 <see cref="T:System.Type" /> 內形成巢狀的所有型別皆符合指定的繫結條件約束。  
  
如果沒有任何型別在目前 <see cref="T:System.Type" /> 內形成巢狀，或沒有巢狀型別符合繫結條件約束，則為 <see cref="T:System.Type" /> 型別的空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">依指定傳回這個類型所宣告或繼承的所有公用和非公用屬性。</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">這個引動過程屬性。 必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">不會為不完整的類型實作此方法。</exception>
      <returns vsli:raw="Returns an array of &lt;see langword=&quot;PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">傳回 <see langword="PropertyInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用屬性；否則只會傳回公用屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">叫用指定的成員。 根據指定繫結器和引動過程屬性的條件約束，所要叫用的方法必須可存取，並提供與指定引數清單最特定的符合項目。</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">要叫用之成員的名稱。 可以是建構函式、方法、屬性或欄位。 您必須指定適當的引動過程屬性。 請注意，將空字串當做成員名稱傳遞，可叫用類別的預設成員。</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">引動過程屬性。 必須是來自 <see langword="BindingFlags" /> 的位元旗標。</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果繫結器為 <see langword="null" />，則會使用預設繫結器。 請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">要在其上叫用指定成員的物件。 如果是靜態成員，則會忽略這個參數。</param>
      <param name="args" vsli:raw="An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">引數清單。 這是物件陣列，其中包含所要叫用之成員的參數數目、順序和類型。 如果沒有任何參數，則這應該是 null。</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.">與 <paramref name="args" /> 長度相同的陣列，其中的項目代表與所要叫用的成員之引數關聯的屬性。 參數在中繼資料內具有與其相關聯的屬性。 許多互通性服務都會使用這些屬性。 如需詳細資訊，請參閱中繼資料規格。</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)">
        <see langword="CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see langword="CultureInfo" />。 (請注意，要將代表 1000 的 String 轉換成 Double 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">
        <paramref name="namedParameters" /> 陣列中的每個參數會在 <paramref name="args" /> 陣列中取得對應項目的值。 如果 <paramref name="args" /> 的長度大於 <paramref name="namedParameters" /> 的長度，則會依序傳遞其餘引數值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">這個方法目前不支援不完整的類型。</exception>
      <returns vsli:raw="Returns the return value of the invoked member.">傳回所叫用之成員的傳回值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether a specified &lt;see cref=&quot;T:System.Type&quot; /&gt; can be assigned to this object.">取得值，指出是否可以將指定的 <see cref="T:System.Type" /> 指派給這個物件。</summary>
      <param name="c" vsli:raw="The object to test.">要測試的物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;c&quot; /&gt; parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of &lt;paramref name=&quot;c&quot; /&gt;, or if the current type is an interface that &lt;paramref name=&quot;c&quot; /&gt; supports. &lt;see langword=&quot;false&quot; /&gt; if none of these conditions are valid, or if &lt;paramref name=&quot;c&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">如果 <paramref name="c" /> 參數和目前的類型代表相同的類型、目前的類型位於 <paramref name="c" /> 的繼承階層架構中，或者目前的類型位於 <paramref name="c" /> 支援的介面中，則為 <see langword="true" />。 如果以上條件都不成立，或者 <paramref name="c" /> 為 <see langword="null" />，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary vsli:raw="Returns a value that indicates whether the current dynamic type has been created.">傳回表示是否已建立目前動態類型的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如已呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Determines whether a custom attribute is applied to the current type.">決定是否要將自訂屬性套用至目前的類型。</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">要搜尋的屬性類型。 只會傳回可指派給這種類型的屬性。</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">這個方法目前不支援不完整的類型。 使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not defined.">未定義<paramref name="attributeType" /> 。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt;, or an attribute derived from &lt;paramref name=&quot;attributeType&quot; /&gt;, is defined on this type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果一或多個執行個體的 <paramref name="attributeType" />，或衍生自 <paramref name="attributeType" /> 的屬性在此類型定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Determines whether this type is derived from a specified type.">判斷此類型是否衍生自指定的類型。</summary>
      <param name="c" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that is to be checked.">要檢查的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="Read-only. Returns &lt;see langword=&quot;true&quot; /&gt; if this type is the same as the type &lt;paramref name=&quot;c&quot; /&gt;, or is a subtype of type &lt;paramref name=&quot;c&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">唯讀。 如果此類型與類型 <paramref name="c" /> 相同，或為類型 <paramref name="c" /> 的子類型，則傳回 <see langword="true" />，否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type, with a lower bound of zero.">傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.">代表一維陣列類型的 <see cref="T:System.Type" /> 物件，其項目類型是目前的類型，下限為零。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents an array of the current type, with the specified number of dimensions.">傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成且為指定維度個數的陣列。</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">陣列的維度數目。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid array dimension.">
        <paramref name="rank" /> 不是有效的陣列維度。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type.">
        <see cref="T:System.Type" /> 物件，代表目前類型的一維陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">傳回 <see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> 參數 (在 Visual Basic 中為<see langword="ByRef" /> ) 傳遞時，代表目前的類型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">
        <see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" />) 傳遞時，代表目前的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.">用類型陣列的項目取代目前泛型類型定義的類型參數，並傳回產生的建構類型。</summary>
      <param name="typeArguments" vsli:raw="An array of types to be substituted for the type parameters of the current generic type definition.">由類型組成的陣列，用來取代目前泛型類型定義的類型參數。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type does not represent the definition of a generic type. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">目前類型不代表泛型類型的定義。 亦即， <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 傳回 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" /> 為 <see langword="null" />。  
  
-或- 
<paramref name="typeArguments" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Type.Module&quot; /&gt; property of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.Module.Assembly&quot; /&gt; property of the module of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" /> 的任何項目之 <see cref="P:System.Type.Module" /> 屬性是 <see langword="null" />。  
  
-或- 
<paramref name="typeArguments" /> 的任何項目模組之 <see cref="P:System.Reflection.Module.Assembly" /> 屬性是 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the constructed type formed by substituting the elements of &lt;paramref name=&quot;typeArguments&quot; /&gt; for the type parameters of the current generic type.">
        <see cref="T:System.Type" />，表示用 <paramref name="typeArguments" /> 的項目取代目前泛型類型之類型參數所得到的建構類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">傳回 <see cref="T:System.Type" /> 物件，代表指向目前類型之 Unmanaged 指標的類型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">
        <see cref="T:System.Type" /> 物件，代表指向目前類型之 Unmanaged 指標的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">自訂屬性的建構函式。</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary vsli:raw="Sets the base type of the type currently under construction.">設定目前建構中之類型的基底類型。</summary>
      <param name="parent" vsli:raw="The new base type.">新的基底類型。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parent&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the current instance represents an interface whose attributes do not include &lt;see cref=&quot;F:System.Reflection.TypeAttributes.Abstract&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。  
  
-或- 
 <paramref name="parent" /> 為 <see langword="null" />，而且目前的執行個體代表其屬性不包含 <see cref="F:System.Reflection.TypeAttributes.Abstract" /> 的介面。  
  
-或- 
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; is an interface. This exception condition is new in the .NET Framework version 2.0.">
        <paramref name="parent" /> 是介面。 這是 .NET Framework 2.0 版的新例外狀況條件。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary vsli:raw="Returns the name of the type excluding the namespace.">傳回不含命名空間的類型名稱。</summary>
      <returns vsli:raw="Read-only. The name of the type excluding the namespace.">唯讀。 不含命名空間的類型名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this type definition.">擷取包含這個類型定義的動態組件。</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic assembly that contains this type definition.">唯讀。 擷取包含這個類型定義的動態組件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full name of this type qualified by the display name of the assembly.">傳回這個類型的完整名稱，該名稱是由組件的顯示名稱所限定。</summary>
      <returns vsli:raw="Read-only. The full name of this type qualified by the display name of the assembly.">唯讀。 這個類型的完整名稱，該名稱是由組件的顯示名稱所限定。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary vsli:raw="Retrieves the base type of this type.">擷取這個類型的基底類型。</summary>
      <returns vsli:raw="Read-only. Retrieves the base type of this type.">唯讀。 擷取這個類型的基底類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary vsli:raw="Gets the method that declared the current generic type parameter.">取得宣告目前泛型型別參數的方法。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果目前的類型是泛型類型參數，<see cref="T:System.Reflection.MethodBase" /> 表示宣告目前類型的方法；否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this type.">傳回宣告這個類型的類型。</summary>
      <returns vsli:raw="Read-only. The type that declared this type.">唯讀。 宣告這個類型的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary vsli:raw="Retrieves the full path of this type.">擷取這個類型的完整路徑。</summary>
      <returns vsli:raw="Read-only. Retrieves the full path of this type.">唯讀。 擷取這個類型的完整路徑。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a value that indicates the covariance and special constraints of the current generic type parameter.">取得值，指出目前泛型類型參數的共變數與特殊條件約束。</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that describes the covariance and special constraints of the current generic type parameter.">
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的位元組合，描述目前泛型類型參數的共變數和特殊條件約束。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.">取得型別參數在宣告參數的泛型類型之型別參數清單中的位置。</summary>
      <returns vsli:raw="If the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.">當目前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件表示泛型類型參數時，在宣告參數的泛型類型之類型參數清單中，類型參數的位置：否則為未定義。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary vsli:raw="Retrieves the GUID of this type.">擷取這個類型的 GUID。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">這個方法目前不支援不完整的類型。</exception>
      <returns vsli:raw="Read-only. Retrieves the GUID of this type.">唯讀。 擷取這個類型的 GUID。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">取得值，指出這個物件是否表示建構的泛型類型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type parameter.">取得值，指出目前類型是否為泛型類型參數。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件代表泛型類型參數，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type.">取得值，指出目前類型是否為泛型類型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type represented by the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果由目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件所代表的類型為泛型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; represents a generic type definition from which other generic types can be constructed.">取得值，指出目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 是否代表可用於建構其他泛型類型的泛型類型定義。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type definition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件代表泛型類型定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.">取得值，這個值表示目前類型是否為安全性關鍵或安全性安全關鍵，因而可以執行重要的作業。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">如果目前類型為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果是安全性透明，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.">取得值，這個值表示目前類型是否為安全性安全關鍵，也就是說，它是否能執行重要作業並由安全性透明的程式碼存取。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">如果目前類型為安全性安全關鍵，則為 <see langword="true" />，如果是安全性關鍵或安全性透明，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.">取得值，這個值表示目前類型是否為透明，因此無法執行重要作業。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is security-transparent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果類型為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this type definition.">擷取包含這個類型定義的動態模組。</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic module that contains this type definition.">唯讀。 擷取包含這個類型定義的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary vsli:raw="Retrieves the name of this type.">擷取這個類型的名稱。</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see cref=&quot;T:System.String&quot; /&gt; name of this type.">唯讀。 擷取這個類型的 <see cref="T:System.String" /> 名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary vsli:raw="Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">擷取定義這個 <see langword="TypeBuilder" /> 的命名空間。</summary>
      <returns vsli:raw="Read-only. Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">唯讀。 擷取定義這個 <see langword="TypeBuilder" /> 的命名空間。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary vsli:raw="Retrieves the packing size of this type.">擷取這個類型的封裝大小。</summary>
      <returns vsli:raw="Read-only. Retrieves the packing size of this type.">唯讀。 擷取這個類型的封裝大小。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this type.">傳回用來取得這個類型的類型。</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this type.">唯讀。 用來取得這個類型的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary vsli:raw="Retrieves the total size of a type.">擷取類型的總大小。</summary>
      <returns vsli:raw="Read-only. Retrieves this type's total size.">唯讀。 抓取此類型的總大小。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary vsli:raw="Not supported in dynamic modules.">在動態模組中不支援。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Not supported in dynamic modules.">在動態模組中不支援。</exception>
      <returns vsli:raw="Read-only.">唯讀。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this &lt;see langword=&quot;TypeBuilder&quot; /&gt;.">傳回這個 <see langword="TypeBuilder" /> 的基礎系統類型。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This type is an enumeration, but there is no underlying system type.">這個類型是一種列舉，但沒有基礎系統類型。</exception>
      <returns vsli:raw="Read-only. Returns the underlying system type.">唯讀。 傳回基礎系統類型。</returns>
    </member>
  </members>
</doc>
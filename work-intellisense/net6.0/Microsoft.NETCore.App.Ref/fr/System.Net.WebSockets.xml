<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.WebSockets</name>
  </assembly>
  <members>
    <member name="T:System.Net.WebSockets.ValueWebSocketReceiveResult">
      <summary>Représente le résultat de l’exécution d’une seule opération <see cref="M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" /> sur un <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
    </member>
    <member name="M:System.Net.WebSockets.ValueWebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
      <summary>Initialise une nouvelle instance du struct <see cref="T:System.Net.WebSockets.ValueWebSocketReceiveResult" />. Une instance de ce struct représente le résultat de l’exécution d’une seule opération <c>ReceiveAsync</c> sur un <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
      <param name="count">Nombre d’octets reçus par <see cref="T:System.Net.WebSockets.WebSocket" />.</param>
      <param name="messageType">Une des valeurs d’énumération indiquant si le message actuel est un message UTF-8 ou binaire.</param>
      <param name="endOfMessage">
        <see langword="true" /> pour indiquer que le message a été reçu dans son intégralité ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.Net.WebSockets.ValueWebSocketReceiveResult.Count">
      <summary>Obtient le nombre d’octets reçus par <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
      <returns>Nombre d’octets reçus par <see cref="T:System.Net.WebSockets.WebSocket" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.ValueWebSocketReceiveResult.EndOfMessage">
      <summary>Indique si le message a été reçu complètement.</summary>
      <returns>
        <see langword="true" /> Si le message a été reçu complètement ; Sinon, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Net.WebSockets.ValueWebSocketReceiveResult.MessageType">
      <summary>Obtient le type de message actuel.</summary>
      <returns>L’une des valeurs d’énumération qui spécifie si le message actuel est un message UTF-8, binaire ou de fermeture.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocket">
      <summary>La classe WebSocket permet aux applications d’envoyer et de recevoir des données une fois la mise à niveau WebSocket terminée.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.#ctor">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.Abort">
      <summary>Abandonne la connexion WebSocket et annule toutes les opérations d'E/S en attente.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Ferme la connexion de WebSocket en tant qu’opération asynchrone à l’aide du protocole de transfert de fermeture défini dans la section 7 de la spécification du protocole WebSocket.</summary>
      <param name="closeStatus">Indique la raison de la fermeture de la connexion WebSocket.</param>
      <param name="statusDescription">Spécifie une explication lisible du motif de fermeture de la connexion.</param>
      <param name="cancellationToken">Jeton qui peut être utilisé pour propager la notification indiquant que les opérations doivent être annulées.</param>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>Démarre ou termine le protocole de transfert de fermeture défini dans la section 7 de la spécification du protocole WebSocket.</summary>
      <param name="closeStatus">Indique la raison de la fermeture de la connexion de WebSocket.</param>
      <param name="statusDescription">Permet aux applications de spécifier une explication lisible par l'utilisateur quant à la fermeture de connexion.</param>
      <param name="cancellationToken">Jeton qui peut être utilisé pour propager la notification d’annulation des opérations.</param>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)">
      <summary>Crée les mémoires tampons du client pour l'utiliser avec cette instance <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
      <param name="receiveBufferSize">Taille, en octets, de la mémoire tampon de réception client.</param>
      <param name="sendBufferSize">Taille, en octets, de la mémoire tampon d'envoi.</param>
      <returns>Tableau avec les mémoires tampons du client.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})">
      <summary>Permet aux appelants de créer une classe de WebSocket côté client qui utilisera le WSPC pour ce qui concerne les cadres.</summary>
      <param name="innerStream">Connexion à utiliser pour les opérations d'E/S.</param>
      <param name="subProtocol">Sous-protocole accepté par le client.</param>
      <param name="receiveBufferSize">Taille en octets de la mémoire tampon de réception du WebSocket client.</param>
      <param name="sendBufferSize">Taille en octets de la mémoire tampon d'envoi du WebSocket client.</param>
      <param name="keepAliveInterval">Détermine la fréquence à laquelle une image est envoyée par connexion en tant que persistante. S'applique uniquement lorsque la connexion est inactive.</param>
      <param name="useZeroMaskingKey">Indique si une clé aléatoire ou une clé statique (seulement des zéros) doit être utilisée pour le masquage WebSocket.</param>
      <param name="internalBuffer">Sera utilisé comme mémoire tampon interne dans le WPC. La taille doit être au moins égale à <c>2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)</c>.</param>
      <returns>Retourne <see cref="T:System.Net.WebSockets.WebSocket" />.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateFromStream(System.IO.Stream,System.Boolean,System.String,System.TimeSpan)">
      <summary>Crée un objet <see cref="T:System.Net.WebSockets.WebSocket" /> qui opère sur le flux spécifié, qui représente une connexion de socket web.</summary>
      <param name="stream">Flux de la connexion.</param>
      <param name="isServer">
        <see langword="true" /> pour indiquer qu’il s’agit du côté serveur de la connexion ; <see langword="false" /> s’il s’agit du côté client.</param>
      <param name="subProtocol">Sous-protocole convenu qui a été utilisé au moment de créer la connexion.</param>
      <param name="keepAliveInterval">Intervalle Keep Alive à utiliser, ou <see cref="F:System.Threading.Timeout.InfiniteTimeSpan" /> pour désactiver les connexions persistantes.</param>
      <returns>Nouveau socket web.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)">
      <summary>Crée une mémoire tampon WebSocket.</summary>
      <param name="receiveBufferSize">Taille en octets, de la mémoire tampon désirée.</param>
      <returns>Retourne <see cref="T:System.ArraySegment`1" />.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.Dispose">
      <summary>Permet de nettoyer les ressources non managées pour ASP.NET et les implémentations auto-hébergées.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.IsApplicationTargeting45">
      <summary>Retourne une valeur qui indique si l'instance de WebSocket cible .NET Framework 4.5.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.WebSockets.WebSocket" /> cible .NET Framework 4.5 ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)">
      <summary>Retourne une valeur qui indique si l'état de l'instance WebSocket est fermé ou abandonné.</summary>
      <param name="state">État actuel du WebSocket.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.WebSockets.WebSocket" /> est fermé ou abandonné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
      <summary>Reçoit les données de façon asynchrone à partir de la connexion <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
      <param name="buffer">Fait référence à la mémoire tampon d’application qui est l’emplacement de stockage des données reçues.</param>
      <param name="cancellationToken">Propage la notification indiquant que des opérations doivent être annulées.</param>
      <returns>Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un objet <see cref="T:System.Net.WebSockets.WebSocketReceiveResult" /> qui représente les données reçues.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Reçoit les données de façon asynchrone à partir de la connexion <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
      <param name="buffer">Mémoire tampon d’application qui est l’emplacement de stockage des données reçues.</param>
      <param name="cancellationToken">Jeton d’annulation à utiliser pour annuler l’opération de réception.</param>
      <returns>Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> sur l'objet de tâche retourne un objet <see cref="T:System.Net.WebSockets.ValueWebSocketReceiveResult" /> qui représente les données reçues.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.RegisterPrefixes">
      <summary>Autorise les appelants à enregistrer des préfixes pour les requêtes de WebSocket (WS et WSS).</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>Envoie les données de façon asynchrone via la connexion <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
      <param name="buffer">Mémoire tampon à envoyer via la connexion.</param>
      <param name="messageType">Indique si l’application envoie un message binaire ou texte.</param>
      <param name="endOfMessage">Indique si les données en mémoire tampon (« buffer ») constituent la dernière partie d’un message.</param>
      <param name="cancellationToken">Jeton qui propage la notification d’annulation des opérations.</param>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.SendAsync(System.ReadOnlyMemory{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>Envoie les données de façon asynchrone via la connexion <see cref="T:System.Net.WebSockets.WebSocket" />.</summary>
      <param name="buffer">Mémoire tampon à envoyer via la connexion.</param>
      <param name="messageType">L’une des valeurs d’énumération qui indique si l’application envoie un message binaire ou texte.</param>
      <param name="endOfMessage">
        <see langword="true" /> pour indiquer que les données en mémoire tampon constituent la dernière partie d’un message ; sinon, <see langword="false" />.</param>
      <param name="cancellationToken">Jeton d’annulation à utiliser pour annuler l’opération d’envoi.</param>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])">
      <summary>Vérifie que la connexion est dans un état attendu.</summary>
      <param name="state">État actuel du WebSocket à tester par rapport à la liste d'états valides.</param>
      <param name="validStates">Liste des états de connexion valides.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.CloseStatus">
      <summary>Indique la raison pour laquelle le point de terminaison distant a initié le protocole de transfert de fermeture.</summary>
      <returns>Retourne <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.CloseStatusDescription">
      <summary>Permet au point de terminaison distant de décrire la raison pour laquelle la connexion a été fermée.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval">
      <summary>Obtient l'intervalle par défaut pendant lequel maintenir l'activité du protocole WebSocket.</summary>
      <returns>Intervalle de conservation du protocole WebSocket par défaut. La valeur habituelle de cet intervalle est de 30 secondes (comme défini par le système d’exploitation ou la plateforme .NET). Elle est utilisée pour initialiser la <see cref="P:System.Net.WebSockets.ClientWebSocketOptions.KeepAliveInterval" /> valeur.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.State">
      <summary>Retourne l’état actuel de la connexion WebSocket.</summary>
      <returns>État actuel de la connexion WebSocket.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.SubProtocol">
      <summary>Obtient le sous-protocole négocié pendant l’établissement de la liaison d’ouverture.</summary>
      <returns>Sous-protocole négocié pendant l'établissement de la liaison d'ouverture.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketCloseStatus">
      <summary>Représente les codes de fermeture de WebSocket connus définis dans la section 11.7 de la spécification du protocole WebSocket.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.Empty">
      <summary>Aucune erreur spécifiée.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.EndpointUnavailable">
      <summary>(1001) Indique qu'un point de terminaison a été supprimé. Le serveur ou le client ne sera plus disponible.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InternalServerError">
      <summary>(1011) La connexion va être fermée par le serveur en raison d’une erreur sur le serveur.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InvalidMessageType">
      <summary>(1003) Le client ou le serveur termine la connexion, car il ne peut pas accepter le type de données reçu.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InvalidPayloadData">
      <summary>(1007) Le client ou le serveur met fin à la connexion car les données reçues ne sont pas cohérentes avec le type de message.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.MandatoryExtension">
      <summary>(1010) Le client termine la connexion, car il s’attendait à ce que le serveur négocie une extension.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.MessageTooBig">
      <summary>(1009) Le client ou le serveur termine la connexion, car il a reçu un message trop volumineux pour être traité.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.NormalClosure">
      <summary>(1000) La connexion a été fermée une fois la requête satisfaite.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.PolicyViolation">
      <summary>(1008) La connexion sera fermée car le message reçu par un point de terminaison ne respecte pas la stratégie de ce dernier.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.ProtocolError">
      <summary>(1002) Le client ou le serveur met fin à la connexion suite à une erreur de protocole.</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketContext">
      <summary>Utilisé pour accéder aux informations d'établissement de liaison WebSocket.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketContext.#ctor">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketContext" />.</summary>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.CookieCollection">
      <summary>Cookies passés au serveur pendant l'établissement de la liaison d'ouverture.</summary>
      <returns>Retourne <see cref="T:System.Net.CookieCollection" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.Headers">
      <summary>En-têtes HTTP envoyés au serveur pendant l'établissement de la liaison d'ouverture.</summary>
      <returns>Retourne <see cref="T:System.Collections.Specialized.NameValueCollection" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsAuthenticated">
      <summary>Indique si le client WebSocket est authentifié.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsLocal">
      <summary>Indique si le client WebSocket est connecté à partir de l'ordinateur local.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsSecureConnection">
      <summary>Indique si la connexion WebSocket est sécurisée à l'aide du protocole SSL (Secure Sockets Layer).</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.Origin">
      <summary>Valeur de l'en-tête HTTP d'origine inclus dans l'établissement de la liaison d'ouverture.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.RequestUri">
      <summary>URI demandée par le client WebSocket.</summary>
      <returns>Retourne <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketKey">
      <summary>Valeur de l'en-tête HTTP de SecWebSocketKey inclus dans le protocole de transfert d'ouverture.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
      <summary>Valeur de l'en-tête HTTP de SecWebSocketKey inclus dans le protocole de transfert d'ouverture.</summary>
      <returns>Retourne <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
      <summary>Liste des sous-protocoles demandés par le client WebSocket.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.User">
      <summary>Objet utilisé pour obtenir les informations d'authentification et d'identité, ainsi que les rôles de sécurité pour le client WebSocket.</summary>
      <returns>Retourne <see cref="T:System.Security.Principal.IPrincipal" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.WebSocket">
      <summary>Instance WebSocket utilisée pour interagir (envoyer/recevoir/fermer/etc.) avec la connexion WebSocket.</summary>
      <returns>Retourne <see cref="T:System.Net.WebSockets.WebSocket" />.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketError">
      <summary>Contient la liste d'erreurs WebSocket possibles.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.ConnectionClosedPrematurely">
      <summary>Indique que la connexion a été interrompue de manière inattendue.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.Faulted">
      <summary>Indique une erreur générale.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.HeaderError">
      <summary>Indique qu'une erreur s'est produite lors de l'analyse des en-têtes HTTP pendant l'établissement de la liaison d'ouverture.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.InvalidMessageType">
      <summary>Indique qu'un frame de WebSocket avec un opcode inconnu a été reçu.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.InvalidState">
      <summary>Indique que le WebSocket n'est pas valide pour l'opération donnée (telles que la fermeture ou l'abandon).</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.NativeError">
      <summary>Indique qu'une erreur native inconnue s'est produite.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.NotAWebSocket">
      <summary>Indique que la requête entrante n'est pas une requête Websock valide.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.Success">
      <summary>Indique qu'il n'y avait aucune information d'erreur native pour l'exception.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.UnsupportedProtocol">
      <summary>Indique que le client a demandé un sous-protocole WebSocket non pris en charge.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.UnsupportedVersion">
      <summary>Indique que le client a demandé une version non prise en charge du protocole WebSocket.</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketException">
      <summary>Représente une exception qui s’est produite lors d’une opération sur une connexion WebSocket.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="nativeError">Code d’erreur natif pour l’exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32,System.Exception)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="nativeError">Code d’erreur natif pour l’exception.</param>
      <param name="innerException">Indique l’exception précédente qui a provoqué l’exception actuelle.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32,System.String)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="nativeError">Code d’erreur natif pour l’exception.</param>
      <param name="message">Description de l'erreur.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="error">Erreur de l’énumération WebSocketError.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Exception)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="error">Erreur de l’énumération WebSocketError.</param>
      <param name="innerException">Indique l’exception précédente qui a provoqué l’exception actuelle.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="error">Erreur de l’énumération WebSocketError.</param>
      <param name="nativeError">Code d’erreur natif pour l’exception.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.Exception)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="error">Erreur de l’énumération WebSocketError.</param>
      <param name="nativeError">Code d’erreur natif pour l’exception.</param>
      <param name="innerException">Indique l’exception précédente qui a provoqué l’exception actuelle.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.String)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="error">Erreur de l’énumération WebSocketError.</param>
      <param name="nativeError">Code d’erreur natif pour l’exception.</param>
      <param name="message">Description de l'erreur.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.String,System.Exception)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="error">Erreur de l’énumération WebSocketError.</param>
      <param name="nativeError">Code d’erreur natif pour l’exception.</param>
      <param name="message">Description de l'erreur.</param>
      <param name="innerException">Indique l’exception précédente qui a provoqué l’exception actuelle.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.String)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="error">Erreur de l’énumération WebSocketError.</param>
      <param name="message">Description de l'erreur.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.String,System.Exception)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="error">Erreur de l’énumération WebSocketError.</param>
      <param name="message">Description de l'erreur.</param>
      <param name="innerException">Indique l’exception précédente qui a provoqué l’exception actuelle.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.String)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="message">Description de l'erreur.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.String,System.Exception)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketException" />.</summary>
      <param name="message">Description de l'erreur.</param>
      <param name="innerException">Indique l’exception précédente qui a provoqué l’exception actuelle.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Définit l'objet SerializationInfo avec le nom de fichier et le numéro de ligne au niveau desquels cette exception s'est produite.</summary>
      <param name="info">Objet SerializationInfo.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketException.ErrorCode">
      <summary>Code d’erreur natif pour l’exception qui s’est produite.</summary>
      <returns>Retourne <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketException.WebSocketErrorCode">
      <summary>Retourne un WebSocketError indiquant le type de l’erreur qui s’est produite.</summary>
      <returns>Retourne <see cref="T:System.Net.WebSockets.WebSocketError" />.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketMessageType">
      <summary>Indique le type de message.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Binary">
      <summary>Le message est au format binaire.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Close">
      <summary>Réception terminée car un message de fermeture a été reçu.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Text">
      <summary>Message en texte clair.</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketReceiveResult">
      <summary>Une instance de cette classe représente le résultat de l’exécution d’une seule opération ReceiveAsync sur un WebSocket.</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketReceiveResult" />.</summary>
      <param name="count">Nombre d’octets reçus.</param>
      <param name="messageType">Type de message qui a été reçu.</param>
      <param name="endOfMessage">Indique s’il s’agit du dernier message.</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.WebSockets.WebSocketReceiveResult" />.</summary>
      <param name="count">Nombre d’octets reçus.</param>
      <param name="messageType">Type de message qui a été reçu.</param>
      <param name="endOfMessage">Indique s’il s’agit du dernier message.</param>
      <param name="closeStatus">Indique le <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" /> de la connexion.</param>
      <param name="closeStatusDescription">Description de <paramref name="closeStatus" />.</param>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatus">
      <summary>Indique la raison pour laquelle le point de terminaison distant a initié le protocole de transfert de fermeture.</summary>
      <returns>Retourne <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatusDescription">
      <summary>Retourne la description facultative qui indique la raison pour laquelle le protocole de transfert de fermeture a été initié par le point de terminaison distant.</summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.Count">
      <summary>Indique le nombre d’octets reçus par le WebSocket.</summary>
      <returns>Retourne <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.EndOfMessage">
      <summary>Indique si le message a été reçu complètement.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.MessageType">
      <summary>Indique si le message actuel est un message UTF-8 ou binaire.</summary>
      <returns>Retourne <see cref="T:System.Net.WebSockets.WebSocketMessageType" />.</returns>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketState">
      <summary>Définit les différents états qu'une instance WebSockets peut inclure.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Aborted">
      <summary>Réservé à un usage ultérieur.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Closed">
      <summary>Indique que le protocole de transfert de fermeture WebSocket s'est terminé normalement.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.CloseReceived">
      <summary>Message de fermeture reçu du point de terminaison distant.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.CloseSent">
      <summary>Message de fermeture envoyé au point de terminaison distant.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Connecting">
      <summary>La connexion négocie le protocole de transfert avec le point de terminaison distant.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.None">
      <summary>Réservé à un usage ultérieur.</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Open">
      <summary>État initial une fois l'établissement de la liaison HTTP terminé.</summary>
    </member>
  </members>
</doc>
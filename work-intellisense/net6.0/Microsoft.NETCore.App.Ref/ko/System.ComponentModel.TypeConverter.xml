<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">
        <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">지정된 개체를 새 항목으로 사용하여 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">새 항목 값으로 사용할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">바인딩 목록에 추가할 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">연결된 컬렉션에 새 항목으로 추가할 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">
        <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">이벤트의 소스로, 대개 데이터 컨테이너나 데이터 바인딩된 컬렉션입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.AddingNewEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">속성이 다른 소스에서 값을 가져오도록 속성에 전달할 값을 지정합니다. 이를 앰비언스라고 합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">해당 값에 대해 부울 값을 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">해당 값에 대해 8비트 부호 없는 정수를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">해당 값에 대해 유니코드 문자를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">해당 값에 대해 배정밀도 부동 소수점 숫자를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">해당 값에 대해 16비트 부호 있는 정수를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">해당 값에 대해 32비트 부호 있는 정수를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">해당 값에 대해 64비트 부호 있는 정수를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">해당 값에 대해 개체를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">해당 값에 대해 단정밀도 부동 소수점 숫자를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">해당 값에 대해 문자열을 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The value of this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">값 및 형식을 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">
        <paramref name="value" /> 매개 변수의 <see cref="T:System.Type" />입니다.</param>
      <param name="value" vsli:raw="The value for this attribute.">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">지정한 <see cref="T:System.ComponentModel.AmbientValueAttribute" />가 현재 <see cref="T:System.ComponentModel.AmbientValueAttribute" />와 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.AmbientValueAttribute" />과 비교할 <see cref="T:System.ComponentModel.AmbientValueAttribute" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.AmbientValueAttribute" />와 같으면 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.AmbientValueAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">이 <see cref="T:System.ComponentModel.AmbientValueAttribute" />의 값인 개체를 가져옵니다.</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">이 <see cref="T:System.ComponentModel.AmbientValueAttribute" />의 값인 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Array" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ArrayConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">값 매개 변수로 지정된 배열 형식에 대한 속성 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">배열에 노출되는 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다. 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">이 개체에서 속성을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾으려면 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />를 호출해야 하기 때문에 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">특성 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">새 컬렉션을 만드는 대신 사용할 수 있는 빈 컬렉션을 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">이 컬렉션의 특성을 제공하는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">이 특성 컬렉션에 지정된 특성이 있는지 확인합니다.</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">컬렉션에서 찾을 <see cref="T:System.Attribute" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 해당 특성이 포함되어 있거나 해당 특성 형식에 대한 기본 특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">이 특성 컬렉션에 특성 배열의 지정된 특성이 모두 포함되어 있는지 확인합니다.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">컬렉션에서 찾을 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 모든 특성이 포함되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">컬렉션을 지정된 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">컬렉션을 복사할 대상 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index to start from.">복사를 시작할 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">기존 <see cref="T:System.ComponentModel.AttributeCollection" />에서 새 <see cref="T:System.ComponentModel.AttributeCollection" />을 만듭니다.</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">복사본을 만들 <see cref="T:System.ComponentModel.AttributeCollection" />입니다.</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">이 컬렉션의 특성을 제공하는 <see cref="T:System.Attribute" /> 형식의 배열입니다. <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">
        <paramref name="existing" />의 복사본인 새 <see cref="T:System.ComponentModel.AttributeCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">지정된 <see cref="T:System.Attribute" />의 기본 <see cref="T:System.Type" />를 반환합니다.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">검색할 특성의 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">지정된 <paramref name="attributeType" />의 기본 <see cref="T:System.Attribute" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">이 컬렉션의 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 형식의 열거자입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">지정된 특성이 컬렉션의 특성과 같은지 확인합니다.</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">이 컬렉션의 특성과 비교할 <see cref="T:System.Attribute" />의 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">해당 특성이 컬렉션 내에 포함되어 있으며 컬렉션의 특성과 같은 값을 가지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">지정된 배열의 특성이 컬렉션의 특성과 같은지 확인합니다.</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">이 컬렉션의 특성과 비교할 <see cref="T:System.CodeDom.MemberAttributes" />의 배열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">배열의 모든 특성이 해당 컬렉션에 포함되어 있으며 해당 컬렉션의 특성과 같은 값을 가지고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" />의 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">특성 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="The attribute collection.">특성 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">특성의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of attributes.">특성의 개수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">지정된 인덱스 번호가 있는 특성을 가져옵니다.</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AttributeCollection" />의 인덱스이며 0에서 시작합니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">지정된 인덱스 번호가 있는 <see cref="T:System.Attribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">지정된 형식의 특성을 가져옵니다.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">목록에서 가져올 <see cref="T:System.Type" />의 <see cref="T:System.Attribute" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">지정된 형식의 <see cref="T:System.Attribute" />이거나, 해당 특성이 없으면 해당 특성 형식의 기본값입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">컬렉션에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 대한 액세스가 동기화되었으면(스레드로부터 안전하면) <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">특성 리디렉션을 활성화합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">지정된 형식 이름을 사용하여 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">지정할 형식의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">지정된 형식 이름과 속성 이름을 사용하여 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">지정할 형식의 이름입니다.</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">특성을 검색할 속성의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">지정된 형식을 사용하여 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The type to specify.">지정할 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">특성을 검색할 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">특성을 검색할 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">생성자에 전달된 어셈블리로 한정된 형식 이름을 가져옵니다.</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">생성자에 지정된 어셈블리로 한정된 형식 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">비 부동 소수점 숫자 형식에 대한 기본 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">변환할 원본 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">지정된 개체를 변환기의 네이티브 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">숫자를 나타내는 문화권이 지정된 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">지정된 개체를 다른 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">숫자를 나타내는 문화권이 지정된 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">멤버가 일반적으로 바인딩에 사용되는지 여부를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.BindableAttribute" />의 기본값인 <see cref="F:System.ComponentModel.BindableAttribute.No" />을 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">일반적으로 바인딩에 속성이 사용되지 않도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">일반적으로 바인딩에 속성이 사용되도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">부울 값을 사용하여 <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">바인딩에 속성을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">바인딩에 속성을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindingDirection" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindableSupport" /> 값 중 하나를 사용하여 <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindableSupport" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindableSupport" /> 값 중 하나입니다.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindingDirection" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">두 <see cref="T:System.ComponentModel.BindableAttribute" /> 개체가 서로 같은지 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare.">비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">지정된 <see cref="T:System.ComponentModel.BindableAttribute" />가 현재 <see cref="T:System.ComponentModel.BindableAttribute" />와 같으면 <see langword="true" />이고, 같지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스에 대한 해시 함수 역할을 합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.BindableAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">일반적으로 바인딩에 속성이 사용됨을 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">일반적으로 바인딩에 속성이 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">이 속성의 데이터 바인딩 방향을 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="The direction of this property's data binding.">이 속성의 데이터 바인딩 방향입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">속성이 데이터 요소 또는 다른 속성에 바인딩할 수 있는 속성인지 여부를 나타내는 값을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">이 속성은 기본값으로 설정되어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">이 속성은 디자인 타임에 바인딩할 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">이 속성은 디자인 타임에 바인딩할 수 있습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">템플릿을 단방향 또는 양방향으로 바인딩할 수 있는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">템플릿에서 속성 값을 받아들일 수만 있습니다. 제네릭 <see cref="T:System.Web.UI.ITemplate" />과 함께 사용됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">템플릿에서 속성 값을 받아들이고 노출할 수 있습니다. <see cref="T:System.Web.UI.IBindableTemplate" />과 함께 사용됩니다.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">데이터 바인딩을 지원하는 제네릭 컬렉션을 제공합니다.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">목록에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">항목이 목록에 추가되기 전에 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">목록이나 목록의 항목이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">기본값을 사용하여 <see cref="T:System.ComponentModel.BindingList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">지정한 목록을 사용하여 <see cref="T:System.ComponentModel.BindingList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" />에 포함될 항목의 <see cref="T:System.ComponentModel.BindingList`1" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">컬렉션에 새 항목을 추가합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 속성은 <see langword="false" />로 설정됩니다.  
  
또는 
현재 항목 종류에 대한 공용 매개 변수가 없는 생성자를 찾을 수 없습니다.</exception>
      <returns vsli:raw="The item added to the list.">목록에 추가되는 항목입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">컬렉션의 끝에 새 항목을 추가합니다.</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">새 항목의 형식이 <see cref="T:System.ComponentModel.BindingList`1" />에 포함된 개체의 형식과 같지 않은 경우</exception>
      <returns vsli:raw="The item that was added to the collection.">컬렉션에 추가된 항목입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">파생 클래스에서 재정의되면 항목을 정렬하고, 그렇지 않으면 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">정렬할 속성을 지정하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">보류 중인 새 항목을 삭제합니다.</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">추가할 새 항목의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">컬렉션에서 모든 요소를 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">보류 중인 새 항목을 컬렉션에 커밋합니다.</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">추가할 새 항목의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">파생 클래스에서 검색 기능이 구현되었으면 지정된 값을 가진 지정된 속성 설명자가 있는 항목의 인덱스를 검색하고, 그렇지 않으면 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">검색할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">일치시킬 <paramref name="prop" /> 값입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" />가 파생 클래스에서 재정의되지 않은 경우</exception>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">속성 설명자와 일치하고 지정된 값을 포함하는 항목의 인덱스(0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">지정된 항목을 목록의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">항목을 삽입할 인덱스(0부터 시작)입니다.</param>
      <param name="item" vsli:raw="The item to insert in the list.">목록에 삽입할 항목입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 이벤트를 발생시킵니다.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터가 포함된 <see cref="T:System.ComponentModel.AddingNewEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">지정된 인덱스에서 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">새로 추가된 항목을 제거하면 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />가 <see langword="false" />로 설정됩니다.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">정렬 기능이 파생 클래스에서 구현되었으면 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />를 사용하여 적용된 정렬을 제거하고, 그렇지 않으면 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 형식의 <see cref="F:System.ComponentModel.ListChangedType.Reset" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">지정된 위치에 있는 항목에 대해 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 형식의 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">다시 설정할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">지정된 인덱스에 있는 항목을 지정된 항목으로 바꿉니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">바꿀 항목의 인덱스(0부터 시작)입니다.</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">지정된 인덱스에 있는 항목의 새 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 큰 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />를 참조하세요.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">검색 조건으로 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">목록에 새 항목을 추가합니다. 자세한 내용은 <see cref="M:System.ComponentModel.IBindingList.AddNew" />를 참조하세요.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">이 메서드는 지원되지 않습니다.</exception>
      <returns vsli:raw="The item added to the list.">목록에 추가되는 항목입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 및 <see cref="T:System.ComponentModel.ListSortDirection" />에 따라 목록을 정렬합니다. 이 멤버에 대한 전체 설명은 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />를 참조하십시오.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">정렬에 사용할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />를 참조하세요.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">검색할 대상 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">검색할 <paramref name="prop" /> 매개 변수의 이름입니다.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 있는 행의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />를 참조하세요.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">검색에 사용되는 인덱스에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />를 참조하십시오.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">목록의 항목을 편집할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">목록 항목을 편집할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 메서드를 사용하여 목록에 항목을 추가할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 메서드를 사용하여 목록에 항목을 추가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 목록에 포함된 내부 형식에 따라 달라집니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">컬렉션에서 항목을 제거할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 메서드를 사용하여 목록에서 항목을 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">목록이 정렬되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">목록이 정렬되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">목록에서 항목을 추가하거나 제거하면 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트가 발생하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">항목을 추가하거나 제거하는 경우 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트가 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">목록이 정렬되는 방향을 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다. 기본값은 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">정렬 기능이 파생 클래스에서 구현되었으면 목록의 정렬에 사용되는 속성 설명자를 가져오고, 그렇지 않으면 <see langword="null" />을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">목록의 정렬에 사용되는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트가 사용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트가 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">목록에서 검색 기능을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">목록에서 검색 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">목록에서 정렬 기능을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">목록에서 정렬 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">목록의 항목을 편집할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">목록 항목을 편집할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 메서드를 사용하여 목록에 새 항목을 추가할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 메서드를 사용하여 목록에 항목을 추가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 목록에 포함된 내부 형식에 따라 달라집니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">목록에서 항목을 제거할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 메서드를 사용하여 목록에서 항목을 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />를 참조하세요.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />가 호출되고 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />는 호출되지 않았으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />를 참조하세요.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />를 참조하세요.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">정렬에 사용되는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />를 참조하세요.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록이나 항목이 변경될 때 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트가 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />를 참조하세요.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록에서 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 메서드를 사용한 검색 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />를 참조하세요.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록에서 정렬 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">항목 속성 값이 변경되면 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 형식의 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 이벤트가 발생하는지 여부를 나타내는 값을 가져옵니다. 이 멤버는 파생 클래스에서 재정의될 수 없습니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 목록 형식이를 구현 하면이 고 <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> , 그렇지 않으면 <see langword="false" /> 입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Boolean" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.BooleanConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 부울 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">지정된 값 개체를 부울 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">변환할 대상 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">Boolean 데이터 형식에 대한 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">유효한 값의 표준 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">
        <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />에서 반환된 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />이 가능한 값을 포함하는 단독 목록이므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">부호 없는 8비트 정수 개체와 여러 가지 다른 표현을 상호 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ByteConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">취소할 수 있는 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CancelEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">유니코드 문자 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CharConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 유니코드 문자 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">지정된 개체를 유니코드 문자 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">인수를 사용하여 지정된 값 개체를 유니코드 문자 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">컬렉션을 변경하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">컬렉션에 요소를 추가했음을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">전체 컬렉션이 변경된 것으로 지정합니다. 이것은 <see cref="M:System.Collections.CollectionBase.Clear" />처럼 전체 컬렉션을 처리하는 메서드를 사용하면 발생합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">컬렉션에서 요소를 제거했음을 지정합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">컬렉션이 변경된 방법을 지정하는 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 값 중 하나입니다.</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">변경된 컬렉션의 인스턴스를 지정하는 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">컬렉션이 변경된 방법을 지정하는 동작을 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">변경된 컬렉션의 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">변경된 컬렉션의 인스턴스를 나타내는 <see cref="T:System.Object" />이거나 컬렉션을 새로 고친 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">컬렉션에 요소를 추가하거나 컬렉션에서 요소를 제거할 때 발생하는 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CollectionConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">변환할 <see cref="T:System.Object" />입니다. 이 매개 변수는 반드시 <see cref="T:System.Collections.ICollection" />에서 상속되어야 합니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">지정된 컨텍스트 및 특성을 사용하여, 값 매개 변수로 지정한 배열 형식에 대한 속성 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">이 데이터 형식에 대해 공개된 속성을 가진 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 또는 속성이 없는 경우 <see langword="null" /> 입니다. 이 메서드는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체에서 속성을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾으려면 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />를 호출하지 않아야 하므로 <see langword="false" />입니다. 이 메서드는 <see langword="true" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">복합 데이터 바인딩을 지원하는 구성 요소의 데이터 소스 및 데이터 멤버 속성을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 클래스의 기본값을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">지정된 데이터 소스를 사용하여 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">데이터 소스로 사용할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">지정된 데이터 소스와 데이터 멤버를 사용하여 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">데이터 소스로 사용할 속성의 이름입니다.</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">데이터에 대한 소스로 사용할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">지정한 <see cref="T:System.Object" />가 현재 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 인스턴스와 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">현재 <see cref="T:System.Object" /> 인스턴스와 비교할 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">개체가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 같지 않다고 나타내는 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 멤버 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 멤버 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 소스 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 소스 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">컴포넌트와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ComponentConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">이 구성 요소 변환기와 연결할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">값 매개 변수로 지정된 구성 요소의 형식에 대한 속성 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">속성을 가져올 구성 요소의 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">구성 요소에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">지정된 컨텍스트를 사용하여, 이 개체에서 속성을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾으려면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />를 호출해야 하기 때문에 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">사용자 지정 구성 요소 편집기의 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ComponentEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">구성 요소를 편집하고 해당 구성 요소가 지정된 컨텍스트를 기반으로 수정되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">편집에 대한 추가 정보를 얻는 데 사용될 수 있는 선택적 컨텍스트 개체입니다.</param>
      <param name="component" vsli:raw="The component to be edited.">편집될 구성 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소가 수정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">구성 요소를 편집하고 해당 구성 요소가 수정되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="component" vsli:raw="The component to be edited.">편집될 구성 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소가 수정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">구성 요소나 개체의 리소스를 열거하는 간단한 기능을 제공합니다. <see cref="T:System.ComponentModel.ComponentResourceManager" /> 클래스는 <see cref="T:System.Resources.ResourceManager" />입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">기본값을 사용하여 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.ComponentResourceManager" />의 정보를 기초로 위성 어셈블리에서 리소스를 찾는 <see cref="T:System.Type" />를 만듭니다.</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">
        <see cref="T:System.Type" />가 리소스 파일을 찾는 데 필요한 모든 정보를 파생시키는 <see cref="T:System.ComponentModel.ComponentResourceManager" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">리소스의 값을 개체의 해당 속성에 적용합니다.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">적용할 속성 값이 들어 있는 <see cref="T:System.Object" />입니다.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">리소스에서 찾을 개체의 이름이 들어 있는 <see cref="T:System.String" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 또는 <paramref name="objectName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">리소스의 값을 개체의 해당 속성에 적용합니다.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">적용할 속성 값이 들어 있는 <see cref="T:System.Object" />입니다.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">리소스에서 찾을 개체의 이름이 들어 있는 <see cref="T:System.String" />입니다.</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">리소스를 적용할 문화권입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 또는 <paramref name="objectName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">0개 이상의 구성 요소를 캡슐화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Container" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">지정된 <see cref="T:System.ComponentModel.Component" />을 <see cref="T:System.ComponentModel.Container" />에 추가합니다. 이름이 지정되지 않은 구성 요소입니다.</summary>
      <param name="component" vsli:raw="The component to add.">추가할 구성 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">지정된 <see cref="T:System.ComponentModel.Component" />를 <see cref="T:System.ComponentModel.Container" />에 추가하고 이름을 지정합니다.</summary>
      <param name="component" vsli:raw="The component to add.">추가할 구성 요소입니다.</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">구성 요소에 할당할 대/소문자를 구분하지 않는 고유한 이름  
  
또는 
 구성 요소의 이름을 지정하지 않는 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" />이 고유하지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">지정된 <see cref="T:System.ComponentModel.ISite" />의 <see cref="T:System.ComponentModel.IComponent" /> 사이트를 만들고 지정된 이름을 이 사이트에 할당합니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">해당 사이트를 만들 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">
        <paramref name="component" />에 할당할 이름이거나, 이름을 할당하지 않으려면 <see langword="null" />입니다.</param>
      <returns vsli:raw="The newly created site.">새로 만든 사이트입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">
        <see cref="T:System.ComponentModel.Container" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">가비지 수집에 의해 <see cref="T:System.ComponentModel.Container" />가 회수되기 전에 관리되지 않는 리소스를 해제하고 기타 정리 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">가능한 경우, 지정된 형식의 서비스 개체를 가져옵니다.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">검색할 서비스의 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">요청된 서비스를 구현하는 <see cref="T:System.Object" />이거나, 서비스를 확인할 수 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" />에서 구성 요소를 제거합니다.</summary>
      <param name="component" vsli:raw="The component to remove.">제거할 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" />를 <see langword="null" />로 설정하지 않고 <see cref="P:System.ComponentModel.IComponent.Site" />에서 구성 요소를 제거합니다.</summary>
      <param name="component" vsli:raw="The component to remove.">제거할 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">구성 요소 이름이 이 컨테이너에서 고유한지 여부를 확인합니다.</summary>
      <param name="component" vsli:raw="The named component.">명명된 구성 요소입니다.</param>
      <param name="name" vsli:raw="The component name to validate.">유효성을 검사할 구성 요소 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" />이 고유하지 않은 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" />의 모든 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" />에 있는 구성 요소를 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">컨테이너 필터 서비스에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ContainerFilterService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">구성 요소 컬렉션을 필터링합니다.</summary>
      <param name="components" vsli:raw="The component collection to filter.">필터링할 구성 요소 컬렉션입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">수정된 컬렉션을 나타내는 <see cref="T:System.ComponentModel.ComponentCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Globalization.CultureInfo" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CultureInfoConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.Globalization.CultureInfo" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">지정된 값 개체를 <see cref="T:System.Globalization.CultureInfo" />로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">변환할 대상 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">
        <paramref name="value" />가 유효하지 않은 문화권을 나타내는 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">변환할 대상 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">지정된 문화권의 이름을 검색합니다.</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">이름을 가져올 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <returns vsli:raw="The name of the specified culture.">지정된 문화권의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">지정한 컨텍스트를 사용하여 <see cref="T:System.Globalization.CultureInfo" /> 개체의 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">유효한 표준 값 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이거나 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">
        <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />에서 반환된 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />이 가능한 값을 모두 포함하는 단독 목록이 아니므로 <see langword="false" />입니다. 이 경우 다른 값을 사용할 수 있습니다. 이 메서드는 <see langword="true" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 인터페이스의 간단한 기본 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">부모 사용자 지정 형식 설명자를 사용하여 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">부모 사용자 지정 형식 설명자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">이 형식 설명자가 나타내는 형식에 대한 사용자 지정 특성의 컬렉션을 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">형식의 특성을 포함하는 <see cref="T:System.ComponentModel.AttributeCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">이 형식 설명자가 나타내는 클래스의 정규화된 이름을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">이 형식 설명자가 설명하는 형식의 정규화된 클래스 이름을 포함하는 <see cref="T:System.String" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">이 형식 설명자가 나타내는 클래스의 이름을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">이 형식 설명자가 설명하는 구성 요소 인스턴스의 이름을 포함하는 <see cref="T:System.String" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">이 형식 설명자가 나타내는 형식에 대한 형식 변환기를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">이 형식 설명자가 나타내는 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다. 기본값은 새로 만들어진 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">이 형식 설명자가 나타내는 개체의 기본 이벤트에 대한 이벤트 설명자를 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">이 형식 설명자가 나타내는 개체의 기본 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">이 형식 설명자가 나타내는 개체의 기본 속성에 대한 속성 설명자를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">이 형식 설명자가 나타내는 개체의 기본 속성에 대한 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">이 형식 설명자가 나타내는 클래스와 연결될 지정된 형식의 편집기를 반환합니다.</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">검색할 편집기의 기본 형식입니다.</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">이 형식 설명자가 나타내는 클래스와 연결될 지정된 형식의 편집기입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">이 형식 설명자가 나타내는 개체에 대한 이벤트 설명자의 컬렉션을 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">이 형식 설명자가 나타내는 개체에 대한 이벤트 설명자를 포함하는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">이 형식 설명자가 나타내는 개체에 대한 이벤트 설명자의 필터링된 컬렉션을 반환합니다.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">필터로 사용할 특성의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">이 형식 설명자가 나타내는 개체에 대한 이벤트 설명을 포함하는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">이 형식 설명자가 나타내는 개체에 대한 속성 설명자의 컬렉션을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">이 형식 설명자가 나타내는 개체에 대한 속성 설명을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">이 형식 설명자가 나타내는 개체에 대한 속성 설명자의 필터링된 컬렉션을 반환합니다.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">필터로 사용할 특성의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">이 형식 설명자가 나타내는 개체에 대한 속성 설명을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">지정된 속성 설명자가 설명하는 속성이 포함된 개체를 반환합니다.</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">소유 개체를 검색할 속성 설명자입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">형식 설명자가 지정하는 주어진 속성을 소유하는 <see cref="T:System.Object" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">
        <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합한 개체로 형식을 식별합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">클래스가 디자인 타임에 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합함을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">클래스가 디자인 타임에 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 개체에 바인딩하는 데 적합함을 나타내는 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 클래스의 기본값을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">클래스가 디자인 타임에 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합하지 않음을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> 클래스의 새 인스턴스를 초기화하고 개체가 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합한지 여부를 나타냅니다.</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">
        <see cref="T:System.ComponentModel.DataObjectAttribute" />의 이 인스턴스가 다른 개체의 패턴과 일치하는지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">이 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 <paramref name="obj" /> 매개 변수에서 지정하는 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 특성 값이 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">개체가 디자인 타임에 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합한 것으로 간주되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합한 것으로 간주되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">데이터 필드를 나타내는 속성에 대한 메타데이터를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 클래스의 새 인스턴스를 초기화하고 필드가 데이터 행의 기본 키인지 여부를 나타냅니다.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 행의 기본 키에 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 클래스의 새 인스턴스를 초기화하고 필드가 데이터 행의 기본 키인지 여부와 필드가 데이터베이스 ID 필드인지 여부를 나타냅니다.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 행의 기본 키에 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 행을 고유하게 식별하는 ID 필드임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 클래스의 새 인스턴스를 초기화하고 필드가 데이터 행의 기본 키인지 여부, 필드가 데이터베이스 ID 필드인지 여부 및 필드가 null일 수 있는지 여부를 나타냅니다.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 행의 기본 키에 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 행을 고유하게 식별하는 ID 필드임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 저장소에서 null일 수 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 클래스의 새 인스턴스를 초기화하며, 필드가 데이터 행의 기본 키인지 여부, 필드가 데이터베이스 ID 필드인지 여부 및 필드가 null일 수 있는지 여부를 나타내고 필드의 길이를 설정합니다.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 행의 기본 키에 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 행을 고유하게 식별하는 ID 필드임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">필드가 데이터 저장소에서 null일 수 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="length" vsli:raw="The length of the field in bytes.">필드의 길이(바이트)입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">이 인스턴스가 지정된 개체와 같은지를 표시하는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">이 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 <paramref name="obj" /> 매개 변수에서 지정하는 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">속성이 내부 데이터의 ID 필드를 나타내는지 여부를 보여 주는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">속성이 내부 데이터의 ID 필드를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">속성이 내부 데이터 저장소에서 null일 수 있는 필드를 나타내는지 여부를 보여 주는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 내부 데이터 저장소에서 null일 수 있는 필드를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">속성의 길이(바이트)를 가져옵니다.</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">속성의 길이(바이트)이거나, 설정되지 않았으면 -1입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">속성이 내부 데이터의 기본 키에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 데이터 저장소의 기본 키에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">형식에서 노출하는 데이터 작업 메서드, 메서드가 수행하는 작업의 형식 및 메서드가 기본 데이터 메서드인지 여부를 식별합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 클래스의 새 인스턴스를 초기화하고 메서드가 수행하는 데이터 작업의 형식을 식별합니다.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">메서드가 수행하는 데이터 작업을 설명하는 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 클래스의 새 인스턴스를 초기화하고, 메서드가 수행하는 데이터 작업의 형식을 식별하며, 메서드가 데이터 개체에서 노출하는 기본 데이터 메서드인지 여부를 식별합니다.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">메서드가 수행하는 데이터 작업을 설명하는 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 값 중 하나입니다.</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">특성이 적용되는 메서드가 지정된 <paramref name="methodType" />에 대한 데이터 개체의 기본 메서드임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">이 인스턴스가 지정된 개체와 같은지를 표시하는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">이 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 <paramref name="obj" /> 매개 변수에서 지정하는 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">이 인스턴스가 지정된 특성과 공통 패턴을 공유하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">이 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 <paramref name="obj" /> 매개 변수에서 지정하는 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />가 적용되는 메서드가 특정 메서드 형식에 대한 데이터 개체에서 노출하는 기본 데이터 메서드인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">메서드가 메서드 형식에 대한 개체에서 노출하는 기본 메서드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">메서드가 수행하는 데이터 작업의 형식을 나타내는 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">
        <see cref="T:System.ComponentModel.DataObjectMethodType" />가 적용되는 메서드가 수행하는 데이터 작업의 형식을 식별하는 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">메서드가 수행하는 데이터 작업의 형식을 식별합니다. 데이터 작업의 형식은 메서드에 적용된 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />에 지정됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">메서드가 데이터를 삭제하는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">메서드가 <see cref="T:System.Data.DataSet" /> 개체를 채우는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">메서드가 데이터를 삽입하는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">메서드가 데이터를 검색하는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">메서드가 데이터를 업데이트하는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.DateTime" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DateTimeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.DateTime" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">지정된 값 개체를 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">인수를 사용하여 지정된 값 개체를 <see cref="T:System.DateTime" />로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">
        <see cref="T:System.DateTimeOffset" /> 구조와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">지정된 소스 형식의 개체를 <see cref="T:System.DateTimeOffset" />으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="The date format context.">날짜 서식 컨텍스트입니다.</param>
      <param name="sourceType" vsli:raw="The source type to check.">확인할 소스 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 형식을 <see cref="T:System.DateTimeOffset" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">
        <see cref="T:System.DateTimeOffset" />을 지정된 형식의 개체로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="The date format context.">날짜 서식 컨텍스트입니다.</param>
      <param name="destinationType" vsli:raw="The destination type to check.">확인할 대상 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.DateTimeOffset" />을 지정된 형식으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">지정한 개체를 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
      <param name="context" vsli:raw="The date format context.">날짜 서식 컨텍스트입니다.</param>
      <param name="culture" vsli:raw="The date culture.">날짜 문화권입니다.</param>
      <param name="value" vsli:raw="The object to be converted.">변환될 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">지정된 개체를 나타내는 <see cref="T:System.DateTimeOffset" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">
        <see cref="T:System.DateTimeOffset" />을 지정된 형식의 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="The date format context.">날짜 서식 컨텍스트입니다.</param>
      <param name="culture" vsli:raw="The date culture.">날짜 문화권입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">변환될 <see cref="T:System.DateTimeOffset" />입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert to.">변환할 대상 형식입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">
        <see cref="T:System.DateTimeOffset" />을 나타내는 지정된 형식의 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Decimal" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DecimalConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">인수를 사용하여 지정된 값 개체를 <see cref="T:System.Decimal" />로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">구성 요소의 기본 바인딩 속성을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 클래스의 기본값을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">지정한 속성 이름을 사용하여 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the default binding property.">기본 바인딩 속성의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">지정한 <see cref="T:System.Object" />가 현재 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 인스턴스와 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">현재 <see cref="T:System.Object" /> 인스턴스와 비교할 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">개체가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 같지 않다고 나타내는 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />가 바인딩되는 구성 요소에 대한 기본 바인딩 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />가 바인딩되는 구성 요소에 대한 기본 바인딩 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">구성 요소의 기본 이벤트를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">
        <see cref="T:System.ComponentModel.DefaultEventAttribute" />의 기본값인 <see langword="null" />을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">이 특성이 바인딩되는 구성 요소의 기본 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DefaultEventAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">값이 같은지 테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">이 특성이 바인딩되는 구성 요소의 기본 이벤트 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">이 특성이 바인딩되는 구성 요소의 기본 이벤트 이름입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">구성 요소의 기본 속성을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">
        <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />의 기본값인 <see langword="null" />을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">이 특성이 바인딩되는 구성 요소의 기본 속성 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">값이 같은지 테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">이 특성이 바인딩되는 구성 요소의 기본 속성 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">이 특성이 바인딩되는 구성 요소의 기본 속성 이름입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">
        <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">문서의 활성화가 해제됩니다.</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">문서가 활성화됩니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">활성화된 문서를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">문서가 활성화되는 것을 나타내는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">활성화가 해제된 문서를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">문서의 활성화가 해제되는 것을 나타내는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터가 포함된 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">소스 코드 관리 프로그램에 체크 인된 파일을 체크 아웃하려는 경우 체크 아웃 작업이 취소되거나 실패했을 때 throw된 예외입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">체크 아웃이 취소되었음을 나타내는 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">관련된 메시지나 오류 코드가 없는 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">지정된 serialization 데이터와 컨텍스트를 사용하여 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">지정된 메시지를 사용하여 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A message describing the exception.">예외를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">지정된 예외 및 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">오류에 대한 자세한 설명입니다.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">이 예외의 원인인 내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">지정된 메시지와 오류 코드를 사용하여 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A message describing the exception.">예외를 설명하는 메시지입니다.</param>
      <param name="errorCode" vsli:raw="The error code to pass.">전달할 오류 코드입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">숫자 명령 ID와 GUID 메뉴 그룹 식별자로 구성된 고유한 명령 식별자를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">지정된 메뉴 그룹 GUID와 명령 ID 번호를 사용하여 <see cref="T:System.ComponentModel.Design.CommandID" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">해당 메뉴 명령이 속할 그룹의 GUID입니다.</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">이 메뉴 명령의 숫자 식별자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">두 개의 <see cref="T:System.ComponentModel.Design.CommandID" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare.">비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 개체가 이 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">특정 유형에 대한 해시 함수로 사용합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">현재 <see cref="T:System.Object" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">현재 개체를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">명령 ID 정보, GUID와 정수 식별자 모두를 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">이 <see cref="T:System.ComponentModel.Design.CommandID" />에 의해 확인된 메뉴 명령이 속할 메뉴 그룹의 GUID를 가져옵니다.</summary>
      <returns vsli:raw="The GUID of the command group for this command.">해당 명령에 대한 명령 그룹의 GUID입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">숫자 명령 ID를 가져옵니다.</summary>
      <returns vsli:raw="The command ID number.">명령 ID 번호입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 이벤트에 대한 데이터를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component" vsli:raw="The component that was changed.">변경된 구성 요소입니다.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">변경된 멤버를 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">변경된 멤버의 이전 값입니다.</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">변경된 멤버의 새 값입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">수정된 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">수정된 구성 요소를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">변경된 멤버를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">변경된 멤버를 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">변경된 멤버의 새 값을 가져옵니다.</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">변경된 멤버의 새 값입니다. 이 속성이 <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">변경된 멤버의 이전 값을 가져옵니다.</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">변경된 멤버의 이전 값입니다. 이 속성이 <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 이벤트에 대한 데이터를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">변경할 구성 요소입니다.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">변경할 구성 요소의 멤버를 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">변경할 구성 요소 또는 변경할 멤버의 부모 컨테이너인 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The component that is about to have a member changed.">멤버를 변경할 구성 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">변경할 멤버를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">변경할 멤버를 나타내면 <see cref="T:System.ComponentModel.MemberDescriptor" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 이벤트입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 및 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">이벤트 소스인 구성 요소입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">이벤트와 관련된 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The component associated with the event.">이벤트와 관련된 구성 요소입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">구성 요소 수준의 이벤트에서 발생한 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" /> , <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" /> , <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 및 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component" vsli:raw="The component to be renamed.">이름을 바꿀 구성 요소입니다.</param>
      <param name="oldName" vsli:raw="The old name of the component.">구성 요소의 이전 이름입니다.</param>
      <param name="newName" vsli:raw="The new name of the component.">구성 요소의 새 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">이름을 바꿀 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The component that is being renamed.">이름을 바꿀 구성 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">이벤트의 이름을 바꾼 후에 구성 요소의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the component after the rename event.">이벤트 이름을 바꾼 후의 구성 요소 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">이벤트 이름을 바꾸기 전에 구성 요소 이름을 가져옵니다.</summary>
      <returns vsli:raw="The previous name of the component.">구성 요소의 이전 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">디자이너의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">지정된 디자이너 집합을 포함하는 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">추가할 디자이너의 컬렉션이 들어 있는 목록입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">지정된 디자이너를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">저장할 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">이 컬렉션에 대한 새 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">컬렉션을 열거하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Array" /> 인덱스부터 시작하여 컬렉션의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">컬렉션에서 복사한 요소의 대상인 1차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">이 컬렉션에 대한 새 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">컬렉션을 열거하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">컬렉션의 디자이너 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of designers in the collection.">컬렉션의 디자이너 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">지정된 인덱스의 디자이너를 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the designer to return.">반환할 디자이너의 인덱스입니다.</param>
      <returns vsli:raw="The designer at the specified index.">지정된 인덱스의 디자이너입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">컬렉션에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">
        <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 및 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">문서의 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">문서의 호스트를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">문서의 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">문서를 만들거나 삭제할 때 발생하는 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 및 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">디자이너에 대한 옵션 값을 가져오고 설정하는 데 사용할 수 있는 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">지정한 이름을 사용하여 새 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />을 만들고 지정된 부모에 추가합니다.</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">부모 디자이너 옵션 컬렉션입니다. 루트 개체 컬렉션을 제외한 모든 컬렉션에는 부모가 있습니다.</param>
      <param name="name" vsli:raw="The name of this collection.">이 컬렉션의 이름입니다.</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">이 컬렉션의 속성을 제공하는 개체입니다. 컬렉션이 속성을 제공하지 않을 경우 <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="parent" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">
        <paramref name="name" />이 빈 문자열인 경우</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">지정된 이름을 가진 새 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />을 채웁니다.</summary>
      <param name="options" vsli:raw="The collection to populate.">채울 컬렉션입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">지정한 개체에 대한 옵션 대화 상자를 표시합니다.</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">호출할 개체가 포함된 옵션 컬렉션입니다.</param>
      <param name="optionObject" vsli:raw="The actual options object.">실제 옵션 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">대화 상자가 표시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">이 패키지에 정의된 옵션 값을 가져옵니다.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">옵션이 바인딩될 페이지입니다.</param>
      <param name="valueName" vsli:raw="The name of the option value.">옵션 값의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> 또는 <paramref name="valueName" />가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">이름이 <paramref name="valueName" />인 옵션 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">이 패키지에 정의된 옵션 값을 설정합니다.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">옵션이 바인딩될 페이지입니다.</param>
      <param name="valueName" vsli:raw="The name of the option value.">옵션 값의 이름입니다.</param>
      <param name="value" vsli:raw="The value of the option.">옵션의 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> 또는 <paramref name="valueName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">이 서비스에 대한 옵션 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">사용 가능한 디자이너 옵션으로 채워진 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">디자이너 옵션의 컬렉션을 포함합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">대상 배열의 지정된 인덱스에서 시작하여 전체 컬렉션을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">컬렉션에서 복사한 요소의 대상인 1차원 <see cref="T:System.Array" />입니다. <paramref name="array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">이 컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">이 컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">이 컬렉션의 범위에서 맨 처음 발견되는 특정 값의 인덱스를 반환합니다.</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">컬렉션에서 찾을 개체입니다.</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">발견된 값이 있으면 전체 컬렉션에서 맨 처음 발견되는 값의 인덱스이고, 그렇지 않으면 컬렉션의 하한에서 1을 뺀 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">사용자가 이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />의 옵션을 구성하는 데 사용할 수 있는 대화 상자 UI(사용자 인터페이스)를 표시합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">대화 상자를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns vsli:raw="The position into which the new element was inserted.">새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">컬렉션에 특정 값이 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Object" />가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">컬렉션에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">컬렉션에 삽입할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">컬렉션에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">지정된 인덱스에서 컬렉션 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />에 포함된 자식 옵션 컬렉션의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />에 포함된 자식 옵션 컬렉션의 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">제공된 인덱스에 있는 자식 컬렉션을 가져옵니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">가져올 자식 컬렉션의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The child collection at the specified index.">지정된 인덱스에 있는 자식 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">제공된 이름에 있는 자식 컬렉션을 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the child collection.">자식 컬렉션의 이름입니다.</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">
        <paramref name="name" /> 매개 변수에 의해 지정된 이름을 가진 자식 컬렉션이거나, 이름을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">부모 컬렉션 개체를 가져옵니다.</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">부모 컬렉션 개체이거나, 부모가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />이 제공하는 속성 컬렉션과 컬렉션의 모든 자식을 가져옵니다.</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />이 제공하는 속성 컬렉션과 컬렉션의 모든 자식입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 대한 액세스가 동기화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">컬렉션의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">성능을 개선하고 대부분의 종류의 변경을 취소할 수 있도록 일련의 디자인 타임 동작을 그룹화하는 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">설명을 사용하지 않고 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">지정된 트랜잭션 설명을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="description" vsli:raw="A description for this transaction.">이 트랜잭션에 대한 설명입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">트랜잭션을 취소하고 트랜잭션의 이벤트에 의해 변경된 내용을 롤백합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">이 트랜잭션을 커밋합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">이 개체와 연결된 리소스를 해제합니다. 이 재정의는 이 트랜잭션이 이미 커밋되지 않은 경우 트랜잭션을 커밋합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">
        <see langword="Cancel" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">트랜잭션을 실제로 커밋하는 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">트랜잭션이 취소되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">트랜잭션이 취소되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">트랜잭션이 커밋되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">트랜잭션이 커밋되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">트랜잭션에 대한 설명을 가져옵니다.</summary>
      <returns vsli:raw="A description for the transaction.">트랜잭션에 대한 설명입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 및 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">디자이너가 트랜잭션에서 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />을 호출할지 여부를 나타내는 지정된 값을 사용하여 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">트랜잭션을 커밋할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">트랜잭션을 커밋할지 여부를 나타내는 값입니다.</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 트랜잭션이 닫을 마지막 트랜잭션이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">이 트랜잭션이 닫을 마지막 트랜잭션인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 트랜잭션이 닫을 마지막 트랜잭션이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">디자이너가 트랜잭션에서 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />을 호출할지 여부를 나타냅니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">디자이너가 트랜잭션에서 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />을 호출한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">디자이너의 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 및 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">디자이너에서 실행할 수 있는 동사를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">사용자에게 표시되는 메뉴 명령의 텍스트입니다.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">동사 작업을 수행하는 이벤트 처리기입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">사용자에게 표시되는 메뉴 명령의 텍스트입니다.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">동사 작업을 수행하는 이벤트 처리기입니다.</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">해당 동사에 대한 시작 명령 ID입니다. 기본적으로 디자이너 아키텍처는 동사에 대한 명령 ID의 범위를 따로 만듭니다. 사용자 지정 명령 ID를 제공하여 이 범위를 재정의할 수 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">
        <see cref="M:System.Object.ToString" />를 재정의합니다.</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">동사의 텍스트이거나, 텍스트 필드가 비어 있는 경우 빈 문자열("")입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">동사의 메뉴 항목에 대한 설명을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A string describing the menu item.">메뉴 항목을 설명하는 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">메뉴의 동사 명령에 대한 텍스트 설명을 가져옵니다.</summary>
      <returns vsli:raw="A description for the verb command.">동사 명령에 대한 설명입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 개체의 지정된 배열을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">컬렉션에 포함할 동사를 나타내는 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">컬렉션에 추가할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">동사가 추가된 컬렉션의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">디자이너 동사의 지정된 집합을 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">컬렉션에 추가할 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">디자이너 동사의 지정된 컬렉션을 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">컬렉션에 추가할 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 개체가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">지정된 대상 인덱스에서 시작하는 지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 배열에 컬렉션 멤버를 복사합니다.</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">컬렉션 멤버를 복사할 배열입니다.</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">복사를 시작할 대상 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />의 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">컬렉션에서 가져올 인덱스의 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">목록에 있으면 지정된 개체의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">지정된 인덱스에 지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 삽입합니다.</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">동사를 삽입할 컬렉션의 인덱스입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">컬렉션에 삽입할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>
        <see langword="Clear" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <see langword="Insert" /> 이벤트를 발생시킵니다.</summary>
      <param name="index">항목을 삽입할 인덱스입니다.</param>
      <param name="value">삽입할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <see langword="Remove" /> 이벤트를 발생시킵니다.</summary>
      <param name="index">항목을 제거할 인덱스입니다.</param>
      <param name="value">제거할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <see langword="Set" /> 이벤트를 발생시킵니다.</summary>
      <param name="index">항목을 설정할 인덱스입니다.</param>
      <param name="oldValue">이전 개체입니다.</param>
      <param name="newValue">새 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">
        <see langword="Validate" /> 이벤트를 발생시킵니다.</summary>
      <param name="value" vsli:raw="The object to validate.">유효성을 검사할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 컬렉션에서 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">지정된 인덱스에 있는 <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 가져오거나 설정할 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">컬렉션의 유효한 각 인덱스에 있는 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">디자인 타임에서 라이선스 공급자를 지원할 수 있는 디자인 타임 라이선스 컨텍스트를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">저장된 라이선스 키를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type of the license key.">라이선스 키의 형식입니다.</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">키를 가져올 어셈블리입니다.</param>
      <returns vsli:raw="The saved license key that matches the specified type.">지정된 형식과 일치하는 저장된 라이선스 키입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">저장된 라이선스 키를 설정합니다.</summary>
      <param name="type" vsli:raw="The type of the license key.">라이선스 키의 형식입니다.</param>
      <param name="key" vsli:raw="The license key.">라이선스 키입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">라이선스 사용 모드를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">컨텍스트에 대한 라이선스 모드를 나타내는 <see cref="T:System.ComponentModel.LicenseUsageMode" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">디자인 타임 라이선스 컨텍스트 serialization에 대한 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">지정된 키와 출력 스트림을 사용하여 지정된 디자인 타임 라이선스 컨텍스트 내의 라이선스를 serialize합니다.</summary>
      <param name="o" vsli:raw="The stream to output to.">출력할 스트림입니다.</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">암호화에 사용할 키입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">라이선스 컨텍스트를 나타내는 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">도움말 정보에 대한 요청이 발생한 컨텍스트 정보를 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">일반 컨텍스트입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">선택 영역입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">도구 창 선택 영역입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">창입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">클래스 또는 멤버의 컨텍스트 키워드를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />의 기본값을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">도움말 키워드 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">제공된 형식에서 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">도움말 키워드를 가져올 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">두 개의 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />과 비교할 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />와 같으면 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">도움말 키워드가 <see langword="null" />인지 여부를 확인합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">도움말 키워드가 <see langword="true" />이면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">이 특성이 제공하는 도움말 키워드를 가져옵니다.</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">이 특성이 제공하는 도움말 키워드입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">도움말 키워드의 형식을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">도움말 요청을 위해 F1 키를 누르는 키워드입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">필터 키워드입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">일반 키워드입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">구성 요소를 추가, 변경, 제거하거나 구성 요소의 이름을 바꾸는 이벤트에 대한 이벤트 처리기를 추가하고 제거하는 인터페이스를 제공하며 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 또는 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 이벤트를 발생시키는 메서드를 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">구성 요소가 추가되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">구성 요소가 추가되는 동안에 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">구성 요소가 변경되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">구성 요소가 변경되는 동안에 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">구성 요소가 제거되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">구성 요소가 제거되는 동안에 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">구성 요소의 이름을 바꾸면 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">구성 요소 변경 서비스에 특정 구성 요소가 변경되었음을 알립니다.</summary>
      <param name="component" vsli:raw="The component that has changed.">변경된 구성 요소입니다.</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">변경된 멤버입니다. 이 변경 사항이 단일 멤버와 관련되어 있지 않으면 이 멤버는 <see langword="null" />이 됩니다.</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">멤버의 이전 값입니다. 이 값은 멤버가 <see langword="null" />이 아닌 경우에만 유효합니다.</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">멤버의 새 값입니다. 이 값은 멤버가 <see langword="null" />이 아닌 경우에만 유효합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">구성 요소 변경 서비스에 특정 구성 요소가 변경 중임을 알립니다.</summary>
      <param name="component" vsli:raw="The component that is about to change.">변경할 구성 요소입니다.</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">변경 중인 멤버입니다. 이 변경 사항이 단일 멤버와 관련되어 있지 않으면 이 멤버는 <see langword="null" />이 됩니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">디자인 타임에 구성 요소 열거형을 사용합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">사용할 수 있는 구성 요소 형식의 목록을 가져옵니다.</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">디자인 타임 서비스를 제공하는 디자이너 호스트입니다. <see langword="null" />일 수 있습니다.</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">검색할 구성 요소를 지정하는 기본 형식입니다. <see langword="null" />일 수 있습니다.</param>
      <returns vsli:raw="The list of available component types.">사용할 수 있는 구성 요소 형식의 목록입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">구성 요소를 만드는 동안 권장 기본값 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">구성 요소의 인스턴스를 기본 상태로 복원합니다.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">구성 요소 상태를 다시 설정하는 데 사용되는 이름/값 쌍인 기본 속성 값의 사전입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">권장 값 집합을 사용하여 새 구성 요소를 초기화합니다.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">구성 요소 상태를 초기화하는 데 사용되는 이름/값 쌍인 기본 속성 값의 사전입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">사용자 지정 디자이너를 빌드하기 위한 기본 프레임워크를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">이 디자이너에 대한 기본 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">디자이너를 지정된 구성 요소로 초기화합니다.</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">해당 디자이너와 관련된 구성 요소입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">해당 디자이너가 디자인하고 있는 기본 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">해당 디자이너가 디자인하고 있는 기본 구성 요소를 나타내는 <see cref="T:System.ComponentModel.IComponent" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">디자이너가 지원하는 디자인 타임 동사의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">디자이너가 지원하는 동사를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 또는 구성 요소에 동사가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">루트 디자이너가 추가되거나 제거되는 경우, 선택된 구성 요소가 변경되는 경우 및 현재 루트 디자이너가 변경되는 경우에 이벤트 알림을 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">현재 루트 디자이너가 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">루트 디자이너를 만들 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">문서의 루트 디자이너가 삭제될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">현재 디자인 뷰 선택 항목이 변경될 때 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">현재 활성화된 문서의 루트 디자이너를 가져옵니다.</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">현재 활성화되어 있는 문서이거나, 활성화된 문서가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">개발 환경에서 현재 활성화된 디자인 문서에 대한 루트 디자이너의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">만든 후 아직 삭제하지 않은 루트 디자이너가 포함된 <see cref="T:System.ComponentModel.Design.DesignerCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">구성 요소 디자이너에서 디자인 타임 환경에 노출될 수 있는 속성, 특성 및 이벤트 설명자가 저장되어 있는 <see cref="T:System.ComponentModel.TypeDescriptor" />의 사전을 디자이너에서 액세스하고 필터링할 수 있도록 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에서 항목을 변경하거나 제거할 수 있습니다.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다. 특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에서 항목을 변경하거나 제거하도록 합니다.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다. 이벤트의 사전에 포함된 키는 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에서 항목을 변경하거나 제거할 수 있습니다.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다. 속성의 사전에 포함된 키는 속성 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에 항목을 추가하도록 합니다.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다. 특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에 항목을 추가하도록 합니다.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다. 이벤트의 사전에 포함된 키는 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에 항목을 추가하도록 합니다.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다. 속성의 사전에 포함된 키는 속성 이름입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">디자이너 트랜잭션과 구성 요소를 관리하기 위한 인터페이스를 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">이 디자이너가 활성화될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">이 디자이너가 비활성화될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">이 디자이너에서 문서 로드를 완료할 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">이 호스트가 호스팅 중인 디자이너를 활성화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">지정된 형식의 구성 요소를 만들어 디자인 문서에 추가합니다.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">만들 구성 요소의 형식입니다.</param>
      <returns vsli:raw="The newly created component.">새로 만들어진 구성 요소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">지정된 형식과 이름의 구성 요소를 만들어 디자인 문서에 추가합니다.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">만들 구성 요소의 형식입니다.</param>
      <param name="name" vsli:raw="The name for the component.">구성 요소의 이름입니다.</param>
      <returns vsli:raw="The newly created component.">새로 만들어진 구성 요소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">이벤트 순서를 캡슐화하여 성능을 개선하고 다시 실행 및 실행 취소 기능을 지원할 수 있는 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />을 만듭니다.</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" />의 새 인스턴스입니다. 트랜잭션 단계를 완료할 때 이 개체에 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />을 호출해야 합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">지정된 트랜잭션 설명을 통해 이벤트 순서를 캡슐화하여 성능을 개선하고 다시 실행 및 실행 취소 기능을 지원할 수 있는 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />을 만듭니다.</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">새로 만들어진 트랜잭션에 대한 제목 또는 설명입니다.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">새 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />입니다. 트랜잭션 단계를 완료했으면 이 개체에 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />을 호출해야 합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">지정된 구성 요소를 소멸시키고 디자이너 컨테이너에서 이를 제거합니다.</summary>
      <param name="component" vsli:raw="The component to destroy.">소멸시킬 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">지정된 구성 요소가 들어 있는 디자이너 인스턴스를 가져옵니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">디자이너를 검색할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">
        <see cref="T:System.ComponentModel.Design.IDesigner" />이거나, 지정된 구성 요소에 대한 디자이너가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">지정된, 정규화된 형식 이름의 인스턴스를 가져옵니다.</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">로드할 형식의 이름입니다.</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">지정된 형식 이름에 대한 형식 개체이거나, 형식을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">이 디자이너 호스트에 대한 컨테이너를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">이 호스트에 대한 <see cref="T:System.ComponentModel.IContainer" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">디자이너 호스트가 현재 트랜잭션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">트랜잭션이 처리 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">디자이너 호스트가 현재 문서를 로드 중인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">디자이너 호스트가 현재 문서를 로드 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">현재 디자인에 대한 루트 구성 요소로 사용된 기본 클래스의 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="The instance of the root component class.">루트 구성 요소 클래스의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">디자인하고 있는 클래스의 정규화된 이름을 가져옵니다.</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">기본 구성 요소 클래스의 정규화된 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">현재 트랜잭션에 대한 설명을 가져옵니다.</summary>
      <returns vsli:raw="A description of the current transaction.">현재 트랜잭션에 대한 설명입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">디자이너 호스트가 트랜잭션의 상태에 대해 보고할 수 있는 메서드를 지정합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">디자이너 호스트가 트랜잭션을 닫고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">디자이너가 트랜잭션을 닫고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">Visual Studio 개발 환경에서 옵션 명령 아래에 있는 도구 메뉴에 위치한 디자이너 옵션에 대한 액세스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">지정된 Windows Forms 디자이너 옵션의 값을 가져옵니다.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">옵션을 정의하는 페이지의 이름입니다.</param>
      <param name="valueName" vsli:raw="The name of the option property.">옵션 속성의 이름입니다.</param>
      <returns vsli:raw="The value of the specified option.">지정된 옵션의 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">지정된 Windows Forms 디자이너 옵션의 값을 설정합니다.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">옵션을 정의하는 페이지의 이름입니다.</param>
      <param name="valueName" vsli:raw="The name of the option property.">옵션 속성의 이름입니다.</param>
      <param name="value" vsli:raw="The new value.">새 값입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">디자이너가 사용자 정의 데이터를 저장하는 데 사용할 수 있는 서비스를 통해 구성 요소 사이트별 키/값 쌍 기본 사전을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">지정한 값에 해당하는 키를 가져옵니다.</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">사전에서 찾을 값입니다.</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">관련된 키이거나, 키가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">지정한 키에 해당하는 값을 가져옵니다.</summary>
      <param name="key" vsli:raw="The key to look up the value for.">값을 찾을 키입니다.</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">관련된 값이거나, 값이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">지정된 키-값 쌍을 설정합니다.</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">값을 연결할 키로 사용할 개체입니다.</param>
      <param name="value" vsli:raw="The value to store.">저장할 값입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">구성 요소 이벤트의 이벤트 처리기를 등록하기 위한 서비스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">지정된 구성 요소와 이벤트에 대한 이벤트 처리기 메서드의 고유 이름을 만듭니다.</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">이벤트가 연결된 구성 요소 인스턴스입니다.</param>
      <param name="e" vsli:raw="The event to create a name for.">이름을 만들 이벤트입니다.</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">이 이벤트에 대한 이벤트 처리기의 권장 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">지정된 이벤트와 호환되는 메서드 시그니처를 가진 이벤트 처리기 메서드의 컬렉션을 가져옵니다.</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">호환되는 이벤트 처리기 메서드를 가져올 이벤트입니다.</param>
      <returns vsli:raw="A collection of strings.">문자열의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">이벤트를 표시하는 경우 지정된 속성 설명자가 표시하는 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />를 가져옵니다.</summary>
      <param name="property" vsli:raw="The property that represents an event.">이벤트를 표시하는 속성입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">속성이 표시하는 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 속성이 이벤트를 표시하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">일련의 이벤트 설명자를 일련의 속성 설명자로 변환합니다.</summary>
      <param name="events" vsli:raw="The events to convert to properties.">속성으로 변환할 이벤트입니다.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">이벤트 집합을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">단일 이벤트 설명자를 속성 설명자로 변환합니다.</summary>
      <param name="e" vsli:raw="The event to convert.">변환할 이벤트입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">이벤트를 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">디자이너에 대한 사용자 코드를 표시합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">지정된 이벤트에 대한 사용자 코드를 표시합니다.</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">이벤트가 연결된 구성 요소입니다.</param>
      <param name="e" vsli:raw="The event to display.">표시할 이벤트입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">지정된 줄에서 디자이너에 대한 사용자 코드를 표시합니다.</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">캐럿을 놓을 줄 번호입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">Extender 공급자를 나열할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">구성 요소에 대한 Extender 공급자 집합을 가져옵니다.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">활성화된 extender 공급자를 나열하는 <see cref="T:System.ComponentModel.IExtenderProvider" /> 형식의 배열입니다. 이러한 공급자가 없으면 빈 배열이 반환됩니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">디자인 타임에 Extender 공급자를 추가하거나 제거하기 위한 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">지정된 extender 공급자를 추가합니다.</summary>
      <param name="provider" vsli:raw="The extender provider to add.">추가할 extender 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">지정된 extender 공급자를 제거합니다.</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">제거할 extender 공급자입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">디자인 타임에 도움말 항목을 표시하고 도움말 키워드를 추가하고 제거하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">컨텍스트 특성을 문서에 추가합니다.</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">추가할 특성의 이름입니다.</param>
      <param name="value" vsli:raw="The value of the attribute.">특성 값</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordType" /> 열거형의 키워드 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">모든 기존 컨텍스트 특성을 문서에서 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">하위 컨텍스트를 관리하는 로컬 <see cref="T:System.ComponentModel.Design.IHelpService" />를 만듭니다.</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">추가할 하위 컨텍스트의 우선 순위 형식입니다.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">새로 만든 <see cref="T:System.ComponentModel.Design.IHelpService" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">이전에 추가된 컨텍스트 특성을 제거합니다.</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">제거할 특성의 이름입니다.</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">제거할 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">
        <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />으로 만들어진 컨텍스트를 제거합니다.</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">제거할 로컬 컨텍스트 <see cref="T:System.ComponentModel.Design.IHelpService" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">지정된 키에 일치하는 도움말 항목을 나타냅니다.</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">표시할 도움말 항목의 키워드입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">지정된 URL에 해당하는 도움말 항목을 표시합니다.</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">표시할 도움말 항목의 URL입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">구성 요소의 구성 요소들을 식별하는 데 사용하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">지정된 구성 요소에서 <see cref="T:System.ComponentModel.IComponent" /> 인터페이스를 구현하는 필드를 검색하고 각 필드를 지정된 컨테이너에 추가함으로써 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 메서드를 사용하여 검색할 수 있는 각 필드의 상속 수준을 저장합니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">검색할 <see cref="T:System.ComponentModel.IComponent" />입니다. 이 구성 요소에서 검색이 시작됩니다.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">구성 요소를 추가할 <see cref="T:System.ComponentModel.IContainer" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">지정된 구성 요소의 상속 특성을 가져옵니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">상속 특성을 검색할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">지정된 구성 요소의 상속 수준을 설명하는 <see cref="T:System.ComponentModel.InheritanceAttribute" />의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">디자인 모드에서 사용 가능한 메뉴 명령과 전역 디자이너 동사를 관리하고 바로 가기 메뉴의 일부 형식을 보여 주는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">지정된 표준 메뉴 명령을 메뉴에 추가합니다.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">추가할 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">지정된 <see cref="T:System.ComponentModel.Design.CommandID" />의 <see cref="T:System.ComponentModel.Design.MenuCommand" />가 이미 메뉴에 있습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">지정된 디자이너 동사를 전역 디자이너 동사 집합에 추가합니다.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">추가할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">지정된 명령 ID를 검색하고 그와 관련된 메뉴 명령을 반환합니다.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">검색할 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">명령 ID와 관련된 <see cref="T:System.ComponentModel.Design.MenuCommand" />이거나 명령을 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">지정된 명령 ID와 일치하는 메뉴나 디자이너 동사 명령을 호출합니다.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">검색하고 실행할 명령의 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">명령을 찾아 성공적으로 실행한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">지정된 표준 메뉴 명령을 메뉴에서 제거합니다.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">제거할 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">지정된 디자이너 동사를 전역 디자이너 동사 컬렉션에서 제거합니다.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">제거할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">지정된 위치에서 지정된 바로 가기 메뉴를 보여 줍니다.</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">표시할 바로 가기 메뉴에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">화면 좌표에서 메뉴를 표시할 x 좌표입니다.</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">화면 좌표에서 메뉴를 표시할 y 좌표입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">현재 사용할 수 있는 디자이너 동사의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">현재 사용할 수 있는 디자이너 동사를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">이름이나 형식으로 프로젝트에서 개체에 대한 참조를 얻고, 지정된 개체의 이름을 얻으며, 디자이너 프로젝트에서 지정된 개체의 부모를 찾는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">지정된 구성 요소가 포함된 구성 요소를 가져옵니다.</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">부모 구성 요소를 검색할 개체입니다.</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">지정된 개체가 포함된 기본 <see cref="T:System.ComponentModel.IComponent" />이거나, 부모 구성 요소가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">지정된 구성 요소의 이름을 가져옵니다.</summary>
      <param name="reference" vsli:raw="The object to return the name of.">이름을 반환할 개체입니다.</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">참조된 개체의 이름이거나, 개체 참조를 사용할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">지정된 이름과 일치하는 이름을 가진 구성 요소에 대한 참조를 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">참조를 반환할 구성 요소의 이름입니다.</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">지정된 이름을 참조하는 개체이거나, 참조를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">프로젝트 구성 요소에 대한 사용 가능한 모든 참조를 가져옵니다.</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.IReferenceService" />에서 사용할 수 있는 참조를 가진 모든 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">지정된 형식의 구성 요소에 대한 사용 가능한 모든 참조를 가져옵니다.</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">인스턴스에 대한 참조를 반환할 개체의 형식입니다.</param>
      <returns vsli:raw="An array of all available objects of the specified type.">지정된 형식의 사용할 수 있는 모든 개체의 배열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">디자이너가 특정한 <see cref="T:System.Globalization.CultureInfo" /> 리소스 형식에 대한 리소스 판독기와 작성기에 액세스할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">지정된 문화권의 리소스 판독기를 찾아 반환합니다.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">리소스 판독기를 검색하는 리소스의 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">문화권에 대한 리소스가 들어 있는 <see cref="T:System.Resources.IResourceReader" /> 인터페이스이거나, 문화권에 대한 리소스가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">지정된 문화권의 리소스 작성기를 찾아 반환합니다.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">리소스 작성기를 만드는 리소스의 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">지정된 문화권의 <see cref="T:System.Resources.IResourceWriter" /> 인터페이스입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">루트 수준 디자이너 뷰 기술을 지원합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">지정한 뷰 기술에 대한 뷰 개체를 가져옵니다.</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">특정 뷰 기술을 나타내는 <see cref="T:System.ComponentModel.Design.ViewTechnology" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">지정한 뷰 기술이 지원되지 않거나 없는 경우</exception>
      <returns vsli:raw="An object that represents the view for this designer.">해당 디자이너에 대한 뷰를 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">해당 디자이너에서 표시하기 위해 지원할 수 있는 기술을 가져옵니다.</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">지원되는 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 값의 배열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">디자이너가 구성 요소를 선택할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">현재 선택이 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">현재 선택이 변경되려 할 경우 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">지정된 구성 요소가 현재 선택되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to test.">테스트할 구성 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소가 사용자의 현재 선택의 일부분이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">현재 선택된 구성 요소의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">선택된 구성 요소의 현재 집합을 나타내는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">지정된 구성 요소의 컬렉션을 선택합니다.</summary>
      <param name="components" vsli:raw="The collection of components to select.">선택할 구성 요소의 컬렉션입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">지정된 선택 형식과 일치하는 지정된 구성 요소의 컬렉션에서 구성 요소를 선택합니다.</summary>
      <param name="components" vsli:raw="The collection of components to select.">선택할 구성 요소의 컬렉션입니다.</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 열거형의 값입니다. 기본값은 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">현재 기본 선택 개체인 개체를 가져옵니다.</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">현재 기본 선택 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">선택된 개체의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of selected objects.">선택된 개체의 수입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">서비스에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">지정한 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">추가할 서비스의 유형입니다.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">서비스를 만드는 데 사용되는 콜백 개체입니다. 이 개체는 서비스가 사용 가능으로 선언될 수 있도록 허용하지만 서비스가 요청될 때까지 개체 만들기를 지연시킵니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">지정한 서비스를 서비스 컨테이너에 추가하고 필요에 따라 서비스를 부모 서비스 컨테이너로 승격시킵니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">추가할 서비스의 유형입니다.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">서비스를 만드는 데 사용되는 콜백 개체입니다. 이 개체는 서비스가 사용 가능으로 선언될 수 있도록 허용하지만 서비스가 요청될 때까지 개체 만들기를 지연시킵니다.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 요청을 부모 서비스 컨테이너로 승격시키려면 <see langword="true" />로 설정하고, 그렇지 않으면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">지정한 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">추가할 서비스의 유형입니다.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">추가할 서비스 유형의 인스턴스입니다. 이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">지정한 서비스를 서비스 컨테이너에 추가하고 필요에 따라 서비스를 부모 서비스 컨테이너로 승격시킵니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">추가할 서비스의 유형입니다.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">추가할 서비스 유형의 인스턴스입니다. 이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 요청을 부모 서비스 컨테이너로 승격시키려면 <see langword="true" />로 설정하고, 그렇지 않으면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">지정한 서비스 유형을 서비스 컨테이너에서 제거합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">제거할 서비스의 유형입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">지정한 서비스 유형을 서비스 컨테이너에서 제거하고 필요에 따라 서비스를 부모 서비스 컨테이너로 승격시킵니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">제거할 서비스의 유형입니다.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 요청을 부모 서비스 컨테이너로 승격시키려면 <see langword="true" />로 설정하고, 그렇지 않으면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">관련된 사용자 지정 디자이너 집합을 빌드할 수 있도록 지원합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">자식 디자이너의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">현재 디자이너의 <see cref="T:System.Collections.ICollection" /> 자식 개체 컬렉션을 포함하는 <see cref="T:System.ComponentModel.Design.IDesigner" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">부모 디자이너를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">부모 디자이너를 나타내는 <see cref="T:System.ComponentModel.Design.IDesigner" />이거나, 부모가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">디자인 모드에서 구성 요소에 대한 멤버 설명자의 집합을 수정할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출한 특성을 필터링합니다.</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">특성을 필터링할 구성 요소입니다.</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">수정할 수 있는 특성의 사전입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">필터링된 특성 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출한 이벤트를 필터링합니다.</summary>
      <param name="component" vsli:raw="The component to filter events for.">이벤트를 필터링할 구성 요소입니다.</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">수정할 수 있는 이벤트의 사전입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">필터링된 이벤트 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출한 속성을 필터링합니다.</summary>
      <param name="component" vsli:raw="The component to filter properties for.">속성을 필터링할 구성 요소입니다.</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">수정할 수 있는 속성의 사전입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">필터링된 속성 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">디자인 타임에 사용 가능한 형식을 검색합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">사용 가능한 형식 목록을 검색합니다.</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">일치시킬 기본 형식입니다. <see langword="null" />일 수 있습니다.</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">모든 참조된 어셈블리의 형식을 확인할지 여부를 나타냅니다.</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">
        <paramref name="baseType" /> 및 <paramref name="excludeGlobalTypes" />가 지정한 조건에 일치시킬 형식의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">어셈블리나 형식을 이름으로 검색하는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">요청한 어셈블리를 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">검색할 어셈블리의 이름입니다.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">요청한 어셈블리의 인스턴스이거나, 어셈블리가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">요청한 어셈블리를 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">검색할 어셈블리의 이름입니다.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">어셈블리를 찾을 수 없는 경우 이 메서드가 예외를 throw하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 그리고 어셈블리를 찾을 수 없는 경우 이 메서드는 <see langword="null" />을 반환합니다.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">요청한 어셈블리의 인스턴스이거나, 어셈블리가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">어셈블리가 로드된 파일의 경로를 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the assembly.">어셈블리의 이름입니다.</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">어셈블리가 로드된 파일의 경로입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">지정된 이름으로 형식을 로드합니다.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">형식의 이름입니다. 형식 이름이 어셈블리를 나타내는 정규화된 이름이 아니면 이 서비스는 참조된 어셈블리의 내부 집합을 검색합니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">지정된 이름에 일치하는 <see cref="T:System.Type" />의 인스턴스이거나, 형식을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">지정된 이름으로 형식을 로드합니다.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">형식의 이름입니다. 형식 이름이 어셈블리를 나타내는 정규화된 이름이 아니면 이 서비스는 참조된 어셈블리의 내부 집합을 검색합니다.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">어셈블리를 찾을 수 없는 경우 이 메서드가 예외를 throw하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 그리고 어셈블리를 찾을 수 없는 경우 이 메서드는 <see langword="null" />을 반환합니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">지정된 이름에 일치하는 <see cref="T:System.Type" />의 인스턴스이거나, 형식을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">지정된 이름으로 형식을 로드합니다.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">형식의 이름입니다. 형식 이름이 어셈블리를 나타내는 정규화된 이름이 아니면 이 서비스는 참조된 어셈블리의 내부 집합을 검색합니다.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">어셈블리를 찾을 수 없는 경우 이 메서드가 예외를 throw하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 그리고 어셈블리를 찾을 수 없는 경우 이 메서드는 <see langword="null" />을 반환합니다.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식을 검색할 때 대/소문자를 무시하려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">지정된 이름에 일치하는 <see cref="T:System.Type" />의 인스턴스이거나, 형식을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">참조를 지정된 어셈블리에 추가합니다.</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">참조할 어셈블리를 나타내는 <see cref="T:System.Reflection.AssemblyName" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">창 메뉴 또는 도구 모음 명령 항목을 나타냅니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">메뉴 명령이 변경될 경우 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">메뉴 항목이나 도구 모음 단추를 선택한 경우 발생하는 이벤트입니다.</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">이 메뉴 명령을 환경 메뉴에 연결하는 고유 명령 ID입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">명령을 호출합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">지정한 매개 변수가 있는 명령을 호출합니다.</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">명령에 사용할 선택적 인수입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">이 메뉴 명령의 문자열 표현을 반환합니다.</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">설정된 플래그 이름이 세로줄(|)로 구분되어 추가된 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 속성 값을 포함하는 문자열입니다. 이 플래그 속성에는 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" /> , <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" /> , <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> 및 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />이 포함됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">이 메뉴 항목이 선택되어 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">해당 항목이 선택되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">이 메뉴 명령과 관련된 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">메뉴 명령과 관련된 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">이 메뉴 항목을 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목이 활성화되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">이 메뉴 항목에 대한 OLE 명령 상태 코드를 가져옵니다.</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">이 메뉴 항목의 상태를 반영하는 상태 플래그가 혼합된 정수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.MenuCommand" />와 연결된 public 속성을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />의 public 속성이 들어 있는 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">이 메뉴 항목이 지원되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목이 지원되는 경우 <see langword="true" />이고 이것이 기본값이며, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">이 메뉴 항목이 표시되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목이 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">선택 형식을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">현재 선택에 선택된 구성 요소를 추가하여 선택된 구성 요소의 현재 집합을 유지하는 추가 선택을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">일반적인 선택을 나타냅니다. 선택 서비스는 Ctrl 키와 Shift 키에 응답하여 선택에서 구성 요소를 추가하거나 제거하는 작업을 지원합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">사용자가 구성 요소를 클릭할 때 발생하는 선택을 나타냅니다. 새로 선택한 구성 요소가 이미 선택되어 있으면 취소하는 대신 기본 선택 구성 요소로 수준을 올립니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">마우스 포인터가 구성 요소 위에 있을 때 사용자가 마우스 단추를 누를 경우 발생하는 선택을 나타냅니다. 포인터 아래에 있는 구성 요소가 이미 선택되어 있으면 취소하는 대신 기본 선택 구성 요소로 수준을 올립니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">구성 요소를 선택한 후 즉시 사용자가 마우스 단추를 떼었을 때 발생하는 선택을 나타냅니다. 새로 선택한 구성 요소가 이미 선택되어 있으면 취소하는 대신 기본 선택 구성 요소로 수준을 올립니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">일반적인 선택을 나타냅니다. 선택 서비스는 Ctrl 키와 Shift 키에 응답하여 선택에서 구성 요소를 추가하거나 제거하는 작업을 지원합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">사용자가 구성 요소를 클릭할 때 발생하는 기본 선택을 나타냅니다. 선택 목록에 있는 구성 요소가 이미 선택되어 있으면 기본 선택 구성 요소로 수준을 올립니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">현재 선택에서 선택된 구성 요소를 제거하여 선택된 구성 요소의 현재 집합을 유지하는 제거 선택을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">선택 내용이 바뀔 때 발생하는 선택을 나타냅니다. 선택 서비스는 현재 선택을 대체 선택으로 바꿉니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">현재 선택과 제공된 선택 간을 전환하는 토글 선택을 나타냅니다. 구성 요소가 이미 선택되어 있고 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> 선택 형식과 함께 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />로 전달된 경우 구성 요소 선택은 취소됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">
        <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" /> , <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" /> , <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" /> , <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> 또는 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" /> 등의 사용할 수 있는 선택 형식을 식별합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">구성 요소 또는 serialize 가능한 개체의 집합을 serialization 저장소에 serialize하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">새 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 만듭니다.</summary>
      <returns vsli:raw="A new created serialization store.">새로 생성된 serialization 저장소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">지정한 저장소를 역직렬화하여 개체 컬렉션을 생성합니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">역직렬화할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
      <returns vsli:raw="A collection of objects created according to the stored state.">저장된 상태에 따라 만들어진 개체의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">특정 저장소를 역직렬화하고 특정 <see cref="T:System.ComponentModel.IContainer" />를 역직렬화된 <see cref="T:System.ComponentModel.IComponent" /> 개체로 채웁니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">역직렬화할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IContainer" /> 개체가 추가될 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
      <returns vsli:raw="A collection of objects created according to the stored state.">저장된 상태에 따라 만들어진 개체의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">지정된 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 지정된 컨테이너에 역직렬화합니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">역직렬화할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> 개체가 추가될 컨테이너입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">재생된 형식의 유효성을 선택적으로 검사하여 지정된 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 지정된 컨테이너에 역직렬화합니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">역직렬화할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> 개체가 추가될 컨테이너입니다.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">형식이 같은 개체에 적용되는 경우에만 deserialization이 작동하도록 하려면 <see langword="true" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">선택적으로 기본 속성 값을 적용하여 특정 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 특정 컨테이너에 역직렬화합니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">역직렬화할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> 개체가 추가될 컨테이너입니다.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">형식이 같은 개체에 적용되는 경우에만 deserialization이 작동하도록 하려면 <see langword="true" />입니다.</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">기본 속성 값을 적용하려면 <see langword="true" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">스트림에서 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 로드합니다.</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">저장소가 로드될 <see cref="T:System.IO.Stream" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">
        <paramref name="stream" />이 이전 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> 호출에 의해 저장된 데이터를 포함하지 않는 경우</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">새 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">지정된 개체를 지정된 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />에 serialize합니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">
        <paramref name="value" />의 상태가 작성될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="value" vsli:raw="The object to serialize.">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 가 닫혀 있거나 <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">기본 속성 값을 설명하는 지정된 개체를 serialize합니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">
        <paramref name="value" />의 상태가 serialize될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="value" vsli:raw="The object to serialize.">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 가 닫혀 있거나 <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">지정된 개체에 대한 지정된 멤버를 serialize합니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <paramref name="member" />의 상태가 serialize될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">
        <paramref name="member" />가 연결된 개체입니다.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">serialize할 멤버를 지정하는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 가 닫혀 있거나 <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">기본 속성 값을 설명하는 지정된 개체의 지정된 멤버를 serialize합니다.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <paramref name="member" />의 상태가 serialize될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">
        <paramref name="member" />가 연결된 개체입니다.</param>
      <param name="member" vsli:raw="The member to serialize.">Serialize할 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> 가 닫혀 있거나 <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">정보를 중첩된 serializer에 사용할 수 있게 할 serializer가 사용하는 스택 개체를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">개체를 스택의 맨 위에 푸시하지 않고 스택의 맨 아래에 추가합니다.</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">스택에 추가할 컨텍스트 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">스택에서 현재 개체를 제거하고 이 개체의 값을 반환합니다.</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">스택에서 제거된 개체입니다. 스택에 개체가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">지정된 개체를 스택에 푸시하거나 저장합니다.</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">스택에 푸시할 컨택스트 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">현재 스택에 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">스택의 현재 개체이거나 푸시된 개체가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">지정된 수준에 있는 스택의 개체를 가져옵니다.</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">스택에서 검색할 개체의 수준입니다. 수준 0은 스택의 맨 위이고 수준 1은 그 다음이며 나머지도 마찬가지입니다. 이 수준은 0 이상이어야 합니다. 수준이 스택의 수준 수보다 크면 <see langword="null" />을 반환합니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">
        <paramref name="level" /> 가 0보다 작습니다.</exception>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">지정된 수준에 있는 스택의 개체입니다. 해당 수준에 개체가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">상속하거나 지정된 형식을 구현하는 스택의 첫 번째 개체를 가져옵니다.</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">컨텍스트 스택에서 검색할 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">상속하거나 지정된 형식을 구현한 스택의 첫 번째 개체입니다. 스택에 형식을 구현한 개체가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">클래스를 해당 형식의 serializer에 대한 기본 공급자로 사용하도록 지정하려면 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 특성을 serializer에 배치합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">명명된 공급자 형식을 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">serialization 공급자 형식의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">지정된 공급자 형식을 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">serialization 공급자의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">serialization 공급자의 형식 이름을 가져옵니다.</summary>
      <returns vsli:raw="A string containing the name of the provider.">공급자의 이름이 들어 있는 문자열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">사용자 지정 디자이너 로더를 구현하는데 사용할 수 있는 기본 디자이너 로더 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">디자이너를 로딩하기 시작합니다.</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">이 로더가 구성 요소를 로드하는 데 사용하는 로더 호스트입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">캐시된 변경 내용을 디자이너가 로드된 위치에 씁니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">로더가 문서를 현재 로딩하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">로더가 문서를 현재 로딩하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">serialize된 상태로부터 로딩을 지원하도록 디자이너 호스트를 확장할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">디자이너 로딩 작업을 종료합니다.</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">이 디자이너가 디자인하고 있는 문서의 기본 클래스의 정규화된 이름입니다.</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">디자이너가 성공적으로 로드되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">로딩하는 동안 오류가 발생한 경우 해당 오류가 들어 있는 컬렉션입니다. 오류가 발생하지 않았으면 빈 컬렉션이나 <see langword="null" />을 전달합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">디자인 문서를 다시 로드합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">디자인 문서를 로드하는 동안 오류를 허용할지 여부를 지정하기 위해 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />를 확장하는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">오류가 발생한 경우 다시 로드할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">오류가 발견된 경우 디자이너 로더가 디자인 문서를 다시 로드할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" />가 호출되는 경우 오류를 무시할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">디자이너 로더가 디자인 문서를 다시 로드할 때 오류를 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">외부 구성 요소의 비동기 로딩을 지원하도록 디자이너 로더를 확장시킬 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">이 인터페이스가 관리한 로드 프로세스의 일부로 외부 구성 요소를 등록합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">종속 로드가 종료되었음을 나타냅니다.</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">디자이너의 로드가 성공적이면 <see langword="true" />이고, 오류 때문에 로드를 끝내지 못하면 <see langword="false" />입니다.</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">로딩하는 동안 오류가 발생한 경우 발생한 오류의 컬렉션입니다. 오류가 발생하지 않으면 빈 컬렉션이나 <see langword="null" />을 전달합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">디자인 문서를 다시 로드합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">다시 로드 요청이 받아들여지면 <see langword="true" />이고, 로더가 다시 로드를 허용하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">디자인 타임 serialization을 관리할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" />이 지정된 이름을 serialization 관리자의 이름 테이블에서 찾을 수 없을 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">serialization이 완료되었을 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">지정된 serialization 공급자를 serialization 관리자에 추가합니다.</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">추가할 serialization 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">지정된 형식의 인스턴스를 만들어 명명된 인스턴스의 컬렉션에 추가합니다.</summary>
      <param name="type" vsli:raw="The data type to create.">만들 데이터 형식입니다.</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">이 형식에 대한 생성자에 전달할 인수입니다.</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">개체의 이름입니다. 이 이름은 나중에 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />를 통해 개체에 액세스하는 데 사용할 수 있습니다. <see langword="null" />이 전달되면 개체는 계속 만들어지지만 이름을 통해 개체에 액세스할 수는 없습니다.</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">
        <see langword="true" />이면 이 개체가 디자인 컨테이너에 추가됩니다. 개체에서는 영향을 줄 수 있도록 이에 대한 <see cref="T:System.ComponentModel.IComponent" />를 구현해야 합니다.</param>
      <returns vsli:raw="The newly created object instance.">새로 만들어진 개체 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">지정된 이름으로 만들어진 개체 인스턴스를 가져오거나, 해당 개체가 없으면 <see langword="null" />입니다.</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">검색할 개체의 이름입니다.</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">지정된 이름의 개체 인스턴스이거나, 해당 이름의 개체를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">지정된 개체의 이름을 가져오거나, 개체에 이름이 없으면 <see langword="null" />입니다.</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">이름을 검색할 개체입니다.</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">개체의 이름이거나, 개체에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">지정된 개체 형식에 대한 요청된 형식의 serializer를 가져옵니다.</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">serializer를 가져올 개체의 형식입니다.</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">검색할 serializer의 형식입니다.</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">요청된 serializer의 인스턴스이거나, 적절한 serializer를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">지정된 이름의 형식을 가져옵니다.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">로드할 형식의 정규화된 이름입니다.</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">형식의 인스턴스이거나, 형식이 로드될 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">사용자 지정 serialization 공급자를 serialization 관리자에서 제거합니다.</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">제거할 공급자입니다. 이 개체는 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />를 사용하여 추가해야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">serialization의 오류를 보고합니다.</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">보고할 오류입니다. 이 정보 개체는 모든 개체 형식일 수 있습니다. 이 개체가 예외인 경우에는 예외 메시지를 추출하여 사용자에게 보고하고 다른 형식인 경우에는 <see cref="M:System.Object.ToString" />을 호출하여 정보를 사용자에게 표시합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">지정된 기존 개체의 이름을 설정합니다.</summary>
      <param name="instance" vsli:raw="The object instance to name.">이름을 지정할 개체 인스턴스입니다.</param>
      <param name="name" vsli:raw="The name to give the instance.">인스턴스에 지정할 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">serializer 간의 통신에 유용한 스택 기반의 사용자 정의 스토리지 영역을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">데이터를 저장하는 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">사용 가능한 serializer를 통해 serialize할 수 있는 사용자 지정 속성을 나타냅니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">serialize될 속성이 들어 있는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">serializer에 액세스할 수 있게 하는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">지정된 특성을 사용하는 serializer를 가져옵니다.</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">serializer를 요청하는 serialization 관리자입니다.</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">지정된 형식의 현재 serializer의 인스턴스입니다. 지정한 형식의 serializer가 없으면 이 인스턴스가 <see langword="null" />일 수 있습니다.</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">serialize할 개체의 데이터 형식입니다.</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">만들 serializer의 데이터 형식입니다.</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">요청된 형식의 serializer의 인스턴스이거나 요청이 만족되지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">serialization과 deserialization을 호출할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">지정된 serialization 데이터 개체를 역직렬화하고 해당 데이터가 표시한 개체의 컬렉션을 반환합니다.</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">serialize된 데이터로 구성된 개체입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">지정된 serialization 데이터 개체에서 다시 빌드된 개체의 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">지정된 개체의 컬렉션을 serialize하여 serialization 데이터 개체에 저장합니다.</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">serialize할 개체의 컬렉션입니다.</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">지정된 개체 컬렉션의 serialize된 상태가 들어 있는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">개체에 대한 고유 이름을 만들 수 있는 서비스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">지정된 컨테이터의 모든 구성 요소에 고유한 새 이름을 만듭니다.</summary>
      <param name="container" vsli:raw="The container where the new object is added.">새 개체가 추가되는 컨테이너입니다.</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">이름을 받을 개체의 데이터 형식입니다.</param>
      <returns vsli:raw="A unique name for the data type.">데이터 형식에 대한 고유 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">지정된 이름이 유효한지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="name" vsli:raw="The name to validate.">유효성을 확인할 이름입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">유효한 이름이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">지정된 이름이 유효한지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="name" vsli:raw="The name to validate.">유효성을 확인할 이름입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">개체의 인스턴스를 만드는 데 필요한 정보를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">지정된 멤버 정보와 인수를 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">설명자에 대한 멤버 정보입니다. 이것은 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" />입니다. 이것이 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" />이면, <see langword="static" /> 멤버를 나타내야 합니다.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">멤버에게 전달할 인수의 컬렉션입니다. 인수가 없으면 이 매개 변수는 <see langword="null" />이거나 빈 컬렉션이 될 수 있습니다. 컬렉션도 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />의 다른 인수로 구성되어 있습니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" />가 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" /> 형식이고 <see langword="static" /> 멤버를 나타내지 않는 경우  

또는 
<paramref name="member" />가 <see cref="T:System.Reflection.PropertyInfo" /> 형식이고 읽을 수 없는 경우  

또는 
<paramref name="member" />가 <see cref="T:System.Reflection.MethodInfo" /> 또는 <see cref="T:System.Reflection.ConstructorInfo" /> 형식이고 <paramref name="arguments" />의 인수 수가 <paramref name="member" />의 시그니처와 일치하지 않는 경우

또는

<paramref name="member" />가 <see cref="T:System.Reflection.ConstructorInfo" /> 형식이고 <see langword="static" /> 멤버를 나타내는 경우  

또는 
<paramref name="member" />가 <see cref="T:System.Reflection.FieldInfo" /> 형식이고 <paramref name="arguments" />의 인수 수가 0이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">지정된 멤버 정보, 인수, 그리고 지정된 정보가 인스턴스를 완벽하게 설명하는지 여부를 나타내는 값을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">설명자에 대한 멤버 정보입니다. 이것은 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" />입니다. 이것이 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" />이면, <see langword="static" /> 멤버를 나타내야 합니다.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">멤버에게 전달할 인수의 컬렉션입니다. 인수가 없으면 이 매개 변수는 <see langword="null" />이거나 빈 컬렉션이 될 수 있습니다. 컬렉션도 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />의 다른 인수로 구성되어 있습니다.</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 정보가 인스턴스를 완벽하게 설명하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" />가 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" /> 형식이고 <see langword="static" /> 멤버를 나타내지 않는 경우 
 <paramref name="member" />가 <see cref="T:System.Reflection.PropertyInfo" /> 형식이고 읽을 수 없는 경우  
  
 <paramref name="member" />가 <see cref="T:System.Reflection.MethodInfo" /> 또는 <see cref="T:System.Reflection.ConstructorInfo" /> 형식이고 <paramref name="arguments" />의 인수 수가 <paramref name="member" />의 시그니처와 일치하지 않는 경우  
  
 <paramref name="member" />가 <see cref="T:System.Reflection.ConstructorInfo" /> 형식이고 <see langword="static" /> 멤버를 나타내는 경우 
 <paramref name="member" />가 <see cref="T:System.Reflection.FieldInfo" /> 형식이고 <paramref name="arguments" />의 인수 수가 0이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">이 인스턴스 설명자를 호출하고 설명자가 설명하는 개체를 반환합니다.</summary>
      <returns vsli:raw="The object this instance descriptor describes.">이 인스턴스 설명자가 설명하는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">이 인스턴스 설명자가 나타내는 개체의 인스턴스를 다시 구성하는 데 사용할 수 있는 인수의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">개체를 만드는 데 사용할 수 있는 인수의 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">이 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />의 내용이 인스턴스를 완벽하게 식별하는지 여부를 나타내는 값을 가져옵니다</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인스턴스가 완벽하게 설명되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">이 설명자가 연결된 인스턴스를 설명하는 멤버 정보를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">이 개체가 연결된 인스턴스를 설명하는 <see cref="T:System.Reflection.MemberInfo" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">개체와 멤버 사이의 단일 관계를 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">빈 멤버 관계를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">
        <paramref name="member" />를 소유하는 개체입니다.</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">
        <paramref name="owner" />에 연관시킬 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> 또는 <paramref name="member" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">두 개의 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />과 비교할 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />와 같으면 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">지정된 두 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체가 동일한지 여부를 테스트합니다.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">같은 연산자의 왼쪽에 있는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체입니다.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">같음 연산자의 오른쪽에 있는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체입니다.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 개의 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체가 동일하면 이 연산자는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">두 개의 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체가 다른지 여부를 테스트합니다.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">같지 않음 연산자의 왼쪽에 있는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체입니다.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">같지 않음 연산자의 오른쪽에 있는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체입니다.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">두 개의 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체가 다르면 이 연산자는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">이 관계가 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 관계와 같은지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 관계가 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 관계와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">연관된 멤버를 가져옵니다.</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">
        <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />에 전달되는 멤버입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">소유하는 개체를 가져옵니다.</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">
        <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />에 전달되는 소유하는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">멤버를 다른 멤버와 연결하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">지정된 소스 관계에 관계를 가져옵니다.</summary>
      <param name="source" vsli:raw="The source relationship.">소스 관계입니다.</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">
        <paramref name="source" />에 대한 관계이거나, 관계가 없으면 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">소스 개체와 대상 관계 사이의 관계를 만듭니다.</summary>
      <param name="source" vsli:raw="The source relationship.">소스 관계입니다.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">소스에 설정할 관계입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">서비스에서 관계를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">지정된 관계가 지원되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="source" vsli:raw="The source relationship.">소스 관계입니다.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">소스에 설정할 관계입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 두 개체 사이의 관계가 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">소스 개체와 대상 개체의 관계를 설정합니다.</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">소스 관계입니다. 관계 할당의 왼쪽 부분입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="source" />가 비어 있거나 서비스에서 관계를 지원하지 않는 경우</exception>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">
        <paramref name="source" />와 연결된 현재 관계이거나, 관계가 없으면 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">소스 개체와 대상 개체의 관계를 설정합니다.</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">소스 관계의 소유자입니다.</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">소스 관계의 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceOwner" /> 또는 <paramref name="sourceMember" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="sourceOwner" /> 또는 <paramref name="sourceMember" />가 비어 있거나 서비스에서 관계를 지원하지 않는 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">소스 개체와 대상 개체의 관계를 캡슐화하는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체이거나, 관계가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name to resolve.">확인할 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">확인할 개체의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the object to resolve.">확인할 개체의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">이름이 일치하는 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The object that the name is associated with.">이름과 관련있는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">serialization 관리자의 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">루트 디자이너 개체에 대해 사용할 기본 serializer를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">serializer의 데이터 형식의 정규화된 이름입니다.</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">serializer 기본 형식의 이름입니다. serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">serializer의 데이터 형식의 정규화된 이름입니다.</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">serializer 기본 형식의 이름입니다. serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">serializer의 데이터 형식입니다.</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">serializer의 기본 형식입니다. serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">루트 serializer가 디자이너 호스트를 먼저 삭제하지 않고 디자인 문서의 재로딩을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">루트 serializer가 재로딩을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">serializer의 기본 형식의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the base type of the serializer.">serializer 기본 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">serializer의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the type of the serializer.">serializer 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">이 특성 형식의 고유 ID를 가져옵니다.</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">이 특성 형식의 고유 ID가 포함된 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />에 대한 serialization 데이터를 저장하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">Serialization 저장소를 닫습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">지정된 스트림에 저장소를 저장합니다.</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">저장소가 serialize될 스트림입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">serialization 또는 deserialization 도중 발생한 오류의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">Serialization 또는 deserialization 도중 발생한 오류가 포함된 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">
        <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 인터페이스의 기본 구현을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">지정된 부모 서비스 공급자를 사용하여 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">부모 서비스 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">지정한 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">추가할 서비스의 유형입니다.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">서비스를 만들 수 있는 콜백 개체입니다. 이 콜백 개체를 사용하면 서비스가 사용 가능으로 선언되지만 해당 서비스를 요청할 때까지 개체 만들기가 지연됩니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 또는 <paramref name="callback" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">
        <paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">지정한 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">추가할 서비스의 유형입니다.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">서비스를 만들 수 있는 콜백 개체입니다. 이 콜백 개체를 사용하면 서비스가 사용 가능으로 선언되지만 해당 서비스를 요청할 때까지 개체 만들기가 지연됩니다.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 서비스가 부모 서비스 컨테이너에 추가되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 또는 <paramref name="callback" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">
        <paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">지정한 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">추가할 서비스의 유형입니다.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">추가할 서비스의 인스턴스입니다. 이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 또는 <paramref name="serviceInstance" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">
        <paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">지정한 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">추가할 서비스의 유형입니다.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">추가할 서비스 유형의 인스턴스입니다. 이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 서비스가 부모 서비스 컨테이너에 추가되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 또는 <paramref name="serviceInstance" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">
        <paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">이 서비스 컨테이너를 삭제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">이 서비스 컨테이너를 삭제합니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.ServiceContainer" />가 삭제되는 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">요청한 서비스를 가져옵니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">검색할 서비스의 형식입니다.</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">서비스를 찾을 수 있으면 해당 서비스의 인스턴스이고, 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">지정한 서비스 유형을 서비스 컨테이너에서 제거합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">제거할 서비스의 유형입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">지정한 서비스 유형을 서비스 컨테이너에서 제거합니다.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">제거할 서비스의 유형입니다.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 서비스가 부모 서비스 컨테이너에서 제거되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.ServiceContainer" />에 의해 직접 구현된 기본 서비스를 가져옵니다.</summary>
      <returns vsli:raw="The default services.">기본 서비스입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">필요할 때 서비스의 인스턴스를 만들 수 있는 콜백 메커니즘을 제공합니다.</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">서비스 만들기를 요청한 서비스 컨테이너입니다.</param>
      <param name="serviceType" vsli:raw="The type of service to create.">만들 서비스의 형식입니다.</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">
        <paramref name="serviceType" />로 지정된 서비스이거나, 해당 서비스를 만들 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">대부분의 애플리케이션에서 사용할 수 있는 표준 명령 집합에 대한 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">AlignBottom 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">AlignHorizontalCenters 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">AlignLeft 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">AlignRight 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">AlignToGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">AlignTop 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">AlignVerticalCenters 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">ArrangeBottom 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">ArrangeIcons 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">ArrangeRight 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">BringForward 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">BringToFront 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">CenterHorizontally 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">CenterVertically 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">Copy 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">Cut 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">Delete 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">Document Outline 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">F1Help 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">Group 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">HorizSpaceConcatenate 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">HorizSpaceDecrease 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">HorizSpaceIncrease 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">HorizSpaceMakeEqual 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">LineupIcons 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">LockControls 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">MultiLevelRedo 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">MultiLevelUndo 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">Paste 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">Properties 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">PropertiesWindow 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">Redo 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">Replace 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">SelectAll 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">SendBackward 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">SendToBack 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">ShowGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">ShowLargeIcons 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">SizeToControl 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">SizeToControlHeight 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">SizeToControlWidth 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">SizeToFit 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">SizeToGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">SnapToGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">TabOrder 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">Undo 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">Ungroup 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">동사 집합에서 첫 번째 동사를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">동사 집합에서 마지막 동사를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">VertSpaceConcatenate 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">VertSpaceDecrease 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">VertSpaceIncrease 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">VertSpaceMakeEqual 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">ViewCode 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">ViewGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.StandardCommands" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">디자인 환경에서 사용할 수 있는 도구 창의 표준 세트에 해당하는 GUID 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">개체 브라우저에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">출력 창에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">솔루션 탐색기에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">속성 창에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">관련 링크 프레임에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">서버 탐색기에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">작업 목록에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">도구 상자의 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">지정된 형식에 대한 형식 설명 공급자를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">지정된 개체에 대한 형식 설명 공급자를 가져옵니다.</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">형식 설명 공급자를 가져올 개체입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">
        <paramref name="instance" />에 해당하는 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">지정된 형식에 대한 형식 설명 공급자를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">형식 설명 공급자를 가져올 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" />에 해당하는 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">디자이너 호스트가 지원하는 기술 세트에 대한 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">기본 뷰 기술 지원을 지정합니다.
        
루트 디자이너 개체의 모든 형식을 반환할 수 있지만, 개체는 호스트 기술에 사용되는 어댑터와 호환되어야 합니다. Visual Studio와 같은 호스팅 환경에는 새로운 보기 기술 어댑터에 연결하는 방법을 제공합니다. Windows Forms 디자이너의 기본 보기 개체는 <see cref="T:System.Windows.Forms.Control" /> 인스턴스입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">뷰 개체가 개발 환경에 직접 전달되는 모드를 나타냅니다.
        
보기 개체는 개발 환경에 필요한 모든 인터페이스를 구현해야 합니다. Visual Studio 개발 환경에서는 ActiveX 컨트롤, 액티브 문서 또는 Visual Studio VSI(Visual Studio 통합) 프로그램을 통해 사용할 수 있는 IVsWindowPane 인터페이스를 구현하는 개체인 보기 개체를 지원합니다. Visual Studio 개발 환경에서는 이 보기 기술을 지원합니다. 모든 개발 환경에서 이 보기 기술이 지원되는 것은 아닙니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">Windows Forms 컨트롤 개체가 루트 디자이너를 위한 디스플레이를 제공하는 모드를 나타냅니다. 디자이너 호스트는 Windows Forms 컨트롤을 사용하여 개발 환경 문서 창을 채웁니다.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />는 구성 요소의 표시 여부를 표시합니다. <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />가 있으면 비주얼 디자이너에서 이 구성 요소를 디자이너에 표시할 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">
        <see langword="Yes" />로 지정된 기본 표시 여부입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">비주얼 디자이너에서 구성 요소가 표시되지 않도록 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">비주얼 디자이너에서 구성 요소가 표시되도록 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">기본값이 <see langword="false" />인 새 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />를 만듭니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 속성이 <paramref name="visible" />에 지정된 값으로 설정된 새 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />를 만듭니다.</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">
        <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 속성이 설정될 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">이 인스턴스와 비교할 개체이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">이 인스턴스가 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 값과 같은지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">디자인 타임에 구성 요소가 표시될지 여부를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">이 구성 요소가 디자인 타임에 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">배정밀도 부동 소수점 숫자 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DoubleConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Enum" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">지정된 형식에 대한 <see cref="T:System.ComponentModel.EnumConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">이 열거형 변환기에 연결할 열거형 유형을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 열거형 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">지정된 값 개체를 열거형 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">
        <paramref name="value" />가 열거형에 대한 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">이 유효성 검사기를 사용하도록 디자인된 데이터 형식의 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">유효한 값의 표준 집합을 보유하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 또는 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">지정된 컨텍스트를 사용하여 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" />에서 반환된 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이 가능한 값에 대한 단독 목록이면 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그 외에 다른 값을 사용할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">지정된 개체 값이 이 형식에 대해 유효한지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">테스트할 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">열거형 값을 정렬하는 데 사용할 수 있는 <see cref="T:System.Collections.IComparer" />를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">열거형 값을 저장하기 위한 <see cref="T:System.Collections.IComparer" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">이 변환기를 연결할 열거자의 유형을 지정합니다.</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">이 변환기를 연결할 열거자의 형식입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">열거형에 사용할 수 있는 값을 지정하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">열거형에 사용할 수 있는 값을 지정하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">이벤트에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.EventDescriptor" />의 이름과 특성을 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">이벤트 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">지정된 <see cref="T:System.ComponentModel.EventDescriptor" />의 이름과 <see cref="T:System.ComponentModel.MemberDescriptor" /> 및 <see cref="T:System.ComponentModel.MemberDescriptor" /> 배열 모두의 특성을 사용하여 <see cref="T:System.Attribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">멤버 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">이 이벤트 설명에 추가할 특성이 들어 있는 <see cref="T:System.Attribute" /> 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">지정된 이름과 특성 배열을 사용하여 <see cref="T:System.ComponentModel.EventDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the event.">이벤트의 이름입니다.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">이벤트 특성이 들어 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">파생 클래스에서 재정의된 경우 이벤트를 구성 요소에 바인딩합니다.</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">대리자에 이벤트를 제공하는 구성 요소입니다.</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">이벤트를 처리하는 메서드를 나타내는 대리자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">파생 클래스에서 재정의된 경우 대리자가 구성 요소로부터 더 이상 이벤트를 받지 않도록 해당 구성 요소에서 대리자를 바인딩 해제합니다.</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">대리자가 바인딩된 구성 요소입니다.</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">구성 요소에서 바인딩 해제할 대리자입니다.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">파생 클래스에서 재정의된 경우 이 이벤트가 바인딩된 구성 요소의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">이벤트가 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">파생 클래스에서 재정의된 경우 이벤트의 대리자 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">이벤트의 대리자 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">파생 클래스에서 재정의된 경우 이벤트 대리자가 멀티캐스트 대리자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이벤트 대리자가 멀티캐스트이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">항목이 없는 새 컬렉션을 만드는 대신 사용할 빈 컬렉션을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 개체의 지정된 배열을 사용하여 <see cref="T:System.ComponentModel.EventDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">이 컬렉션의 이벤트를 제공하는 <see cref="T:System.ComponentModel.EventDescriptor" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 개체의 지정된 배열을 사용하여 <see cref="T:System.ComponentModel.EventDescriptor" /> 클래스의 새 인스턴스를 초기화합니다. 컬렉션은 선택적으로 읽기 전용으로 만들 수 있습니다.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">이 컬렉션의 이벤트를 제공하는 <see cref="T:System.ComponentModel.EventDescriptor" /> 형식의 배열입니다.</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션을 읽기 전용으로 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">
        <see cref="T:System.ComponentModel.EventDescriptor" />을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">컬렉션에 추가할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">컬렉션 내의 <see cref="T:System.ComponentModel.EventDescriptor" /> 위치입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">컬렉션에서 모든 개체를 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">컬렉션에 지정된 <see cref="T:System.ComponentModel.EventDescriptor" />가 들어 있는지 여부를 반환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">컬렉션 내에서 찾을 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정된 <paramref name="value" /> 매개 변수가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">컬렉션에서 지정된 이름의 이벤트에 대한 설명을 가져옵니다.</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">컬렉션에서 가져올 이벤트의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이벤트의 대/소문자를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">지정된 이름의 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 해당 이벤트가 없을 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">이 <see cref="T:System.ComponentModel.EventDescriptorCollection" />에 대한 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" />를 구현하는 열거자입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.EventDescriptor" />의 인덱스를 반환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">컬렉션 내에서 찾을 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">컬렉션 내에 있는 지정된 <see cref="T:System.ComponentModel.EventDescriptor" />의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">
        <see cref="T:System.ComponentModel.EventDescriptor" />를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">컬렉션 내에서 <paramref name="value" /> 매개 변수를 삽입할 인덱스입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">컬렉션에 삽입할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.EventDescriptorCollection" />를 사용하여 이 <see cref="T:System.Collections.IComparer" />의 멤버를 정렬합니다.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">이 컬렉션의 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체를 정렬하는 데 사용할 비교자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">이 <see cref="T:System.ComponentModel.EventDescriptorCollection" />의 멤버를 정렬합니다. 지정된 순서가 먼저 적용된 다음 대개 사전순인 이 컬렉션의 기본 정렬 순서가 적용됩니다.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">이 컬렉션에 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">지정된 <see cref="T:System.ComponentModel.EventDescriptor" />를 컬렉션에서 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">컬렉션에서 지정한 인덱스에 있는 <see cref="T:System.ComponentModel.EventDescriptor" />을 제거합니다.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">제거할 <see cref="T:System.ComponentModel.EventDescriptor" />의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">대개 사전순인 이 컬렉션의 기본 정렬 순서를 사용하여 이 <see cref="T:System.ComponentModel.EventDescriptorCollection" />의 멤버를 정렬합니다.</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">새 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.EventDescriptorCollection" />를 사용하여 이 <see cref="T:System.Collections.IComparer" />의 멤버를 정렬합니다.</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">이 컬렉션의 <see cref="T:System.Collections.IComparer" /> 개체를 정렬하는 데 사용할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">새 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">지정된 정렬 순서를 사용하여 이 <see cref="T:System.ComponentModel.EventDescriptorCollection" />의 멤버를 정렬합니다.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">컬렉션에 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">새 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">지정된 정렬 순서 및 <see cref="T:System.ComponentModel.EventDescriptorCollection" />를 사용하여 이 <see cref="T:System.Collections.IComparer" />의 멤버를 정렬합니다.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">컬렉션에 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">이 컬렉션의 <see cref="T:System.Collections.IComparer" /> 개체를 정렬하는 데 사용할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">새 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Array" /> 인덱스부터 시작하여 컬렉션의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">컬렉션에서 복사한 요소의 대상인 1차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">컬렉션에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">컬렉션에 추가할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
      <returns vsli:raw="The position into which the new element was inserted.">새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">컬렉션에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">컬렉션에 특정 값이 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Object" />가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">컬렉션에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">항목을 컬렉션에서 지정한 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">컬렉션에 삽입할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">컬렉션에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">지정된 인덱스에서 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">컬렉션에 있는 이벤트 설명자의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">컬렉션에 있는 이벤트 설명자의 개수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">지정된 인덱스 번호를 갖는 이벤트를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">가져오거나 설정할 <see cref="T:System.ComponentModel.EventDescriptor" />의 인덱스(0부터 시작) 번호입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" />가 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />에 대해 유효한 인덱스가 아닌 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">지정된 인덱스 번호가 있는 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">지정된 이름의 이벤트를 가져오거나 설정합니다.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">가져오거나 설정할 <see cref="T:System.ComponentModel.EventDescriptor" />의 이름입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">지정된 이름의 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 해당 이벤트가 없을 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">컬렉션에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">컬렉션에 대한 액세스가 동기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 대한 액세스가 동기화되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">컬렉션의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" />가 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />보다 크거나 같은 경우</exception>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">확장할 수 있는 개체와 여러 가지 다른 표현 간에 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">값 매개 변수로 지정된 개체의 형식에 대한 속성 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">속성을 가져올 개체의 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">구성 요소에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">지정된 컨텍스트를 사용하여, 이 개체에서 속성을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾으려면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />를 호출해야 하기 때문에 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">Extender 공급자에서 제공하는 속성을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">이 인스턴스의 값이 파생 클래스의 기본값인지 여부를 나타냅니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 클래스에 대한 기본 특성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">제공되는 속성을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">제공되는 속성을 캡슐화하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">속성을 제공하는 Extender 공급자를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">속성을 제공하는 <see cref="T:System.ComponentModel.IExtenderProvider" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">속성을 받을 수 있는 개체의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">속성을 받을 수 있는 개체의 형식을 설명하는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Guid" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.GuidConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">이 변환기가 지정된 소스 형식의 개체를 컨텍스트를 사용하여 GUID 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">지정된 개체를 GUID 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">지정된 개체를 다른 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="A formatter context.">포맷터 컨텍스트입니다.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">이벤트 처리기에서 완전히 처리할 수 있는 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">기본 <see cref="T:System.ComponentModel.HandledEventArgs" /> 속성 값으로 <see langword="false" />를 사용하여 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">
        <see cref="T:System.ComponentModel.HandledEventArgs" /> 속성의 지정된 기본값을 사용하여 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 속성의 기본값입니다.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">이벤트 처리기에서 이벤트를 완전히 처리했는지 아니면 시스템에서 처리를 계속해야 하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이벤트가 완전히 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">이벤트 처리기가 반환된 후 추가 처리가 필요하거나 필요하지 않을 수 있는 이벤트를 처리할 수 있는 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.HandledEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">데이터 소스에 바인딩할 때 복잡하거나 간단한 시나리오 모두를 지원하는 데 필요한 기능을 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">목록 또는 목록의 항목이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">검색에 사용되는 인덱스에 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 추가합니다.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">검색에 사용되는 인덱스에 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">목록에 새 항목을 추가합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" />이(가) <see langword="false" />인 경우</exception>
      <returns vsli:raw="The item added to the list.">목록에 추가되는 항목입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 및 <see cref="T:System.ComponentModel.ListSortDirection" />에 따라 목록을 정렬합니다.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">정렬에 사용할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />이(가) <see langword="false" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 있는 행의 인덱스를 반환합니다.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">검색할 대상 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">검색할 <paramref name="property" /> 매개 변수의 이름입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />이(가) <see langword="false" />인 경우</exception>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 있는 행의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">검색에 사용되는 인덱스에서 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 제거합니다.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">검색에 사용되는 인덱스에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />를 사용하여 적용되는 모든 정렬을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />이(가) <see langword="false" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">목록의 항목을 업데이트할 수 있는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록의 항목을 업데이트할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingList.AddNew" />를 사용하여 목록에 항목을 추가할 수 있는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingList.AddNew" />를 사용하여 목록에 항목을 추가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">
        <see cref="M:System.Collections.IList.Remove(System.Object)" /> 또는 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />를 사용하여 목록에서 항목을 제거할 수 있는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록에서 항목을 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">목록의 항목이 정렬되는지 여부를 가져옵니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />이(가) <see langword="false" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />가 호출되고 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />는 호출되지 않았으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">정렬 방향을 가져옵니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />이(가) <see langword="false" />인 경우</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">정렬에 사용되는 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져옵니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />이(가) <see langword="false" />인 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">정렬에 사용되는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">목록이 변경되거나 목록의 항목이 변경될 때 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트가 발생되는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록이나 항목이 변경될 때 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트가 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">목록이 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 메서드를 사용한 검색 기능을 지원하는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록에서 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 메서드를 사용한 검색 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">목록이 정렬을 지원하는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록에서 정렬 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">고급 정렬 및 필터링 기능을 제공하여 <see cref="T:System.ComponentModel.IBindingList" /> 인터페이스를 확장합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">지정한 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />을 기준으로 데이터 소스를 정렬합니다.</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">데이터 소스에 적용할 정렬이 포함된 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">데이터 소스에 적용된 현재 필터를 제거합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">데이터 소스에서 반환된 항목 컬렉션에서 항목을 제외하는 데 사용할 필터를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">데이터 소스에서 반환된 항목 컬렉션에서 항목을 필터링하는 데 사용되는 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">데이터 소스에 현재 적용된 정렬 설명의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">데이터 소스에 현재 적용된 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">데이터 소스에서 고급 정렬을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">데이터 소스에서 고급 정렬을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">데이터 소스에서 필터링을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">데이터 소스에서 필터링을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">컬렉션에 새 항목을 추가할 때 트랜잭션 기능을 추가합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">보류 중인 새 항목을 컬렉션에서 삭제합니다.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">컬렉션에 이전에 추가된 항목의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">보류 중인 새 항목을 컬렉션에 커밋합니다.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">컬렉션에 이전에 추가된 항목의 인덱스입니다.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">COM 개체와 <see cref="T:System.ComponentModel.TypeDescriptor" /> 사이의 최상위 매핑 계층을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">지정된 구성 요소의 특성을 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get attributes for.">특성을 가져올 구성 요소입니다.</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />에 대한 특성의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">지정된 구성 요소에 대한 클래스 이름을 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get the class name for.">클래스 이름을 가져올 구성 요소입니다.</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />에 해당하는 클래스의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">지정된 구성 요소에 대한 형식 변환기를 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">
        <see cref="T:System.ComponentModel.TypeConverter" />를 가져올 구성 요소입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />의 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">지정된 구성 요소에 대한 기본 이벤트를 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get the default event for.">기본 이벤트를 가져올 구성 요소입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">
        <paramref name="component" />의 기본 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">지정된 구성 요소의 기본 속성을 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">기본 속성을 가져올 구성 요소입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">
        <paramref name="component" />의 기본 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">지정된 구성 요소의 편집기를 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">편집기를 가져올 구성 요소입니다.</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />에 대한 편집기의 기본 형식입니다.</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />에 대한 편집기입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">지정된 구성 요소의 이벤트를 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get events for.">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />에 대한 이벤트 설명자의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">지정된 구성 요소의 지정된 특성이 있는 이벤트를 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get events for.">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">이벤트를 필터링하는 데 사용되는 특성입니다.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />에 대한 이벤트 설명자의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">지정된 구성 요소의 이름을 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get the name of.">관련된 이름을 가져올 구성 요소입니다.</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">지정된 구성 요소의 지정된 특성이 있는 속성을 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get events for.">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">속성을 필터링하는 데 사용되는 특성입니다.</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" />에 대한 속성 설명자의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">지정된 디스패치 식별자를 가진 속성의 값을 가져옵니다.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">속성이 속해 있는 개체입니다.</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">디스패치 식별자입니다.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">속성이 검색되었는지 여부를 나타내는 <see cref="T:System.Boolean" />으로, 참조로 전달됩니다.</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">지정된 디스패치 식별자를 가진 속성의 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">지정된 이름을 가진 속성의 값을 가져옵니다.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">속성이 속해 있는 개체입니다.</param>
      <param name="propertyName" vsli:raw="The name of the property.">속성의 이름입니다.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">속성이 검색되었는지 여부를 나타내는 <see cref="T:System.Boolean" />으로, 참조로 전달됩니다.</param>
      <returns vsli:raw="The value of the property that has the specified name.">지정된 이름을 가진 속성의 값입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">개체의 사용자 지정 동적 형식 정보를 제공하는 인터페이스입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">해당 구성 요소 인스턴스에 대한 사용자 지정 특성의 컬렉션을 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">해당 개체의 특성이 포함된 <see cref="T:System.ComponentModel.AttributeCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">해당 구성 요소 인스턴스의 클래스 이름을 반환합니다.</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">개체의 클래스 이름이거나, 클래스에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">해당 구성 요소 인스턴스의 이름을 반환합니다.</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">개체의 이름이거나, 개체에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">해당 구성 요소 인스턴스에 대한 형식 변환기를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">해당 개체의 변환기인 <see cref="T:System.ComponentModel.TypeConverter" />이거나, 개체의 <see cref="T:System.ComponentModel.TypeConverter" />가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">해당 구성 요소 인스턴스의 기본 이벤트를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">이 개체의 기본 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 또는, 이 개체에 이벤트가 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">해당 구성 요소 인스턴스의 기본 속성을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">해당 개체의 기본 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 개체에 속성이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">해당 구성 요소 인스턴스에 대한 지정된 형식의 편집기를 반환합니다.</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">해당 개체의 편집기를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">해당 개체의 편집기인 지정된 형식의 <see cref="T:System.Object" />이거나, 편집기를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">해당 구성 요소 인스턴스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">지정된 특성 배열을 필터로 사용하여 해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">해당 구성 요소 인스턴스의 필터링된 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">해당 구성 요소 인스턴스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">특성 배열을 필터로 사용하여 해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">해당 구성 요소 인스턴스의 필터링된 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">지정된 속성 설명자가 설명하는 속성이 포함된 개체를 반환합니다.</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">소유자가 있는 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">지정된 속성의 소유자를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">사용자 인터페이스가 바인딩될 수 있는 사용자 지정 오류 정보를 표시하는 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">이 개체의 문제를 나타내는 오류 메시지를 가져옵니다.</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">이 개체의 문제를 나타내는 오류 메시지입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">지정된 이름의 속성에 대한 오류 메시지를 가져옵니다.</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">오류 메시지를 가져올 해당 속성의 이름입니다.</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">해당 속성에 대한 오류 메시지입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">속성을 컨테이너의 다른 구성 요소로 확장하기 위한 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">이 개체가 지정된 개체에 Extender 속성을 제공할 수 있는지 여부를 지정합니다.</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">Extender 속성을 받을 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 지정된 개체에 Extender 속성을 제공할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">빌더의 이름을 쉽게 검색하고 빌더를 표시하는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">빌더를 표시합니다.</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">빌더를 호출하는 언어 서비스입니다.</param>
      <param name="value" vsli:raw="The expression being edited.">편집되는 식입니다.</param>
      <param name="newValue" vsli:raw="The new value.">새 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">값이 <paramref name="newValue" />로 바뀌어야 하면 <see langword="true" />이고, 그렇지 않으면(예: 사용자가 취소함) <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">지역화된 이름을 가져옵니다.</summary>
      <returns vsli:raw="A localized name.">지역화된 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">데이터 소스에 바인딩될 수 있는 목록을 반환하는 기능을 개체에 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">
        <see cref="T:System.Collections.IList" />를 직접 구현하지 않는 개체에서 데이터 소스에 바인딩될 수 있는 <see cref="T:System.Collections.IList" />를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">해당 개체에서 데이터 소스에 바인딩될 수 있는 <see cref="T:System.Collections.IList" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">컬렉션이 <see cref="T:System.Collections.IList" /> 개체 컬렉션인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">해당 컬렉션이 <see cref="T:System.Collections.IList" /> 개체의 컬렉션이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">논리적으로 다른 구성 요소를 0개 이상 포함하고 부모 구성 요소가 소유하는 중첩 컨테이너에 대한 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">중첩 컨테이너의 소유 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">중첩 컨테이너를 소유하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">구성 요소의 전체 중첩 이름을 검색하는 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">이 사이트에 있는 구성 요소의 전체 이름을 가져옵니다.</summary>
      <returns vsli:raw="The full name of the component in this site.">이 사이트에 있는 구성 요소의 전체 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">이 특성과 관련된 구성 요소가 기본 클래스에서 상속되었는지 여부를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.InheritanceAttribute" />의 기본값이 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />가 되도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">구성 요소가 상속되도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">구성 요소가 상속되며 읽기 전용이도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">구성 요소가 상속되지 않도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">지정된 상속 수준을 사용하여 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">이 특성에 설정된 상속 수준을 나타내는 <see cref="T:System.ComponentModel.InheritanceLevel" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">재정의하여 같은지 테스트합니다.</summary>
      <param name="value" vsli:raw="The object to test.">테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">이 개체의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.InheritanceAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 특성 값이 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">이 특성을 문자열로 변환합니다.</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">이 <see cref="T:System.ComponentModel.InheritanceAttribute" />를 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">이 특성에 저장된 현재 상속 수준을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">이 특성에 저장된 <see cref="T:System.ComponentModel.InheritanceLevel" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">상속 수준 유형에 대한 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">해당 개체가 상속됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">해당 개체가 상속되지만 읽기 전용 권한이 포함되어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">해당 개체가 상속되지 않습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">구성 요소를 설치하는 형식의 설치 관리자를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">구성 요소의 설치 관리자 형식 이름을 사용하여 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">이 특성이 바인딩되는 구성 요소의 설치 관리자를 나타내는 <see cref="T:System.Type" /> 이름입니다. 이 클래스에서 <see cref="T:System.ComponentModel.Design.IDesigner" />를 구현해야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">구성 요소의 설치 관리자를 나타내는 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />이 주어지면 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">해당 특성이 바인딩되는 구성 요소의 설치 관리자를 나타내는 <see cref="T:System.Type" />입니다. 이 클래스에서 <see cref="T:System.ComponentModel.Design.IDesigner" />를 구현해야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">값이 같은지 테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">이 개체의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">해당 특성과 관련된 설치 관리자 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">해당 특성과 관련된 설치 관리자 형식을 나타내는 <see cref="T:System.Type" />이거나, 설치 관리자가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">
        <see cref="T:System.Windows.Forms.PropertyGrid" />에 있는 드롭다운 상자에서 특정 형식의 속성 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">파생 클래스에서 재정의되는 경우 지정된 형식의 인스턴스를 반환합니다.</summary>
      <param name="context" vsli:raw="The context information.">컨텍스트 정보입니다.</param>
      <param name="instanceType" vsli:raw="The specified type.">지정된 형식입니다.</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">지정된 형식의 인스턴스이거나, <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">지정된 텍스트를 가져옵니다.</summary>
      <returns vsli:raw="The specified text.">지정한 텍스트</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">16비트 부호 있는 정수 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Int16Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">32비트 부호 있는 정수 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Int32Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">64비트 부호 있는 정수 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Int64Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">클래스가 속성 변경 이벤트를 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트로 변환하는지 여부를 나타냅니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">
        <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 개체가 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트를 발생시키는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성 값 중 하나가 변경될 때 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 개체가 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트를 발생시키면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">구성 요소와 해당 종속 속성에 대한 초기화를 조정할 수 있도록 합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">구성 요소의 초기화가 완료되면 이 이벤트가 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">이 구성 요소가 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소의 초기화가 완료되었음을 나타내려면<see langword="true" /> 이고, 그러지 않으려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">컨테이너 및 속성 설명자와 같은 구성 요소에 대한 컨텍스트 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 이벤트를 발생시킵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">해당 개체를 변경할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">이 <see cref="T:System.ComponentModel.TypeDescriptor" /> 요청을 나타내는 컨테이너를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">이 <see cref="T:System.ComponentModel.IContainer" />에 대한 개체 집합이 포함된 <see cref="T:System.ComponentModel.TypeDescriptor" />이거나, 컨테이너가 없거나 <see cref="T:System.ComponentModel.TypeDescriptor" />에서 외부 개체를 사용하지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">이 형식 설명자 요청과 연결된 개체를 가져옵니다.</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />에서 메서드를 호출하는 개체이거나 호출을 담당하는 개체가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">지정된 컨텍스트 항목과 연결된 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">지정된 컨텍스트 항목을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 호출을 담당하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">바인딩 가능한 목록의 스키마를 발견하는 기능을 제공합니다. 여기에서 바인딩할 수 있는 속성은 바인딩되는 개체의 공용 속성과 다릅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />를 반환합니다.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">컬렉션에서 찾을 바인딩 가능한 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">해당 목록의 이름을 반환합니다.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">목록 이름이 반환되는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="The name of the list.">목록 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">모든 라이선스에 대한 <see langword="abstract" /> 기본 클래스를 제공합니다. 라이선스는 구성 요소의 특정 인스턴스에 부여됩니다.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.License" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">파생 클래스에서 재정의된 경우 라이선스에서 사용하는 리소스를 삭제합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">파생 클래스에서 재정의된 경우 이 구성 요소에 부여된 라이선스 키를 가져옵니다.</summary>
      <returns vsli:raw="A license key granted to this component.">이 구성 요소에 부여된 라이선스 키입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">라이선스 있는 개체의 사용 가능 시기를 지정하고 도메인 내부에서 실행 중인 라이선스를 지원하는 데 필요한 추가 서비스를 얻는 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LicenseContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">파생 클래스에서 재정의된 경우 지정된 리소스 어셈블리로부터 지정된 형식에 대해 저장된 라이선스 키를 반환합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">라이선스 키가 포함된 <see cref="T:System.Reflection.Assembly" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">지정된 형식에 대한 <see cref="P:System.ComponentModel.License.LicenseKey" />입니다. 사용자가 재정의하지 않는 경우 이 메서드는 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">요청된 서비스를 사용할 수 있는 경우 해당 서비스를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">검색할 서비스의 형식입니다.</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">서비스의 인스턴스입니다. 서비스를 찾을 수 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">파생 클래스에서 재정의된 경우 지정된 형식에 대한 라이선스 키를 설정합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">라이선스 키와 관련된 구성 요소를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">구성 요소 형식에 대해 저장할 <see cref="P:System.ComponentModel.License.LicenseKey" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">파생 클래스에서 재정의된 경우 라이선스의 사용 가능 시기를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">라이선스의 사용 가능 시기를 지정하는 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 값 중 하나입니다. 기본값은 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">구성 요소에 라이선스를 부여할 수 없을 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.LicenseException" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">라이선스가 거부된 구성 요소의 형식에 대해 <see cref="T:System.ComponentModel.LicenseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">라이선스가 거부된 구성 요소의 형식 및 인스턴스에 대해 <see cref="T:System.ComponentModel.LicenseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 인스턴스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">라이선스가 거부된 구성 요소의 형식 및 인스턴스에 대해, 표시할 메시지와 함께 <see cref="T:System.ComponentModel.LicenseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 인스턴스입니다.</param>
      <param name="message" vsli:raw="The exception message to display.">표시할 예외 메시지입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">라이선스가 거부된 구성 요소의 형식 및 인스턴스에 대해, 표시할 메시지 및 throw된 원래 예외와 함께 <see cref="T:System.ComponentModel.LicenseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 인스턴스입니다.</param>
      <param name="message" vsli:raw="The exception message to display.">표시할 예외 메시지입니다.</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">원래 예외를 나타내는 <see cref="T:System.Exception" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">예외에 대한 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 설정합니다.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">deserialization에 사용할 대상입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">라이선스를 구성 요소에 추가하고 <see cref="T:System.ComponentModel.LicenseProvider" />를 관리하기 위한 속성과 메서드를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">라이선스가 있는 인스턴스를 사용할 수 있는 컨텍스트를 지정하여, 지정된 형식의 인스턴스를 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">만들 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">라이선스가 있는 인스턴스를 사용할 수 있는 시기를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</param>
      <returns vsli:raw="An instance of the specified type.">지정된 형식의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">라이선스가 있는 인스턴스를 사용할 수 있는 컨텍스트를 지정하여, 지정된 인수가 포함된 지정된 형식의 인스턴스를 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">만들 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">라이선스가 있는 인스턴스를 사용할 수 있는 시기를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">해당 형식에 대한 인수를 나타내는 <see cref="T:System.Object" /> 형식의 배열입니다.</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">지정된 인수 배열이 포함된 지정된 형식의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">지정된 형식에 유효한 라이선스가 있는지 여부를 반환합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">유효한 라이선스를 찾을 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 형식에 라이선스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">지정된 형식에 대해 유효한 라이선스를 부여할 수 있는지 여부를 확인합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" />를 요청하는 개체의 형식을 나타내는 <see cref="T:System.ComponentModel.License" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">유효한 라이선스를 부여할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">지정된 형식 인스턴스에 대해 유효한 라이선스를 부여할 수 있는지 여부를 확인합니다. 이 메서드는 유효한 <see cref="T:System.ComponentModel.License" />를 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">라이선스를 요청하는 개체의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">지정된 형식 또는 지정된 형식에서 파생된 형식의 개체입니다.</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">유효한 라이선스인 <see cref="T:System.ComponentModel.License" />입니다. 유효한 라이선스를 부여할 수 없는 경우 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">유효한 <see cref="T:System.ComponentModel.License" />를 부여할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">지정된 개체의 현재 <see cref="T:System.ComponentModel.LicenseContext" />를 변경하지 못하도록 합니다.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">현재 컨텍스트를 잠글 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">컨텍스트가 이미 잠겨 있습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">지정된 개체의 현재 <see cref="T:System.ComponentModel.LicenseContext" />를 변경할 수 있도록 합니다.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">현재 컨텍스트를 잠금 해제할 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">
        <paramref name="contextUser" />는 이전의 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 호출에 지정된 사용자가 아닌 다른 사용자를 나타냅니다.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">지정된 형식에 대해 라이선스를 부여할 수 있는지 여부를 확인합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">라이선스를 요청하는 개체의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">
        <see cref="T:System.ComponentModel.License" />를 부여할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">지정된 형식의 인스턴스에 대해 라이선스를 부여할 수 있는지 여부를 확인합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">라이선스를 요청하는 개체의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">지정된 형식 또는 지정된 형식에서 파생된 형식의 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">형식에 라이선스가 있지만 <see cref="T:System.ComponentModel.License" />를 부여할 수 없는 경우</exception>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">유효한 <see cref="T:System.ComponentModel.License" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">라이선스가 있는 개체를 사용할 수 있는 시기를 지정하는 현재 <see cref="T:System.ComponentModel.LicenseContext" />를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 속성이 현재 잠겨 있으므로 변경할 수 없습니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">라이선스가 있는 개체를 사용할 수 있는 시기를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">
        <see cref="T:System.ComponentModel.LicenseUsageMode" />에 대해 라이선스가 있는 개체를 사용할 수 있는 시기를 지정하는 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />를 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> 속성에 지정된 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">라이선스 공급자를 구현하기 위한 <see langword="abstract" /> 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LicenseProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">파생 클래스에서 재정의된 경우, 컨텍스트 및 라이선스가 거부되면 예외가 throw되는지 여부를 지정하면 구성 요소의 인스턴스 또는 형식에 대한 라이선스를 가져옵니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">라이선스가 있는 개체를 사용할 수 있는 경우를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">라이선스를 요청하는 구성 요소를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">라이선스를 요청하는 개체입니다.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소에 라이선스를 부여할 수 없는 경우 <see cref="T:System.ComponentModel.LicenseException" />이 throw되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">유효한 <see cref="T:System.ComponentModel.License" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">클래스와 함께 사용할 <see cref="T:System.ComponentModel.LicenseProvider" />를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">기본값인 공급자가 없음을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">라이선스 공급자를 사용하지 않고 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">지정된 형식을 사용하여 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">라이선스 공급자 클래스의 정규화된 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">지정된 라이선스 공급자 형식을 사용하여 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">라이선스 공급자 클래스의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="value" vsli:raw="Another object to compare to.">비교할 다른 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.LicenseProviderAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">관련 클래스와 함께 사용해야 할 라이선스 공급자를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">라이선스 공급자의 형식을 나타내는 <see cref="T:System.Type" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">이 특성 형식의 고유 ID를 나타냅니다.</summary>
      <returns vsli:raw="A unique ID for this attribute type.">이 특성 형식의 고유 ID입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">
        <see cref="T:System.ComponentModel.License" />를 사용할 수 있는 시점을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">디자인 타임 동안 비주얼 디자이너 또는 컴파일러에서 사용됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">런타임 동안 사용됩니다.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">
        <see cref="T:System.ComponentModel.LicenseProvider" />를 구현합니다. 이 공급자는 Microsoft .NET Framework의 표준 라이선스 모델과 유사한 방식으로 작동합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">지정된 형식에 대한 키를 반환합니다.</summary>
      <param name="type" vsli:raw="The object type to return the key.">키를 반환할 개체 형식입니다.</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">
        <paramref name="type" /> 매개 변수에 라이선스가 있는지 확인하는 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">구성 요소의 인스턴스에 대한 라이선스를 사용할 수 있으면 해당 라이선스를 반환합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">라이선스가 있는 개체를 사용할 수 있는 경우를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" />를 요청하는 구성 요소를 나타내는 <see cref="T:System.ComponentModel.License" />입니다.</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.ComponentModel.License" />를 요청하는 개체입니다.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소에 라이선스를 부여할 수 없는 경우 <see cref="T:System.ComponentModel.LicenseException" />이 throw되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">유효한 <see cref="T:System.ComponentModel.License" />입니다. 이 메서드는 유효한 <see cref="T:System.ComponentModel.License" />나 유효한 <paramref name="context" /> 매개 변수를 찾을 수 없는 경우 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">
        <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 메서드에서 검색한 키가 지정된 형식에 대해 유효한지 여부를 확인합니다.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">확인할 <see cref="P:System.ComponentModel.License.LicenseKey" />입니다.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" />를 요청하는 구성 요소를 나타내는 <see cref="T:System.ComponentModel.License" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">해당 키가 지정된 형식에 대해 유효한 <see cref="P:System.ComponentModel.License.LicenseKey" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">목록을 데이터 소스로 사용할 수 있도록 지정합니다. 비주얼 디자이너에서는 이 특성을 사용하여 데이터 바인딩 방법을 선택할 때 특정 목록을 표시할지 여부를 결정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListBindableAttribute" />의 기본값을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">목록이 바인딩되지 않도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">목록이 바인딩되도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">목록이 바인딩 가능한지 여부를 나타내는 값을 사용하여 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록이 바인딩 가능하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">목록이 바인딩 가능한지 여부를 나타내는 <see cref="T:System.ComponentModel.ListBindableAttribute" />를 사용하여 <see cref="T:System.ComponentModel.BindableSupport" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">목록이 바인딩 가능한지 여부를 나타내는 <see cref="T:System.ComponentModel.BindableSupport" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">전달된 개체가 이 <see cref="T:System.ComponentModel.ListBindableAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj" vsli:raw="The object to test equality with.">같은지 테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전달된 개체가 이 <see cref="T:System.ComponentModel.ListBindableAttribute" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.ListBindableAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">
        <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" />이 기본값으로 설정되어 있는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" />이 기본값으로 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">목록의 바인딩 가능 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">목록이 바인딩 가능하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">변경 형식과 영향을 받는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />를 사용하여 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">추가, 제거 또는 변경된 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">변경 형식과 영향을 받는 항목의 인덱스를 사용하여 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">추가, 변경 또는 제거된 항목의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">변경 형식, 영향을 받는 항목의 인덱스 및 영향을 받는 항목을 설명하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />를 사용하여 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">추가되거나 변경된 항목의 인덱스입니다.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">항목을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">변경 형식과 이동한 항목의 이전 인덱스와 새 인덱스를 사용하여 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">이동한 항목의 새 인덱스입니다.</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">이동한 항목의 이전 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">변경 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">변경의 영향을 받는 항목의 인덱스를 가져옵니다.</summary>
      <returns vsli:raw="The index of the affected by the change.">변경의 영향을 받는 항목의 인덱스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">이동한 항목의 이전 인덱스를 가져옵니다.</summary>
      <returns vsli:raw="The old index of the moved item.">이동한 항목의 이전 인덱스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">추가, 변경 또는 삭제된 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">변경의 영향을 받는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.IBindingList" /> 클래스의 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">목록을 변경하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">목록에 추가되는 항목입니다. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" />에는 추가된 항목의 인덱스가 들어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">목록에서 변경된 항목입니다. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" />에는 변경된 항목의 인덱스가 들어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">목록에서 삭제된 항목입니다. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" />에는 삭제된 항목의 인덱스가 들어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">목록 내에서 이동된 항목입니다. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" />에는 해당 항목에 대한 이전 인덱스가 들어 있는 반면 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" />에는 해당 항목에 대한 새 인덱스가 들어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />가 추가되었으며 이로 인해 스키마가 변경되었습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />가 변경되었으며 이로 인해 스키마가 변경되었습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />가 삭제되었으며 이로 인해 스키마가 변경되었습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">목록의 대부분이 변경되었습니다. 수신하는 컨트롤은 목록에서 모든 데이터를 새로 고쳐야 합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">데이터 소스에 적용된 정렬 작업에 대한 설명을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">지정한 속성 설명과 방향을 사용하여 <see cref="T:System.ComponentModel.ListSortDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">데이터 소스를 정렬하는 데 사용되는 속성을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">이 <see cref="T:System.ComponentModel.ListSortDescription" />과 연결된 클래스 속성에 대한 추상적인 설명을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">이 <see cref="T:System.ComponentModel.PropertyDescriptor" />와 연결된 <see cref="T:System.ComponentModel.ListSortDescription" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">이 <see cref="T:System.ComponentModel.ListSortDescription" />과 연결된 정렬 작업의 방향을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 개체의 지정한 배열을 사용하여 <see cref="T:System.ComponentModel.ListSortDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">컬렉션에 포함할 <see cref="T:System.ComponentModel.ListSortDescription" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Object" />가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">지정한 대상 배열 인덱스로부터 컬렉션의 내용을 지정한 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">컬렉션에서 복사되는 항목의 대상 배열입니다.</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">복사를 시작할 대상 배열의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">컬렉션에서 지정된 항목의 인덱스를 반환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">컬렉션에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">컬렉션에 추가할 항목입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">모든 경우</exception>
      <returns vsli:raw="The position into which the new element was inserted.">새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">컬렉션에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">컬렉션에서 가져오거나 설정할 <see cref="T:System.ComponentModel.ListSortDescription" />의 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">컬렉션에 삽입할 항목입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">컬렉션에서 맨 처음 발견되는 항목을 제거합니다.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">컬렉션에서 제거할 항목입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">지정한 인덱스에 있는 컬렉션의 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.ComponentModel.ListSortDescription" />의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">모든 경우</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">컬렉션의 항목 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of items in the collection.">컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">지정한 <see cref="T:System.ComponentModel.ListSortDescription" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">컬렉션에서 가져오거나 설정할 <see cref="T:System.ComponentModel.ListSortDescription" />의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">읽기 전용 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />에 항목을 설정하는 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">지정된 인덱스의 <see cref="T:System.ComponentModel.ListSortDescription" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">컬렉션에 대한 액세스가 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 현재 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />의 현재 인스턴스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">컬렉션의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">지정한 <see cref="T:System.ComponentModel.ListSortDescription" />을 가져옵니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">컬렉션에서 가져올 <see cref="T:System.ComponentModel.ListSortDescription" />의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">지정된 인덱스의 <see cref="T:System.ComponentModel.ListSortDescription" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">정렬 작업의 방향을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">오름차순으로 정렬합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">내림차순으로 정렬합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">조회 기반 바인딩을 지원하는 속성을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 클래스의 기본값을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">데이터 소스로 사용할 속성의 이름입니다.</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">표시 이름에 사용할 속성의 이름입니다.</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">값에 대한 소스로 사용할 속성의 이름입니다.</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">조회에 사용할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">지정한 <see cref="T:System.Object" />가 현재 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 인스턴스와 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">현재 <see cref="T:System.Object" /> 인스턴스와 비교할 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">개체가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 같지 않다고 나타내는 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 소스 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 소스 속성입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 표시 멤버 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 표시 멤버 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">이 특성이 바인딩되는 구성 요소에 대한 조회 멤버의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 조회 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 값 멤버 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 값 멤버 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">
        <see cref="T:System.ComponentModel.IComponent" />를 구현하고 값으로 마샬링(serialize된 개체의 복사본이 전달)되는 원격 가능 구성 요소를 기본 구현합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">구성 요소의 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 이벤트를 수신할 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">
        <see cref="T:System.ComponentModel.MarshalByValueComponent" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.ComponentModel.MarshalByValueComponent" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">
        <see cref="T:System.IServiceProvider" />의 구현자를 가져옵니다.</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">필요한 서비스 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">
        <see cref="T:System.Object" />의 구현자를 나타내는 <see cref="T:System.IServiceProvider" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">
        <see cref="T:System.ComponentModel.Component" />의 이름이 포함된 <see cref="T:System.String" />을 반환합니다(있는 경우). 이 메서드는 재정의할 수 없습니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">
        <see cref="T:System.String" />의 이름이 포함된 <see cref="T:System.ComponentModel.Component" />입니다.  
  
 <see cref="T:System.ComponentModel.Component" />의 이름이 지정되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">구성 요소의 컨테이너를 가져옵니다.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">구성 요소의 컨테이너를 나타내는 <see cref="T:System.ComponentModel.IContainer" /> 인터페이스를 구현하는 개체이거나, 구성 요소에 사이트가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">구성 요소가 현재 디자인 모드에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소가 디자인 모드에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">이 구성 요소에 연결된 이벤트 처리기의 목록을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">이 구성 요소의 대리자를 제공하는 <see cref="T:System.ComponentModel.EventHandlerList" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">구성 요소의 사이트를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">구성 요소의 사이트를 나타내는 <see cref="T:System.ComponentModel.ISite" /> 인터페이스를 구현하는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">
        <see cref="T:System.Windows.Forms.MaskedTextBox" /> 컨트롤과 같이 마스킹을 지원하는 컨트롤에서 사용할 수 있는 마스크 구문 분석 서비스를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">지정된 마스크를 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">지정된 마스크와 ASCII 제한 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">입력을 ASCII 호환 문자로 제한하려면 <see langword="true" />이고, 전체 유니코드 집합을 허용하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">지정된 마스크, 암호 문자 및 프롬프트 용도 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">암호 문자열에 입력된 문자에 대해 표시될 <see cref="T:System.Char" />입니다.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">프롬프트 문자를 입력으로 허용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">지정된 마스크와 culture를 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">영역을 구분하는 구분 문자를 설정하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">지정된 마스크, culture 및 ASCII 제한 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">영역을 구분하는 구분 문자를 설정하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">입력을 ASCII 호환 문자로 제한하려면 <see langword="true" />이고, 전체 유니코드 집합을 허용하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">지정된 마스크, culture, 프롬프트 용도 값, 프롬프트 문자, 암호 문자 및 ASCII 제한 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">영역을 구분하는 구분 문자를 설정하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">프롬프트 문자가 유효한 입력 문자로 허용되는지 여부를 지정하는 <see cref="T:System.Boolean" /> 값입니다.</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">사용자 입력에 대한 자리 표시자로 표시될 <see cref="T:System.Char" />입니다.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">암호 문자열에 입력된 문자에 대해 표시될 <see cref="T:System.Char" />입니다.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">입력을 ASCII 호환 문자로 제한하려면 <see langword="true" />이고, 전체 유니코드 집합을 허용하려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">마스크 매개 변수가 <see langword="null" />이거나 <see cref="F:System.String.Empty" />인 경우  
  
또는 
마스크에 하나 이상의 인쇄할 수 없는 문자가 포함된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">지정된 마스크, culture, 암호 문자 및 프롬프트 용도 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">영역을 구분하는 구분 문자를 설정하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">암호 문자열에 입력된 문자에 대해 표시될 <see cref="T:System.Char" />입니다.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">프롬프트 문자를 입력으로 허용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">서식이 지정된 문자열의 끝에 지정된 입력 문자를 추가합니다.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">서식이 지정된 문자열에 추가할 <see cref="T:System.Char" /> 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">입력 문자가 성공적으로 추가되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">서식이 지정된 문자열의 끝에 지정된 입력 문자를 추가한 다음 위치와 설명 정보를 출력합니다.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">서식이 지정된 문자열에 추가할 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">문자를 추가하려고 한 서식이 지정된 문자열의 위치(0부터 시작)입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">입력 문자가 성공적으로 추가되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">서식이 지정된 문자열의 끝에 지정된 입력 문자열의 문자를 추가합니다.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">서식이 지정된 문자열에 추가할 문자 값을 포함하는 <see cref="T:System.String" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">입력 문자열의 모든 문자가 성공적으로 추가되었으면 <see langword="true" />이고, 추가된 문자가 없음을 나타내면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">서식이 지정된 문자열의 끝에 지정된 입력 문자열의 문자를 추가한 다음 위치와 설명 정보를 출력합니다.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">서식이 지정된 문자열에 추가할 문자 값을 포함하는 <see cref="T:System.String" />입니다.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">문자를 추가하려고 한 서식이 지정된 문자열의 위치(0부터 시작)입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">입력 문자열의 모든 문자가 성공적으로 추가되었으면 <see langword="true" />이고, 추가된 문자가 없음을 나타내면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">서식이 지정된 문자열에서 편집 가능한 입력 문자를 모두 지우고 프롬프트 문자로 바꿉니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">서식이 지정된 문자열에서 편집 가능한 입력 문자를 모두 지우고 프롬프트 문자로 바꾼 다음 설명 정보를 출력합니다.</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.MaskedTextProvider" />의 복사본을 만듭니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">이 메서드가 만들고 개체로 캐스팅하는 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">지정된 검색 방향을 사용하여 지정된 위치 다음의 첫 번째 할당된 편집 가능한 위치를 반환합니다.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">검색을 시작할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">검색에 성공하면 첫 번째 할당된 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">지정된 검색 방향을 사용하여 지정된 위치 사이에 있는 첫 번째 할당된 편집 가능한 위치를 반환합니다.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">검색이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">검색이 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">검색에 성공하면 첫 번째 할당된 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">지정된 검색 방향을 사용하여 지정된 위치 다음의 첫 번째 편집 가능한 위치를 반환합니다.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">검색을 시작할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">검색에 성공하면 첫 번째 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">지정된 검색 방향을 사용하여 지정된 위치 사이에 있는 첫 번째 편집 가능한 위치를 반환합니다.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">검색이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">검색이 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">검색에 성공하면 첫 번째 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">지정된 검색 방향을 사용하여 지정된 위치 다음의 첫 번째 편집 가능하지 않은 위치를 반환합니다.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">검색을 시작할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">검색에 성공하면 첫 번째 리터럴 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">지정된 검색 방향을 사용하여 지정된 위치 사이에 있는 첫 번째 편집 가능하지 않은 위치를 반환합니다.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">검색이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">검색이 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">검색에 성공하면 첫 번째 리터럴 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">지정된 검색 방향을 사용하여 지정된 위치 다음의 첫 번째 할당되지 않은 편집 가능한 위치를 반환합니다.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">검색을 시작할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">검색에 성공하면 첫 번째 할당되지 않은 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">지정된 검색 방향을 사용하여 지정된 위치 사이에 있는 첫 번째 할당되지 않은 편집 가능한 위치를 반환합니다.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">검색이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">검색이 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">검색에 성공하면 첫 번째 할당되지 않은 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">지정된 <see cref="T:System.ComponentModel.MaskedTextResultHint" />가 성공을 나타내는지 아니면 실패를 나타내는지를 확인합니다.</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">대개 이전 작업의 출력 매개 변수로 가져온 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">지정된 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 값이 성공을 나타내면 <see langword="true" />이고, 실패를 나타내면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">서식이 지정된 문자열의 지정된 위치에 지정한 문자를 삽입합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">삽입할 <see cref="T:System.Char" />입니다.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">문자를 삽입할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">성공적으로 삽입되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">서식이 지정된 문자열의 지정된 위치에 지정한 문자를 삽입하고 마지막 삽입 위치와 작업의 상태를 반환합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">삽입할 <see cref="T:System.Char" />입니다.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">문자를 삽입할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">메서드가 성공적으로 수행되면 문자가 삽입된 마지막 위치이고, 그렇지 않으면 삽입에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">삽입 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">성공적으로 삽입되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">서식이 지정된 문자열의 지정된 위치에 지정한 문자열을 삽입합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">삽입할 <see cref="T:System.String" />입니다.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">입력 문자열을 삽입할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">성공적으로 삽입되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">서식이 지정된 문자열의 지정된 위치에 지정한 문자열을 삽입하고 마지막 삽입 위치와 작업의 상태를 반환합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">삽입할 <see cref="T:System.String" />입니다.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">입력 문자열을 삽입할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">메서드가 성공적으로 수행되면 문자가 삽입된 마지막 위치이고, 그렇지 않으면 삽입에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">삽입 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">성공적으로 삽입되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">지정된 위치에 할당할 수 있는지 여부를 확인합니다.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">테스트할 마스크의 위치(0부터 시작)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">서식이 지정된 문자열의 지정된 위치가 편집 가능하고 아직 할당되지 않았으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">지정된 위치가 편집 가능한지 여부를 확인합니다.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">테스트할 마스크의 위치(0부터 시작)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">서식이 지정된 문자열의 지정된 위치가 편집 가능하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">지정된 문자가 유효한 입력 문자인지 여부를 확인합니다.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">지정된 문자에 유효한 입력 값이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">지정된 문자가 유효한 마스크 문자인지 여부를 확인합니다.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">지정된 문자에 유효한 마스크 값이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">지정된 문자가 유효한 암호 문자인지 여부를 확인합니다.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">지정된 문자에 유효한 암호 값이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">서식이 지정된 문자열에서 마지막 할당된 문자를 제거합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">서식이 지정된 문자열에서 마지막 할당된 문자를 제거한 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">서식이 지정된 문자열에서 문자가 실제로 제거된 위치(0부터 시작)입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">서식이 지정된 문자열에서 지정된 위치에 있는 할당된 문자를 제거합니다.</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">제거할 할당된 문자의 위치(0부터 시작)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">서식이 지정된 문자열에서 지정된 위치 사이에 있는 할당된 문자를 제거합니다.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">제거할 첫 번째 할당된 문자의 인덱스(0부터 시작)입니다.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">제거할 마지막 할당된 문자의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">서식이 지정된 문자열에서 지정된 위치 사이에 있는 할당된 문자를 제거한 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">제거할 첫 번째 할당된 문자의 인덱스(0부터 시작)입니다.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">제거할 마지막 할당된 문자의 인덱스(0부터 시작)입니다.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">성공하면 서식이 지정된 문자열에서 문자가 실제로 제거된 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">지정된 위치나 그 뒤에 있는 한 문자를 지정된 문자 값으로 바꿉니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">기존 값을 바꾸는 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">바꿀 첫 번째 편집 가능한 문자를 검색할 위치(0부터 시작)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">지정된 시작 위치와 끝 위치 사이에 있는 한 문자를 지정된 문자 값으로 바꾼 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">기존 값을 바꾸는 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">바꾸기가 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">바꾸기가 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 바뀐 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">바꾸기 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">지정된 위치나 그 뒤에 있는 한 문자를 지정된 문자 값으로 바꾼 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">기존 값을 바꾸는 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">바꿀 첫 번째 편집 가능한 문자를 검색할 위치(0부터 시작)입니다.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 바뀐 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">바꾸기 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">지정된 위치에서 시작하는 편집 가능한 문자의 범위를 지정된 문자열로 바꿉니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">기존의 편집 가능한 문자를 바꾸는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">바꿀 첫 번째 편집 가능한 문자를 검색할 위치(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">모든 문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">지정된 시작 위치와 끝 위치 사이에 있는 편집 가능한 문자의 범위를 지정된 문자열로 바꾼 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">기존의 편집 가능한 문자를 바꾸는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">바꾸기가 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">바꾸기가 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 바뀐 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">바꾸기 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">모든 문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">지정된 위치에서 시작하는 편집 가능한 문자의 범위를 지정된 문자열로 바꾼 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">기존의 편집 가능한 문자를 바꾸는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">바꿀 첫 번째 편집 가능한 문자를 검색할 위치(0부터 시작)입니다.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 바뀐 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">바꾸기 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">모든 문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">서식이 지정된 문자열을 지정된 입력 문자열로 설정합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">서식이 지정된 문자열을 설정하는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">모든 문자가 성공적으로 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">서식이 지정된 문자열을 지정된 입력 문자열로 설정한 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">서식이 지정된 문자열을 설정하는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 설정된 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">설정 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">모든 문자가 성공적으로 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">서식이 지정된 문자열을 표시 가능한 형태로 반환합니다.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">프롬프트와 마스크 리터럴을 포함하는 형식이 지정된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">할당된 모든 문자 값을 포함하는 서식이 지정된 문자열을 반환합니다.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">할당된 모든 문자 값을 포함하는 형식이 지정된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">암호 문자를 선택적으로 포함하여 서식이 지정된 문자열을 반환합니다.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">실제 편집 가능한 문자를 반환하려면 <see langword="true" />이고, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 속성이 적용됨을 나타내려면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">리터럴과 프롬프트를 포함하고 암호 문자를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">프롬프트 및 리터럴 문자를 선택적으로 포함하여 서식이 지정된 문자열을 반환합니다.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">반환 문자열에 프롬프트 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">반환 문자열에 리터럴 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">할당된 모든 문자 값을 포함하고 리터럴과 프롬프트를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">프롬프트, 리터럴 및 암호 문자를 선택적으로 포함하여 서식이 지정된 문자열의 부분 문자열을 반환합니다.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">실제 편집 가능한 문자를 반환하려면 <see langword="true" />이고, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 속성이 적용됨을 나타내려면 <see langword="false" />입니다.</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">반환 문자열에 프롬프트 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">반환 문자열에서 리터럴 문자를 반환하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">출력이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="length" vsli:raw="The number of characters to return.">반환할 문자 수입니다.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">성공하면 할당된 모든 문자 값을 포함하고 리터럴, 프롬프트 및 암호 문자를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />의 부분 문자열이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">프롬프트 및 리터럴 문자를 선택적으로 포함하여 서식이 지정된 문자열의 부분 문자열을 반환합니다.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">반환 문자열에 프롬프트 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">반환 문자열에 리터럴 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">출력이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="length" vsli:raw="The number of characters to return.">반환할 문자 수입니다.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">성공하면 할당된 모든 문자 값을 포함하고 리터럴과 프롬프트를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />의 부분 문자열이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">암호 문자를 선택적으로 포함하여 서식이 지정된 문자열의 부분 문자열을 반환합니다.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">실제 편집 가능한 문자를 반환하려면 <see langword="true" />이고, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 속성이 적용됨을 나타내려면 <see langword="false" />입니다.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">출력이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="length" vsli:raw="The number of characters to return.">반환할 문자 수입니다.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">성공하면 리터럴과 프롬프트를 포함하고 암호 문자를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />의 부분 문자열이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">서식이 지정된 문자열의 부분 문자열을 반환합니다.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">출력이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="length" vsli:raw="The number of characters to return.">반환할 문자 수입니다.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">성공하면 할당된 모든 문자 값을 포함하는 형식이 지정된 <see cref="T:System.String" />의 부분 문자열이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">지정된 문자가 지정된 위치에서 성공적으로 설정될 수 있는지 여부를 테스트합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">입력 문자를 테스트할 마스크의 위치입니다.</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 문자를 지정된 위치에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">지정된 문자가 지정된 위치에서 이스케이프되는지 여부를 테스트합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">입력 문자를 테스트할 마스크의 위치입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 문자가 지정된 위치에서 이스케이프되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">지정된 문자열이 성공적으로 설정될 수 있는지 여부를 테스트합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">테스트할 <see cref="T:System.String" /> 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 문자열이 유효한 입력을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">지정된 문자열이 성공적으로 설정될 수 있는지 여부를 테스트한 다음 위치와 설명 정보를 출력합니다.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">테스트할 <see cref="T:System.String" /> 값입니다.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">성공하면 실제로 테스트한 마지막 문자의 위치(0부터 시작)이고, 그렇지 않으면 테스트에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">테스트 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 문자열이 유효한 입력을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">프롬프트 문자가 유효한 입력 문자로 처리되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">사용자가 컨트롤에 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />를 입력할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">마스크에 ASCII 문자 집합 밖에 있는 문자가 허용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">ASCII만 허용되면 <see langword="true" />이고, <see cref="T:System.ComponentModel.MaskedTextProvider" />에서 임의의 유니코드 문자를 허용하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">입력 값이 이미 성공적으로 할당된 편집 가능한 문자 위치의 수를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">서식이 지정된 문자열에서 문자 값이 이미 할당된 입력 마스크의 편집 가능한 문자 위치 수를 포함하는 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">입력 값이 아직 할당되지 않은 입력 마스크의 편집 가능한 문자 위치 수를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">문자 값이 아직 할당되지 않은 편집 가능한 문자 위치 수를 포함하는 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">입력 마스크에서 지역화할 수 있는 구분 기호와 자리 표시자의 값을 결정하는 culture를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">입력 마스크와 연결된 culture 정보를 포함하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">사용자 입력을 숨기는 데 사용되는 기본 암호 문자를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">기본 암호 문자를 나타내는 <see cref="T:System.Char" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">서식이 지정된 문자열의 편집 가능한 위치 수를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">서식이 지정된 문자열의 편집 가능한 위치 수를 포함하는 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">서식이 지정된 문자열의 편집 가능한 위치에 대해 새로 만든 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">서식이 지정된 문자열의 편집 가능한 위치에 대한 열거를 지원하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">입력 마스크의 리터럴 문자가 서식이 지정된 문자열에 포함되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">리터럴이 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">
        <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />가 서식이 지정된 문자열을 표시할 때 사용자 입력이 없음을 나타내는 데 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">프롬프트 문자가 사용자 입력이 제공되지 않은 위치를 나타내는 데 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">잘못된 인덱스 범위의 상한을 가져옵니다.</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">가장 큰 잘못된 인덱스를 나타내는 값으로, 공급자 구현에서 확인됩니다. 예를 들어, 가장 작은 유효한 인덱스가 0이면 이 속성은 -1을 반환합니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">암호 보호가 서식이 지정된 문자열에 적용되는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">입력 문자열이 암호 문자열로 처리되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">서식이 지정된 문자열의 지정된 위치에서 요소를 가져옵니다.</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">검색할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">
        <paramref name="index" />가 0보다 작거나 마스크의 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />보다 크거나 같은 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">서식이 지정된 문자열의 지정된 위치에 있는 <see cref="T:System.Char" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">마스크에 할당된 가장 오른쪽 입력 문자에 대한 마스크의 인덱스를 가져옵니다.</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">입력 문자가 하나 이상 마스크에 할당되었으면 할당된 가장 오른쪽 위치의 인덱스를 포함하는 <see cref="T:System.Int32" />이고, 할당된 위치가 없으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">마스크 한정자 문자를 제외한 마스크의 길이를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">마스크 입력을 수정하는 문자를 제외한 마스크의 위치 수를 포함하는 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">입력 마스크를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">전체 마스크를 포함하는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">모든 필수 입력이 서식이 지정된 문자열에 입력되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">모든 필수 입력이 마스크에 입력되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">모든 필수 입력과 선택적 입력이 서식이 지정된 문자열에 입력되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">모든 필수 입력과 선택적 입력이 입력되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">실제 입력 문자를 대체할 문자를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">이 속성을 설정할 때 지정되는 암호 문자가 현재 프롬프트 문자 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />와 같은 경우. 둘은 달라야 합니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">
        <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 메서드에서 확인한 결과 이 속성을 설정할 때 지정되는 문자가 유효한 암호 문자가 아닌 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">암호 문자로 사용되는 <see cref="T:System.Char" /> 값입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">사용 가능한 모든 편집 위치에 대해 사용자 입력이 없음을 나타내는 데 사용되는 문자를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">이 속성을 설정할 때 지정되는 프롬프트 문자가 현재 암호 문자 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />와 같은 경우. 둘은 달라야 합니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">
        <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 메서드에서 확인한 결과 이 속성을 설정할 때 지정되는 문자가 유효한 암호 문자가 아닌 경우</exception>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">사용자에게 입력하라고 요청하는 데 사용되는 문자입니다. 기본값은 밑줄(_)입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">프롬프트 문자와 일치하는 입력 문자가 처리되는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">입력 문자로 입력된 프롬프트 문자 때문에 마스크의 현재 편집 가능한 위치가 다시 설정되면 <see langword="true" />이고, 프롬프트 문자가 일반 입력 문자로 처리됨을 나타내면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">공백 입력 문자가 처리되는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">공백 입력 문자 때문에 마스크의 현재 편집 가능한 위치가 다시 설정되면 <see langword="true" />이고, 공백 입력 문자가 일반 입력 문자로 처리됨을 나타내면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">마스크의 리터럴 문자 위치를 해당하는 같은 값으로 덮어쓸 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">리터럴을 다시 추가할 수 있도록 하려면 <see langword="true" />이고, 사용자가 리터럴 문자를 덮어쓸 수 없게 하려면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">마스킹된 텍스트 구문 분석 작업의 결과를 간략하게 설명하는 값을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">작업을 수행하지 못했습니다. 영숫자가 아닌 입력 문자가 있습니다. 을 선택합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">작업을 수행하지 못했습니다. ASCII 문자 집합에 속하지 않은 입력 문자가 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">성공 리터럴, 프롬프트 또는 공백 문자가 이스케이프된 문자이기 때문에 작업을 수행했습니다. 이스케이프된 문자에 대한 자세한 내용은 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 메서드를 참조하십시오.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">작업을 수행하지 못했습니다. 숫자가 아닌 입력 문자가 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">작업을 수행하지 못했습니다. 프로그램에서 잘못된 입력 문자를 발견했습니다. 잘못된 문자에 대한 자세한 내용은 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 메서드를 참조하십시오.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">작업을 수행하지 못했습니다. 문자가 아닌 입력 문자가 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">성공 기본 작업이 필요하지 않기 때문에 수행되지 않았습니다. 따라서 파생 작업이 생성되지 않았습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">작업을 수행하지 못했습니다. 서식이 지정된 문자열의 현재 위치가 리터럴 문자입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">작업을 수행하지 못했습니다. 지정된 위치가 대상 문자열의 범위 안에 없습니다. 일반적으로 지정된 위치가 0보다 작거나 대상 문자열의 길이보다 큽니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">작업을 수행하지 못했습니다. 프롬프트 문자를 입력에 사용할 수 없습니다. <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 속성이 <see langword="false" />로 설정되어 있을 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">성공 기본 작업이 필요하지 않기 때문에 수행되지 않았지만 메서드에서 파생 작업을 생성했습니다. 예를 들어, <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 메서드는 할당되지 않은 편집 위치를 삭제할 수 있으며 이로 인해 서식이 지정된 문자열의 이후 문자들이 왼쪽으로 이동할 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">작업을 수행하지 못했습니다. 부호 있는 숫자가 아닌 입력 문자가 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">성공 기본 작업을 수행했습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">작업을 수행하지 못했습니다. 요청을 수행하는 데 사용할 수 있는 편집 위치가 충분하지 않습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">알 수 없습니다. 작업의 결과를 확인할 수 없습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">속성이나 이벤트와 같은 클래스 멤버를 나타냅니다. 이 클래스는 추상 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.MemberDescriptor" />를 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">멤버 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">지정된 <see cref="T:System.ComponentModel.MemberDescriptor" />의 이름과 기존 <see cref="T:System.ComponentModel.MemberDescriptor" /> 및 <see cref="T:System.ComponentModel.MemberDescriptor" /> 배열 모두의 특성을 사용하여 <see cref="T:System.Attribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">멤버 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">멤버에 추가할 특성이 들어 있는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">지정된 멤버 이름을 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the member.">멤버의 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">이름이 빈 문자열("")이거나 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">지정된 멤버 이름과 특성 배열을 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the member.">멤버의 이름입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">멤버 특성이 들어 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">이름이 빈 문자열("")이거나 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">생성자에 전달된 특성 배열을 사용하여 특성 컬렉션을 만듭니다.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 특성이 들어 있는 새 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">이 인스턴스를 지정된 개체와 비교하여 이 둘이 같은지 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">현재 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">같으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">파생 클래스에서 재정의된 경우, 상속하는 클래스의 특성을 부모 클래스에 있는 지정된 특성 목록에 추가합니다.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">부모 클래스에 있는 특성을 나열하는 <see cref="T:System.Collections.IList" />입니다. 처음에는 이 컬렉션이 비어 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">리플렉션을 통해 지정된 메서드를 찾습니다. 이때 공용 메서드만 검색합니다.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">해당 메서드가 들어 있는 구성 요소입니다.</param>
      <param name="name" vsli:raw="The name of the method to find.">찾을 메서드의 이름입니다.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">오버로드된 메서드 중에서 선택하는 데 사용되는, 메서드의 매개 변수 배열입니다.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">해당 메서드에 대해 반환할 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다. 이 메서드가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">리플렉션을 통해 지정된 메서드를 찾습니다. 이때 공용 메서드만 검색하는 옵션을 사용합니다.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">해당 메서드가 들어 있는 구성 요소입니다.</param>
      <param name="name" vsli:raw="The name of the method to find.">찾을 메서드의 이름입니다.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">오버로드된 메서드 중에서 선택하는 데 사용되는, 메서드의 매개 변수 배열입니다.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">해당 메서드에 대해 반환할 형식입니다.</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">공용 메서드로 검색을 제한할지 여부를 나타냅니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다. 이 메서드가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.MemberDescriptor" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">멤버를 호출하는 동안 사용해야 하는 개체를 검색합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">호출 대상의 <see cref="T:System.Type" />입니다.</param>
      <param name="instance" vsli:raw="The potential invocation target.">잠재적인 호출 대상입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 또는 <paramref name="instance" />가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="The object to be used during member invocations.">멤버를 호출하는 동안 사용할 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">메서드를 호출할 대상 구성 요소를 가져옵니다.</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">이 <see cref="T:System.Type" />가 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다. 예를 들어, 이 <see cref="T:System.ComponentModel.MemberDescriptor" />가 속성을 기술하는 경우 이 매개 변수는 해당 속성이 선언된 클래스이어야 합니다.</param>
      <param name="component" vsli:raw="An instance of the object to call.">호출할 개체의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentClass" /> 또는 <paramref name="component" />가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">호출할 구성 요소의 인스턴스입니다. 해당 속성이 비주얼 디자이너에 연결되어 있으면 이 메서드는 비주얼 디자이너를 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">지정된 구성 요소에 대한 구성 요소 사이트를 가져옵니다.</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">사이트를 찾을 구성 요소입니다.</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">구성 요소의 사이트이거나, 사이트가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">특성 배열을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">이 멤버의 특성이 들어 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">이 멤버에 대한 특성 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">이 멤버에 대한 특성을 제공하는 <see cref="T:System.ComponentModel.AttributeCollection" />입니다. <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />에 특성이 없는 경우에는 빈 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.CategoryAttribute" />에 지정된, 해당 멤버가 속해 있는 범주의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">해당 멤버가 속해 있는 범주의 이름입니다. <see cref="T:System.ComponentModel.CategoryAttribute" />가 없으면 범주 이름은 기본 범주인 <see langword="Misc" />로 설정됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DescriptionAttribute" />에 지정된 멤버 설명을 가져옵니다.</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">멤버 설명입니다. <see cref="T:System.ComponentModel.DescriptionAttribute" />가 없으면 속성 값은 기본값인 빈 문자열("")로 설정됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" />에 지정된, 이 멤버가 디자인 타임에만 설정되어야 하는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">이 멤버가 디자인 타임에만 설정되어야 하면 <see langword="true" />이고, 런타임에 설정될 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">속성 창 등의 창에 표시될 수 있는 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name to display for the member.">해당 멤버에 대해 표시할 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.BrowsableAttribute" />에 지정된, 해당 멤버를 찾아볼 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">해당 멤버를 찾아볼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.ComponentModel.BrowsableAttribute" />가 없으면 해당 속성 값은 기본값인 <see langword="true" />로 설정됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">해당 멤버의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the member.">멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">
        <see cref="M:System.String.GetHashCode" />에 지정된, 멤버 이름의 해시 코드를 가져옵니다.</summary>
      <returns vsli:raw="The hash code for the name of the member.">멤버 이름의 해시 코드입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">여러 줄 문자열을 단순 문자열로 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.MultilineStringConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">지정한 컨텍스트와 culture 정보를 사용하여 지정된 값 개체를 지정된 유형으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" />이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">값 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">지정된 컨텍스트 및 특성을 사용하여 <paramref name="value" /> 매개 변수에서 지정하는 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">이 데이터 형식에 대해 공개된 속성을 가진 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 또는 속성이 없는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">이 개체가 지정된 컨텍스트를 사용하여 속성을 지원하는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">컨테이너에 소유 구성 요소가 포함될 수 있도록 하는 <see cref="T:System.ComponentModel.INestedContainer" /> 인터페이스에 대한 기본 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.NestedContainer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">이 중첩 컨테이너를 소유하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">컨테이너에서 구성 요소에 대한 사이트를 만듭니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">해당 사이트를 만들 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">
        <paramref name="component" />에 할당할 이름이거나, 이름을 할당하지 않으려면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">새로 만든 <see cref="T:System.ComponentModel.ISite" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">중첩 컨테이너에서 사용하는 리소스를 해제합니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">가능한 경우, 지정된 형식의 서비스 개체를 가져옵니다.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">검색할 서비스의 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">요청된 서비스를 구현하는 <see cref="T:System.Object" />이거나, 서비스를 확인할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">이 중첩 컨테이너의 소유 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">이 중첩 컨테이너를 소유하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">소유 구성 요소의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the owning component.">소유 구성 요소의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">Nullable 형식과 그 기본 형식 사이의 자동 변환 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.NullableConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The specified nullable type.">지정된 nullable 형식입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">
        <paramref name="type" />이 nullable 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">지정된 컨텍스트를 사용하여 이 변환기에서 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">지정한 컨텍스트와 culture 정보를 사용하여 지정된 개체를 이 변환기의 유형으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">현재 culture로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">지정한 컨텍스트와 culture 정보를 사용하여 지정된 값 개체를 지정된 유형으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">현재 culture로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">값 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">지정된 컨텍스트를 사용하여 이 <see cref="T:System.ComponentModel.TypeConverter" />가 연결된 형식의 인스턴스를 만들어 개체의 속성 값 집합을 제공합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">새 속성 값의 <see cref="T:System.Collections.IDictionary" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">지정된 <see cref="T:System.Collections.IDictionary" />를 나타내는 <see cref="T:System.Object" />이거나, 개체를 만들 수 없으면 <see langword="null" />입니다. 이 메서드는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">이 개체의 값을 변경하려는 경우 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 호출을 통해 지정된 컨텍스트를 사용하여 새 값을 만들어야 하는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 변경하려는 경우<see langword="true" /> 호출을 통해 새 값을 만들어야 하면 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 이고, 만들지 않아야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">지정된 컨텍스트 및 특성을 사용하여 값 매개 변수로 지정된 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">이 데이터 형식에 대해 공개된 속성을 가진 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 또는 속성이 없는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">이 개체가 지정된 컨텍스트를 사용하여 속성을 지원하는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">형식 컨텍스트를 제공할 경우 이 형식 변환기가 사용되는 데이터 형식에 대한 표준 값의 컬렉션을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">이 변환기가 호출되는 환경에 대한 추가 정보를 추출하는 데 사용할 수 있는 형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 입니다. 이 매개 변수 또는 이 매개 변수의 속성은 <see langword="null" />일 수 있습니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">유효한 값의 표준 집합을 보유하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 또는 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">지정된 컨텍스트를 사용하여, <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" />에서 반환된 표준 값 컬렉션이 가능한 값에 대한 단독 목록인지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" />에서 반환된 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이 가능한 값에 대한 단독 목록이면 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그 외에 다른 값을 사용할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 지원하는 일반 값 집합을 찾기 위해 <see langword="true" />를 호출해야 하는 경우 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">지정된 값 개체가 이 형식 및 지정된 컨텍스트에 대해 유효한지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">유효성 검사를 테스트할 <see cref="T:System.Object" /> 입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">nullable 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">nullable 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">내부 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">내부 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">내부 형식 변환기를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">내부 형식 변환기를 나타내는 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">개체의 텍스트 표현이 별표와 같은 문자로 가려져 있음을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />의 기본값을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">텍스트 속성이 암호로 사용되지 않도록 지정합니다. 이 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />) 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">텍스트 속성이 암호로 사용되도록 지정합니다. 이 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />) 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">암호 텍스트를 선택적으로 표시하여 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">속성이 암호 텍스트로 표시됨을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">두 개의 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />과 비교할 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />와 같으면 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">이 인스턴스의 값이 기본값인지 여부를 나타내는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 클래스에 대한 기본 특성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />가 정의된 속성이 암호 텍스트로 표시되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 암호 텍스트로 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">클래스의 속성에 대한 추상화를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 이름과 특성을 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">속성 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 이름과 <see cref="T:System.ComponentModel.MemberDescriptor" /> 및 <see cref="T:System.ComponentModel.MemberDescriptor" /> 배열 모두의 특성을 사용하여 <see cref="T:System.Attribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">멤버 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">속성과 연결할 특성이 들어 있는 <see cref="T:System.Attribute" /> 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">지정된 이름과 특성을 사용하여 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the property.">속성의 이름입니다.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">속성 특성이 들어 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">이 속성이 변경되면 다른 개체에서 알림을 받을 수 있도록 합니다.</summary>
      <param name="component" vsli:raw="The component to add the handler for.">처리기를 추가할 구성 요소입니다.</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">수신기로 추가할 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 또는 <paramref name="handler" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">파생 클래스에서 재정의된 경우 개체를 다시 설정하면 해당 값이 변경되는지 여부를 반환합니다.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">다시 설정 기능을 테스트할 구성 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소를 다시 설정하면 해당 값이 변경되는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">지정된 형식의 인스턴스를 만듭니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">만들 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="A new instance of the type.">해당 형식의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">이 개체를 다른 개체와 비교하여 두 개체가 같은지 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">이 <see cref="T:System.ComponentModel.PropertyDescriptor" />과 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />의 특성을 부모 클래스의 지정된 특성 목록에 추가합니다.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">부모 클래스에 있는 특성을 나열하는 <see cref="T:System.Collections.IList" />입니다. 처음에는 이 컬렉션이 비어 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">기본 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />을 반환합니다.</summary>
      <returns vsli:raw="A collection of property descriptor.">속성 설명자의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">지정된 특성 배열을 필터로 사용하여 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />을 반환합니다.</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">지정된 특성과 일치하는 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">지정된 개체에 대해 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />을 반환합니다.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">속성을 가져올 구성 요소입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">지정된 구성 요소의 속성을 갖는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">지정된 특성 배열을 필터로 사용하여 지정된 개체에 대한 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />을 반환합니다.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">속성을 가져올 구성 요소입니다.</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">지정된 구성 요소에 대한 지정된 특성과 일치하는 속성을 갖는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">지정된 형식의 편집기를 가져옵니다.</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">속성이 지원하는 여러 편집기를 구별하는 데 사용되는 기본 편집기 형식입니다.</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">요청된 편집기 형식의 인스턴스이거나, 편집기를 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">이 개체의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="The hash code for this object.">이 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">이 메서드는 멤버를 호출하는 동안 사용해야 하는 개체를 반환합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">호출 대상의 <see cref="T:System.Type" />입니다.</param>
      <param name="instance" vsli:raw="The potential invocation target.">잠재적인 호출 대상입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">멤버를 호출하는 동안 사용해야 하는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">해당 이름을 사용하는 형식을 반환합니다.</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">검색할 형식에 대한 어셈블리의 정규화된 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">지정된 형식 이름과 일치하는 <see cref="T:System.Type" />이거나, 일치하는 형식을 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">파생 클래스에서 재정의된 경우 구성 요소에 대한 현재 속성 값을 가져옵니다.</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">값을 검색할 속성이 포함된 구성 요소입니다.</param>
      <returns vsli:raw="The value of a property for a given component.">지정된 구성 요소에 대한 속성 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">특정 구성 요소에 대한 <c>ValueChanged</c> 이벤트 처리기의 현재 집합을 검색합니다.</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">이벤트 처리기를 검색할 구성 요소입니다.</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">결합된 멀티캐스트 이벤트 처리기입니다. <paramref name="component" />에 이벤트 처리기가 현재 할당되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">구현된 <c>ValueChanged</c> 이벤트를 발생시킵니다.</summary>
      <param name="component" vsli:raw="The object that raises the event.">이벤트를 발생시키는 개체입니다.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">이 속성이 변경되면 다른 개체에서 알림을 받을 수 있도록 합니다.</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">처리기를 제거할 구성 요소입니다.</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">수신기로 제거할 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 또는 <paramref name="handler" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">파생 클래스에서 재정의된 경우 구성 요소의 이 속성 값을 기본값으로 다시 설정합니다.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">기본값으로 다시 설정될 속성 값이 포함된 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">파생 클래스에서 재정의된 경우 구성 요소의 값을 다른 값으로 설정합니다.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">설정될 속성 값이 포함된 구성 요소입니다.</param>
      <param name="value" vsli:raw="The new value.">새 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">파생 클래스에서 재정의된 경우 이 속성 값이 지속되어야 하는지 여부를 나타내는 값을 확인합니다.</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">지속성을 검사할 속성이 포함된 구성 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성을 지속시켜야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">파생 클래스에서 재정의된 경우 이 속성이 바인딩된 구성 요소의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">이 속성이 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다. <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 또는 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 메서드가 호출될 때, 지정된 개체는 이 형식의 인스턴스가 될 수 있습니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">이 속성의 형식 변환기를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">이 속성의 <see cref="T:System.ComponentModel.TypeConverter" />을 변환하는 데 사용되는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.LocalizableAttribute" />에 지정된, 이 속성이 지역화되어야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">멤버의 <see cref="T:System.ComponentModel.LocalizableAttribute" />가 <see langword="true" />로 설정된 것으로 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">파생 클래스에서 재정의된 경우 이 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">파생 클래스에서 재정의된 경우 속성 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">속성 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />에 지정된, 이 속성이 serialize되어야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">이 속성이 serialize되어야 하는지 여부를 지정하는 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">이 속성의 값 변경 알림이 속성 설명자 외부에서 발생되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값 변경 알림이 속성 설명자 외부에서 발생되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">항목이 없는 새 컬렉션을 만드는 대신 사용할 수 있는 빈 컬렉션을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">이 컬렉션의 속성을 제공하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 클래스의 새 인스턴스를 초기화합니다. 이 인스턴스는 선택적으로 읽기 전용으로 만들 수 있습니다.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">이 컬렉션의 속성을 제공하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 형식의 배열입니다.</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">
        <see langword="true" />이면 컬렉션을 수정할 수 없습니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">컬렉션에 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">컬렉션에 추가된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">컬렉션에서 모든 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체를 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">컬렉션에 지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 들어 있는지 여부를 반환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">컬렉션에서 찾을 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">전체 컬렉션을 지정된 인덱스 번호에서 시작하여 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">컬렉션의 요소를 복사할 대상 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다.</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">복사가 시작되는 <paramref name="array" /> 매개 변수의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">대/소문자를 무시할지 여부를 나타내는 부울 값을 사용하여 지정된 이름의 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">컬렉션에서 반환할 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 이름입니다.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성 이름의 대/소문자를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">지정된 이름의 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 해당 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">이 클래스에 대한 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 형식의 열거자입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스를 반환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">인덱스를 반환할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />를 지정된 컬렉션의 지정된 인덱스 번호에 추가합니다.</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">컬렉션에서 <paramref name="value" /> 매개 변수를 추가할 인덱스입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">컬렉션에 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">지정된 <see cref="T:System.Collections.IComparer" />를 사용하여 이 컬렉션의 멤버를 정렬합니다.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">이 컬렉션의 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체를 정렬하는 데 사용할 비교자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">이 컬렉션의 멤버를 정렬합니다. 지정된 순서가 먼저 적용된 다음 대개 사전순인 이 컬렉션의 기본 정렬 순서가 적용됩니다.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">이 컬렉션에 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 컬렉션에서 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">컬렉션에서 지정한 인덱스에 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" />을 제거합니다.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">대개 사전순인 이 컬렉션의 기본 정렬 순서를 사용하여 이 컬렉션의 멤버를 정렬합니다.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">정렬된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 개체가 들어 있는 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">지정된 <see cref="T:System.Collections.IComparer" />를 사용하여 이 컬렉션의 멤버를 정렬합니다.</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">이 컬렉션의 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체를 정렬하는 데 사용할 비교자입니다.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">정렬된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 개체가 들어 있는 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">이 컬렉션의 멤버를 정렬합니다. 지정된 순서가 먼저 적용된 다음 대개 사전순인 이 컬렉션의 기본 정렬 순서가 적용됩니다.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">이 컬렉션에 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">정렬된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 개체가 들어 있는 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">이 컬렉션의 멤버를 정렬합니다. 지정된 순서가 먼저 적용된 다음 지정된 <see cref="T:System.Collections.IComparer" />를 사용하여 정렬됩니다.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">이 컬렉션에 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">이 컬렉션의 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체를 정렬하는 데 사용할 비교자입니다.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">정렬된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 개체가 들어 있는 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">제공된 키와 값을 가진 요소를 <see cref="T:System.Collections.IDictionary" />에 추가합니다.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">추가할 요소의 키로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">추가할 요소의 값으로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">지정된 키를 갖는 요소가 <see cref="T:System.Collections.IDictionary" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 해당 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">이 클래스에 대한 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 형식의 열거자입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" />에서 키가 지정된 요소를 제거합니다.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">제거할 요소의 키입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" />의 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">컬렉션에 추가할 항목입니다.</param>
      <returns vsli:raw="The position into which the new element was inserted.">새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">컬렉션에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">컬렉션에 특정 값이 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">컬렉션에서 찾을 항목입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">항목이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">컬렉션에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">컬렉션에서 찾을 항목입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">목록에 <paramref name="value" />가 있으면 해당 값의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">컬렉션에 삽입할 항목입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">컬렉션에서 맨 처음 발견되는 지정된 값을 제거합니다.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">컬렉션에서 제거할 항목입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">지정된 인덱스에서 항목을 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">컬렉션에 있는 속성 설명자의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">컬렉션에 있는 속성 설명자의 개수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">지정한 인덱스 번호의 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">가져오거나 설정할 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> 매개 변수가 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />에 대해 유효한 인덱스가 아닌 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">지정된 인덱스 번호가 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">지정된 이름을 가진 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져오거나 설정합니다.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">컬렉션에서 가져올 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 이름입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">지정된 이름의 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 해당 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">컬렉션에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면<see langword="true" /> 이고, 보호되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IDictionary" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">가져오거나 설정할 요소의 키입니다.</param>
      <returns vsli:raw="The element with the specified key.">지정한 키가 있는 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">컬렉션의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">컬렉션에서 지정한 인덱스에 있는 항목을 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">가져오거나 설정할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">컬렉션이 읽기 전용입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" />이(가) <see cref="T:System.ComponentModel.PropertyDescriptor" />가 아닌 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" />가 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />보다 크거나 같은 경우</exception>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">지정된 클래스에 대해 표시할 속성 탭을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">지정된 탭 클래스 이름을 사용하여 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">만들 탭 형식의 어셈블리로 한정된 이름입니다. 이 형식 규칙의 예를 보려면 <see cref="P:System.Type.AssemblyQualifiedName" />을 참조하십시오.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">지정된 탭 클래스 이름과 탭 범위를 사용하여 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">만들 탭 형식의 어셈블리로 한정된 이름입니다. 이 형식 규칙의 예를 보려면 <see cref="P:System.Type.AssemblyQualifiedName" />을 참조하십시오.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">
        <see cref="T:System.ComponentModel.PropertyTabScope" />이 탭의 범위를 나타내는입니다. 범위가 이면 해당가 있는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> 구성 요소에 대해서만 표시 됩니다 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />이면 해당 문서의 모든 구성 요소에 대해 탭이 표시됩니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" />이 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 또는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">지정된 탭 형식을 사용하여 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">만들 탭의 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">지정된 탭 형식과 탭 범위를 사용하여 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">만들 탭의 형식입니다.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">
        <see cref="T:System.ComponentModel.PropertyTabScope" />이 탭의 범위를 나타내는입니다. 범위가 이면 해당가 있는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> 구성 요소에 대해서만 표시 됩니다 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />이면 해당 문서의 모든 구성 요소에 대해 탭이 표시됩니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" />이 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 또는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">이 인스턴스가 지정된 특성과 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">이 인스턴스와 비교할 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 또는 <see langword="null" />입니다.</param>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">
        <paramref name="other" /> 매개 변수의 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 속성에 지정된 형식을 찾을 수 없는 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">이 인스턴스가 지정된 개체와 같은지를 표시하는 값을 반환합니다.</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</param>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">
        <paramref name="other" /> 매개 변수의 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 속성에 지정된 형식을 찾을 수 없는 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="other" />가 동일한 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 인스턴스를 참조하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">해당 개체의 해시 코드를 가져옵니다.</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">해당 특성이 속해 있는 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">지정된 탭 클래스 이름 및 탭 범위 배열을 사용하여 특성을 초기화합니다.</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">속성 창에서 탭에 대해 만들 형식의 정규화된 형식 이름 배열입니다.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">각 탭의 범위입니다. 범위가 이면 해당가 있는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> 구성 요소에 대해서만 표시 됩니다 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />이면 해당 문서의 모든 구성 요소에 대해 탭이 표시됩니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="tabScopes" />에 있는 하나 이상의 값이 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 또는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />가 아닌 경우  
  
또는 
<paramref name="tabClassNames" />와 <paramref name="tabScopes" /> 배열의 길이가 다른 경우  
  
또는 
 <paramref name="tabClassNames" /> 또는 <paramref name="tabScopes" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">지정된 탭 클래스 이름 및 탭 범위 배열을 사용하여 특성을 초기화합니다.</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">만들 탭 형식입니다.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">각 탭의 범위입니다. 범위가 이면 해당가 있는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> 구성 요소에 대해서만 표시 됩니다 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> . 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />이면 해당 문서의 모든 구성 요소에 대해 탭이 표시됩니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="tabScopes" />에 있는 하나 이상의 값이 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 또는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />가 아닌 경우  
  
또는 
<paramref name="tabClassNames" />와 <paramref name="tabScopes" /> 배열의 길이가 다른 경우  
  
또는 
 <paramref name="tabClassNames" /> 또는 <paramref name="tabScopes" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">이 특성이 사용하는 탭 형식을 가져옵니다.</summary>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">
        <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 속성에 지정된 형식을 찾을 수 없는 경우</exception>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">이 특성이 사용하는 탭 형식을 나타내는 형식 배열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">이 특성에서 사용하는 탭 클래스의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">이 특성이 사용하는 탭 클래스의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">이 <see cref="T:System.ComponentModel.PropertyTabAttribute" />의 각 탭에 대한 탭 범위 배열을 가져옵니다.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">해당 탭의 범위를 나타내는 <see cref="T:System.ComponentModel.PropertyTabScope" /> 개체의 배열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">속성 창에서의 탭 지속성 범위를 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">이 탭은 현재 구성 요소에 고유합니다. 이 탭은 현재 구성 요소에 대해서만 속성 창에 추가되며 해당 구성 요소가 더 이상 선택되지 않으면 제거됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">이 탭은 현재 문서에 고유합니다. 이 탭은 속성 창에 추가되며 현재 선택한 문서가 변경되면 제거됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">이 탭은 속성 창에 추가되며 부모 구성 요소에 의해 명시적으로만 제거될 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">이 탭은 속성 창에 추가되며 제거할 수 없습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">
        <see cref="T:System.ComponentModel.IExtenderProvider" />의 구현자가 다른 구성 요소에 제공하는 속성의 이름을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">속성 이름과 해당 수신자의 형식을 사용하여 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">지정된 형식의 개체로 확장되는 속성의 이름입니다.</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">이 속성을 확장할 수 있는 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">속성의 이름과 해당 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />으로 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">지정된 형식의 개체로 확장되는 속성의 이름입니다.</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">속성을 받을 수 있는 개체 데이터 형식의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">값이 같은지 테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">이 클래스가 제공하는 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of a property that this class provides.">이 클래스가 제공하는 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">이 속성을 확장할 수 있는 데이터 형식의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the data type this property can extend.">이 속성을 확장할 수 있는 데이터 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">이 특성에 대한 고유 식별자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">특성에 대한 고유 식별자인 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">속성을 애플리케이션 설정으로 사용할 수 있도록 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">
        <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />의 기본값인 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">속성을 애플리케이션 설정으로 사용할 수 없도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">속성을 애플리케이션 설정으로 사용할 수 있도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 특성이 바인딩되는 속성을 애플리케이션 설정으로 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="obj" vsli:raw="Another object to compare to.">비교할 다른 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">이 인스턴스의 값이 클래스의 기본값인지 여부를 나타냅니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 인스턴스가 클래스에 대한 기본 특성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">이 특성이 바인딩되는 속성을 애플리케이션 설정으로 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 특성이 바인딩되는 속성을 애플리케이션 설정으로 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">개체 참조와 다른 표현 간에 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ReferenceConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">이 참조 변환기에 연결할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 참조 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">지정된 개체를 참조 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">글꼴을 나타내는 데 사용할 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">지정된 컨텍스트 및 인수를 사용하여 지정된 값 개체를 참조 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">글꼴을 나타내는 데 사용할 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">참조 데이터 형식에 대한 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">유효한 값의 표준 집합을 보유하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 또는 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">
        <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />에서 반환된 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />이 가능한 값을 포함하는 단독 목록이므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">특정 값을 표준 값 컬렉션에 추가할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The value to check.">확인할 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">해당 값을 사용하여 표준 값 컬렉션에 추가할 수 있으면 <see langword="true" />이고, 이 값을 표준 값 컬렉션에 추가할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">변경된 구성 요소를 사용하여 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">변경된 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">변경된 구성 요소의 형식을 사용하여 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">변경된 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">속성, 이벤트 또는 extender가 변경된 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">속성, 이벤트 또는 extender가 변경된 구성 요소이거나, 같은 형식의 구성 요소가 모두 변경되었으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">속성 또는 이벤트가 변경된 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">속성 또는 이벤트가 변경된 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">디자인 타임 동안 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 또는 구성 요소가 변경될 때 발생하는 <see cref="T:System.Type" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">변경된 구성 요소 또는 <see cref="T:System.ComponentModel.RefreshEventArgs" />이 들어 있는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">어셈블리가 설치될 때 Visual Studio 사용자 지정 동작 설치 관리자 또는 Installutil.exe(설치 관리자 도구)의 호출 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">기본 표시 유형인 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />를 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">어셈블리가 설치될 때 Visual Studio 사용자 지정 동작 설치 관리자 또는 Installutil.exe(설치 관리자 도구)의 호출 여부를 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">어셈블리가 설치될 때 Visual Studio 사용자 지정 동작 설치 관리자 또는 Installutil.exe(설치 관리자 도구)의 호출 여부를 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">어셈블리를 설치할 때 설치 관리자를 호출해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">지정된 <see cref="T:System.ComponentModel.RunInstallerAttribute" />의 값이 현재 <see cref="T:System.ComponentModel.RunInstallerAttribute" />와 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare.">비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.RunInstallerAttribute" />와 같으면 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.RunInstallerAttribute" />의 해시 코드를 생성합니다.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">현재 <see cref="T:System.ComponentModel.RunInstallerAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">어셈블리를 설치할 때 설치 관리자를 호출해야 할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">어셈블리를 설치할 때 설치 관리자를 호출해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">8비트 부호 없는 정수 개체와 문자열 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.SByteConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">구성 요소 속성을 애플리케이션 설정에 바인딩할 수 있는 시기를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">속성이 설정을 바인딩하는 대상으로 적합하지 않음을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">속성이 설정을 바인딩하는 대상으로 적합함을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 설정을 바인딩하는 대상으로 적합함을 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">속성이 설정을 바인딩하는 대상으로 적합한지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성이 설정을 바인딩하는 대상으로 적합하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">단정밀도 부동 소수점 숫자 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.SingleConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">문자열 개체와 다른 표현을 상호 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.StringConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">이 변환기가 지정된 컨텍스트를 사용하여 지정된 소스 형식의 개체를 문자열로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">지정된 값 개체를 <see cref="T:System.String" /> 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">변환을 수행할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">컴퓨터 이름 및 경로가 특정 구문을 준수하는지 확인하는 메서드를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">컴퓨터 이름의 구문을 검토하여 컴퓨터 이름에 "\"가 포함되어 있지 않은지 확인합니다.</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">확인할 컴퓨터 이름이 포함된 문자열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 적절한 컴퓨터 이름 형식과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">경로의 구문을 검토하여 "\\"로 시작되는지 확인합니다.</summary>
      <param name="value" vsli:raw="A string containing the path to check.">확인할 경로가 포함된 문자열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 적절한 경로 형식과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">경로의 구문을 검토하여 "\" 또는 드라이브 문자 "C:"로 시작되는지 확인합니다.</summary>
      <param name="value" vsli:raw="A string containing the path to check.">확인할 경로가 포함된 문자열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 적절한 경로 형식과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">
        <see cref="T:System.TimeSpan" /> 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TimeSpanConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.TimeSpan" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">지정된 개체를 <see cref="T:System.TimeSpan" />으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">지정된 개체를 다른 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="A formatter context.">포맷터 컨텍스트입니다.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">도구 상자 항목의 특성을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 해당 형식을 기본값인 <see cref="T:System.Drawing.Design.ToolboxItem" />으로 설정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 해당 형식을 <see langword="null" />로 설정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 기본 초기화 값을 사용할지 여부를 지정합니다.</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">기본 형식의 도구 상자 항목 특성을 만들려면 <see langword="true" />이고, 이 특성에 대해 기본 도구 상자 항목 지원을 연결하지 않으려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">지정된 형식 이름을 사용하여 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">도구 상자 항목의 형식 및 해당 형식이 들어 있는 어셈블리의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">지정된 도구 상자 항목 형식을 사용하여 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">해당 도구 상자 항목의 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 특성 값이 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">해당 도구 상자 항목의 형식을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">형식을 찾을 수 없는 경우</exception>
      <returns vsli:raw="The type of the toolbox item.">해당 도구 상자 항목의 형식입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">현재 <see cref="T:System.Drawing.Design.ToolboxItem" />의 형식 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">현재 도구 상자 항목의 정규화된 형식 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">도구 상자 항목에 사용할 필터 문자열과 필터 형식을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">지정된 필터 문자열을 사용하여 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">도구 상자 항목에 대한 필터 문자열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">지정된 필터 문자열과 형식을 사용하여 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">도구 상자 항목에 대한 필터 문자열입니다.</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">필터 형식을 나타내는 <see cref="T:System.ComponentModel.ToolboxItemFilterType" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">지정된 개체에 일치하는 필터 문자열이 있는지 여부를 나타냅니다.</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">일치하는 필터 문자열을 테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 개체에 일치하는 필터 문자열이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns vsli:raw="A string that represents the current object.">현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">도구 상자 항목에 대한 필터 문자열을 가져옵니다.</summary>
      <returns vsli:raw="The filter string for the toolbox item.">도구 상자 항목에 대한 필터 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">필터 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">필터 형식을 나타내는 <see cref="T:System.ComponentModel.ToolboxItemFilterType" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">해당 특성의 형식 ID를 가져옵니다.</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">이 특성의 형식 ID입니다. 필터 문자열이 같은 모든 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 개체는 같은 형식 ID를 반환합니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">
        <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />에서 사용된 필터 형식을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">도구 상자 항목 필터 문자열을 사용할 수 있지만 반드시 필요하지는 않음을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">도구 상자 항목 필터 문자열을 사용할지 여부를 결정하려면 사용자 지정 처리가 필요함을 나타냅니다. 디자이너가 도구 상자 항목을 수락 또는 거부하려 한다는 것을 코드로 나타내도록 일반적으로 루트 디자이너 클래스에 지정됩니다. 디자이너를 구현 해야 합니다 <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> 메서드는 <see cref="T:System.Drawing.Design.IToolboxUser" /> 인터페이스.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">도구 상자 항목 필터 문자열을 사용할 수 없음을 나타냅니다. 디자이너와 구성 요소 클래스 둘 모두에 필터 문자열이 있고 그 중 하나의 값이 <c>ToolboxItemFilterType.Prevent</c>이면 도구 상자 항목을 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">활성화할 도구 상자 항목에 대해 도구 상자 항목 필터 문자열이 있어야 함을 나타냅니다.  필터 형식이 <c>Require</c>인 도구 상자 항목을 사용하려면 디자이너와 구성 요소 클래스에 일치하는 필터 문자열이 있어야 합니다. 뿐만 아니라 도구 상자 항목을 사용하려면 디자이너와 구성 요소 클래스의 필터 형식이 <c>Prevent</c>이면 안 됩니다.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">표준 값과 하위 속성에 액세스하기 위한 그리고 값의 형식을 다른 형식으로 변환하기 위한 통합된 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">지정된 컨텍스트를 사용하여 이 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">이 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">지정된 컨텍스트를 사용하여 이 변환기에서 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">이 변환기가 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">지정한 컨텍스트와 culture 정보를 사용하여 지정된 개체를 이 변환기의 유형으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">현재 culture로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">지정된 값을 이 변환기의 형식으로 변환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">고정 문화권 및 지정된 컨텍스트를 사용하여 지정된 문자열을 이 변환기의 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">변환할 <see cref="T:System.String" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">고정 문화권을 사용하여, 지정된 문자열을 이 변환기의 형식으로 변환합니다.</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">변환할 <see cref="T:System.String" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">지정된 컨텍스트 및 문화권 정보를 사용하여, 지정된 텍스트를 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" />이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">변환할 <see cref="T:System.String" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">지정된 컨텍스트를 사용하여, 지정된 텍스트를 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">변환할 <see cref="T:System.String" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">지정된 텍스트를 개체로 변환합니다.</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">변환할 개체의 텍스트 표현입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">문자열을 적절한 개체로 변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">지정한 컨텍스트와 culture 정보를 사용하여 지정된 값 개체를 지정된 유형으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" />이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">인수를 사용하여, 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">지정된 context를 사용하여, 지정된 값을 고정 문화권의 문자열 표현으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">지정된 값을 고정 문화권의 문자열 표현으로 변환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">지정된 컨텍스트 및 문화권 정보를 사용하여, 지정된 값을 문자열 표현으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" />이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">지정된 컨텍스트를 사용하여, 지정된 값을 문자열 표현으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">지정된 값을 문자열 표현으로 변환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">개체의 속성 값 집합이 지정된 <see cref="T:System.Object" />를 다시 만듭니다.</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">새 속성 값의 사전을 나타내는 <see cref="T:System.Collections.IDictionary" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">지정된 <see cref="T:System.Collections.IDictionary" />를 나타내는 <see cref="T:System.Object" />이거나, 개체를 만들 수 없으면 <see langword="null" />입니다. 이 메서드는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">지정된 컨텍스트를 사용하여 이 <see cref="T:System.ComponentModel.TypeConverter" />가 연결된 형식의 인스턴스를 만들어 개체의 속성 값 집합을 제공합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">새 속성 값의 <see cref="T:System.Collections.IDictionary" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">지정된 <see cref="T:System.Collections.IDictionary" />를 나타내는 <see cref="T:System.Object" />이거나, 개체를 만들 수 없으면 <see langword="null" />입니다. 이 메서드는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">변환을 수행할 수 없을 때 발생하는 예외를 반환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">변환할 <see cref="T:System.Object" />이거나, 개체를 사용할 수 없는 경우 <see langword="null" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">이 메서드에서 자동으로 throw되는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">변환을 수행할 수 없을 때 throw되는 예외를 나타내는 <see cref="T:System.Exception" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">변환을 수행할 수 없을 때 발생하는 예외를 반환합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">변환할 <see cref="T:System.Object" />이거나, 개체를 사용할 수 없는 경우 <see langword="null" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">이 메서드에서 자동으로 throw되는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">변환을 수행할 수 없을 때 throw되는 예외를 나타내는 <see cref="T:System.Exception" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">이 개체의 값을 변경할 때 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 메서드를 호출하여 새 값을 만들어야 하는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 변경하려는 경우<see langword="true" /> 호출을 통해 새 값을 만들어야 하면 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 이고, 만들지 않아야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">이 개체의 값을 변경하려는 경우 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 호출을 통해 지정된 컨텍스트를 사용하여 새 값을 만들어야 하는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 변경하려는 경우<see langword="true" /> 호출을 통해 새 값을 만들어야 하면 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 이고, 만들지 않아야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">지정된 컨텍스트를 사용하여, 값 매개 변수로 지정한 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">이 데이터 형식에 대해 공개된 속성을 가진 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 또는 속성이 없는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">지정된 컨텍스트 및 특성을 사용하여 값 매개 변수로 지정된 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">이 데이터 형식에 대해 공개된 속성을 가진 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 또는 속성이 없는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">값 매개 변수로 지정된 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">이 데이터 형식에 대해 공개된 속성을 가진 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 또는 속성이 없는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">이 개체가 속성을 지원하는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">이 개체가 지정된 컨텍스트를 사용하여 속성을 지원하는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">이 형식 변환기를 사용하도록 디자인된 데이터 형식의 기본 컨텍스트에서 표준 값 컬렉션을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">유효한 표준 값 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이거나 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">형식 컨텍스트를 제공할 경우 이 형식 변환기가 사용되는 데이터 형식에 대한 표준 값의 컬렉션을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">이 변환기가 호출되는 환경에 대한 추가 정보를 추출하는 데 사용할 수 있는 형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 입니다. 이 매개 변수 또는 이 매개 변수의 속성은 <see langword="null" />일 수 있습니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">유효한 값의 표준 집합을 보유하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 또는 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">
        <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />에서 반환된 표준 값 컬렉션이 단독 목록인지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" />에서 반환된 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이 가능한 값에 대한 단독 목록이면 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그 외에 다른 값을 사용할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">지정된 컨텍스트를 사용하여, <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />에서 반환된 표준 값 컬렉션이 가능한 값에 대한 단독 목록인지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" />에서 반환된 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이 가능한 값에 대한 단독 목록이면 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그 외에 다른 값을 사용할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 지원하는 일반 값 집합을 찾기 위해 <see langword="true" />를 호출해야 하는 경우 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체가 지원하는 일반 값 집합을 찾기 위해 <see langword="true" />를 호출해야 하는 경우 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">지정된 값 개체가 이 형식 및 지정된 컨텍스트에 대해 유효한지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">유효성 검사를 테스트할 <see cref="T:System.Object" /> 입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">지정된 값 개체를 이 형식에 사용할 수 있는지 여부를 반환합니다.</summary>
      <param name="value" vsli:raw="The object to test for validity.">유효성을 테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">속성 컬렉션을 정렬합니다.</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">정렬할 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">컬렉션에 속성을 표시할 순서대로 나열된 이름 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">정렬된 속성을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">속성을 포함하지 않는 개체에 속성을 제공하는 <see langword="abstract" /> 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">이 속성 설명자가 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="name" vsli:raw="The name of the property.">속성의 이름입니다.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">이 속성의 데이터 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">이 속성 설명자가 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="name" vsli:raw="The name of the property.">속성의 이름입니다.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">이 속성의 데이터 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">속성과 연결할 특성이 들어 있는 <see cref="T:System.Attribute" /> 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">구성 요소를 다시 설정하면 해당 구성 요소의 값이 변경되는지 여부를 반환합니다.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">다시 설정 기능을 테스트할 구성 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구성 요소를 다시 설정하면 해당 구성 요소의 값이 변경되는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">구성 요소의 이 속성 값을 다시 설정합니다.</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">속성 값을 다시 설정할 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">이 속성 값이 지속될 수 있는지 여부를 반환합니다.</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">지속성을 검사할 속성이 포함된 구성 요소입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">속성 값이 지속될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">이 속성 설명자가 바인딩된 구성 요소의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">이 속성이 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">이 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">해당 속성이 읽기 전용이면 <see langword="true" />이고, 읽기/쓰기이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">속성의 유형을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">속성 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">값 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">컬렉션에 포함시킬 개체를 나타내는 <see cref="T:System.Collections.ICollection" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">이 컬렉션의 내용을 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">복사할 대상 배열을 나타내는 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index to start from.">복사를 시작할 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">이 컬렉션에 대한 열거자를 반환합니다.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 형식의 열거자입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">컬렉션에 있는 개체의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of objects in the collection.">컬렉션의 개체 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">지정된 인덱스 번호의 개체를 가져옵니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">컬렉션에서 가져올 <see cref="T:System.Object" />의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">지정된 인덱스의 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.IsSynchronized" />를 참조하세요.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.SyncRoot" />를 참조하세요.</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">모든 경우에 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptor" />에 추가 메타데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">부모 형식 설명 공급자를 사용하여 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parent" vsli:raw="The parent type description provider.">부모 형식 설명 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">다른 데이터 형식 대신 사용할 수 있는 개체를 만듭니다.</summary>
      <param name="provider" vsli:raw="An optional service provider.">선택적인 서비스 공급자입니다.</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">만들 개체의 유형입니다. 이 매개 변수는 <see langword="null" />이 될 수 없습니다.</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">개체의 생성자에 전달할 매개 변수 형식을 나타내는 형식의 선택적 배열입니다. 이 배열은 <see langword="null" />이거나 길이가 0일 수 있습니다.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">개체의 생성자에 전달할 매개 변수 값의 선택적 배열입니다.</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">대체 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">키/값 쌍의 <see cref="T:System.Collections.IDictionary" />로 액세스되는 개체별 캐시를 가져옵니다.</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">캐시를 가져올 개체입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">제공된 개체에서 캐싱을 지원하면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">지정된 개체에 대한 확장 사용자 지정 형식 설명자를 가져옵니다.</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">확장 형식 설명자를 가져올 개체입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">개체에 대한 확장 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">지정된 개체에 대한 Extender 공급자를 가져옵니다.</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">관련된 Extender 공급자를 가져올 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">
        <paramref name="instance" />에 대한 Extender 공급자의 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">지정된 구성 요소의 이름을 가져옵니다. 구성 요소에 이름이 없으면 <see langword="null" />입니다.</summary>
      <param name="component" vsli:raw="The specified component.">지정된 구성 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="The name of the specified component.">지정된 구성 요소의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">지정된 개체에 대해 일반 리플렉션을 수행합니다.</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">형식의 인스턴스로, <see langword="null" />이 아니어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">이 <paramref name="instance" />의 리플렉션 형식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">형식에 대해 일반 리플렉션을 수행합니다.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">
        <see cref="T:System.Reflection.IReflect" />를 검색할 개체의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">이 <paramref name="objectType" />의 리플렉션 형식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">주어진 형식의 지정된 개체에 대해 일반 리플렉션을 수행합니다.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">
        <see cref="T:System.Reflection.IReflect" />를 검색할 개체의 형식입니다.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">형식의 인스턴스입니다. <see langword="null" />일 수 있습니다.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">이 <paramref name="objectType" />의 리플렉션 형식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">리플렉션 형식을 런타임 형식으로 변환합니다.</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">해당되는 런타임 형식으로 변환할 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">
        <paramref name="reflectionType" />의 런타임 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">지정된 개체의 사용자 지정 형식 설명자를 가져옵니다.</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">형식의 인스턴스입니다. 인스턴스가 <see cref="T:System.ComponentModel.TypeDescriptor" />에 전달되지 않았으면 <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">지정된 형식의 사용자 지정 형식 설명자를 가져옵니다.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">형식 설명자를 검색할 개체의 형식입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">지정된 형식과 개체의 사용자 지정 형식 설명자를 가져옵니다.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">형식 설명자를 검색할 개체의 형식입니다.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">형식의 인스턴스입니다. 인스턴스가 <see cref="T:System.ComponentModel.TypeDescriptor" />에 전달되지 않았으면 <see langword="null" />일 수 있습니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">지정된 형식이 형식 설명 및 형식 설명 공급자의 체인과 호환되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">호환성을 테스트할 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="type" />이 형식 설명 및 형식 설명 공급자의 체인과 호환되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">구성 요소의 특성, 속성 및 이벤트와 같이, 구성 요소의 특성에 대한 정보를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">구성 요소에 대한 캐시를 지울 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">클래스 수준 특성을 대상 구성 요소 인스턴스에 추가합니다.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">대상 구성 요소의 인스턴스입니다.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">구성 요소의 클래스에 추가할 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다 <see langword="null" />입니다.</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">지정된 속성을 추가하는 데 사용된 새로 만든 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">클래스 수준 특성을 대상 구성 요소 형식에 추가합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">구성 요소의 클래스에 추가할 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다 <see langword="null" />입니다.</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">지정된 속성을 추가하는 데 사용된 새로 만든 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">지정된 편집기 기본 형식에 대한 편집기 테이블을 추가합니다.</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">편집기 테이블을 추가할 편집기 기본 형식입니다. 이 형식에 대한 테이블이 이미 있으면 이 메서드는 아무 작업도 수행하지 않습니다.</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">추가할 <see cref="T:System.Collections.Hashtable" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">단일 구성 요소 인스턴스에 대한 형식 설명 공급자를 추가합니다.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">추가할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="instance" vsli:raw="An instance of the target component.">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">구성 요소 클래스에 대한 형식 설명 공급자를 추가합니다.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">추가할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">단일 구성 요소 인스턴스에 대한 형식 설명 공급자를 추가합니다.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">추가할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="instance" vsli:raw="An instance of the target component.">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">구성 요소 클래스에 대한 형식 설명 공급자를 추가합니다.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">추가할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">두 개체 사이에 기본-보조 연결을 만듭니다.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">기본 <see cref="T:System.Object" />입니다.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">보조 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" />이(가) <paramref name="secondary" />와 같은 경우.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">지정된 구성 요소와 연결된 디자이너의 인스턴스 및 지정된 형식의 디자이너의 인스턴스를 만듭니다.</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">디자이너와 연결할 구성 요소를 지정하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">만들 디자이너의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">구성 요소에 대한 디자이너의 인스턴스인 <see cref="T:System.ComponentModel.Design.IDesigner" />이거나, 디자이너를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">기존 <see cref="T:System.ComponentModel.EventDescriptor" />를 전달할 때 기존 이벤트 설명자와 동일한 새 이벤트 설명자를 만듭니다.</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">새 이벤트를 만들 구성 요소의 형식입니다.</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">기존 이벤트 정보입니다.</param>
      <param name="attributes" vsli:raw="The new attributes.">새 특성입니다.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">지정된 메타데이터 특성과 기존 메타데이터 특성이 병합된 새 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">형식에 지정된 이벤트에서 설명자 정보를 동적으로 생성하여 기존 이벤트 설명자와 동일한 새 이벤트 설명자를 만듭니다.</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">이벤트를 만들 구성 요소의 형식입니다.</param>
      <param name="name" vsli:raw="The name of the event.">이벤트의 이름입니다.</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">이벤트를 처리하는 대리자 형식입니다.</param>
      <param name="attributes" vsli:raw="The attributes for this event.">이 이벤트에 대한 특성입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">형식에 바인딩되는 <see cref="T:System.ComponentModel.EventDescriptor" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">다른 데이터 형식 대신 사용할 수 있는 개체를 만듭니다.</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 서비스를 제공하는 서비스 공급자입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">만들 개체의 <see cref="T:System.Type" />입니다.</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">개체의 생성자에 전달할 매개 변수 형식의 선택적 배열입니다. 이 매개 변수는 <see langword="null" /> 또는 0길이 배열일 수 있습니다.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">개체의 생성자에 전달할 매개 변수 값의 선택적 배열입니다. <see langword="null" />이 아니면 요소 개수가 <paramref name="argTypes" />와 동일해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="argTypes" />가 <see langword="null" />이 아닐 때 <paramref name="objectType" />이 <see langword="null" />이거나 <paramref name="args" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">
        <paramref name="argTypes" /> 및 <paramref name="args" />의 요소 수가 다릅니다.</exception>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">연결된 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />가 있으면 대체 데이터 형식의 인스턴스이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">지정된 기존 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 및 특성 배열을 사용하여 기존 속성 설명자에서 새 속성 설명자를 만듭니다.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">속성이 멤버인 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">기존 속성 설명자입니다.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">이 속성의 새 특성입니다.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">지정된 메타데이터 특성이 기존 메타데이터 특성과 병합된 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">지정된 속성 이름, 형식 및 특성 배열을 사용하여 속성 설명자를 만들고 형식에 동적으로 바인딩합니다.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">속성이 멤버인 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="name" vsli:raw="The name of the property.">속성의 이름입니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">속성의 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">이 속성의 새 특성입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">지정 형식에 바인딩되고 지정된 메타데이터 특성이 기존 메타데이터 특성과 병합된 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">지정된 기본 개체와 연결된 형식의 인스턴스를 반환합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="primary" vsli:raw="The primary object of the association.">연결의 기본 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">연결이 있으면 기본 개체와 연결된 보조 형식의 인스턴스이고, 지정된 연결이 없으면 <paramref name="primary" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">지정된 구성 요소에 대한 특성 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">특성을 가져올 구성 요소입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">구성 요소에 대한 특성을 포함하는 <see cref="T:System.ComponentModel.AttributeCollection" /> 입니다. <paramref name="component" />가 <see langword="null" />이면 이 메서드는 빈 컬렉션을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">지정된 구성 요소에 대한 특성 컬렉션과 사용자 지정 형식 설명자가 만들어졌음을 나타내는 부울 값을 반환합니다.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">특성을 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="component" />가 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 형식인 경우 사용자 지정 형식 설명자에서 기본 특성 집합을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">구성 요소에 대한 특성을 포함하는 <see cref="T:System.ComponentModel.AttributeCollection" /> 입니다. 구성 요소가 <see langword="null" />이면 이 메서드는 빈 컬렉션을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">지정된 구성 요소 형식에 대한 특성 컬렉션을 반환합니다.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">구성 요소 형식에 대한 특성이 포함된 <see cref="T:System.ComponentModel.AttributeCollection" /> 입니다. 구성 요소가 <see langword="null" />이면 이 메서드는 빈 컬렉션을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">기본 형식 설명자를 사용하여 지정된 구성 요소에 대한 클래스 이름을 반환합니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">클래스 이름을 지정할 <see cref="T:System.Object" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">지정된 구성 요소 형식에 대한 클래스의 이름을 포함하는 <see cref="T:System.String" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">사용자 지정 형식 설명자를 사용하여 지정된 구성 요소에 대한 클래스의 이름을 반환합니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">클래스 이름을 지정할 <see cref="T:System.Object" /> 입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하려면<see langword="true" /> 이고, 고려하지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">지정된 구성 요소 형식에 대한 클래스의 이름을 포함하는 <see cref="T:System.String" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">지정된 형식에 대한 클래스의 이름을 반환합니다.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">지정된 구성 요소 형식에 대한 클래스의 이름을 포함하는 <see cref="T:System.String" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">기본 형식 설명자를 사용하여 지정된 구성 요소의 이름을 반환합니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">클래스 이름을 지정할 <see cref="T:System.Object" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">지정된 구성 요소의 이름을 포함하는 <see cref="T:System.String" /> 이거나, 구성 요소 이름이 없는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">사용자 지정 형식 설명자를 사용하여 지정된 구성 요소의 이름을 반환합니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">클래스 이름을 지정할 <see cref="T:System.Object" /> 입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하려면<see langword="true" /> 이고, 고려하지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">지정된 구성 요소의 이름이거나, 구성 요소 이름이 없는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">지정된 구성 요소의 형식에 대한 형식 변환자를 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">변환기를 가져올 구성 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">지정된 구성 요소에 대한 <see cref="T:System.ComponentModel.TypeConverter" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">사용자 지정 형식 설명자를 사용하여 지정된 구성 요소의 형식에 대한 형식 변환자를 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">변환기를 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하려면<see langword="true" /> 이고, 고려하지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">지정된 구성 요소에 대한 <see cref="T:System.ComponentModel.TypeConverter" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">지정된 형식에 대한 형식 변환자를 반환합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">지정된 구성 요소에 대한 기본 이벤트를 반환합니다.</summary>
      <param name="component" vsli:raw="The component to get the event for.">이벤트를 가져올 구성 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">기본 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 이거나, 이벤트가 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">사용자 지정 형식 설명자를 사용하여 구성 요소에 대한 기본 이벤트를 반환합니다.</summary>
      <param name="component" vsli:raw="The component to get the event for.">이벤트를 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하려면<see langword="true" /> 이고, 고려하지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">기본 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 이거나, 이벤트가 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">지정된 구성 요소 형식의 기본 이벤트를 반환합니다.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">기본 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 이거나, 이벤트가 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">지정된 구성 요소의 기본 속성을 반환합니다.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">기본 속성을 가져올 구성 요소입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">기본 속성을 사용하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 이거나, 속성이 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">사용자 지정 설명자가 있는 지정된 구성 요소에 대한 기본 속성을 반환합니다.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">기본 속성을 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하려면<see langword="true" /> 이고, 고려하지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">기본 속성을 사용하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 이거나, 속성이 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">지정된 구성 요소 형식의 기본 속성을 반환합니다.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">속성을 가져올 클래스를 나타내는 <see cref="T:System.Type" /> 입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">기본 속성을 사용하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 이거나, 속성이 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">지정된 구성 요소에 대해 지정된 기본 형식을 사용하는 편집기를 가져옵니다.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">편집기를 가져올 구성 요소입니다.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">찾을 편집기의 기본 형식을 나타내는 <see cref="T:System.Type" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 또는 <paramref name="editorBaseType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">지정한 편집기 형식으로 캐스팅될 수 있는 편집기의 인스턴스이거나, 요청된 형식의 편집기가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">지정된 구성 요소에 대한 지정된 기본 형식 및 사용자 지정 형식 설명자를 사용하여 편집기를 반환합니다.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">편집기를 가져올 구성 요소입니다.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">찾을 편집기의 기본 형식을 나타내는 <see cref="T:System.Type" /> 입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">사용자 지정 형식 설명 정보를 고려할지 여부를 나타내는 플래그입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> 또는 <paramref name="editorBaseType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">지정한 편집기 형식으로 캐스팅될 수 있는 편집기의 인스턴스이거나, 요청된 형식의 편집기가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">지정된 형식에 대해 지정된 기본 형식을 사용하는 편집기를 반환합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">찾을 편집기의 기본 형식을 나타내는 <see cref="T:System.Type" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 또는 <paramref name="editorBaseType" />가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">지정한 편집기 형식으로 캐스팅될 수 있는 편집기의 인스턴스이거나, 요청된 형식의 편집기가 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">지정된 구성 요소에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the events for.">이벤트를 가져올 구성 요소입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">이 구성 요소에 대한 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">특성의 지정된 배열을 필터로 사용하여 지정된 구성 요소에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the events for.">이벤트를 가져올 구성 요소입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">필터로 사용할 수 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">이 구성 요소에 대한 지정된 특성과 일치하는 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">지정한 특성 배열을 필터로 사용하고 사용자 지정 특성 설명자를 사용하여 지정된 구성 요소에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the events for.">이벤트를 가져올 구성 요소입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하려면<see langword="true" /> 이고, 고려하지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">이 구성 요소에 대한 지정된 특성과 일치하는 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">사용자 지정 형식 설명자가 있는 지정된 구성 요소에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the events for.">이벤트를 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하려면<see langword="true" /> 이고, 고려하지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">이 구성 요소에 대한 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">구성 요소의 지정된 형식의 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">이 구성 요소에 대한 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">특성의 지정된 배열을 필터로 사용하여 구성 요소의 지정된 형식에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">필터로 사용할 수 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">이 구성 요소에 대한 지정된 특성과 일치하는 이벤트가 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">구성 요소의 정규화된 이름을 반환합니다.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">이름을 검색할 <see cref="T:System.ComponentModel.Component" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">지정된 구성 요소의 정규화된 이름이거나, 구성 요소에 이름이 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">지정된 구성 요소에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">속성을 가져올 구성 요소입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">지정된 구성 요소의 속성을 갖는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">지정한 특성 배열을 필터로 사용하여 지정된 구성 요소에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">속성을 가져올 구성 요소입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">지정된 구성 요소에 대한 지정된 특성과 일치하는 속성을 갖는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">지정한 특성 배열을 필터로 사용하고 사용자 지정 특성 설명자를 사용하여 지정된 구성 요소에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">속성을 가져올 구성 요소입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하려면<see langword="true" /> 이고, 고려하지 않으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">지정된 구성 요소에 대한 지정된 특성과 일치하는 이벤트를 갖는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">기본 형식 설명자를 사용하여 지정된 구성 요소에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">속성을 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">사용자 지정 형식 설명 정보를 고려하지 않으려면<see langword="true" /> 이고, 고려하려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> 는 크로스 프로세스 원격 개체입니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">지정된 구성 요소에 대한 속성을 가진 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">구성 요소의 지정된 형식의 대한 속성의 컬렉션을 반환합니다.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">속성을 가져올 구성 요소를 나타내는 <see cref="T:System.Type" /> 입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">구성 요소의 지정된 형식의 대한 속성을 갖는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">지정한 특성 배열을 필터로 사용하여 지정된 구성 요소 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">이 형식의 구성 요소에 대한 지정된 특성과 일치하는 속성을 갖는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">지정된 구성 요소에 대해 형식 설명 공급자를 반환합니다.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">지정된 구성 요소와 연결된 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">지정된 형식에 대한 형식 설명 공급자를 반환합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">지정된 형식과 연결된 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">지정된 개체로 리플렉션을 수행하는 데 사용할 수 있는 <see cref="T:System.Type" /> 를 반환합니다.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">지정된 개체에 대한 <see cref="T:System.Type" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">지정된 클래스 형식으로 리플렉션을 수행하는 데 사용할 수 있는 <see cref="T:System.Type" /> 를 반환합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />이(가) <see langword="null" />인 경우</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">지정된 클래스의 <see cref="T:System.Type" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">캐시에서 지정된 구성 요소에 대한 속성 및 이벤트를 지웁니다.</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">속성 또는 이벤트가 변경된 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">캐시에서 지정된 어셈블리에 대한 속성 및 이벤트를 지웁니다.</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">새로 고칠 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" /> 입니다. 이 어셈블리의 각 <see cref="T:System.Type" /> 이 새로 고쳐집니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">캐시에서 지정된 모듈에 대한 속성 및 이벤트를 지웁니다.</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">새로 고칠 모듈을 나타내는 <see cref="T:System.Reflection.Module" /> 입니다. 이 모듈의 각 <see cref="T:System.Type" /> 이 새로 고쳐집니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">캐시에서 지정된 구성 요소 형식에 대한 속성 및 이벤트를 지웁니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">두 개체 간의 연결을 제거합니다.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">기본 <see cref="T:System.Object" />입니다.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">보조 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">기본 개체에 대한 모든 연결을 제거합니다.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">연결의 기본 <see cref="T:System.Object" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">지정한 개체와 연결되어 있는 이전에 추가한 형식 설명 공급자를 제거합니다.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">제거할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="instance" vsli:raw="An instance of the target component.">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">지정한 형식과 연결되어 있는 이전에 추가한 형식 설명 공급자를 제거합니다.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">제거할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">지정한 개체와 연결되어 있는 이전에 추가한 형식 설명 공급자를 제거합니다.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">제거할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="instance" vsli:raw="An instance of the target component.">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">지정한 형식과 연결되어 있는 이전에 추가한 형식 설명 공급자를 제거합니다.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">제거할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">설명자의 이름을 사용하여 설명자를 정렬합니다.</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">정렬할 설명을 포함하는 <see cref="T:System.Collections.IList" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">대상 구성 요소에 대한 COM(구성 요소 개체 모델) 형식 정보에 대한 공급자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">COM 형식 정보 공급자를 나타내는 <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 인스턴스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">대상 구성 요소에서 나타내는 COM(구성 요소 개체 모델) 개체의 형식을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">이 구성 요소가 나타내는 COM 개체의 <see cref="T:System.Type" />, 또는 비 COM 개체의 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">모든 인터페이스 형식에 대한 형식 설명 공급자를 나타내는 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">모든 인터페이스 형식에 대한 사용자 지정 형식 설명 공급자를 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">사용 가능한 형식으로 목록 상자를 채우는 데 사용할 수 있는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">사용 가능한 형식의 형식 배열을 사용하여 <see cref="T:System.ComponentModel.TypeListConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">사용 가능한 형식으로 사용할 <see cref="T:System.Type" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">지정된 컨텍스트를 사용하여 이 변환기가 소스 개체의 지정된 <see cref="T:System.Type" />을 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">소스 개체의 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">지정된 개체를 변환기의 네이티브 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">글꼴을 나타내는 데 사용할 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">이 유효성 검사기를 사용하도록 디자인된 데이터 형식의 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">유효한 값의 표준 집합을 보유하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 또는 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">
        <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />에서 반환된 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />이 가능한 값을 포함하는 단독 목록이므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">16비트 부호 없는 정수 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.UInt16Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">32비트 부호 없는 정수 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.UInt32Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">64비트 부호 없는 정수 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.UInt64Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Version" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.VersionConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.Version" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">컨텍스트 정보를 제공하는 개체입니다.</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">변환할 개체의 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 sourceType을 <see cref="T:System.Version" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">컨텍스트 정보를 제공하는 개체입니다.</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">변환을 위한 대상 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">변환기가 개체를 지정된 대상 형식으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">지정한 개체를 <see cref="T:System.Version" />으로 변환합니다.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">컨텍스트 정보를 제공하는 개체입니다.</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">변환에 사용할 문화권입니다.</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">
        <see cref="T:System.Version" />로 변환할 값입니다.</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">
        <paramref name="value" />는 유효한 <see cref="T:System.Version" /> 문자열이 아닙니다.</exception>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">
        <paramref name="value" />가 <see cref="T:System.Version" /> 값으로 변환되었습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">지정된 값 컨텍스트 및 인수를 사용하여 지정된 값을 지정된 대상 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">변환에 대한 서식 지정 정보를 제공하는 문화권입니다.</param>
      <param name="value" vsli:raw="The value to be converted.">변환할 값입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">value 매개 변수를 변환할 형식입니다.</param>
      <returns vsli:raw="An object that represents the converted value.">변환된 값을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">지정된 값 개체를 이 형식 및 지정된 컨텍스트에 사용할 수 있는지를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The object to test for validity.">유효성을 테스트할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">오류가 아닌 경고로 처리할 예외를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">지정된 serialization 데이터와 컨텍스트를 사용하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">도움말 파일 없이 지정된 메시지를 사용하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">최종 사용자에게 표시할 메시지입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">지정된 예외 및 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">오류에 대한 자세한 설명입니다.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">이 예외의 원인인 내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">지정된 메시지를 사용하고 지정된 도움말 파일에 액세스하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">최종 사용자에게 표시할 메시지입니다.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">사용자가 도움말을 요청하는 경우 표시할 도움말 파일입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">지정된 메시지를 사용하고 지정된 도움말 파일 및 항목에 액세스하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">최종 사용자에게 표시할 메시지입니다.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">사용자가 도움말을 요청하는 경우 표시할 도움말 파일입니다.</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">사용자가 도움말을 요청하는 경우 표시할 도움말 항목입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">매개 변수 이름과 추가 예외 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 설정합니다.</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />가 직렬화하거나 역직렬화한 개체를 직렬화하거나 역직렬화하는 데 사용되는 데이터를 저장합니다.</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">예외를 생성한 스트림의 소스 및 대상을 설명하고, serialization이 해당 컨텍스트 및 호출자가 정의한 추가 컨텍스트를 보유하도록 하는 방법을 설명합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">경고와 관련된 도움말 항목을 가져옵니다.</summary>
      <returns vsli:raw="The Help topic associated with the warning.">경고와 관련된 도움말 항목입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">경고와 관련된 도움말 파일을 가져옵니다.</summary>
      <returns vsli:raw="The Help file associated with the warning.">경고와 관련된 도움말 파일입니다.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">한 데이터 형식에서 다른 데이터 형식으로 색상을 변환합니다. <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 이 클래스에 액세스합니다.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">
        <see cref="T:System.Drawing.ColorConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 개체를 사용하여 이변환기가 호출될 환경에 대한 추가 정보를 가져올 수 있습니다.</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">변환하려는 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">지정된 개체를 변환기의 네이티브 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다. 이 개체를 사용하여 이변환기가 호출될 환경에 대한 추가 정보를 가져올 수 있습니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">색을 나타내는 culture를 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">지정된 개체를 다른 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출될 환경에 대한 추가 정보를 추출할 수 있습니다. 이 값이 <see langword="null" />인지 여부를 항상 확인합니다. 또한 컨텍스트 개체의 속성에서 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">색을 나타내는 culture를 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">이 유효성 검사기를 사용하도록 디자인된 데이터 형식의 표준 값이 포함된 컬렉션을 검색합니다. 데이터 형식이 표준 값 집합을 지원하지 않으면 <see langword="null" />이 반환됩니다.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출될 환경에 대한 추가 정보를 추출할 수 있습니다. 이 값이 <see langword="null" />인지 여부를 항상 확인합니다. 또한 컨텍스트 개체의 속성에서 <see langword="null" />을 반환할 수도 있습니다.</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">유효한 값의 표준 집합이나 <see langword="null" />을 포함하는 컬렉션입니다. 기본 구현에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" />를 호출하여 개체가 지원하는 일반 값 집합을 찾아야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">하나의 데이터 형식에서 다른 데이터 형식으로 <see cref="T:System.Drawing.Point" /> 개체를 변환합니다.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">
        <see cref="T:System.Drawing.PointConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출되는 환경에 대한 추가 정보를 가져올 수 있습니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">변환할 원본 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 개체입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">지정된 개체를 <see cref="T:System.Drawing.Point" /> 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출되는 환경에 대한 추가 정보를 가져올 수 있습니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">특정 culture와 관련된 언어, 달력, culture 규칙 등의 culutre 관련 정보가 들어 있는 개체로, RFC 1766 표준을 따릅니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">변환을 완료할 수 없습니다.</exception>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">지정된 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출되는 환경에 대한 추가 정보를 가져올 수 있습니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">특정 culture와 관련된 언어, 달력, culture 규칙 등의 culutre 관련 정보가 들어 있는 개체로, RFC 1766 표준을 따릅니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">변환을 완료할 수 없습니다.</exception>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">개체의 속성 값 집합이 주어진 경우 이러한 형식의 인스턴스를 만듭니다.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">추가 컨텍스트를 제공하는 형식 설명자입니다.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">새 속성 값의 사전입니다. 이 사전은 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />에서 반환된 각 속성에 대해 이름/값 쌍을 하나씩 포함하는 이름/값 쌍 집합을 포함합니다.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">새로 만들어진 개체를 반환하거나, 개체를 만들 수 없는 경우 <see langword="null" />을 반환합니다. 기본 구현은 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">이 개체의 값을 변경할 때 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />를 호출하여 새 값을 만들어야 할지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 하나 이상의 속성이 변경될 때 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 메서드가 호출되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">이 형식의 속성 집합을 검색합니다. 기본적으로 형식은 속성을 반환하지 않습니다.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">추가 컨텍스트를 제공하는 형식 설명자입니다.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">속성을 가져올 개체의 값입니다.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">속성을 설명하는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">이 데이터 형식에 대해 노출된 속성의 집합입니다. 노출해야 할 속성이 없으면 이 메서드는<see langword="null" />을 반환할 수 있습니다. 기본 구현에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 속성을 지원하는지 여부를 확인합니다. 기본적으로 이 값은 <see langword="false" />입니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">한 데이터 형식에서 다른 데이터 형식으로 사각형을 변환합니다. <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 이 클래스에 액세스합니다.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">
        <see cref="T:System.Drawing.RectangleConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출되는 환경에 대한 추가 정보를 가져올 수 있습니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">변환할 원본 형식입니다.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 변환을 수행할 수 있으면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 개체입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 변환을 수행할 수 있으면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">지정된 개체를 <see cref="T:System.Drawing.Rectangle" /> 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">특정 culture와 관련된 언어, 달력, culture 규칙 등의 culutre 관련 정보가 들어 있는 <see cref="T:System.Globalization.CultureInfo" />로, RFC 1766 표준을 따릅니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">변환을 완료할 수 없습니다.</exception>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">지정된 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">특정 culture와 관련된 언어, 달력, culture 규칙 등의 culutre 관련 정보가 들어 있는 <see cref="T:System.Globalization.CultureInfo" />로, RFC 1766 표준을 따릅니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">변환을 완료할 수 없습니다.</exception>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">개체의 속성 값 집합이 주어진 경우 이러한 형식의 인스턴스를 만듭니다. 이 작업은 변경할 수 없으나 변경할 수 있는 속성을 계속 제공하려고 하는 개체에 유용합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">새 속성 값의 사전입니다. 이 사전은 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 메서드 호출에서 반환된 각 속성에 대해 이름/값 쌍을 하나씩 포함하는 이름/값 쌍 집합을 포함합니다.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">새로 만들어진 개체를 반환하거나, 개체를 만들 수 없는 경우 <see langword="null" />을 반환합니다. 기본 구현은 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">이 개체의 값을 변경할 때 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />를 호출하여 새 값을 만들어야 할지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">추가 컨텍스트를 제공하는 형식 설명자입니다.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 하나 이상 변경할 때 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />를 호출해야 하면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">이 형식의 속성 집합을 검색합니다. 기본적으로 형식은 속성을 반환하지 않습니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">속성을 가져올 개체의 값입니다.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">속성을 설명하는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">이 데이터 형식에 대해 노출되어야 하는 속성의 집합을 반환합니다. 노출해야 할 속성이 없으면 <see langword="null" />이 반환될 수 있습니다. 기본 구현에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 속성을 지원하는지 여부를 확인합니다. 기본적으로 이 값은 <see langword="false" />입니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 개체의 속성을 찾기 위해 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />를 호출해야 하면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">
        <see cref="T:System.Drawing.SizeConverter" /> 클래스는 하나의 데이터 형식에서 다른 데이터 형식으로 변환하는 데 사용합니다. <see cref="T:System.ComponentModel.TypeDescriptor" /> 개체를 통해 이 클래스에 액세스합니다.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">새 <see cref="T:System.Drawing.SizeConverter" /> 개체를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">변환할 원본 형식입니다.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">이 개체가 변환을 수행할 수 있으면 이 메서드는 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 변환을 수행할 수 있으면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">지정된 개체를 변환기의 네이티브 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">특정 culture와 관련된 언어, 달력 및 culture 규칙 등의 culutre 관련 정보가 들어 있는 <see cref="T:System.Globalization.CultureInfo" /> 개체로, RFC 1766 표준을 따릅니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">변환을 완료할 수 없습니다.</exception>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">지정된 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">특정 culture와 관련된 언어, 달력 및 culture 규칙 등의 culutre 관련 정보가 들어 있는 <see cref="T:System.Globalization.CultureInfo" /> 개체로, RFC 1766 표준을 따릅니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">변환을 완료할 수 없습니다.</exception>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">지정된 개체의 속성 값 집합을 사용하여 이러한 형식의 개체를 만듭니다. 이는 변경할 수 있는 속성을 가진 변경할 수 없는 개체를 만드는 데 유용합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">새 속성 값의 사전입니다. 이 사전은 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 메서드에서 반환된 각 속성에 대해 이름/값 쌍을 하나씩 포함하는 이름/값 쌍 집합을 포함합니다.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">새로 만들어진 개체를 반환하거나, 개체를 만들 수 없는 경우 <see langword="null" />을 반환합니다. 기본 구현은 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">이 개체의 값을 변경할 때 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 메서드를 호출하여 새 값을 만들어야 할지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">이 개체의 하나 이상의 속성이 변경될 때 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 개체가 호출되어야 하면 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">이 형식의 속성 집합을 검색합니다. 기본적으로 형식은 반환할 속성을 갖지 않습니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">속성을 가져올 개체의 값입니다.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">속성을 설명하는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">이 데이터 형식에 대해 노출되어야 하는 속성의 집합을 반환합니다. 노출해야 할 속성이 없으면 <see langword="null" />이 반환될 수 있습니다. 기본 구현에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">이 개체가 속성을 지원하는지 여부를 결정합니다. 기본적으로 이 값은 <see langword="false" />입니다.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">이 개체의 속성을 찾기 위해 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 메서드를 호출해야 하면 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">한 형식에서 다른 형식으로 <see cref="T:System.Drawing.SizeF" /> 개체를 변환합니다.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">
        <see cref="T:System.Drawing.SizeFConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">변환기가 지정된 컨텍스트를 사용하여 지정된 형식을 <see cref="T:System.Drawing.SizeF" /> 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">변환을 수행할 수 있음을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">
        <see cref="T:System.Drawing.SizeFConverter" />가 <see cref="T:System.Drawing.SizeF" />를 지정된 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">지정한 컨텍스트와 culture 정보를 사용하여 지정된 개체를 이 변환기의 유형으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">현재 culture로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">지정한 컨텍스트와 culture 정보를 사용하여 지정된 값 개체를 지정된 유형으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> null이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">값 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">지정된 컨텍스트를 사용하여 지정된 속성 값으로 <see cref="T:System.Drawing.SizeF" />의 인스턴스를 만듭니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">속성 이름과 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">새 <see cref="T:System.Object" />를 나타내는 <see cref="T:System.Drawing.SizeF" />이거나, 개체를 만들 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">이 개체의 값을 변경할 때 <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> 메서드를 호출하여 새 값을 만들어야 하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">지정된 컨텍스트와 특성을 사용하여 <see cref="T:System.Drawing.SizeF" /> 형식의 속성 집합을 검색합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">속성을 반환할 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">속성을 설명하는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">속성을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">
        <see cref="T:System.Drawing.SizeF" /> 형식이 속성을 지원하는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 클래스는 들어오는 클라이언트 연결의 유효성을 검사하기 위해 서버에서 사용할 확장 보호 정책의 형식 변환기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">이 변환기가 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> 개체입니다. <see langword="null" />이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">변환할 <see cref="T:System.Object" />입니다. 이는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 개체여야 합니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">값 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">변환을 수행할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">변환된 <paramref name="value" /> 매개 변수를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트가 발생한 날짜/시간을 가져옵니다.</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트가 발생한 시간입니다.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">
        <see cref="E:System.Timers.Timer.Elapsed" />의 <see cref="T:System.Timers.Timer" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">이벤트 데이터가 포함된 <see cref="T:System.Timers.ElapsedEventArgs" /> 개체입니다.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">반복 이벤트를 생성하는 옵션으로 설정된 간격 후 이벤트를 생성합니다.</summary>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">간격이 경과하면 발생합니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">
        <see cref="T:System.Timers.Timer" /> 클래스의 새 인스턴스를 초기화하고 모든 속성을 각각의 초기 값으로 설정합니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">
        <see cref="T:System.Timers.Timer" /> 클래스의 새 인스턴스를 초기화하고 <see cref="P:System.Timers.Timer.Interval" /> 속성을 지정된 시간(밀리초)으로 설정합니다.</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">이벤트 간의 시간(밀리초 단위)입니다. 값은 0보다 크고 <see cref="F:System.Int32.MaxValue" />보다 작거나 같아야 합니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="interval" /> 매개 변수 값이 0보다 작거나 같거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Timers.Timer" />의 런타임 초기화를 시작합니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">
        <see cref="T:System.Timers.Timer" />에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">현재 <see cref="T:System.Timers.Timer" />에서 사용하는 모든 리소스를 해제합니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Timers.Timer" />의 런타임 초기화를 마칩니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Timers.Timer.Enabled" />를 <see langword="true" />로 설정하여 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시킵니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">
        <see cref="T:System.Timers.Timer" />는 <see cref="F:System.Int32.MaxValue" /> + 1보다 크거나 같은 간격으로 만들거나 0보다 작은 간격으로 설정합니다.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Timers.Timer.Enabled" />를 <see langword="false" />로 설정하여 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트 발생을 중지합니다.</summary>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">
        <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 한 번만(<see langword="false" />) 발생시켜야 하는지 반복해서(<see langword="true" />) 발생시켜야 하는지 나타내는 부울을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">간격이 경과할 때마다 <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="true" />이고, 첫 번째 간격이 경과한 후 한 번만 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">
        <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">타이머가 삭제되어 이 속성을 설정할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">타이머를 사용하기 전에 <see cref="P:System.Timers.Timer.Interval" /> 속성은 <see cref="F:System.Int32.MaxValue" /> 보다 큰 값으로 설정되었습니다.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="true" />이고 그러지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시킬 간격(밀리초)을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">간격이 0 이하인 경우  
  
또는 
간격은 <see cref="F:System.Int32.MaxValue" /> 보다 크며, 타이머는 현재 사용 가능합니다. 타이머를 현재 사용할 수 없는 경우, 사용 가능하게 될 때까지 예외가 throw되지 않습니다.</exception>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트 간의 시간(밀리초)입니다. 값은 0보다 크고 <see cref="F:System.Int32.MaxValue" />보다 작거나 같아야 합니다. 기본값은 100밀리초입니다.</returns>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">디자인 모드에서 <see cref="T:System.Timers.Timer" />를 컨테이너에 바인딩하는 사이트를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">
        <see cref="T:System.Timers.Timer" /> 개체를 컨테이너에 바인딩하는 사이트를 나타내는 <see cref="T:System.ComponentModel.ISite" /> 인터페이스입니다.</returns>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">시간 간격이 경과할 때 발행되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">시간 간격이 경과할 때 발행되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 나타내는 <see cref="T:System.ComponentModel.ISynchronizeInvoke" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">이벤트, Extender 또는 속성을 참조할 때 비주얼 디자이너에서 표시할 수 있는 설명을 설정합니다.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">
        <see cref="T:System.Timers.TimersDescriptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="description" vsli:raw="The description to use.">사용할 설명입니다.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">이벤트, Extender 또는 속성을 참조할 때 비주얼 디자이너에서 표시할 수 있는 설명을 가져옵니다.</summary>
      <returns vsli:raw="The description for the event, extender, or property.">이벤트, extender 또는 속성에 대한 설명입니다.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">
        <see cref="T:System.String" /> 형식을 <see cref="T:System.Uri" /> 형식으로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">
        <see cref="T:System.UriTypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">이 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">변환할 원본 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="sourceType" />이 <see cref="T:System.String" /> 형식이거나 <see cref="T:System.Uri" /> 형식을 <paramref name="sourceType" />에서 지정할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">지정된 컨텍스트를 사용하여 이 변환기에서 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="destinationType" />이 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> 또는 <see cref="T:System.Uri" /> 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">지정한 컨텍스트와 culture 정보를 사용하여 지정된 개체를 이 변환기의 유형으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">현재 culture로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" />이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">변환할 수 없는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">지정된 값 개체가 <see cref="T:System.Uri" />인지 아니면 지정된 값 개체에서 <see cref="T:System.Uri" />를 만들 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">유효성 검사를 테스트할 <see cref="T:System.Object" /> 입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />가 <see cref="T:System.Uri" />이거나 <see cref="T:System.String" />를 만들 수 있는 원본 <see cref="T:System.Uri" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Transactions.Local</name>
  </assembly>
  <members>
    <member name="T:System.Transactions.CommittableTransaction">
      <summary vsli:raw="Describes a committable transaction.">커밋할 수 있는 트랜잭션에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.CommittableTransaction&quot; /&gt; class.">
        <see cref="T:System.Transactions.CommittableTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98, Windows 98 Second Edition 또는 Windows Millennium Edition에서 트랜잭션을 만들려고 한 경우</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.CommittableTransaction&quot; /&gt; class with the specified &lt;paramref name=&quot;timeout&quot; /&gt; value.">지정된 <see cref="T:System.Transactions.CommittableTransaction" /> 값을 사용하여 <paramref name="timeout" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="timeout" vsli:raw="The maximum amount of time the transaction can exist, before it is aborted.">트랜잭션이 중단되기 전에 존재할 수 있는 최대 시간입니다.</param>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98, Windows 98 Second Edition 또는 Windows Millennium Edition에서 트랜잭션을 만들려고 한 경우</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.CommittableTransaction&quot; /&gt; class with the specified transaction options.">지정된 트랜잭션 옵션을 사용하여 <see cref="T:System.Transactions.CommittableTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; structure that describes the transaction options to use for the new transaction.">새 트랜잭션에 사용할 트랜잭션 옵션을 설명하는 <see cref="T:System.Transactions.TransactionOptions" /> 구조체입니다.</param>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98, Windows 98 Second Edition 또는 Windows Millennium Edition에서 트랜잭션을 만들려고 한 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is invalid.">
        <paramref name="options" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
      <summary vsli:raw="Begins an attempt to commit the transaction asynchronously.">비동기적으로 트랜잭션을 커밋하려는 시도를 시작합니다.</summary>
      <param name="asyncCallback" vsli:raw="The &lt;see cref=&quot;T:System.AsyncCallback&quot; /&gt; delegate that is invoked when the transaction completes. This parameter can be &lt;see langword=&quot;null&quot; /&gt;, in which case the application is not notified of the transaction's completion. Instead, the application must use the &lt;see cref=&quot;T:System.IAsyncResult&quot; /&gt; interface to check for completion and wait accordingly, or call &lt;see cref=&quot;M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)&quot; /&gt; to wait for completion.">트랜잭션이 완료될 때 호출되는 <see cref="T:System.AsyncCallback" /> 대리자입니다. 이 매개 변수는 <see langword="null" />일 수 있으며, 이 경우 애플리케이션은 트랜잭션 완료에 대한 알림을 받지 않습니다. 대신 애플리케이션에서는 <see cref="T:System.IAsyncResult" /> 인터페이스를 사용하여 완료를 확인하고 대기하거나, <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" />을 호출하여 완료될 때까지 대기합니다.</param>
      <param name="asyncState" vsli:raw="An object, which might contain arbitrary state information, associated with the asynchronous commitment. This object is passed to the callback, and is not interpreted by &lt;see cref=&quot;N:System.Transactions&quot; /&gt;. A null reference is permitted.">비동기 커밋과 관련되어 있으며 임의의 상태 정보를 포함할 수 있는 개체입니다. 이 개체는 콜백에 전달되고 <see cref="N:System.Transactions" />에 의해 해석되지 않습니다. null 참조는 허용됩니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IAsyncResult&quot; /&gt; interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.">비동기 작업 상태를 확인하거나 작업이 완료될 때까지 대기하기 위해 호출자가 사용할 수 있는 <see cref="T:System.IAsyncResult" /> 인터페이스입니다.</returns>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.Commit">
      <summary vsli:raw="Attempts to commit the transaction.">트랜잭션을 커밋하려고 시도합니다.</summary>
      <exception cref="T:System.Transactions.TransactionInDoubtException" vsli:raw="&lt;see cref=&quot;M:System.Transactions.CommittableTransaction.Commit&quot; /&gt; is called on a transaction and the transaction becomes &lt;see cref=&quot;F:System.Transactions.TransactionStatus.InDoubt&quot; /&gt;.">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" />이 트랜잭션에서 호출되고 트랜잭션이 <see cref="F:System.Transactions.TransactionStatus.InDoubt" />가 되는 경우</exception>
      <exception cref="T:System.Transactions.TransactionAbortedException" vsli:raw="&lt;see cref=&quot;M:System.Transactions.CommittableTransaction.Commit&quot; /&gt; is called and the transaction rolls back for the first time.">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" />이 호출되고 트랜잭션이 처음으로 롤백된 경우</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
      <summary vsli:raw="Ends an attempt to commit the transaction asynchronously.">트랜잭션을 비동기적으로 커밋하려는 시도를 끝냅니다.</summary>
      <param name="asyncResult" vsli:raw="The &lt;see cref=&quot;T:System.IAsyncResult&quot; /&gt; object associated with the asynchronous commitment.">비동기 커밋과 관련된 <see cref="T:System.IAsyncResult" /> 개체입니다.</param>
      <exception cref="T:System.Transactions.TransactionAbortedException" vsli:raw="&lt;see cref=&quot;M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)&quot; /&gt; is called and the transaction rolls back for the first time.">
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />이 호출되고 트랜잭션이 처음으로 롤백된 경우</exception>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
      <summary vsli:raw="Gets the object provided as the last parameter of the &lt;see cref=&quot;M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)&quot; /&gt; method call.">
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> 메서드 호출의 마지막 매개 변수로 제공된 개체를 가져옵니다.</summary>
      <returns vsli:raw="The object provided as the last parameter of the &lt;see cref=&quot;M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)&quot; /&gt; method call.">
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> 메서드 호출의 마지막 매개 변수로 제공된 개체입니다.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; that is used to wait for an asynchronous operation to complete.">비동기 작업이 완료될 때까지 기다리는 데 사용하는 <see cref="T:System.Threading.WaitHandle" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; that is used to wait for an asynchronous operation to complete.">비동기 작업이 완료될 때까지 기다리는 데 사용하는 <see cref="T:System.Threading.WaitHandle" />입니다.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
      <summary vsli:raw="Gets an indication of whether the asynchronous commit operation completed synchronously.">비동기 커밋 작업이 동기적으로 완료되었는지 여부를 나타내는 표시를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the asynchronous commit operation completed synchronously; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt; even if the operation completed synchronously.">비동기 커밋 작업이 동기적으로 완료되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 작업이 동기적으로 완료된 경우에도 이 속성은 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
      <summary vsli:raw="Gets an indication whether the asynchronous commit operation has completed.">비동기 커밋 작업이 완료되었는지 여부를 나타내는 표시를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation is complete; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">작업이 완료되면<see langword="true" /> 이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Transactions.DependentCloneOption">
      <summary vsli:raw="Controls what kind of dependent transaction to create.">만들려는 종속 트랜잭션의 종류를 제어합니다.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.BlockCommitUntilComplete">
      <summary vsli:raw="The dependent transaction blocks the commit process of the transaction until the parent transaction times out, or &lt;see cref=&quot;M:System.Transactions.DependentTransaction.Complete&quot; /&gt; is called. In this case, additional work can be done on the transaction and new enlistments can be created.">종속 트랜잭션은 부모 트랜잭션 제한 시간이 초과되거나 <see cref="M:System.Transactions.DependentTransaction.Complete" />가 호출될 때까지 트랜잭션의 커밋 프로세스를 차단합니다. 이 경우, 트랜잭션에서 추가 작업을 수행할 수 있으며 새 참여 항목을 만들 수 있습니다.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.RollbackIfNotComplete">
      <summary vsli:raw="The dependent transaction automatically aborts the transaction if Commit is called on the parent transaction before &lt;see cref=&quot;M:System.Transactions.DependentTransaction.Complete&quot; /&gt; is called.">
        <see cref="M:System.Transactions.DependentTransaction.Complete" />가 호출되기 전에 부모 트랜잭션에서 커밋이 호출되면 종속 트랜잭션이 자동으로 트랜잭션을 중단합니다.</summary>
    </member>
    <member name="T:System.Transactions.DependentTransaction">
      <summary vsli:raw="Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.">애플리케이션이 트랜잭션의 작업을 중지할 때까지 트랜잭션이 커밋되지 않도록 하는 트랜잭션 복제본에 대해 설명합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Transactions.DependentTransaction.Complete">
      <summary vsli:raw="Attempts to complete the dependent transaction.">종속 트랜잭션을 완료하려고 시도합니다.</summary>
      <exception cref="T:System.Transactions.TransactionException" vsli:raw="Any attempt for additional work on the transaction after this method is called. These include invoking methods such as &lt;see cref=&quot;Overload:System.Transactions.Transaction.EnlistVolatile&quot; /&gt;, &lt;see cref=&quot;Overload:System.Transactions.Transaction.EnlistDurable&quot; /&gt;, &lt;see cref=&quot;M:System.Transactions.Transaction.Clone&quot; /&gt;, &lt;see cref=&quot;M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)&quot; /&gt; , or any serialization operations on the transaction.">이 메서드가 호출된 후 진행되는 트랜잭션에 대한 추가 작업 시도입니다. 여기에는 <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />, <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />, <see cref="M:System.Transactions.Transaction.Clone" />, <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> 등의 호출 메서드나 트랜잭션에 대한 serialization 작업이 포함됩니다.</exception>
    </member>
    <member name="T:System.Transactions.Enlistment">
      <summary vsli:raw="Facilitates communication between an enlisted transaction participant and the transaction manager during the final phase of the transaction.">트랜잭션의 마지막 단계에서 참여한 트랜잭션 참가 요소와 트랜잭션 관리자 간의 통신을 용이하게 합니다.</summary>
    </member>
    <member name="M:System.Transactions.Enlistment.Done">
      <summary vsli:raw="Indicates that the transaction participant has completed its work.">트랜잭션 참가 요소가 작업을 완료했음을 나타냅니다.</summary>
    </member>
    <member name="T:System.Transactions.EnlistmentOptions">
      <summary vsli:raw="Determines whether the object should be enlisted during the prepare phase.">준비 단계에서 개체를 참여시킬지 여부를 결정합니다.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired">
      <summary vsli:raw="The object must enlist during the initial phase of the commitment process.">커밋 프로세스의 초기 단계에서 개체가 참여해야 합니다.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.None">
      <summary vsli:raw="The object does not require enlistment during the initial phase of the commitment process.">커밋 프로세스의 초기 단계에서 개체가 참여할 필요는 없습니다.</summary>
    </member>
    <member name="T:System.Transactions.EnterpriseServicesInteropOption">
      <summary vsli:raw="Specifies how distributed transactions interact with COM+ transactions.">분산 트랜잭션이 COM+ 트랜잭션과 상호 작용하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Automatic">
      <summary vsli:raw="Search for an existing COM+ context and synchronize with it if one exists.">기존 COM+ 컨텍스트를 검색하여 이 컨텍스트가 있으면 동기화합니다.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Full">
      <summary vsli:raw="The &lt;see cref=&quot;N:System.EnterpriseServices&quot; /&gt; context (which can be retrieved by calling the static method &lt;see cref=&quot;P:System.EnterpriseServices.ContextUtil.Transaction&quot; /&gt; of the &lt;see cref=&quot;T:System.EnterpriseServices.ContextUtil&quot; /&gt; class) and the &lt;see cref=&quot;N:System.Transactions&quot; /&gt; ambient transaction (which can be retrieved by calling the static method &lt;see cref=&quot;P:System.Transactions.Transaction.Current&quot; /&gt; of the &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; class) are always synchronized. This introduces a performance penalty because new &lt;see cref=&quot;N:System.EnterpriseServices&quot; /&gt; contexts may need to be created.">
        <see cref="N:System.EnterpriseServices" /> 클래스의 정적 <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> 메서드를 호출하여 검색할 수 있는 <see cref="T:System.EnterpriseServices.ContextUtil" /> 컨텍스트와 <see cref="N:System.Transactions" /> 클래스의 정적 <see cref="P:System.Transactions.Transaction.Current" /> 메서드를 호출하여 검색할 수 있는 <see cref="T:System.Transactions.Transaction" /> 앰비언트 트랜잭션은 항상 동기화됩니다. 따라서 새 <see cref="N:System.EnterpriseServices" /> 컨텍스트를 만들어야 하므로 성능이 저하됩니다.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.None">
      <summary vsli:raw="There is no synchronization between &lt;see cref=&quot;P:System.EnterpriseServices.ContextUtil.Transaction&quot; /&gt; and &lt;see cref=&quot;P:System.Transactions.Transaction.Current&quot; /&gt;.">
        <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" />과 <see cref="P:System.Transactions.Transaction.Current" /> 사이에는 동기화가 이루어지지 않습니다.</summary>
    </member>
    <member name="T:System.Transactions.HostCurrentTransactionCallback">
      <summary vsli:raw="Provides a mechanism for the hosting environment to supply its own default notion of &lt;see cref=&quot;P:System.Transactions.Transaction.Current&quot; /&gt;.">호스팅 환경에서 <see cref="P:System.Transactions.Transaction.Current" />의 고유한 기본 개념을 제시하기 위한 메커니즘을 제공합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; object.">
        <see cref="T:System.Transactions.Transaction" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Transactions.IDtcTransaction">
      <summary vsli:raw="Describes a DTC transaction.">DTC 트랜잭션에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Aborts a transaction.">트랜잭션을 중단합니다.</summary>
      <param name="reason" vsli:raw="An optional &lt;see cref=&quot;T:System.EnterpriseServices.BOID&quot; /&gt; that indicates why the transaction is being aborted. This parameter can be &lt;see langword=&quot;null&quot; /&gt;, indicating that no reason for the abort is provided.">트랜잭션이 중단되는 이유를 나타내는 선택적 <see cref="T:System.EnterpriseServices.BOID" />입니다. 이 매개 변수는 중단된 이유가 없음을 나타내는 <see langword="null" />이 될 수 있습니다.</param>
      <param name="retaining" vsli:raw="This value must be &lt;see langword=&quot;false&quot; /&gt;.">이 값은 <see langword="false" />여야 합니다.</param>
      <param name="async" vsli:raw="When &lt;paramref name=&quot;async&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, an asynchronous abort is performed and the caller must use &lt;see langword=&quot;ITransactionOutcomeEvents&quot; /&gt; to learn about the outcome of the transaction.">
        <paramref name="async" />가 <see langword="true" />이면 비동기 중단이 수행되고 호출자는 <see langword="ITransactionOutcomeEvents" />를 사용하여 트랜잭션의 결과를 확인해야 합니다.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Commits a transaction.">트랜잭션을 커밋합니다.</summary>
      <param name="retaining" vsli:raw="This value must be &lt;see langword=&quot;false&quot; /&gt;.">이 값은 <see langword="false" />여야 합니다.</param>
      <param name="commitType" vsli:raw="A value taken from the OLE DB enumeration &lt;see langword=&quot;XACTTC&quot; /&gt;.">OLE DB 열거형 <see langword="XACTTC" />에서 가져온 값입니다.</param>
      <param name="reserved" vsli:raw="This value must be zero.">이 값은 0이어야 합니다.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)">
      <summary vsli:raw="Retrieves information about a transaction.">트랜잭션에 대한 정보를 검색합니다.</summary>
      <param name="transactionInformation" vsli:raw="Pointer to the caller-allocated &lt;see cref=&quot;T:System.EnterpriseServices.XACTTRANSINFO&quot; /&gt; structure that will receive information about the transaction. This value must not be &lt;see langword=&quot;null&quot; /&gt;.">트랜잭션에 대한 정보를 받는 호출자가 할당한 <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> 구조에 대한 포인터입니다. 이 값은 <see langword="null" />이면 안 됩니다.</param>
    </member>
    <member name="T:System.Transactions.IEnlistmentNotification">
      <summary vsli:raw="Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.">리소스 관리자가 참여를 위해 등록할 때 트랜잭션 관리자에 대한 2단계 커밋 알림 콜백을 제공하기 위해 구현해야 하는 인터페이스에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)">
      <summary vsli:raw="Notifies an enlisted object that a transaction is being committed.">참여한 개체에게 트랜잭션이 커밋 중임을 알립니다.</summary>
      <param name="enlistment" vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object used to send a response to the transaction manager.">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)">
      <summary vsli:raw="Notifies an enlisted object that the status of a transaction is in doubt.">트랜잭션이 의심스러운 상태임을 참여한 개체에게 알립니다.</summary>
      <param name="enlistment" vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object used to send a response to the transaction manager.">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)">
      <summary vsli:raw="Notifies an enlisted object that a transaction is being prepared for commitment.">트랜잭션이 커밋 준비 중임을 참여한 개체에게 알립니다.</summary>
      <param name="preparingEnlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.PreparingEnlistment&quot; /&gt; object used to send a response to the transaction manager.">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.PreparingEnlistment" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)">
      <summary vsli:raw="Notifies an enlisted object that a transaction is being rolled back (aborted).">트랜잭션이 롤백(중단) 중임을 참여한 개체에게 알립니다.</summary>
      <param name="enlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object used to send a response to the transaction manager.">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</param>
    </member>
    <member name="T:System.Transactions.IPromotableSinglePhaseNotification">
      <summary vsli:raw="Describes an object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.">리소스 관리자 내부의 분산되지 않은 트랜잭션에 대한 커밋 대리자로 작동하는 개체에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Initialize">
      <summary vsli:raw="Notifies a transaction participant that enlistment has completed successfully.">참여가 성공적으로 완료되었음을 트랜잭션 참가 요소에게 알립니다.</summary>
      <exception cref="T:System.Transactions.TransactionException" vsli:raw="An attempt to enlist or serialize a transaction.">트랜잭션을 참여시키거나 serialize하려는 경우</exception>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary vsli:raw="Notifies an enlisted object that the transaction is being rolled back.">참여한 개체에게 트랜잭션이 롤백 중임을 알립니다.</summary>
      <param name="singlePhaseEnlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; object used to send a response to the transaction manager.">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary vsli:raw="Notifies an enlisted object that the transaction is being committed.">참여한 개체에게 트랜잭션이 커밋 중임을 알립니다.</summary>
      <param name="singlePhaseEnlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; interface used to send a response to the transaction manager.">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 인터페이스입니다.</param>
    </member>
    <member name="T:System.Transactions.ISimpleTransactionSuperior">
      <summary vsli:raw="Represents a transaction that is not a root transaction, but can be escalated to be managed by the MSDTC.">루트 트랜잭션은 아니지만 MSDTC로 관리하도록 에스컬레이션할 수 있는 트랜잭션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Transactions.ISimpleTransactionSuperior.Rollback">
      <summary vsli:raw="Notifies an enlisted object that the transaction is being rolled back.">참여한 개체에게 트랜잭션이 롤백 중임을 알립니다.</summary>
    </member>
    <member name="T:System.Transactions.ISinglePhaseNotification">
      <summary vsli:raw="Describes a resource object that supports single phase commit optimization to participate in a transaction.">트랜잭션에 참여하기 위해 단일 단계 커밋 최적화를 지원하는 리소스 개체를 설명합니다.</summary>
    </member>
    <member name="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary vsli:raw="Represents the resource manager's implementation of the callback for the single phase commit optimization.">1단계 커밋 최적화를 사용하기 위한 리소스 관리자의 콜백 구현을 나타냅니다.</summary>
      <param name="singlePhaseEnlistment" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; used to send a response to the transaction manager.">트랜잭션 관리자에게 응답을 보내는 데 사용되는 <see cref="T:System.Transactions.SinglePhaseEnlistment" />입니다.</param>
    </member>
    <member name="T:System.Transactions.IsolationLevel">
      <summary vsli:raw="Specifies the isolation level of a transaction.">트랜잭션의 격리 수준을 지정합니다.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Chaos">
      <summary vsli:raw="The pending changes from more highly isolated transactions cannot be overwritten.">격리 수준이 높은 트랜잭션에서 보류 중인 변경은 덮어쓸 수 없습니다.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadCommitted">
      <summary vsli:raw="Volatile data cannot be read during the transaction, but can be modified.">트랜잭션을 수행하는 동안 일시적 데이터를 읽을 수 없지만 수정할 수는 있습니다.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadUncommitted">
      <summary vsli:raw="Volatile data can be read and modified during the transaction.">트랜잭션을 수행하는 동안 일시적 데이터를 읽고 수정할 수 있습니다.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.RepeatableRead">
      <summary vsli:raw="Volatile data can be read but not modified during the transaction. New data can be added during the transaction.">트랜잭션을 수행하는 동안 일시적 데이터를 읽을 수 있지만 수정할 수는 없습니다. 트랜잭션을 수행하는 동안 새 데이터를 추가할 수 있습니다.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Serializable">
      <summary vsli:raw="Volatile data can be read but not modified, and no new data can be added during the transaction.">트랜잭션을 수행하는 동안 일시적 데이터를 읽을 수 있지만 수정할 수는 없으며 새 데이터를 추가할 수도 없습니다.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Snapshot">
      <summary vsli:raw="&lt;para&gt;Volatile data can be read. Before a transaction modifies data, it verifies if another transaction has changed the data after it was initially read. If the data has been updated, an error is raised. This allows a transaction to get to the previously committed value of the data.&lt;/para&gt;&lt;para&gt;When you try to promote a transaction that was created with the &lt;see langword=&quot;Snapshot&quot; /&gt; isolation level, an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the error message &quot;Transactions with IsolationLevel Snapshot cannot be promoted&quot;.&lt;/para&gt;">
        <para>일시적 데이터를 읽을 수 있습니다. 트랜잭션은 데이터를 수정하기 전에, 데이터가 처음 읽혀진 후 다른 트랜잭션이 이 데이터를 변경했는지 확인합니다. 데이터가 업데이트된 경우 오류가 발생합니다. 이 경우 트랜잭션이 이전에 커밋된 데이터 값에 영향을 미칠 수 있습니다.</para>
        <para>
          <see langword="Snapshot" /> 격리 수준으로 만든 트랜잭션을 승격하려고 하면 "IsolationLevel 스냅샷이 있는 트랜잭션을 승격할 수 없습니다"라는 오류 메시지와 함께 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</para>
      </summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Unspecified">
      <summary vsli:raw="A different isolation level than the one specified is being used, but the level cannot be determined. An exception is thrown if this value is set.">지정된 격리 수준과 다른 수준이 사용되지만 수준을 결정할 수는 없습니다. 이 값을 설정하면 예외가 throw됩니다.</summary>
    </member>
    <member name="T:System.Transactions.ITransactionPromoter">
      <summary vsli:raw="Describes a delegated transaction for an existing transaction that can be escalated to be managed by the MSDTC when needed.">필요할 때 MSDTC에서 관리하도록 에스컬레이션할 수 있는 기존 트랜잭션의 위임된 트랜잭션에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Transactions.ITransactionPromoter.Promote">
      <summary vsli:raw="Notifies an enlisted object that an escalation of the delegated transaction has been requested.">위임된 트랜잭션의 에스컬레이션이 요청되었음을 참여한 개체에 알립니다.</summary>
      <returns vsli:raw="A transmitter/receiver propagation token that marshals a distributed transaction. For more information, see &lt;see cref=&quot;M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])&quot; /&gt;.">분산 트랜잭션을 마샬링하는 전송자/수신자 전파 토큰입니다. 자세한 내용은 <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />를 참조하세요.</returns>
    </member>
    <member name="T:System.Transactions.PreparingEnlistment">
      <summary vsli:raw="Facilitates communication between an enlisted transaction participant and the transaction manager during the Prepare phase of the transaction.">트랜잭션의 준비 단계에서 참여한 트랜잭션 참가 요소와 트랜잭션 관리자 간의 통신을 용이하게 합니다.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback">
      <summary vsli:raw="Indicates that the transaction should be rolled back.">트랜잭션을 롤백해야 함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)">
      <summary vsli:raw="Indicates that the transaction should be rolled back.">트랜잭션을 롤백해야 함을 나타냅니다.</summary>
      <param name="e" vsli:raw="An explanation of why a rollback is triggered.">롤백이 트리거되는 이유에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.Prepared">
      <summary vsli:raw="Indicates that the transaction can be committed.">트랜잭션이 커밋될 수 있음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.RecoveryInformation">
      <summary vsli:raw="Gets the recovery information of an enlistment.">참여 항목의 복구 정보를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An attempt to get recovery information inside a volatile enlistment, which does not generate any recovery information.">복구 정보를 생성하지 않는 일시적 참여 항목 내의 복구 정보를 가져오려고 한 경우</exception>
      <returns vsli:raw="The recovery information of an enlistment.">참여 항목의 복구 정보입니다.</returns>
    </member>
    <member name="T:System.Transactions.SinglePhaseEnlistment">
      <summary vsli:raw="Provides a set of callbacks that facilitate communication between a participant enlisted for Single Phase Commit and the transaction manager when the &lt;see cref=&quot;M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)&quot; /&gt; notification is received.">
        <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" /> 알림이 수신될 때 1단계 커밋에 참여한 참가 요소와 트랜잭션 관리자 사이의 통신을 원활하게 하는 콜백 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the transaction should be rolled back.">트랜잭션 관리자에게 트랜잭션을 롤백해야 한다고 알리는 데 사용되는 콜백을 나타냅니다.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted(System.Exception)">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the transaction should be rolled back, and provides an explanation.">트랜잭션 관리자에게 트랜잭션을 롤백해야 한다고 알리는 데 사용되는 콜백을 나타내며 설명을 제공합니다.</summary>
      <param name="e" vsli:raw="An explanation of why a rollback is initiated.">롤백이 시작되는 이유에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Committed">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the SinglePhaseCommit was successful.">트랜잭션 관리자에게 SinglePhaseCommit이 성공적임을 알리는 데 사용되는 콜백을 나타냅니다.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the status of the transaction is in doubt.">트랜잭션 관리자에게 트랜잭션 상태가 의심스럽다고 알리는 데 사용되는 콜백을 나타냅니다.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt(System.Exception)">
      <summary vsli:raw="Represents a callback that is used to indicate to the transaction manager that the status of the transaction is in doubt, and provides an explanation.">트랜잭션 관리자에게 트랜잭션 상태가 의심스럽다고 알리는 데 사용되는 콜백을 나타내며 설명을 제공합니다.</summary>
      <param name="e" vsli:raw="An explanation of why the transaction is in doubt.">트랜잭션이 의심스러운 이유에 대한 설명입니다.</param>
    </member>
    <member name="T:System.Transactions.SubordinateTransaction">
      <summary vsli:raw="Represents a non-rooted transaction that can be delegated. This class cannot be inherited.">위임될 수 있는 루트가 아닌 트랜잭션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Transactions.SubordinateTransaction.#ctor(System.Transactions.IsolationLevel,System.Transactions.ISimpleTransactionSuperior)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.SubordinateTransaction&quot; /&gt; class.">
        <see cref="T:System.Transactions.SubordinateTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="isoLevel" vsli:raw="The isolation level of the transaction.">트랜잭션의 격리 수준입니다.</param>
      <param name="superior" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.ISimpleTransactionSuperior&quot; /&gt;.">
        <see cref="T:System.Transactions.ISimpleTransactionSuperior" />
      </param>
    </member>
    <member name="T:System.Transactions.Transaction">
      <summary vsli:raw="Represents a transaction.">트랜잭션을 나타냅니다.</summary>
    </member>
    <member name="E:System.Transactions.Transaction.TransactionCompleted">
      <summary vsli:raw="Indicates that the transaction is completed.">트랜잭션이 완료되었음을 나타냅니다.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="An attempt to subscribe this event on a transaction that has been disposed.">삭제된 트랜잭션에 이 이벤트를 등록하려고 한 경우</exception>
    </member>
    <member name="M:System.Transactions.Transaction.Clone">
      <summary vsli:raw="Creates a clone of the transaction.">트랜잭션의 복제본을 만듭니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; that is a copy of the current transaction object.">현재 트랜잭션 개체의 복사본인 <see cref="T:System.Transactions.Transaction" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)">
      <summary vsli:raw="Creates a dependent clone of the transaction.">트랜잭션의 종속 복제본을 만듭니다.</summary>
      <param name="cloneOption" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.DependentCloneOption&quot; /&gt; that controls what kind of dependent transaction to create.">만들려는 종속 트랜잭션의 종류를 제어하는 <see cref="T:System.Transactions.DependentCloneOption" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.DependentTransaction&quot; /&gt; that represents the dependent clone.">종속 복제본을 나타내는 <see cref="T:System.Transactions.DependentTransaction" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Dispose">
      <summary vsli:raw="Releases the resources that are held by the object.">개체에서 보유하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Enlists a durable resource manager that supports two phase commit to participate in a transaction.">트랜잭션에 참여할 2단계 커밋을 지원하는 영속적 리소스 관리자를 참여시킵니다.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A unique identifier for a resource manager, which should persist across resource manager failure or reboot.">리소스 관리자의 고유 식별자로서, 리소스 관리자가 실패하거나 다시 부팅해도 유지되어야 합니다.</param>
      <param name="enlistmentNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.IEnlistmentNotification&quot; /&gt; interface to receive two phase commit notifications.">
        <see cref="T:System.Transactions.IEnlistmentNotification" /> 인터페이스를 구현하여 2단계 커밋 알림을 받는 개체입니다.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">리소스 관리자가 준비 단계 동안 추가 작업을 수행하려는 경우 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object that describes the enlistment.">인리스트먼트를 설명하는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Enlists a durable resource manager that supports single phase commit optimization to participate in a transaction.">트랜잭션에 참여할 1단계 커밋 최적화를 지원하는 영속적 리소스 관리자를 참여시킵니다.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A unique identifier for a resource manager, which should persist across resource manager failure or reboot.">리소스 관리자의 고유 식별자로서, 리소스 관리자가 실패하거나 다시 부팅해도 유지되어야 합니다.</param>
      <param name="singlePhaseNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.ISinglePhaseNotification&quot; /&gt; interface that must be able to receive single phase commit and two phase commit notifications.">1단계 커밋과 2단계 커밋 알림을 받을 수 있어야 하는 <see cref="T:System.Transactions.ISinglePhaseNotification" /> 인터페이스를 구현하는 개체입니다.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">리소스 관리자가 준비 단계 동안 추가 작업을 수행하려는 경우 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object that describes the enlistment.">인리스트먼트를 설명하는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)">
      <summary vsli:raw="Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).">PSPE(Promotable Single Phase Enlistment)를 통해 내부 트랜잭션이 있는 리소스 관리자를 등록합니다.</summary>
      <param name="promotableSinglePhaseNotification" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.IPromotableSinglePhaseNotification&quot; /&gt; interface implemented by the participant.">참가자가 구현한 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 인터페이스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; interface implementation that describes the enlistment.">참여를 설명하는 <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 인터페이스 구현입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary vsli:raw="Enlists a resource manager that has an internal transaction using a promotable single phase enlistment (PSPE).">PSPE(Promotable Single Phase Enlistment)를 통해 내부 트랜잭션이 있는 리소스 관리자를 등록합니다.</summary>
      <param name="promotableSinglePhaseNotification" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.IPromotableSinglePhaseNotification&quot; /&gt; interface implemented by the participant.">참가자가 구현한 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 인터페이스입니다.</param>
      <param name="promoterType" vsli:raw="The type of the distributed transaction processor.">분산된 트랜잭션 프로세서의 유형입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.SinglePhaseEnlistment&quot; /&gt; interface implementation that describes the enlistment.">참여를 설명하는 <see cref="T:System.Transactions.SinglePhaseEnlistment" /> 인터페이스 구현입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Enlists a volatile resource manager that supports two phase commit to participate in a transaction.">트랜잭션에 참여하기 위해 2단계 커밋을 지원하는 일시적 리소스 관리자를 등록합니다.</summary>
      <param name="enlistmentNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.IEnlistmentNotification&quot; /&gt; interface to receive two-phase commit notifications.">2단계 커밋 알림을 받기 위해 <see cref="T:System.Transactions.IEnlistmentNotification" /> 인터페이스를 구현하는 개체입니다.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">리소스 관리자가 준비 단계 동안 추가 작업을 수행하려는 경우 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object that describes the enlistment.">인리스트먼트를 설명하는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Enlists a volatile resource manager that supports single phase commit optimization to participate in a transaction.">트랜잭션에 참여할 1단계 커밋 최적화를 지원하는 일시적 리소스 관리자를 참여시킵니다.</summary>
      <param name="singlePhaseNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.ISinglePhaseNotification&quot; /&gt; interface that must be able to receive single phase commit and two phase commit notifications.">1단계 커밋과 2단계 커밋 알림을 받을 수 있어야 하는 <see cref="T:System.Transactions.ISinglePhaseNotification" /> 인터페이스를 구현하는 개체입니다.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">리소스 관리자가 준비 단계 동안 추가 작업을 수행하려는 경우 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; object that describes the enlistment.">인리스트먼트를 설명하는 <see cref="T:System.Transactions.Enlistment" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Equals(System.Object)">
      <summary vsli:raw="Determines whether this transaction and the specified object are equal.">이 트랜잭션과 지정된 개체가 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare with this instance.">이 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; and this transaction are identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />와 이 트랜잭션이 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetPromotedToken">
      <summary vsli:raw="Gets the  &lt;c&gt;byte[]&lt;/c&gt; returned by the &lt;c&gt;Promote&lt;/c&gt; method when the transaction is promoted.">트랜잭션을 승격할 때 <c>확장</c> 메서드가 반환한 <c>byte[]</c>를 가져옵니다.</summary>
      <returns vsli:raw="The  &lt;c&gt;byte[]&lt;/c&gt; returned by the &lt;c&gt;Promote&lt;/c&gt; method when the transaction is promoted.">트랜잭션을 승격할 때 <c>확장</c> 메서드가 반환한 <c>byte[]</c>입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instances are equivalent.">지정된 두 <see cref="T:System.Transactions.Transaction" /> 인스턴스가 같은지 여부를 테스트합니다.</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that is to the left of the equality operator.">같음 연산자의 왼쪽에 있는 <see cref="T:System.Transactions.Transaction" /> 인스턴스입니다.</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that is to the right of the equality operator.">같음 연산자의 오른쪽에 있는 <see cref="T:System.Transactions.Transaction" /> 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="x" />과 <paramref name="y" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instances are not equal.">두 <see cref="T:System.Transactions.Transaction" /> 인스턴스가 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that is to the left of the inequality operator.">같지 않음 연산자의 왼쪽에 있는 <see cref="T:System.Transactions.Transaction" /> 인스턴스입니다.</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that is to the right of the inequality operator.">같지 않음 연산자의 오른쪽에 있는 <see cref="T:System.Transactions.Transaction" /> 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="x" />과 <paramref name="y" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary vsli:raw="Promotes and enlists a durable resource manager that supports two phase commit to participate in a transaction.">트랜잭션에 참여할 2단계 커밋을 지원하는 영속적 리소스 관리자를 승격 및 참여시킵니다.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A unique identifier for a resource manager, which should persist across resource manager failure or reboot.">리소스 관리자의 고유 식별자로서, 리소스 관리자가 실패하거나 다시 부팅해도 유지되어야 합니다.</param>
      <param name="promotableNotification" vsli:raw="An object that acts as a commit delegate for a non-distributed transaction internal to a resource manager.">리소스 관리자 내부의 분산되지 않은 트랜잭션에 대한 커밋 대리자로 작동하는 개체입니다.</param>
      <param name="enlistmentNotification" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Transactions.IEnlistmentNotification&quot; /&gt; interface to receive two phase commit notifications.">
        <see cref="T:System.Transactions.IEnlistmentNotification" /> 인터페이스를 구현하여 2단계 커밋 알림을 받는 개체입니다.</param>
      <param name="enlistmentOptions" vsli:raw="&lt;see cref=&quot;F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired&quot; /&gt; if the resource manager wants to perform additional work during the prepare phase.">리소스 관리자가 준비 단계 동안 추가 작업을 수행하려는 경우 <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" />입니다.</param>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback">
      <summary vsli:raw="Rolls back (aborts) the transaction.">트랜잭션을 롤백(중단)합니다.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback(System.Exception)">
      <summary vsli:raw="Rolls back (aborts) the transaction.">트랜잭션을 롤백(중단)합니다.</summary>
      <param name="e" vsli:raw="An explanation of why a rollback occurred.">롤백이 발생하는 이유에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary vsli:raw="Sets the distributed transaction identifier generated by the non-MSDTC promoter.">비MSDTC 프로모터를 통해 생성된 분산 트랜잭션 식별자를 설정합니다.</summary>
      <param name="promotableNotification" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.IPromotableSinglePhaseNotification&quot; /&gt; interface implemented by the participant.">참가자가 구현한 <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> 인터페이스입니다.</param>
      <param name="distributedTransactionIdentifier" vsli:raw="The identifier for the transaction used by the distributed transaction manager.">분산 트랜잭션 관리자에서 사용하는 트랜잭션의 식별자입니다.</param>
    </member>
    <member name="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the data required to serialize this transaction.">이 트랜잭션을 serialize하는 데 필요한 데이터가 있는 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 가져옵니다.</summary>
      <param name="serializationInfo" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to populate with data.">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context" vsli:raw="The destination (see &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; ) for this serialization.">이 serialization에 대한 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조).</param>
    </member>
    <member name="P:System.Transactions.Transaction.Current">
      <summary vsli:raw="Gets or sets the ambient transaction.">앰비언트 트랜잭션을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; that describes the current transaction.">현재 트랜잭션을 설명하는 <see cref="T:System.Transactions.Transaction" />입니다.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.IsolationLevel">
      <summary vsli:raw="Gets the isolation level of the transaction.">트랜잭션의 격리 수준을 가져옵니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Transactions.IsolationLevel&quot; /&gt; values that indicates the isolation level of the transaction.">트랜잭션의 격리 수준을 나타내는 <see cref="T:System.Transactions.IsolationLevel" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.PromoterType">
      <summary vsli:raw="Uniquely identifies the format of the &lt;c&gt;byte[]&lt;/c&gt; returned by the Promote method when the transaction is promoted.">트랜잭션을 승격할 때 확장 메서드에서 반환한 <c>byte[]</c>의 형식을 고유하게 식별합니다.</summary>
      <returns vsli:raw="A guid that uniquely identifies the format of the &lt;c&gt;byte[]&lt;/c&gt; returned by the Promote method when the transaction is promoted.">트랜잭션이 승격 될 때 Promote 메서드에서 반환 하는 <c>바이트 []</c> 의 형식을 고유 하 게 식별 하는 guid입니다.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.TransactionInformation">
      <summary vsli:raw="Retrieves additional information about a transaction.">트랜잭션에 대한 추가 정보를 검색합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionInformation&quot; /&gt; that contains additional information about the transaction.">트랜잭션에 대한 추가 정보가 포함된 <see cref="T:System.Transactions.TransactionInformation" />입니다.</returns>
    </member>
    <member name="T:System.Transactions.TransactionAbortedException">
      <summary vsli:raw="The exception that is thrown when an operation is attempted on a transaction that has already been rolled back, or an attempt is made to commit the transaction and the transaction aborts.">이미 롤백된 트랜잭션에서 작업이 시도되거나, 트랜잭션 커밋을 시도하고 트랜잭션이 중단되면 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionAbortedException&quot; /&gt; class.">
        <see cref="T:System.Transactions.TransactionAbortedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionAbortedException&quot; /&gt; class with the specified serialization and streaming context information.">지정된 serialization과 스트리밍 컨텍스트 정보를 사용하여 <see cref="T:System.Transactions.TransactionAbortedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">실패한 serialization을 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">실패한 serialization 컨텍스트를 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionAbortedException&quot; /&gt; class with the specified message.">지정된 메시지를 사용하여 <see cref="T:System.Transactions.TransactionAbortedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionAbortedException&quot; /&gt; class with the specified message and inner exception.">지정된 메시지 및 내부 예외를 사용하여 <see cref="T:System.Transactions.TransactionAbortedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">현재 예외를 발생시키는 예외 인스턴스를 가져옵니다. 자세한 내용은 <see cref="P:System.Exception.InnerException" /> 속성을 참조하세요.</param>
    </member>
    <member name="T:System.Transactions.TransactionCompletedEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Transactions.Transaction.TransactionCompleted&quot; /&gt; event of a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; class.">
        <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> 클래스의 <see cref="T:System.Transactions.Transaction" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionEventArgs&quot; /&gt; that contains the event data.">이벤트 데이터를 포함하는 <see cref="T:System.Transactions.TransactionEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Transactions.TransactionEventArgs">
      <summary vsli:raw="Provides data for the following transaction events: &lt;see cref=&quot;E:System.Transactions.TransactionManager.DistributedTransactionStarted&quot; /&gt;, &lt;see cref=&quot;E:System.Transactions.Transaction.TransactionCompleted&quot; /&gt;.">
        <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />, <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> 트랜잭션 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionEventArgs&quot; /&gt; class.">
        <see cref="T:System.Transactions.TransactionEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Transactions.TransactionEventArgs.Transaction">
      <summary vsli:raw="Gets the transaction for which event status is provided.">이벤트 상태가 제공되는 트랜잭션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; for which event status is provided.">이벤트 상태가 제공되는 <see cref="T:System.Transactions.Transaction" />입니다.</returns>
    </member>
    <member name="T:System.Transactions.TransactionException">
      <summary vsli:raw="The exception that is thrown when you attempt to do work on a transaction that cannot accept new work.">새로운 작업을 수용할 수 없는 트랜잭션에서 작업을 시도하면 예외가 throw됩니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionException&quot; /&gt; class.">
        <see cref="T:System.Transactions.TransactionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionException&quot; /&gt; class with the specified serialization and streaming context information.">지정된 serialization과 스트리밍 컨텍스트 정보를 사용하여 <see cref="T:System.Transactions.TransactionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">실패한 serialization을 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">실패한 serialization 컨텍스트를 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionException&quot; /&gt; class with the specified message.">지정된 메시지를 사용하여 <see cref="T:System.Transactions.TransactionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionException&quot; /&gt; class with the specified message and inner exception.">지정된 메시지 및 내부 예외를 사용하여 <see cref="T:System.Transactions.TransactionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">현재 예외를 발생시키는 예외 인스턴스를 가져옵니다. 자세한 내용은 <see cref="P:System.Exception.InnerException" /> 속성을 참조하세요.</param>
    </member>
    <member name="T:System.Transactions.TransactionInDoubtException">
      <summary vsli:raw="The exception that is thrown when an operation is attempted on a transaction that is in doubt, or an attempt is made to commit the transaction and the transaction becomes InDoubt.">의심스러운 트랜잭션에서 작업이 시도되거나, 트랜잭션 커밋을 시도하고 트랜잭션이 InDoubt가 되면 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionInDoubtException&quot; /&gt; class.">
        <see cref="T:System.Transactions.TransactionInDoubtException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionInDoubtException&quot; /&gt; class with the specified serialization and streaming context information.">지정된 serialization과 스트리밍 컨텍스트 정보를 사용하여 <see cref="T:System.Transactions.TransactionInDoubtException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">실패한 serialization을 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">실패한 serialization 컨텍스트를 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionInDoubtException&quot; /&gt; class with the specified message.">지정된 메시지를 사용하여 <see cref="T:System.Transactions.TransactionInDoubtException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionInDoubtException&quot; /&gt; class with the specified message and inner exception.">지정된 메시지 및 내부 예외를 사용하여 <see cref="T:System.Transactions.TransactionInDoubtException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">현재 예외를 발생시키는 예외 인스턴스를 가져옵니다. 자세한 내용은 <see cref="P:System.Exception.InnerException" /> 속성을 참조하세요.</param>
    </member>
    <member name="T:System.Transactions.TransactionInformation">
      <summary vsli:raw="Provides additional information regarding a transaction.">트랜잭션에 대한 추가 정보를 제공합니다.</summary>
    </member>
    <member name="P:System.Transactions.TransactionInformation.CreationTime">
      <summary vsli:raw="Gets the creation time of the transaction.">트랜잭션의 생성 시간을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTime&quot; /&gt; that contains the creation time of the transaction.">트랜잭션의 생성 시간이 포함된 <see cref="T:System.DateTime" />입니다.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.DistributedIdentifier">
      <summary vsli:raw="Gets a unique identifier of the escalated transaction.">에스컬레이션된 트랜잭션의 고유 식별자를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that contains the unique identifier of the escalated transaction.">에스컬레이션된 트랜잭션의 고유 식별자가 포함된 <see cref="T:System.Guid" />입니다.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.LocalIdentifier">
      <summary vsli:raw="Gets a unique identifier of the transaction.">트랜잭션의 고유 식별자를 가져옵니다.</summary>
      <returns vsli:raw="A unique identifier of the transaction.">트랜잭션의 고유 식별자입니다.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.Status">
      <summary vsli:raw="Gets the status of the transaction.">트랜잭션 상태를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionStatus&quot; /&gt; that contains the status of the transaction.">트랜잭션의 상태가 포함된 <see cref="T:System.Transactions.TransactionStatus" />입니다.</returns>
    </member>
    <member name="T:System.Transactions.TransactionInterop">
      <summary vsli:raw="Facilitates interaction between &lt;see cref=&quot;N:System.Transactions&quot; /&gt; and components that were previously written to interact with MSDTC, COM+, or &lt;see cref=&quot;N:System.EnterpriseServices&quot; /&gt;. This class cannot be inherited.">
        <see cref="N:System.Transactions" />와 구성 요소(MSDTC, COM+ 또는 <see cref="N:System.EnterpriseServices" />와 상호 작용하도록 이전에 작성된 구성 요소) 간의 상호 작용을 원활하게 합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionInterop.PromoterTypeDtc">
      <summary vsli:raw="The type of the distributed transaction processor.">분산된 트랜잭션 프로세서의 유형입니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt; instance that represents a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt;.">
        <see cref="T:System.Transactions.Transaction" />을 나타내는 <see cref="T:System.Transactions.IDtcTransaction" /> 인스턴스를 가져옵니다.</summary>
      <param name="transaction" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance to be marshaled.">마샬링할 <see cref="T:System.Transactions.Transaction" /> 인스턴스입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt; instance that represents a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt;.  The &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt; instance is compatible with the unmanaged form of ITransaction used by MSDTC and with the Managed form of &lt;see cref=&quot;T:System.EnterpriseServices.ITransaction&quot; /&gt; used by &lt;see cref=&quot;N:System.EnterpriseServices&quot; /&gt;.">
        <see cref="T:System.Transactions.IDtcTransaction" />을 나타내는 <see cref="T:System.Transactions.Transaction" /> 인스턴스입니다.  <see cref="T:System.Transactions.IDtcTransaction" /> 인스턴스는 MSDTC에서 사용되는 관리되지 않는 형식의 ITransaction 및 <see cref="N:System.EnterpriseServices" />에서 사용되는 관리된 형식의 <see cref="T:System.EnterpriseServices.ITransaction" />과 호환됩니다.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])">
      <summary vsli:raw="Transforms a transaction object into an export transaction cookie.">트랜잭션 개체를 내보내기 트랜잭션 쿠키로 변형합니다.</summary>
      <param name="transaction" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; object to be marshaled.">마샬링할 <see cref="T:System.Transactions.Transaction" /> 개체입니다.</param>
      <param name="whereabouts" vsli:raw="An address that describes the location of the destination transaction manager. This permits two transaction managers to communicate with one another and thereby propagate a transaction from one system to the other.">대상 트랜잭션 관리자의 위치를 설명하는 주소입니다. 이 주소를 통해 두 트랜잭션 관리자가 서로 통신하여 시스템 간에 트랜잭션을 전파할 수 있습니다.</param>
      <returns vsli:raw="An export transaction cookie representing the specified &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; object.">지정된 <see cref="T:System.Transactions.Transaction" /> 개체를 나타내는 내보내기 트랜잭션 쿠키입니다.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)">
      <summary vsli:raw="Generates a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; from a specified &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt;.">지정된 <see cref="T:System.Transactions.IDtcTransaction" />에서 <see cref="T:System.Transactions.Transaction" />을 생성합니다.</summary>
      <param name="transactionNative" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt; object to be marshaled.">마샬링할 <see cref="T:System.Transactions.IDtcTransaction" /> 개체입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance that represents the given &lt;see cref=&quot;T:System.Transactions.IDtcTransaction&quot; /&gt;.">지정된 <see cref="T:System.Transactions.IDtcTransaction" />을 나타내는 <see cref="T:System.Transactions.Transaction" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])">
      <summary vsli:raw="Generates a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; from the specified an export cookie.">지정된 내보내기 쿠키에서 <see cref="T:System.Transactions.Transaction" />을 생성합니다.</summary>
      <param name="cookie" vsli:raw="A marshaled form of the transaction object.">마샬링된 형식의 트랜잭션 개체입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; from the specified export cookie.">지정된 내보내기 쿠키에서 생성된 <see cref="T:System.Transactions.Transaction" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])">
      <summary vsli:raw="Generates a &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; instance from the specified transmitter propagation token.">지정된 전송기 전파 토큰에서 <see cref="T:System.Transactions.Transaction" /> 인스턴스를 생성합니다.</summary>
      <param name="propagationToken" vsli:raw="A propagation token representing a transaction.">트랜잭션을 나타내는 전파 토큰입니다.</param>
      <exception cref="T:System.Transactions.TransactionManagerCommunicationException" vsli:raw="The deserialization of a transaction fails because the transaction manager cannot be contacted. This may be caused by network firewall or security settings.">트랜잭션 관리자에 연결할 수 없어 트랜잭션의 deserialization에 실패한 경우. 이 예외는 네트워크 방화벽이나 보안 설정으로 인해 발생할 수 있습니다.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt; from the specified transmitter propagation token.">지정된 전송기 전파 토큰에서 생성된 <see cref="T:System.Transactions.Transaction" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)">
      <summary vsli:raw="Generates a propagation token for the specified &lt;see cref=&quot;T:System.Transactions.Transaction&quot; /&gt;.">지정된 <see cref="T:System.Transactions.Transaction" />에 대한 전파 토큰을 생성합니다.</summary>
      <param name="transaction" vsli:raw="A transaction to be marshaled into a propagation token.">전파 토큰으로 마샬링할 트랜잭션입니다.</param>
      <returns vsli:raw="This method, together with the &lt;see cref=&quot;M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])&quot; /&gt; method, provide functionality for Transmitter/Receiver propagation, in which the transaction is &quot;pulled&quot; from the remote machine when the latter is called to unmarshal the transaction.  &#xA;  &#xA; For more information on different propagation models, see &lt;see cref=&quot;T:System.Transactions.TransactionInterop&quot; /&gt; class.">이 메서드는 <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" /> 메서드와 함께 전송기/수신기 전파 기능을 제공하는데 전송기/수신기 전파에서는 트랜잭션의 역마샬링을 위해 후자가 호출될 때 원격 컴퓨터로부터 트랜잭션을 “끌어옵니다”.  
  
다양한 전파 모델에 대한 자세한 내용은 <see cref="T:System.Transactions.TransactionInterop" /> 클래스를 참조하세요.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetWhereabouts">
      <summary vsli:raw="Gets the Whereabouts of the distributed transaction manager that &lt;see cref=&quot;N:System.Transactions&quot; /&gt; uses.">
        <see cref="N:System.Transactions" />에서 사용되는 분산 트랜잭션 관리자의 Whereabouts를 가져옵니다.</summary>
      <returns vsli:raw="The Whereabouts of the distributed transaction manager that &lt;see cref=&quot;N:System.Transactions&quot; /&gt; uses.">
        <see cref="N:System.Transactions" />에서 사용되는 분산 트랜잭션 관리자의 Whereabouts입니다.</returns>
    </member>
    <member name="T:System.Transactions.TransactionManager">
      <summary vsli:raw="Contains methods used for transaction management. This class cannot be inherited.">트랜잭션 관리에 사용되는 메서드를 포함합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="E:System.Transactions.TransactionManager.DistributedTransactionStarted">
      <summary vsli:raw="Indicates that a distributed transaction has started.">분산 트랜잭션이 시작되었음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)">
      <summary vsli:raw="Notifies the transaction manager that a resource manager recovering from failure has finished reenlisting in all unresolved transactions.">오류가 복구된 리소스 관리자가 미해결된 모든 트랜잭션에 다시 참여했음을 트랜잭션 관리자에게 알립니다.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that uniquely identifies the resource to be recovered from.">복구할 리소스를 고유하게 식별하는 <see cref="T:System.Guid" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;resourceManagerIdentifier&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="resourceManagerIdentifier" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)">
      <summary vsli:raw="Reenlists a durable participant in a transaction.">영속적 참가 요소를 트랜잭션에 다시 참여시킵니다.</summary>
      <param name="resourceManagerIdentifier" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that uniquely identifies the resource manager.">리소스 관리자를 고유하게 식별하는 <see cref="T:System.Guid" />입니다.</param>
      <param name="recoveryInformation" vsli:raw="Contains additional information of recovery information.">복구 정보의 추가 정보를 포함합니다.</param>
      <param name="enlistmentNotification" vsli:raw="A resource object that implements &lt;see cref=&quot;T:System.Transactions.IEnlistmentNotification&quot; /&gt; to receive notifications.">
        <see cref="T:System.Transactions.IEnlistmentNotification" />을 구현하여 알림을 수신하는 리소스 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;recoveryInformation&quot; /&gt; is invalid.  &#xA;  &#xA; -or-  &#xA;  &#xA; Transaction Manager information in &lt;paramref name=&quot;recoveryInformation&quot; /&gt; does not match the configured transaction manager.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;RecoveryInformation&quot; /&gt; is not recognized by &lt;see cref=&quot;N:System.Transactions&quot; /&gt;.">
        <paramref name="recoveryInformation" />이 잘못되었습니다.  
  
또는 
<paramref name="recoveryInformation" />의 트랜잭션 관리자 정보가 구성된 트랜잭션 관리자와 일치하지 않는 경우  
  
또는 
 <see cref="N:System.Transactions" />가 <paramref name="RecoveryInformation" />을 인식할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)&quot; /&gt; has already been called for the specified &lt;paramref name=&quot;resourceManagerIdentifier&quot; /&gt;. The reenlistment is rejected.">지정된 <paramref name="resourceManagerIdentifier" />에 대해 <see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" />가 이미 호출된 경우. 다시 참여가 거부됩니다.</exception>
      <exception cref="T:System.Transactions.TransactionException" vsli:raw="The &lt;paramref name=&quot;resourceManagerIdentifier&quot; /&gt; does not match the content of the specified recovery information in &lt;paramref name=&quot;recoveryInformation&quot; /&gt;.">
        <paramref name="resourceManagerIdentifier" />가 <paramref name="recoveryInformation" />의 지정된 복구 정보 내용과 일치하지 않는 경우</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Transactions.Enlistment&quot; /&gt; that describes the enlistment.">참여 항목을 설명하는 <see cref="T:System.Transactions.Enlistment" />입니다.</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.DefaultTimeout">
      <summary vsli:raw="Gets the default timeout interval for new transactions.">새 트랜잭션의 기본 시간 제한 간격을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value that specifies the timeout interval for new transactions.">새 트랜잭션의 시간 제한 간격을 지정하는 <see cref="T:System.TimeSpan" /> 값입니다.</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.HostCurrentCallback">
      <summary vsli:raw="Gets or sets a custom transaction factory.">사용자 지정 트랜잭션 팩터리를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.HostCurrentTransactionCallback&quot; /&gt; that contains a custom transaction factory.">사용자 지정 트랜잭션 팩터리가 포함된 <see cref="T:System.Transactions.HostCurrentTransactionCallback" />입니다.</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.MaximumTimeout">
      <summary vsli:raw="Gets the default maximum timeout interval for new transactions.">새 트랜잭션의 기본 최대 시간 제한 간격을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value that specifies the maximum timeout interval that is allowed when creating new transactions.">새 트랜잭션을 만들 때 허용되는 최대 시간 제한 간격을 지정하는 <see cref="T:System.TimeSpan" /> 값입니다.</returns>
    </member>
    <member name="T:System.Transactions.TransactionManagerCommunicationException">
      <summary vsli:raw="The exception that is thrown when a resource manager cannot communicate with the transaction manager.">리소스 관리자가 트랜잭션 관리자와 통신할 수 없는 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionManagerCommunicationException&quot; /&gt; class.">
        <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionManagerCommunicationException&quot; /&gt; class with the specified serialization and streaming context information.">지정된 serialization과 스트리밍 컨텍스트 정보를 사용하여 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">실패한 serialization을 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">실패한 serialization 컨텍스트를 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionManagerCommunicationException&quot; /&gt; class with the specified message.">지정된 메시지를 사용하여 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionManagerCommunicationException&quot; /&gt; class with the specified message and inner exception.">지정된 메시지 및 내부 예외를 사용하여 <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">현재 예외를 발생시키는 예외 인스턴스를 가져옵니다. 자세한 내용은 <see cref="P:System.Exception.InnerException" /> 속성을 참조하세요.</param>
    </member>
    <member name="T:System.Transactions.TransactionOptions">
      <summary vsli:raw="Contains additional information that specifies transaction behaviors.">트랜잭션 동작을 지정하는 추가 정보가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionOptions.Equals(System.Object)">
      <summary vsli:raw="Determines whether this &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance and the specified object are equal.">이 <see cref="T:System.Transactions.TransactionOptions" /> 인스턴스와 지정된 개체가 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare with this instance.">이 인스턴스와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; and this &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance are identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />와 이 <see cref="T:System.Transactions.TransactionOptions" /> 인스턴스가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Equality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instances are equivalent.">지정된 두 <see cref="T:System.Transactions.TransactionOptions" /> 인스턴스가 같은지 여부를 테스트합니다.</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance that is to the left of the equality operator.">같음 연산자의 왼쪽에 있는 <see cref="T:System.Transactions.TransactionOptions" /> 인스턴스입니다.</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance that is to the right of the equality operator.">같음 연산자의 오른쪽에 있는 <see cref="T:System.Transactions.TransactionOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="x" />과 <paramref name="y" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Inequality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instances are not equal.">두 <see cref="T:System.Transactions.TransactionOptions" /> 인스턴스가 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance that is to the left of the equality operator.">같음 연산자의 왼쪽에 있는 <see cref="T:System.Transactions.TransactionOptions" /> 인스턴스입니다.</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; instance that is to the right of the equality operator.">같음 연산자의 오른쪽에 있는 <see cref="T:System.Transactions.TransactionOptions" /> 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="x" />과 <paramref name="y" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.IsolationLevel">
      <summary vsli:raw="Gets or sets the isolation level of the transaction.">트랜잭션의 격리 수준을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Transactions.IsolationLevel&quot; /&gt; enumeration that specifies the isolation level of the transaction.">트랜잭션의 격리 수준을 지정하는 <see cref="T:System.Transactions.IsolationLevel" /> 열거형입니다.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.Timeout">
      <summary vsli:raw="Gets or sets the timeout period for the transaction.">이 트랜잭션의 제한 시간을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value that specifies the timeout period for the transaction.">트랜잭션의 시간 제한 기간을 지정하는 <see cref="T:System.TimeSpan" /> 값입니다.</returns>
    </member>
    <member name="T:System.Transactions.TransactionPromotionException">
      <summary vsli:raw="The exception that is thrown when a promotion fails.">승격에 실패한 경우에 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionPromotionException&quot; /&gt; class.">
        <see cref="T:System.Transactions.TransactionPromotionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionPromotionException&quot; /&gt; class with the specified serialization and streaming context information.">지정된 serialization과 스트리밍 컨텍스트 정보를 사용하여 <see cref="T:System.Transactions.TransactionPromotionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization.">실패한 serialization을 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that describes a failed serialization context.">실패한 serialization 컨텍스트를 설명하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionPromotionException&quot; /&gt; class with the specified message.">지정된 메시지를 사용하여 <see cref="T:System.Transactions.TransactionPromotionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionPromotionException&quot; /&gt; class with the specified message and inner exception.">지정된 메시지 및 내부 예외를 사용하여 <see cref="T:System.Transactions.TransactionPromotionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains a message that explains why the exception occurred.">예외가 발생한 이유를 설명하는 메시지가 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="innerException" vsli:raw="Gets the exception instance that causes the current exception. For more information, see the &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt; property.">현재 예외를 발생시키는 예외 인스턴스를 가져옵니다. 자세한 내용은 <see cref="P:System.Exception.InnerException" /> 속성을 참조하세요.</param>
    </member>
    <member name="T:System.Transactions.TransactionScope">
      <summary vsli:raw="Makes a code block transactional. This class cannot be inherited.">트랜잭션 코드 블록을 만듭니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class.">
        <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">
        <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화하고 지정된 트랜잭션을 앰비언트 트랜잭션으로 설정하여 범위에서 수행된 트랜잭션 작업에 이 트랜잭션을 사용합니다.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">범위에서 수행된 트랜잭션 작업에 이 트랜잭션이 사용되도록 앰비언트 트랜잭션으로 설정할 트랜잭션입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">지정된 시간 제한 값을 가진 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화하고, 범위에서 수행된 트랜잭션 작업에 이 트랜잭션이 사용되도록 지정된 트랜잭션을 앰비언트 트랜잭션으로 설정합니다.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">범위에서 수행된 트랜잭션 작업에 이 트랜잭션이 사용되도록 앰비언트 트랜잭션으로 설정할 트랜잭션입니다.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">트랜잭션 범위의 제한 시간이 만료되어 트랜잭션이 중단되는 <see cref="T:System.TimeSpan" />입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value and COM+ interoperability requirements, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">지정된 시간 제한 값과 COM+ 상호 운용성 요구 사항을 가진 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화하고, 범위에서 수행된 트랜잭션 작업에 이 트랜잭션이 사용되도록 지정된 트랜잭션을 앰비언트 트랜잭션으로 설정합니다.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">범위에서 수행된 트랜잭션 작업에 이 트랜잭션이 사용되도록 앰비언트 트랜잭션으로 설정할 트랜잭션입니다.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">트랜잭션 범위의 제한 시간이 만료되어 트랜잭션이 중단되는 <see cref="T:System.TimeSpan" />입니다.</param>
      <param name="interopOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.EnterpriseServicesInteropOption&quot; /&gt; enumeration that describes how the associated transaction interacts with COM+ transactions.">관련된 트랜잭션이 COM+ 트래잭션과 상호 작용하는 방법을 설명하는 <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]  &#xA;  &#xA; Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value, and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">[.NET Framework 4.5.1 이상 버전에서 지원됨] 
지정된 시간 제한 값을 가진 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화하고, 범위에서 수행된 트랜잭션 작업에 이 트랜잭션이 사용되도록 지정된 트랜잭션을 앰비언트 트랜잭션으로 설정합니다.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">범위에서 수행된 트랜잭션 작업에 이 트랜잭션이 사용되도록 앰비언트 트랜잭션으로 설정할 트랜잭션입니다.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">트랜잭션 범위의 제한 시간이 만료되어 트랜잭션이 중단되는 <see cref="T:System.TimeSpan" />입니다.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">트랜잭션 범위와 연관된 앰비언트 트랜잭션 흐름이 Task 또는 async/await .NET 비동기 프로그래밍 패턴을 사용할 때 스레드 연속 사이에 수행되는지 여부를 설명하는 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]  &#xA;  &#xA; Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class and sets the specified transaction as the ambient transaction, so that transactional work done inside the scope uses this transaction.">[.NET Framework 4.5.1 이상 버전에서 지원됨] 
<see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화하고 지정된 트랜잭션을 앰비언트 트랜잭션으로 설정하여 범위에서 수행된 트랜잭션 작업에 이 트랜잭션을 사용합니다.</summary>
      <param name="transactionToUse" vsli:raw="The transaction to be set as the ambient transaction, so that transactional work done inside the scope uses this transaction.">범위에서 수행된 트랜잭션 작업에 이 트랜잭션이 사용되도록 앰비언트 트랜잭션으로 설정할 트랜잭션입니다.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">트랜잭션 범위와 연관된 앰비언트 트랜잭션 흐름이 Task 또는 async/await .NET 비동기 프로그래밍 패턴을 사용할 때 스레드 연속 사이에 수행되는지 여부를 설명하는 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified asynchronous flow option.">지정된 비동기 흐름 옵션을 사용하여 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">트랜잭션 범위와 연관된 앰비언트 트랜잭션 흐름이 Task 또는 async/await .NET 비동기 프로그래밍 패턴을 사용할 때 스레드 연속 사이에 수행되는지 여부를 설명하는 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified requirements.">지정된 요구 사항에 따라 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">이 트랜잭션 범위와 관련된 트랜잭션 요구 사항을 설명하는 <see cref="T:System.Transactions.TransactionScopeOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value and requirements.">지정된 시간 제한 값과 요구 사항을 가진 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">이 트랜잭션 범위와 관련된 트랜잭션 요구 사항을 설명하는 <see cref="T:System.Transactions.TransactionScopeOption" /> 열거형의 인스턴스입니다.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">트랜잭션 범위의 제한 시간이 만료되어 트랜잭션이 중단되는 <see cref="T:System.TimeSpan" />입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified timeout value, requirements, and asynchronous flow option.">지정된 제한 시간 값, 요구 사항 및 비동기 흐름 옵션을 사용하여 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">이 트랜잭션 범위와 관련된 트랜잭션 요구 사항을 설명하는 <see cref="T:System.Transactions.TransactionScopeOption" /> 열거형의 인스턴스입니다.</param>
      <param name="scopeTimeout" vsli:raw="The &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; after which the transaction scope times out and aborts the transaction.">트랜잭션 범위의 제한 시간이 만료되어 트랜잭션이 중단되는 <see cref="T:System.TimeSpan" />입니다.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">트랜잭션 범위와 연관된 앰비언트 트랜잭션 흐름이 Task 또는 async/await .NET 비동기 프로그래밍 패턴을 사용할 때 스레드 연속 사이에 수행되는지 여부를 설명하는 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified requirements.">지정된 요구 사항에 따라 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">이 트랜잭션 범위와 관련된 트랜잭션 요구 사항을 설명하는 <see cref="T:System.Transactions.TransactionScopeOption" /> 열거형의 인스턴스입니다.</param>
      <param name="transactionOptions" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.">새 트랜잭션을 만드는 경우 사용할 트랜잭션 옵션을 설명하는 <see cref="T:System.Transactions.TransactionOptions" /> 구조체입니다. 기존 트랜잭션이 사용되면 이 매개 변수의 시간 제한 값이 트랜잭션 범위에 적용됩니다. 범위가 삭제되기 전에 이 시간이 만료되면 트랜잭션이 중단됩니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified scope and COM+ interoperability requirements, and transaction options.">지정된 범위, COM+ 상호 운용성 요구 사항 및 트랜잭션 옵션을 가진 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">이 트랜잭션 범위와 관련된 트랜잭션 요구 사항을 설명하는 <see cref="T:System.Transactions.TransactionScopeOption" /> 열거형의 인스턴스입니다.</param>
      <param name="transactionOptions" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.">새 트랜잭션을 만드는 경우 사용할 트랜잭션 옵션을 설명하는 <see cref="T:System.Transactions.TransactionOptions" /> 구조체입니다. 기존 트랜잭션이 사용되면 이 매개 변수의 시간 제한 값이 트랜잭션 범위에 적용됩니다. 범위가 삭제되기 전에 이 시간이 만료되면 트랜잭션이 중단됩니다.</param>
      <param name="interopOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.EnterpriseServicesInteropOption&quot; /&gt; enumeration that describes how the associated transaction interacts with COM+ transactions.">관련된 트랜잭션이 COM+ 트래잭션과 상호 작용하는 방법을 설명하는 <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]  &#xA;  &#xA; Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified requirements and asynchronous flow option.">[.NET Framework 4.5.1 이상 버전에서 지원됨] 
지정된 요구 사항 및 비동기 흐름 옵션을 사용해서 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">이 트랜잭션 범위와 관련된 트랜잭션 요구 사항을 설명하는 <see cref="T:System.Transactions.TransactionScopeOption" /> 열거형의 인스턴스입니다.</param>
      <param name="transactionOptions" vsli:raw="A &lt;see cref=&quot;T:System.Transactions.TransactionOptions&quot; /&gt; structure that describes the transaction options to use if a new transaction is created. If an existing transaction is used, the timeout value in this parameter applies to the transaction scope. If that time expires before the scope is disposed, the transaction is aborted.">새 트랜잭션을 만드는 경우 사용할 트랜잭션 옵션을 설명하는 <see cref="T:System.Transactions.TransactionOptions" /> 구조체입니다. 기존 트랜잭션이 사용되면 이 매개 변수의 시간 제한 값이 트랜잭션 범위에 적용됩니다. 범위가 삭제되기 전에 이 시간이 만료되면 트랜잭션이 중단됩니다.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">트랜잭션 범위와 연관된 앰비언트 트랜잭션 흐름이 Task 또는 async/await .NET 비동기 프로그래밍 패턴을 사용할 때 스레드 연속 사이에 수행되는지 여부를 설명하는 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt; class with the specified requirements and asynchronous flow option.">지정된 요구 사항 및 비동기 흐름 옵션을 사용해서 <see cref="T:System.Transactions.TransactionScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scopeOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeOption&quot; /&gt; enumeration that describes the transaction requirements associated with this transaction scope.">이 트랜잭션 범위와 관련된 트랜잭션 요구 사항을 설명하는 <see cref="T:System.Transactions.TransactionScopeOption" /> 열거형의 인스턴스입니다.</param>
      <param name="asyncFlowOption" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Transactions.TransactionScopeAsyncFlowOption&quot; /&gt; enumeration that describes whether the ambient transaction associated with the transaction scope will flow across thread continuations when using Task or async/await .NET async programming patterns.">트랜잭션 범위와 연관된 앰비언트 트랜잭션 흐름이 Task 또는 async/await .NET 비동기 프로그래밍 패턴을 사용할 때 스레드 연속 사이에 수행되는지 여부를 설명하는 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> 열거형의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.Complete">
      <summary vsli:raw="Indicates that all operations within the scope are completed successfully.">범위의 모든 작업이 성공적으로 완료되었음을 나타냅니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method has already been called once.">이 메서드가 이미 한 번 호출된 경우</exception>
    </member>
    <member name="M:System.Transactions.TransactionScope.Dispose">
      <summary vsli:raw="Ends the transaction scope.">트랜잭션 범위를 종료합니다.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeAsyncFlowOption">
      <summary vsli:raw="Specifies whether transaction flow across thread continuations is enabled for &lt;see cref=&quot;T:System.Transactions.TransactionScope&quot; /&gt;.">스레드 연속 사이의 트랜잭션 흐름이 <see cref="T:System.Transactions.TransactionScope" />에 대해 설정되었는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled">
      <summary vsli:raw="Specifies that transaction flow across thread continuations is enabled.">스레드 연속 사이의 트랜잭션 흐름이 설정되도록 지정합니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Suppress">
      <summary vsli:raw="Specifies that transaction flow across thread continuations is suppressed. This is the default setting if no &lt;see langword=&quot;TransactionScopeAsyncFlowOption&quot; /&gt; is specified in the &lt;see cref=&quot;Overload:System.Transactions.TransactionScope.#ctor&quot; /&gt; constructor.">스레드 연속 사이의 트랜잭션 흐름이 해제되도록 지정합니다. <see cref="Overload:System.Transactions.TransactionScope.#ctor" /> 생성자에 <see langword="TransactionScopeAsyncFlowOption" />이 지정되지 않은 경우 이것이 기본 설정입니다.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeOption">
      <summary vsli:raw="Provides additional options for creating a transaction scope.">트랜잭션 범위를 만드는 추가 옵션을 제공합니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Required">
      <summary vsli:raw="A transaction is required by the scope. It uses an ambient transaction if one already exists. Otherwise, it creates a new transaction before entering the scope. This is the default value.">범위에 따라 트랜잭션이 필요합니다. 트랜잭션이 이미 있으면 앰비언트 트랜잭션이 사용됩니다. 그렇지 않으면 범위에 진입하기 전에 새 트랜잭션을 만듭니다. 기본값입니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.RequiresNew">
      <summary vsli:raw="A new transaction is always created for the scope.">범위에 대해 항상 새 트랜잭션이 만들어집니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Suppress">
      <summary vsli:raw="The ambient transaction context is suppressed when creating the scope. All operations within the scope are done without an ambient transaction context.">범위를 만들 때는 앰비언트 트랜잭션 컨텍스트가 발생하지 않습니다. 앰비언트 트랜잭션 컨텍스트를 사용하지 않고 범위 안의 모든 작업이 완료됩니다.</summary>
    </member>
    <member name="T:System.Transactions.TransactionStartedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Transactions.TransactionManager.DistributedTransactionStarted&quot; /&gt; event of a &lt;see cref=&quot;T:System.Transactions.TransactionManager&quot; /&gt; class.">
        <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> 클래스의 <see cref="T:System.Transactions.TransactionManager" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender" vsli:raw="The source of the event.">이벤트 소스입니다.</param>
      <param name="e" vsli:raw="The &lt;see cref=&quot;T:System.Transactions.TransactionEventArgs&quot; /&gt; that contains the transaction from which transaction information can be retrieved.">트랜잭션 정보를 검색할 수 있는 트랜잭션이 들어 있는 <see cref="T:System.Transactions.TransactionEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Transactions.TransactionStatus">
      <summary vsli:raw="Describes the current status of a distributed transaction.">분산 트랜잭션의 현재 상태에 대해 설명합니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Aborted">
      <summary vsli:raw="The transaction has been rolled back.">트랜잭션이 롤백되었습니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Active">
      <summary vsli:raw="The status of the transaction is unknown, because some participants must still be polled.">일부 참가 요소를 계속 폴링해야 하기 때문에 트랜잭션의 상태를 알 수 없습니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Committed">
      <summary vsli:raw="The transaction has been committed.">트랜잭션이 커밋되었습니다.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.InDoubt">
      <summary vsli:raw="The status of the transaction is unknown.">트랜잭션의 상태를 알 수 없습니다.</summary>
    </member>
  </members>
</doc>
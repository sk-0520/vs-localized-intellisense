<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization.Json</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.DateTimeFormat">
      <summary>날짜-시간 형식 옵션을 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String)">
      <summary>형식 문자열을 사용하여 <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="formatString">서식 문자열입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String,System.IFormatProvider)">
      <summary>형식 문자열과 형식 공급자를 사용하여 <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="formatString">형식 문자열입니다.</param>
      <param name="formatProvider">서식 공급자입니다.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.DateTimeStyles">
      <summary>여러 날짜 및 시간 구문 분석 메서드의 문자열 구문 분석 방법을 사용자 지정하는 형식 지정 옵션을 가져오거나 설정합니다.</summary>
      <returns>여러 날짜 및 시간 구문 분석 메서드의 문자열 구문 분석 방법을 사용자 지정하는 형식 지정 옵션입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatProvider">
      <summary>서식 지정을 제어하는 개체를 가져옵니다.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatString">
      <summary>날짜 또는 시간이 문자열로 표현되는 경우 생성된 서식을 제어하는 서식 문자열을 가져옵니다.</summary>
      <returns>날짜 또는 시간이 문자열로 표시되는 경우 만들어지는 서식을 제어하는 형식 문자열입니다.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EmitTypeInformation">
      <summary>형식 정보를 내보내는 빈도를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Always">
      <summary>항상 형식 정보를 내보냅니다.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.AsNeeded">
      <summary>필요에 따라 형식 정보를 내보냅니다.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Never">
      <summary>형식 정보를 절대 내보내지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      <summary>개체를 JSON(JavaScript Object Notation)으로 직렬화하고 JSON 데이터를 개체로 역직렬화합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <summary>지정된 형식의 개체를 직렬화하거나 역직렬화하기 위해 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">직렬화되거나 역직렬화되는 인스턴스 형식입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
        <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 클래스의 새 인스턴스를 초기화하여 지정된 형식의 개체와 함께 개체 그래프에 있을 수 있는 알려진 형식 컬렉션을 직렬화하거나 역직렬화합니다.</summary>
      <param name="type">직렬화되거나 역직렬화되는 인스턴스 형식입니다.</param>
      <param name="knownTypes">개체 그래프에 있을 수 있는 형식을 포함하는 <see cref="T:System.Type" />의 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)">
      <summary>
        <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 클래스의 새 인스턴스를 초기화하여 지정된 형식 및 직렬 변환기 설정의 개체를 직렬화하거나 역직렬화합니다.</summary>
      <param name="type">직렬화되거나 역직렬화되는 인스턴스 형식입니다.</param>
      <param name="settings">JSON serializer에 대한 serializer 설정입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)">
      <summary>매개 변수를 통해 지정된 XML 루트 요소를 사용하여 지정된 형식의 개체를 직렬화하거나 역직렬화하기 위해 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">직렬화되거나 역직렬화되는 인스턴스 형식입니다.</param>
      <param name="rootName">직렬화하거나 역직렬화할 콘텐츠를 둘러싸는 XML 요소의 이름입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>매개 변수를 통해 지정된 XML 루트 요소를 사용하여 지정된 형식의 개체 및 개체 그래프에 있을 수 있는 알려진 형식 컬렉션을 직렬화하거나 역직렬화하기 위해 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 클래스의 새 인스턴스를 초기합니다.</summary>
      <param name="type">직렬화되거나 역직렬화되는 인스턴스 형식입니다.</param>
      <param name="rootName">직렬화하거나 역직렬화할 콘텐츠를 둘러싸는 XML 요소의 이름입니다. 기본값은 "root"입니다.</param>
      <param name="knownTypes">개체 그래프에 있을 수 있는 형식을 포함하는 <see cref="T:System.Type" />의 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)">
      <summary>
        <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 형식의 매개 변수를 통해 지정된 XML 루트 요소를 사용하여 지정된 형식의 개체를 직렬화하거나 역직렬화하기 위해 <see cref="T:System.Xml.XmlDictionaryString" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">직렬화되거나 역직렬화되는 인스턴스 형식입니다.</param>
      <param name="rootName">콘텐츠의 루트 요소 이름을 포함하는 <see cref="T:System.Xml.XmlDictionaryString" />입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
        <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 형식의 매개 변수를 통해 지정된 XML 루트 요소를 사용하여 지정된 형식의 개체 및 개체 그래프에 있을 수 있는 알려진 형식 컬렉션을 직렬화하거나 역직렬화하기 위해 <see cref="T:System.Xml.XmlDictionaryString" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">직렬화되거나 역직렬화되는 인스턴스 형식입니다.</param>
      <param name="rootName">콘텐츠의 루트 요소 이름을 포함하는 <see cref="T:System.Xml.XmlDictionaryString" />입니다.</param>
      <param name="knownTypes">개체 그래프에 있을 수 있는 형식을 포함하는 <see cref="T:System.Type" />의 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>직렬 변환기가 역직렬화할 수 있는 개체를 나타내는 XML 요소 위에 <see cref="T:System.Xml.XmlDictionaryReader" />가 배치되는지 여부를 지정하는 값을 가져옵니다.</summary>
      <param name="reader">JSON에서 매핑된 XML 스트림을 읽는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryReader" />입니다.</param>
      <returns>판독기가 올바르게 배치되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>역직렬화할 수 있는 개체에 <see cref="T:System.Xml.XmlReader" />가 배치되는지 여부를 확인합니다.</summary>
      <param name="reader">XML 스트림을 읽는 데 사용되는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <returns>판독기가 올바르게 배치되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <summary>JSON(JavaScript Object Notation) 형식의 문서 스트림을 읽고 역직렬화된 개체를 반환합니다.</summary>
      <param name="stream">읽을 <see cref="T:System.IO.Stream" />입니다.</param>
      <returns>역직렬화된 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>
        <see cref="T:System.Xml.XmlDictionaryReader" />를 사용하여 JSON에서 매핑된 XML 문서를 읽고 역직렬화된 개체를 반환합니다.</summary>
      <param name="reader">JSON에서 매핑된 XML 문서를 읽는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryReader" />입니다.</param>
      <returns>역직렬화된 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlDictionaryReader" />를 사용하여 JSON에서 매핑된 XML 문서를 읽고 역직렬화된 개체를 반환하며, 또한 직렬 변환기가 역직렬화를 시도하기 전에 적절한 요소에 배치되었음을 확인해야 하는지 여부를 지정할 수 있습니다.</summary>
      <param name="reader">JSON에서 매핑된 XML 문서를 읽는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryReader" />입니다.</param>
      <param name="verifyObjectName">바깥쪽 XML 요소 이름 및 네임스페이스가 예상 이름 및 네임스페이스와 일치하는지 여부를 확인하려면 <see langword="true" />이고, 확인을 건너뛰려면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</param>
      <returns>역직렬화된 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />를 사용하여 JSON에서 매핑된 XML 문서를 읽고 역직렬화된 개체를 반환합니다.</summary>
      <param name="reader">JSON에서 매핑된 XML 문서를 읽는 데 사용되는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <returns>역직렬화된 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />를 사용하여 JSON에서 매핑된 XML 문서를 읽고 역직렬화된 개체를 반환하며, 또한 직렬 변환기가 역직렬화를 시도하기 전에 적절한 요소에 배치되었음을 확인해야 하는지 여부를 지정할 수 있습니다.</summary>
      <param name="reader">JSON에서 매핑된 XML 문서를 읽는 데 사용되는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="verifyObjectName">바깥쪽 XML 요소 이름 및 네임스페이스가 예상 이름 및 네임스페이스와 일치하는지 확인하려면 <see langword="true" />이고, 확인을 건너뛰려면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</param>
      <returns>역직렬화된 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>
        <see cref="T:System.Xml.XmlDictionaryWriter" />를 사용하여 JSON에 매핑할 수 있는 XML 문서에 닫기 XML 요소를 씁니다.</summary>
      <param name="writer">JSON에 매핑할 XML 문서를 쓰는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" />를 사용하여 JSON에 매핑할 수 있는 XML 문서에 닫기 XML 요소를 씁니다.</summary>
      <param name="writer">JSON에 매핑된 XML 문서를 쓰는 데 사용되는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>지정된 개체를 JSON(JavaScript Object Notation) 데이터로 serialize하고 결과 JSON을 스트림에 씁니다.</summary>
      <param name="stream">결과를 쓸 대상 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="graph">스트림에 쓸 데이터를 포함하는 개체입니다.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">serialize하고 있는 형식이 데이터 계약 규칙을 따르지 않는 경우. <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 특성이 형식에 적용되지 않은 경우를 예로 들 수 있습니다.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">쓰고 있는 인스턴스에 문제가 있는 경우</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">serialize할 최대 개체 수가 초과된 경우. <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 속성을 확인합니다.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>JSON에 매핑할 수 있는 XML로 개체를 serialize합니다. <see cref="T:System.Xml.XmlDictionaryWriter" />를 사용하여 모든 개체 데이터(XML 요소, 콘텐츠, 닫기 요소)를 씁니다.</summary>
      <param name="writer">JSON에 매핑할 XML 문서 또는 스트림을 쓰는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</param>
      <param name="graph">쓸 데이터를 포함하는 개체입니다.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">serialize하고 있는 형식이 데이터 계약 규칙을 따르지 않는 경우. <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 특성이 형식에 적용되지 않은 경우를 예로 들 수 있습니다.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">쓰고 있는 인스턴스에 문제가 있는 경우</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">serialize할 최대 개체 수가 초과된 경우. <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 속성을 확인합니다.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>JSON에 매핑할 수 있는 XML로 개체를 serialize합니다. <see cref="T:System.Xml.XmlWriter" />를 사용하여 모든 개체 데이터(XML 요소, 콘텐츠, 닫기 요소)를 씁니다.</summary>
      <param name="writer">JSON에 매핑할 XML 문서를 쓰는 데 사용되는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="graph">쓸 데이터를 포함하는 개체입니다.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">serialize하고 있는 형식이 데이터 계약 규칙을 따르지 않는 경우. <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 특성이 형식에 적용되지 않은 경우를 예로 들 수 있습니다.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">쓰고 있는 인스턴스에 문제가 있는 경우</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">serialize할 최대 개체 수가 초과된 경우. <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 속성을 확인합니다.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>
        <see cref="T:System.Xml.XmlDictionaryWriter" />를 사용하여 JSON에 매핑할 수 있는 XML 콘텐츠를 씁니다.</summary>
      <param name="writer">쓸 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</param>
      <param name="graph">쓸 개체입니다.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">serialize하고 있는 형식이 데이터 계약 규칙을 따르지 않는 경우. <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 특성이 형식에 적용되지 않은 경우를 예로 들 수 있습니다.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">쓰고 있는 인스턴스에 문제가 있는 경우</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">serialize할 최대 개체 수가 초과된 경우. <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 속성을 확인합니다.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" />를 사용하여 JSON에 매핑할 수 있는 XML 콘텐츠를 씁니다.</summary>
      <param name="writer">쓰기를 수행하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="graph">쓸 개체입니다.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">serialize하고 있는 형식이 데이터 계약 규칙을 따르지 않는 경우. <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 특성이 형식에 적용되지 않은 경우를 예로 들 수 있습니다.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">쓰고 있는 인스턴스에 문제가 있는 경우</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">serialize할 최대 개체 수가 초과된 경우. <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 속성을 확인합니다.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>
        <see cref="T:System.Xml.XmlDictionaryWriter" />를 사용하여 JSON에 매핑할 수 있는 XML로 개체를 serialize하기 위한 열기 XML 요소를 씁니다.</summary>
      <param name="writer">XML 시작 요소를 쓰는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</param>
      <param name="graph">쓸 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" />를 사용하여 JSON에 매핑할 수 있는 XML로 개체를 serialize하기 위한 열기 XML 요소를 씁니다.</summary>
      <param name="writer">XML 시작 요소를 쓰는 데 사용되는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="graph">쓸 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat">
      <summary>개체 그래프에서 날짜 및 시간 형식 항목의 서식을 가져옵니다.</summary>
      <returns>개체 그래프에서 날짜 및 시간 형식 항목의 서식입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation">
      <summary>형식 정보를 내보내는 데이터 계약 JSON serializer 설정을 가져오거나 설정합니다.</summary>
      <returns>형식 정보를 내보내는 데이터 계약 JSON serializer 설정입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.IgnoreExtensionDataObject">
      <summary>deserialization 중에 알려지지 않은 데이터가 무시되는지 여부와 serialization 중에 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> 인터페이스가 무시되는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>알려지지 않은 데이터와 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" />를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <summary>
        <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />의 이 인스턴스를 사용하여 serialize된 개체 그래프에 있을 수 있는 형식의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 생성자에 알려진 형식으로 전달되는 예상 형식을 포함하는 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.MaxItemsInObjectGraph">
      <summary>한 번의 읽기 호출 또는 쓰기 호출에서 직렬 변환기가 직렬화하거나 역직렬화하는 개체 그래프의 최대 항목 수를 가져옵니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">항목 수가 최대값을 초과하는 경우</exception>
      <returns>직렬화하거나 역직렬화할 최대 항목 수입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes">
      <summary>읽기 전용 형식을 serialize하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>serialize 할 형식만 읽으려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat">
      <summary>간단한 사전 형식을 사용할지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>간단한 사전 형식을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings">
      <summary>
        <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 설정을 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.#ctor">
      <summary>
        <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.DateTimeFormat">
      <summary>날짜와 시간 표시를 위한 문화권 형식을 정의하는 DateTimeFormat을 가져오거나 설정합니다.</summary>
      <returns>날짜와 시간 표시를 위한 문화권 형식을 정의하는 DateTimeFormat입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.EmitTypeInformation">
      <summary>형식 정보를 내보내는 데이터 계약 JSON serializer 설정을 가져오거나 설정합니다.</summary>
      <returns>형식 정보를 내보내는 데이터 계약 JSON serializer 설정입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.IgnoreExtensionDataObject">
      <summary>클래스가 직렬화되거나 역직렬화될 때 해당 클래스의 확장에서 제공하는 데이터를 무시할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>클래스가 직렬화되거나 역직렬화될 때 해당 클래스의 확장에서 제공하는 데이터를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.KnownTypes">
      <summary>DataContractJsonSerializerSettings의 이 인스턴스를 사용하여 serialize된 개체 그래프에 있을 수 있는 형식의 컬렉션을 가져오거나 설정합니다.</summary>
      <returns>DataContractJsonSerializerSettings의 이 인스턴스를 사용하여 serialize된 개체 그래프에 있을 수 있는 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.MaxItemsInObjectGraph">
      <summary>개체 그래프에서 직렬화하거나 역직렬화할 최대 항목 수를 가져오거나 설정합니다.</summary>
      <returns>개체 그래프에서 직렬화하거나 역직렬화할 최대 항목 수입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.RootName">
      <summary>선택한 개체의 루트 이름을 가져오거나 설정합니다.</summary>
      <returns>선택한 개체의 루트 이름입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.SerializeReadOnlyTypes">
      <summary>읽기 전용 형식을 serialize하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>serialize 할 형식만 읽으려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.UseSimpleDictionaryFormat">
      <summary>간단한 사전 형식을 사용할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>간단한 사전 형식을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer">
      <summary>특정 스트림 또는 버퍼에서 읽기 위해 다시 사용할 때 JSON(JavaScript Object Notation) 판독기를 초기화하기 위한 인터페이스를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>JSON 인코딩 데이터를 포함하는 지정된 버퍼로 JSON 지원 판독기를 다시 초기화합니다.</summary>
      <param name="buffer">읽어올 입력 <see cref="T:System.Byte" /> 버퍼 배열입니다.</param>
      <param name="offset">
        <paramref name="buffer" />에서 읽어올 시작 위치입니다.</param>
      <param name="count">
        <paramref name="buffer" />에서 읽을 수 있는 바이트 수입니다.</param>
      <param name="encoding">판독기에서 사용하는 <see cref="T:System.Text.Encoding" /> 입니다.</param>
      <param name="quotas">적용할 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />입니다.</param>
      <param name="onClose">판독기가 닫힐 때 호출되는 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 대리자입니다.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>JSON 인코딩 데이터를 포함하는 지정된 스트림으로 JSON 지원 판독기를 다시 초기화합니다.</summary>
      <param name="stream">읽어올 입력 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="encoding">판독기에서 사용하는 <see cref="T:System.Text.Encoding" /> 입니다.</param>
      <param name="quotas">적용할 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />입니다.</param>
      <param name="onClose">판독기가 닫히면 호출할 대리자입니다.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
      <summary>특정 출력 스트림에 쓰기 위해 다시 사용할 때 JSON(JavaScript Object Notation) 작성기를 초기화하기 위한 인터페이스를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>지정된 문서 인코딩을 사용하여 JSON 작성기를 지정된 출력 스트림으로 초기화하거나 다시 초기화합니다.</summary>
      <param name="stream">작성기가 쓰기를 수행할 대상 출력 <see cref="T:System.IO.Stream" /> 입니다.</param>
      <param name="encoding">출력 스트림의 문자 인코딩을 지정하는 <see cref="T:System.Text.Encoding" /> 입니다.</param>
      <param name="ownsStream">
        <see langword="true" />이면 완료될 때 작성기에서 출력 스트림이 닫히고, <see langword="false" />이면 닫히지 않습니다.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary>스트림 또는 버퍼에서 JSON(JavaScript Object Notation) 인코딩 데이터를 읽고 XML Infoset에 매핑할 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />의 인스턴스와, XML Infoset을 JSON에 매핑하고 JSON으로 인코딩된 데이터를 스트림에 쓸 수 있는 <see cref="T:System.Xml.XmlDictionaryWriter" />의 인스턴스를 생성합니다.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>지정된 크기와 오프셋 및 문자 인코딩을 사용하여 JSON(JavaScript Object Notation) 인코딩 버퍼를 XML Infoset에 매핑할 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />를 만듭니다.</summary>
      <param name="buffer">읽어올 입력 <see cref="T:System.Byte" /> 버퍼 배열입니다.</param>
      <param name="offset">
        <paramref name="buffer" />에서 읽어올 시작 위치입니다.</param>
      <param name="count">
        <paramref name="buffer" />에서 읽을 수 있는 바이트 수입니다.</param>
      <param name="encoding">판독기에서 사용하는 문자 인코딩을 지정하는 <see cref="T:System.Text.Encoding" />입니다. 이 값이 <see langword="null" />로 지정되면 판독기는 인코딩을 자동으로 감지하려고 시도합니다.</param>
      <param name="quotas">신뢰할 수 없는 데이터를 읽을 때 서비스 거부 공격을 방지하는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />입니다.</param>
      <param name="onClose">판독기가 닫힐 때 호출되는 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 대리자입니다. 기본값은 <see langword="null" />입니다.</param>
      <returns>JSON(JavaScript Object Notation)을 읽을 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>지정된 크기와 오프셋을 사용하여 JSON(JavaScript Object Notation) 인코딩 버퍼를 XML Infoset에 매핑할 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" /> 를 만듭니다.</summary>
      <param name="buffer">읽어올 입력 <see cref="T:System.Byte" /> 버퍼 배열입니다.</param>
      <param name="offset">
        <paramref name="buffer" />에서 읽어올 시작 위치입니다.</param>
      <param name="count">
        <paramref name="buffer" />에서 읽을 수 있는 바이트 수입니다.</param>
      <param name="quotas">신뢰할 수 없는 데이터를 읽을 때 서비스 거부 공격을 방지하는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />입니다.</param>
      <returns>JSON(JavaScript Object Notation)을 읽을 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>JSON(JavaScript Object Notation) 인코딩 버퍼를 XML Infoset에 매핑할 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />를 만듭니다.</summary>
      <param name="buffer">읽어올 입력 <see cref="T:System.Byte" /> 버퍼 배열입니다.</param>
      <param name="quotas">신뢰할 수 없는 데이터를 읽을 때 서비스 거부 공격을 방지하는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />입니다.</param>
      <returns>JSON 데이터를 처리할 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>지정된 크기와 오프셋을 사용하여 JSON(JavaScript Object Notation) 인코딩 스트림을 XML Infoset에 매핑할 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />를 만듭니다.</summary>
      <param name="stream">읽어올 입력 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="encoding">판독기에서 사용하는 문자 인코딩을 지정하는 <see cref="T:System.Text.Encoding" />입니다. 이 값이 <see langword="null" />로 지정되면 판독기는 인코딩을 자동으로 감지하려고 시도합니다.</param>
      <param name="quotas">신뢰할 수 없는 데이터를 읽을 때 서비스 거부 공격을 방지하는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />입니다.</param>
      <param name="onClose">판독기가 닫힐 때 호출되는 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 대리자입니다.</param>
      <returns>JSON(JavaScript Object Notation)을 읽을 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>JSON(JavaScript Object Notation) 인코딩 스트림을 XML Infoset에 매핑할 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />를 만듭니다.</summary>
      <param name="stream">읽어올 입력 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="quotas">신뢰할 수 없는 데이터를 읽을 때 서비스 거부 공격을 방지하는 데 사용되는 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />입니다.</param>
      <returns>JSON(JavaScript Object Notation)을 읽을 수 있는 <see cref="T:System.Xml.XmlDictionaryReader" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary>JSON으로 인코딩된 데이터를 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />를 만듭니다.</summary>
      <param name="stream">JSON 작성기용 출력 <see cref="T:System.IO.Stream" />입니다.</param>
      <returns>JSON으로 인코딩된 데이터를 XML Infoset을 기반으로 하는 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>지정된 문자 인코딩을 사용하여 JSON 인코딩 데이터를 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />를 만듭니다.</summary>
      <param name="stream">JSON 작성기용 출력 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="encoding">작성기에서 사용하는 문자 인코딩을 지정하는 <see cref="T:System.Text.Encoding" />입니다. 기본 인코딩은 UTF-8입니다.</param>
      <returns>JSON으로 인코딩된 데이터를 XML Infoset을 기반으로 하는 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>지정된 문자 인코딩을 사용하여 JSON 인코딩 데이터를 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />를 만듭니다.</summary>
      <param name="stream">JSON 작성기용 출력 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="encoding">작성기에서 사용하는 문자 인코딩을 지정하는 <see cref="T:System.Text.Encoding" />입니다. 기본 인코딩은 UTF-8입니다.</param>
      <param name="ownsStream">
        <see langword="true" />이면 완료될 때 작성기에서 출력 스트림이 닫히고, <see langword="false" />이면 닫히지 않습니다. 기본값은 <see langword="true" />입니다.</param>
      <returns>JSON으로 인코딩된 데이터를 XML Infoset을 기반으로 하는 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>지정된 문자를 사용하여 JSON 인코딩 데이터를 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />를 만듭니다.</summary>
      <param name="stream">JSON 작성기용 출력 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="encoding">작성기에서 사용하는 문자 인코딩을 지정하는 <see cref="T:System.Text.Encoding" />입니다. 기본 인코딩은 UTF-8입니다.</param>
      <param name="ownsStream">
        <see langword="true" />이면 완료될 때 작성기에서 출력 스트림이 닫히고, <see langword="false" />이면 닫히지 않습니다. 기본값은 <see langword="true" />입니다.</param>
      <param name="indent">
        <see langword="true" />인 경우 출력은 여러 줄 형식을 사용하며 각 수준에서 적절히 들여 씁니다. 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>JSON으로 인코딩된 데이터를 XML Infoset을 기반으로 하는 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
      <summary>지정된 문자를 사용하여 JSON 인코딩 데이터를 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />를 만듭니다.</summary>
      <param name="stream">JSON 작성기용 출력 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="encoding">작성기에서 사용하는 문자 인코딩을 지정하는 <see cref="T:System.Text.Encoding" />입니다. 기본 인코딩은 UTF-8입니다.</param>
      <param name="ownsStream">
        <see langword="true" />이면 완료될 때 작성기에서 출력 스트림이 닫히고, <see langword="false" />이면 닫히지 않습니다. 기본값은 <see langword="true" />입니다.</param>
      <param name="indent">
        <see langword="true" />인 경우 출력은 여러 줄 형식을 사용하며 각 수준에서 적절히 들여 씁니다. 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="indentChars">각 수준을 들여쓰는 데 사용되는 문자열입니다.</param>
      <returns>JSON으로 인코딩된 데이터를 XML Infoset을 기반으로 하는 스트림에 쓰는 <see cref="T:System.Xml.XmlDictionaryWriter" />입니다.</returns>
    </member>
  </members>
</doc>
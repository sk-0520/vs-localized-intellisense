<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>Proporciona una implementación de <see cref="T:System.Windows.WeakEventManager" /> para que pueda usar el modelo de "agente de escucha de evento débil" con el fin de asociar agentes de escucha para el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>Agrega el controlador de eventos especificado, que se llama cuando el origen especificado provoca el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> .</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Agrega el agente de escucha especificado al evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> del origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
      <param name="listener">Objeto que se va a agregar como agente de escucha.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary>Devuelve un nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <returns>Nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>Quita el controlador de eventos especificado del origen indicado.</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Quita el agente de escucha especificado del evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> del origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
      <param name="listener">Agente de escucha que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>Inicia la escucha del evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> en el origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>Detiene la escucha del evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> en el origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>Proporciona una implementación de <see cref="T:System.Windows.WeakEventManager" /> para que pueda usar el modelo de "agente de escucha de evento débil" con el fin de asociar agentes de escucha para el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>Agrega el controlador de eventos especificado, que se llama cuando el origen especificado provoca el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> .</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</param>
      <param name="handler">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Agrega el agente de escucha especificado al evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> del origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
      <param name="listener">Objeto que se va a agregar como agente de escucha.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary>Devuelve un nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</summary>
      <returns>Nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>Quita el controlador de eventos especificado del origen indicado.</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Quita el agente de escucha especificado del evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> del origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
      <param name="listener">Agente de escucha que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>Inicia la escucha del evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> en el origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>Detiene la escucha del evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> en el origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>Proporciona información del evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CurrentChangingEventArgs" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> con el valor <paramref name="isCancelable" /> especificado.</summary>
      <param name="isCancelable">Valor que indica si se puede cancelar el evento.</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>Obtiene o establece un valor que indica si se cancelará el evento.</summary>
      <exception cref="T:System.InvalidOperationException">Si el valor de <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> es <see langword="false" />.</exception>
      <returns>
        <see langword="true" /> si se va a cancelar el evento; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>Obtiene un valor que indica si se puede cancelar el evento.</summary>
      <returns>
        <see langword="true" /> si el evento se puede cancelar, de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" />.</summary>
      <param name="sender">El objeto que ha generado el evento.</param>
      <param name="e">Información acerca del evento.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>Proporciona una implementación de <see cref="T:System.Windows.WeakEventManager" /> para que pueda usar el modelo de "agente de escucha de evento débil" con el fin de asociar agentes de escucha para el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>Agrega el controlador de eventos especificado, que se llama cuando el origen especificado provoca el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> .</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Agrega el agente de escucha especificado al evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> del origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
      <param name="listener">Objeto que se va a agregar como agente de escucha.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary>Devuelve un nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</summary>
      <returns>Nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>Quita el controlador de eventos especificado del origen indicado.</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Quita el agente de escucha especificado del evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> del origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
      <param name="listener">Agente de escucha que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>Inicia la escucha del evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> en el origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>Detiene la escucha del evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> en el origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>Proporciona una extensión de <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa las características de propiedad adicionales de una propiedad de dependencia.</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Habilita la notificación a otros objetos cuando cambia esta propiedad.</summary>
      <param name="component">Componente para el cual se va a agregar el controlador.</param>
      <param name="handler">Delegado que se va a agregar como agente de escucha.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>Devuelve un valor que indica si al restablecer un objeto, cambia su valor.</summary>
      <param name="component">Componente cuya capacidad de restablecerse se va a probar.</param>
      <returns>
        <see langword="true" /> si al restablecer el componente cambia su valor; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>Compara dos instancias de <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para determinar si sus valores son iguales.</summary>
      <param name="obj">Objeto <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> que se va a comparar con la instancia actual.</param>
      <returns>
        <see langword="true" /> si los valores son equivalentes; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>Devuelve <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para un nombre de propiedad proporcionado.</summary>
      <param name="name">El nombre registrado de una propiedad de dependencia o una propiedad adjunta.</param>
      <param name="ownerType">
        <see cref="T:System.Type" /> del objeto que posee la definición de propiedad.</param>
      <param name="targetType">
        <see cref="T:System.Type" /> del objeto para el que quiere establecer la propiedad.</param>
      <returns>
        <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> solicitado.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>Devuelve <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para un nombre de propiedad proporcionado.</summary>
      <param name="name">El nombre registrado de una propiedad de dependencia o una propiedad adjunta.</param>
      <param name="ownerType">
        <see cref="T:System.Type" /> del objeto que posee la definición de propiedad.</param>
      <param name="targetType">
        <see cref="T:System.Type" /> del objeto para el que quiere establecer la propiedad.</param>
      <param name="ignorePropertyType">Especifica que debe omitirse el tipo de propiedad.</param>
      <returns>
        <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> solicitado.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>Devuelve una clase <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para una clase <see cref="T:System.ComponentModel.PropertyDescriptor" /> suministrada.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> que se va a comprobar.</param>
      <returns>Si la propiedad descrita por el parámetro <paramref name="property" /> es una propiedad de dependencia, devuelve una clase <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> válida. De lo contrario, devuelve <see langword="null" /><see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>Devuelve un <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para un tipo de destino y una propiedad de dependencia proporcionados.</summary>
      <param name="dependencyProperty">Identificador de una propiedad de dependencia.</param>
      <param name="targetType">Tipo del objeto en el que está establecida la propiedad.</param>
      <returns>
        <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para la propiedad de dependencia proporcionada.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Devuelve un <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="instance">Componente cuyas propiedades se van a obtener.</param>
      <param name="filter">Matriz de tipo <see cref="T:System.Attribute" /> que se va a usar como filtro.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con las propiedades que coinciden con los atributos especificados del componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>Obtiene un editor del tipo especificado.</summary>
      <param name="editorBaseType">Tipo base del editor que se utiliza para diferenciar entre varios editores compatibles con una propiedad.</param>
      <returns>Instancia del tipo de editor solicitado o <see langword="null" /> si no se encuentra ningún editor.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>Devuelve el código hash de este objeto <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</summary>
      <returns>Código hash de un entero con signo de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>Devuelve el valor actual de la propiedad en un componente.</summary>
      <param name="component">Instancia del componente.</param>
      <returns>Valor solicitado.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Habilita la notificación a otros objetos cuando cambia esta propiedad.</summary>
      <param name="component">Componente para el cual se va a agregar el controlador.</param>
      <param name="handler">Delegado que se va a agregar como agente de escucha.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>Restablece el valor de esta propiedad del componente en el valor predeterminado.</summary>
      <param name="component">Componente cuyo valor de propiedad se va a restablecer en el valor predeterminado.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Establece el valor del componente en otro valor.</summary>
      <param name="component">Componente con el valor de propiedad que se va a establecer.</param>
      <param name="value">Nuevo valor.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Indica si se debe conservar el valor de esta propiedad mediante procesos de serialización.</summary>
      <param name="component">Componente con la propiedad cuya persistencia se va a examinar.</param>
      <returns>
        <see langword="true" /> si se debe almacenar la propiedad; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>Convierte el valor de esta instancia en la representación de cadena equivalente.</summary>
      <returns>Devuelve el valor de <see cref="P:System.ComponentModel.MemberDescriptor.Name" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>Obtiene la colección de atributos de este miembro.</summary>
      <returns>Colección de atributos <see cref="T:System.ComponentModel.AttributeCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>Obtiene el nombre de la categoría a la que pertenece el miembro, tal como se especifica en <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>Nombre de la categoría a la que pertenece el miembro. Si no hay ningún <see cref="T:System.ComponentModel.CategoryAttribute" />, el nombre de categoría se establece en la categoría predeterminada, <see langword="Misc" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>Obtiene el tipo del componente al que está enlazada esta propiedad.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo de componente al que está enlazada esta propiedad. Cuando se llama al método <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> o <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />, el objeto especificado puede ser una instancia de este tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>Obtiene el convertidor de tipos de esta propiedad.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> que se utiliza para convertir el <see cref="T:System.Type" /> de esta propiedad.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>Devuelve el identificador de la propiedad de dependencia.</summary>
      <returns>Identificador de la propiedad de dependencia.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>Obtiene la descripción del miembro tal como se especifica en <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>Descripción del miembro. Si no hay ningún objeto <see cref="T:System.ComponentModel.DescriptionAttribute" />, el valor de propiedad se establece en el valor predeterminado, que es una cadena vacía ("").</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>Obtiene o establece una devolución de llamada que los diseñadores usan para modificar el valor vigente de una propiedad de dependencia antes de que el valor de propiedad de dependencia se almacene en el motor de propiedad de dependencia.</summary>
      <returns>Devolución de llamada que los diseñadores usan para modificar el valor vigente de una propiedad de dependencia antes de que el valor de propiedad de dependencia se almacene en el motor de propiedad de dependencia.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>Obtiene si este miembro debe establecerse sólo en tiempo de diseño según se especifica en <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>
        <see langword="true" /> si este miembro debe establecerse sólo en tiempo de diseño; <see langword="false" /> si el miembro puede establecerse en tiempo de ejecución. Si no hay ningún <see cref="T:System.ComponentModel.DesignOnlyAttribute" />, el valor que se devuelve es el valor predeterminado, siendo éste <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>Obtiene el nombre que se puede mostrar en una ventana, como la ventana Propiedades.</summary>
      <returns>Nombre que se va a mostrar para la propiedad.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>Obtiene un valor que indica si la propiedad está registrada como propiedad adjunta y si se utiliza a través de un uso adjunto.</summary>
      <returns>
        <see langword="true" /> si la propiedad es una propiedad adjunta; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>Obtiene un valor que indica el valor de <see cref="T:System.ComponentModel.BrowsableAttribute" /> en la propiedad.</summary>
      <returns>Es <see langword="true" /> si se especificó <see cref="T:System.ComponentModel.BrowsableAttribute" /> en la propiedad; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>Obtiene un valor que indica si esta propiedad se debe traducir, según se especifica en <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns>Es <see langword="true" /> si el miembro está marcado con el constructor <see cref="T:System.ComponentModel.LocalizableAttribute" /> del valor true; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>Obtiene un valor que indica si esta propiedad es de sólo lectura.</summary>
      <returns>
        <see langword="true" /> si la propiedad es de sólo lectura; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>Obtiene los metadatos asociados con la propiedad de dependencia.</summary>
      <returns>Metadatos de la propiedad de dependencia.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>Obtiene la clase <see cref="T:System.Type" /> representada de la propiedad de dependencia.</summary>
      <returns>
        <see cref="T:System.Type" /> de la propiedad de dependencia.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>Indica si las notificaciones de cambio de valor de esta propiedad pueden originarse fuera del descriptor de la propiedad (por ejemplo, en el propio componente) o si se originarán únicamente en las llamadas directas al método <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />.</summary>
      <returns>Es <see langword="true" /> si las notificaciones de esta propiedad pueden originarse fuera del descriptor de la propiedad (por ejemplo, en el propio componente). Es <see langword="false" /> si las notificaciones se originarán únicamente en las llamadas directas realizadas al método <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary>Proporciona una implementación de <see cref="T:System.Windows.WeakEventManager" /> para que pueda usar el modelo de "agente de escucha de evento débil" con el fin de asociar agentes de escucha para el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>Agrega el controlador de eventos especificado, que se llama cuando el origen especificado provoca el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> .</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary>Devuelve un nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
      <returns>Nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>Quita el controlador de eventos especificado del origen indicado.</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary>Inicia la escucha del evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> en el origen especificado.</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary>Detiene la escucha del evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> en el origen especificado.</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>Proporciona una clase base abstracta para los tipos que describen cómo dividir los elementos de una colección en grupos.</summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.GroupDescription" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>Devuelve los nombres de grupo para el elemento especificado.</summary>
      <param name="item">Elemento para el que se van a devolver nombres de grupo.</param>
      <param name="level">Nivel de agrupación.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> que se va a suministrar al convertidor.</param>
      <returns>Nombres de grupo para el elemento especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>Devuelve un valor que indica si el nombre del grupo y el nombre del elemento coinciden, lo que indica que el elemento pertenece al grupo.</summary>
      <param name="groupName">Nombre del grupo que se va a comprobar.</param>
      <param name="itemName">Nombre del elemento que se va a comprobar.</param>
      <returns>
        <see langword="true" /> si los nombres coinciden y el elemento pertenece al grupo; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" />.</summary>
      <param name="e">Argumentos del evento que se está generando.</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>Devuelve si los procesos de serialización deben serializar el valor efectivo de la propiedad <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> en instancias de esta clase.</summary>
      <returns>Es <see langword="true" /> si el valor de propiedad <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> debe serializarse; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeSortDescriptions">
      <summary>Devuelve si los procesos de serialización deben serializar el valor efectivo de la propiedad <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> en instancias de esta clase.</summary>
      <returns>Es <see langword="true" /> si el valor de propiedad <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> debe serializarse; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.CustomSort">
      <summary>Obtiene o establece un comparador personalizado que ordena grupos mediante un objeto que implementa <see cref="T:System.Collections.IComparer" />.</summary>
      <returns>Comparador personalizado que ordena grupos mediante un objeto que implementa <see cref="T:System.Collections.IComparer" />.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>Obtiene la colección de nombres que se usan para inicializar un grupo con un conjunto de subgrupos con los nombres especificados.</summary>
      <returns>Colección de nombres que se usan para inicializar un grupo con un conjunto de subgrupos con los nombres especificados.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.SortDescriptions">
      <summary>Obtiene la colección de criterios de ordenación por los que ordenar los grupos.</summary>
      <returns>La colección de criterios de ordenación por los que ordenar los grupos.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>Permite que las colecciones tengan las funcionalidades de administración de registros actual, ordenación personalizada, filtrado y agrupación.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>Al implementar esta interfaz, se genera este evento después de cambiar el elemento actual.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>Al implementar esta interfaz, se genera este evento antes de cambiar el elemento actual. El controlador de eventos puede cancelar este evento.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>Devuelve un valor que indica si un determinado elemento pertenece a esta vista de colección.</summary>
      <param name="item">Objeto que se va a comprobar.</param>
      <returns>
        <see langword="true" /> si el elemento pertenece a esta vista de colección; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>Especifica un ciclo de aplazamiento que puede usar para fusionar mediante combinación los cambios en la vista y retrasar la actualización automática.</summary>
      <returns>Objeto <see cref="T:System.IDisposable" /> que puede usar para eliminar el objeto que realiza la llamada.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>Establece que el elemento especificado sea la propiedad <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> de la vista.</summary>
      <param name="item">Elemento que se va a establecer como <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</param>
      <returns>
        <see langword="true" /> si la propiedad resultante <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> está en la vista; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>Establece el primer elemento de la vista como <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>Es <see langword="true" /> si el <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante es un elemento que se encuentra dentro de la vista; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>Establece el último elemento de la vista como <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>Es <see langword="true" /> si la propiedad <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante es un elemento de la vista; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>Establece el elemento situado después de <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> en la vista como <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>Es <see langword="true" /> si el <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante es un elemento que se encuentra dentro de la vista; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>Establece que el elemento en el índice especificado sea la propiedad <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> de la vista.</summary>
      <param name="position">Índice en el que se va a establecer <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</param>
      <returns>Es <see langword="true" /> si el <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante es un elemento que se encuentra dentro de la vista; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>Establece el elemento situado delante de la propiedad <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> de la vista como la propiedad <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>Es <see langword="true" /> si el <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante es un elemento que se encuentra dentro de la vista; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>Vuelve a crear la vista.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>Obtiene un valor que indica si esta vista admite el filtrado mediante la propiedad <see cref="P:System.ComponentModel.ICollectionView.Filter" />.</summary>
      <returns>
        <see langword="true" /> si esta vista admite el filtrado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>Obtiene un valor que indica si esta vista admite la agrupación mediante la propiedad <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" />.</summary>
      <returns>
        <see langword="true" /> si esta vista admite la agrupación; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>Obtiene un valor que indica si esta vista admite la ordenación mediante la propiedad <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" />.</summary>
      <returns>
        <see langword="true" /> si esta vista admite la ordenación; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>Obtiene o establece la información de referencia cultural de cualquier operación de la vista que pueda diferir en la referencia cultural, como la ordenación.</summary>
      <returns>Referencia cultural que se va a usar durante la ordenación.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>Obtiene el elemento actual de la vista.</summary>
      <returns>Elemento actual de la vista o <see langword="null" /> si no hay ningún elemento actual.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>Obtiene la posición ordinal de <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> dentro de la vista.</summary>
      <returns>Posición ordinal de <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> dentro de la vista.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>Obtiene o establece una devolución de llamada que se usa para determinar si un elemento es adecuado para su inclusión en la vista.</summary>
      <returns>Método usado para determinar si un elemento es adecuado para su inclusión en la vista.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>Obtiene una colección de objetos <see cref="T:System.ComponentModel.GroupDescription" /> que describen cómo se agrupan los elementos de la colección en la vista.</summary>
      <returns>Colección de objetos <see cref="T:System.ComponentModel.GroupDescription" /> que describen cómo se agrupan los elementos de la colección en la vista.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>Obtiene los grupos de nivel superior.</summary>
      <returns>Colección de solo lectura de los grupos de nivel superior o <see langword="null" /> si no hay ningún grupo.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>Obtiene un valor que indica si la propiedad <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> de la vista está más allá del final de la colección.</summary>
      <returns>
        <see langword="true" /> si el elemento <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> de la vista está más allá del final de la colección; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>Obtiene un valor que indica si la propiedad <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> de la vista está más allá del comienzo de la colección.</summary>
      <returns>
        <see langword="true" /> es si el <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> de la vista está más allá del principio de la colección; en caso contrario, es <see langword="false" /> .</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>Devuelve un valor que indica si la vista resultante está vacía.</summary>
      <returns>
        <see langword="true" /> si la vista resultante está vacía; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>Obtiene una colección de objetos <see cref="T:System.ComponentModel.SortDescription" /> que describen cómo se ordenan los elementos de la colección en la vista.</summary>
      <returns>Colección de objetos <see cref="T:System.ComponentModel.SortDescription" /> que describen cómo se ordenan los elementos de la colección en la vista.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>Devuelve la colección subyacente.</summary>
      <returns>Un objeto <see cref="T:System.Collections.IEnumerable" /> de la colección subyacente.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>Interfaz que habilita la implementación de colecciones a fin de crear una vista para sus datos. Normalmente, el código de usuario no llama a métodos en esta interfaz.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>Crea una nueva vista en la colección que implementa esta interfaz. Normalmente, el código de usuario no llama a este método.</summary>
      <returns>Vista recién creada.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary>Define propiedades que permiten ordenar, agrupar y filtrar un objeto <see cref="T:System.Windows.Data.CollectionView" /> en tiempo real.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary>Obtiene un valor que indica si la vista de colección admite la activación o desactivación del filtrado de datos en tiempo real.</summary>
      <returns>
        <see langword="true" /> si la vista de colección admite la activación o desactivación del filtrado en tiempo real; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary>Obtiene un valor que indica si la vista de colección admite activar o desactivar la agrupación de datos en tiempo real.</summary>
      <returns>
        <see langword="true" /> si la vista de colección admite activar o desactivar la agrupación activa; si no, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary>Obtiene un valor que indica si la vista de colección admite activar o desactivar la ordenación de datos en tiempo real.</summary>
      <returns>
        <see langword="true" /> si la vista de colección admite activar o desactivar la ordenación activa; si no, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary>Obtiene o establece un valor que indica si está habilitado el filtrado de datos en tiempo real.</summary>
      <returns>Es <see langword="true" /> si el filtrado de datos en tiempo real está habilitado; es <see langword="false" /> si el filtrado activo no está habilitado; es <see langword="null" /> si no se puede determinar si la vista de colección implementa el filtrado activo.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary>Obtiene o establece un valor que indica si está habilitado la agrupación de datos en tiempo real.</summary>
      <returns>Es <see langword="true" /> si la agrupación de datos en tiempo real está habilitada; es <see langword="false" /> si la agrupación activa no está habilitada; es <see langword="null" /> si no se puede determinar si la vista de colección implementa la agrupación activa.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary>Obtiene o establece un valor que indica si está habilitado la ordenación en tiempo real.</summary>
      <returns>Es <see langword="true" /> si la ordenación de datos en tiempo real está habilitada; es <see langword="false" /> si la ordenación activa no está habilitada; es <see langword="null" /> si no se puede determinar si la vista de colección implementa la ordenación activa.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary>Obtiene una colección de cadenas que especifican las propiedades que participan en el filtrado de datos en tiempo real.</summary>
      <returns>Colección de cadenas que especifican las propiedades que participan en el filtrado de datos en tiempo real.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary>Obtiene una colección de cadenas que especifican las propiedades que participan en la agrupación de datos en tiempo real.</summary>
      <returns>Colección de cadenas que especifican las propiedades que participan en la agrupación de datos en tiempo real.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary>Obtiene una colección de cadenas que especifican las propiedades que participan en la ordenación de datos en tiempo real.</summary>
      <returns>Colección de cadenas que especifican las propiedades que participan en la ordenación de datos en tiempo real.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>Define métodos y propiedades que <see cref="T:System.Windows.Data.CollectionView" /> implementa para ofrecer capacidades de edición a una colección.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>Agrega un nuevo elemento a la colección.</summary>
      <returns>Nuevo elemento que se agrega a la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>Finaliza la transacción de edición y, si es posible, restaura el valor original del elemento.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>Finaliza la transacción de adición y descarta el nuevo elemento pendiente.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>Finaliza la transacción de edición y guarda los cambios pendientes.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>Finaliza la transacción de adición y guarda el nuevo elemento pendiente.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>Inicia una transacción de edición del elemento especificado.</summary>
      <param name="item">Elemento que va a editarse.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>Quita el elemento especificado de la colección.</summary>
      <param name="item">Elemento que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>Quita de la colección un elemento situado en la posición especificada.</summary>
      <param name="index">Posición del elemento que va a quitarse.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0 o mayor que el número de elementos de la vista de colección.</exception>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>Obtiene un valor que indica si puede agregarse un elemento nuevo a la colección.</summary>
      <returns>
        <see langword="true" /> si puede agregarse un nuevo elemento a la colección; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>Obtiene un valor que indica si la vista de colección puede descartar los cambios pendientes y restaurar los valores originales de un objeto editado.</summary>
      <returns>
        <see langword="true" /> si la vista de colección puede descartar los cambios pendientes y restaurar los valores originales de un objeto editado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>Obtiene un valor que indica si un elemento puede quitarse de la colección.</summary>
      <returns>
        <see langword="true" /> si un elemento puede quitarse de la colección; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>Obtiene el elemento que se está agregando durante la transacción de adición actual.</summary>
      <returns>Elemento que se está agregando si <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> es <see langword="true" />; en caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>Obtiene el elemento de la colección que se está editando.</summary>
      <returns>Elemento de la colección que se está editando si <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> es <see langword="true" />; de lo contrario, <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>Obtiene un valor que indica si hay una transacción de adición en curso.</summary>
      <returns>Es <see langword="true" /> si hay una transacción de adición en curso; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>Obtiene un valor que indica si hay una transacción de edición en curso.</summary>
      <returns>
        <see langword="true" /> si hay una transacción de edición en curso; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>Obtiene o establece la posición del nuevo marcador de posición de elemento en la vista de colección.</summary>
      <returns>Uno de los valores de enumeración que especifica la posición del nuevo marcador de posición de elemento en la vista de colección.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>Define métodos y propiedades que una clase <see cref="T:System.Windows.Data.CollectionView" /> implementa para poder especificar elementos de adición de un tipo determinado.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>Agrega a la colección el objeto especificado.</summary>
      <param name="newItem">El objeto que se va a agregar a la colección.</param>
      <returns>Objeto que se agrega a la colección.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>Obtiene un valor que indica si el objeto especificado puede agregarse a la colección.</summary>
      <returns>Es <see langword="true" /> si se puede agregar el objeto especificado a la colección; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>Define una propiedad que proporciona información sobre las propiedades de un objeto.</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>Obtiene una colección que contiene información sobre las propiedades que están disponibles en los elementos de una colección.</summary>
      <returns>Colección que contiene información sobre las propiedades que están disponibles en los elementos de una colección.</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>Contiene información de una propiedad.</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ItemPropertyInfo" />.</summary>
      <param name="name">Nombre de la propiedad.</param>
      <param name="type">Tipo de la propiedad.</param>
      <param name="descriptor">Objeto que contiene información adicional sobre la propiedad.</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>Obtiene un objeto que contiene información adicional sobre la propiedad.</summary>
      <returns>Objeto que contiene información adicional sobre la propiedad.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>Obtiene el nombre de la propiedad.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>Obtiene el tipo de la propiedad.</summary>
      <returns>Tipo de la propiedad.</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>Especifica en qué lugar de la colección aparece el marcador de posición de un nuevo elemento.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>El marcador de posición de un elemento nuevo aparece al principio de la colección.  Los elementos nuevos están al principio de la colección, detrás del correspondiente marcador de posición.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>El marcador de posición de un elemento nuevo aparece al final de la colección. Los elementos nuevos se agregan al final de la colección, delante del correspondiente marcador de posición.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>La colección no usa un marcador de posición de elemento nuevo. La posición de los elementos agregados depende de la colección subyacente.  Normalmente, se agregan al final de la colección.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>Proporciona una implementación de <see cref="T:System.Windows.WeakEventManager" /> para que pueda usar el modelo de "agente de escucha de evento débil" con el fin de asociar agentes de escucha para el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>Agrega el controlador de eventos especificado, que se llama cuando el origen especificado provoca el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> para la propiedad especificada.</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
      <param name="propertyName">Nombre de la propiedad existente en <paramref name="source" /> donde se escucharán los cambios. Se establece en <see cref="F:System.String.Empty" /> para indicar "cualquier propiedad".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Hay más de un método asociado a <paramref name="handler" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Agrega el agente de escucha especificado a la lista de agentes de escucha en el origen especificado.</summary>
      <param name="source">Objeto con el evento.</param>
      <param name="listener">Objeto que se va a agregar como agente de escucha.</param>
      <param name="propertyName">Nombre de la propiedad existente en <paramref name="source" /> donde se escucharán los cambios. Se establece en <see cref="F:System.String.Empty" /> para indicar "cualquier propiedad".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary>Devuelve un nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
      <returns>Nuevo objeto para contener agentes de escucha para el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Quita de los datos los agentes de escucha que ya no están activos para el origen especificado.</summary>
      <param name="source">Objeto de origen del que quitar todos los agentes de escucha.</param>
      <param name="data">Datos que se van a purgar. Se esperaba que fuese <see cref="T:System.Collections.Specialized.HybridDictionary" />.</param>
      <param name="purgeAll">Se establece en <see langword="true" /> para dejar de escuchar y quitar todos los datos.</param>
      <returns>Es <see langword="true" /> si se han quitado algunas entradas; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>Quita el controlador de eventos especificado del origen indicado.</summary>
      <param name="source">Objeto de origen que provoca el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
      <param name="handler">Delegado que controla el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
      <param name="propertyName">Nombre de la propiedad existente en <paramref name="source" /> donde se dejarán de escuchar los cambios. Se establece en <see cref="F:System.String.Empty" /> para indicar "cualquier propiedad".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Hay más de un método asociado a <paramref name="handler" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Quita el agente de escucha especificado de la lista de agentes de escucha en el origen proporcionado.</summary>
      <param name="source">Objeto que se va a quitar del agente de escucha.</param>
      <param name="listener">Agente de escucha que se va a quitar.</param>
      <param name="propertyName">Nombre de la propiedad existente en <paramref name="source" /> donde se dejarán de escuchar los cambios. Se establece en <see cref="F:System.String.Empty" /> para indicar "cualquier propiedad".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>Inicia la escucha del evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> en el origen proporcionado.</summary>
      <param name="source">Objeto en el que se inicia la escucha de <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>Detiene la escucha del evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> en el origen proporcionado.</summary>
      <param name="source">Objeto de origen en el que se detiene la escucha de <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>Especifica de qué propiedades deben informar los descriptores de tipos, específicamente el método <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>Este miembro admite la infraestructura de .NET Framework y no está prevista su utilización directa desde el código.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</summary>
      <param name="filter">Las opciones que describen este filtro de propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el actual <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> Atributo de .NET Framework es igual a un objeto especificado.</summary>
      <param name="value">Objeto que se va a comparar con <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> especificado es igual al objeto <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>Devuelve el código hash del <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> Atributo de .NET Framework actual.</summary>
      <returns>Un valor entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>Devuelve un valor que indica si las opciones de filtro de propiedades de la actual <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> Atributo de .NET Framework coinciden con las opciones de filtro de propiedades del objeto proporcionado.</summary>
      <param name="value">Objeto que se va a comparar. Se espera que este objeto sea <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
      <returns>Es <see langword="true" /> si existe una coincidencia; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>Obtiene las opciones de filtro para este <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> Atributo de .NET Framework .</summary>
      <returns>Las opciones de filtro de la propiedad.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>Especifica de qué propiedades deben informar los descriptores de tipos, específicamente el método <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" />. Esta enumeración se usa para especificar el valor de la propiedad <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" />.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>Devuelve todas las propiedades.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>Devuelve solamente las propiedades que no son válidas según el contexto actual del objeto.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>No devuelve ninguna propiedad.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>Solo devuelve las propiedades que tienen valores locales establecidos actualmente.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>Solo devuelve las propiedades cuyos valores locales no están establecidas o no tienen propiedades establecidas en un almacén de expresiones externo (como un recurso de enlace o diferido).</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>Devuelve cualquier propiedad que sea válida en el objeto en el ámbito actual.</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>Define la dirección y el nombre de propiedad que se usará como criterio para ordenar una colección.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.ComponentModel.SortDescription" />.</summary>
      <param name="propertyName">Nombre de la propiedad con la que se ordenará la lista.</param>
      <param name="direction">El criterio de ordenación.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El parámetro <paramref name="direction" /> no especifica un valor válido.</exception>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>Compara la instancia especificada y la instancia actual de <see cref="T:System.ComponentModel.SortDescription" /> para determinar si son iguales.</summary>
      <param name="obj">Instancia <see cref="T:System.ComponentModel.SortDescription" /> que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> y esta instancia de <see cref="T:System.ComponentModel.SortDescription" /> tienen los mismos valores.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>Devuelve el código hash de esta instancia de <see cref="T:System.ComponentModel.SortDescription" />.</summary>
      <returns>Código hash de esta instancia de <see cref="T:System.ComponentModel.SortDescription" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compara dos objetos <see cref="T:System.ComponentModel.SortDescription" /> para determinar si sus valores son iguales.</summary>
      <param name="sd1">Primera instancia que se va a comparar.</param>
      <param name="sd2">Segunda instancia que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los dos objetos son iguales; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compara dos objetos <see cref="T:System.ComponentModel.SortDescription" /> para determinar si no son iguales.</summary>
      <param name="sd1">Primera instancia que se va a comparar.</param>
      <param name="sd2">Segunda instancia que se va a comparar.</param>
      <returns>
        <see langword="true" /> si los valores no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>Obtiene o establece un valor que indica si se debe ordenar en orden ascendente o descendente.</summary>
      <returns>Valor de <see cref="T:System.ComponentModel.ListSortDirection" /> que indica si se debe ordenar en orden ascendente o descendente.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>Obtiene un valor que indica si este objeto se encuentra en un estado inmutable.</summary>
      <returns>
        <see langword="true" /> si este objeto se está usando; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>Obtiene o establece el nombre de propiedad que se usa como criterio de ordenación.</summary>
      <returns>El valor predeterminado es null.</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>Representa una colección de objetos <see cref="T:System.ComponentModel.SortDescription" />.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>Tiene lugar cuando se agrega o quita un elemento.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Tiene lugar cuando se agrega o quita un elemento.</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>Obtiene una instancia vacía y no modificable de <see cref="T:System.ComponentModel.SortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.SortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>Quita todos los elementos de la colección.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Inserta un elemento en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>Quita el elemento situado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Reemplaza el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a reemplazar.</param>
      <param name="item">El nuevo valor del elemento en el índice especificado.</param>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>Describe el nivel de detalle que se va a obtener de un objeto determinado.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>Realiza un seguimiento de toda la información adicional.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>Realiza un seguimiento de alguna información adicional.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>Realiza un seguimiento de una cantidad media de información adicional.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>No realiza ningún seguimiento de la información adicional disponible.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>Ofrece compatibilidad de traza de depuración que está específicamente destinada para aplicaciones de Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>Identifica la propiedad adjunta <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />.</summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>Obtiene el valor de la propiedad adjunta <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> para un elemento especificado.</summary>
      <param name="element">Elemento del que se lee el valor de la propiedad.</param>
      <returns>Valor de propiedad <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> del elemento.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>Actualiza los orígenes de las trazas, obligando a que vuelva a leerse el archivo app.config.</summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>Establece el valor de la propiedad adjunta <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> en un elemento especificado.</summary>
      <param name="element">Elemento en el que se escribe la propiedad adjunta.</param>
      <param name="traceLevel">Valor <see cref="T:System.Diagnostics.PresentationTraceLevel" /> necesario.</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>Obtiene un origen de la traza de animaciones.</summary>
      <returns>El origen de la traza de animaciones.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>Obtiene un origen de la traza de enlace de datos.</summary>
      <returns>El origen de la traza del enlace de datos.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>Obtiene un origen de seguimiento de la propiedad de dependencia.</summary>
      <returns>Origen de seguimiento de la propiedad de dependencia.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>Obtiene un origen de la traza del documento.</summary>
      <returns>El origen de la traza del documento.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>Obtiene un origen de la traza de objetos Freezable.</summary>
      <returns>El origen de la traza de objetos Freezable.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>Obtiene el origen de la traza del host de hwnd.</summary>
      <returns>Origen de la traza del host de hwnd.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>Obtiene un origen de la traza de marcado.</summary>
      <returns>El origen de la traza de marcado.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>Obtiene un origen de la traza del ámbito de nombres.</summary>
      <returns>El origen de la traza del ámbito de nombres.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>Obtiene un origen de la traza del diccionario de recursos.</summary>
      <returns>Un origen de la traza del diccionario de recursos.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>Obtiene un origen de seguimiento de eventos enrutados.</summary>
      <returns>Origen de seguimiento de eventos enrutados.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>Obtiene un origen de traza del shell.</summary>
      <returns>Origen de traza del shell.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>Especifica la ubicación donde se almacena el certificado X.509 que se usa en la firma.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>El certificado se inserta en su propia <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>El certificado se inserta en la <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> que se crea para la signatura que se está agregando.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>El certificado no está insertado en el paquete.</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>Representa un archivo compuesto OLE que contiene un paquete cifrado.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>Cierra el paquete cifrado y el archivo compuesto OLE que lo contiene.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Crea y devuelve un objeto <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> en la secuencia especificada.</summary>
      <param name="envelopeStream">Secuencia en la que se va a crear el archivo.</param>
      <param name="publishLicense">Licencia de publicación que está incrustada en el archivo compuesto.</param>
      <param name="cryptoProvider">Objeto que determina las operaciones que puede realizar el usuario actual en el contenido cifrado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> no proporciona acceso de lectura ni escritura.</exception>
      <returns>Colección <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> creada recientemente.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Crea y devuelve un objeto <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> y le asigna el nombre de archivo especificado.</summary>
      <param name="envelopeFileName">Nombre del archivo compuesto OLE.</param>
      <param name="publishLicense">Licencia de publicación que está incrustada en el archivo compuesto.</param>
      <param name="cryptoProvider">Objeto que determina las operaciones que puede realizar el usuario actual en el contenido cifrado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> es <see langword="null" />.</exception>
      <returns>Colección <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> creada recientemente.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Crea y devuelve un objeto <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> (en la secuencia especificada) que utiliza el paquete no cifrado especificado como su contenido.</summary>
      <param name="envelopeStream">Secuencia en la que se va a crear el archivo.</param>
      <param name="packageStream">Secuencia que representa el paquete no cifrado existente.</param>
      <param name="publishLicense">Licencia de publicación que está incrustada en el archivo compuesto.</param>
      <param name="cryptoProvider">Objeto que determina las operaciones que puede realizar el usuario actual en el contenido cifrado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> o <paramref name="packageStream" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> no proporciona acceso de lectura ni escritura.</exception>
      <returns>Colección <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> creada recientemente.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Crea y devuelve un objeto <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que utiliza el paquete no cifrado especificado como su contenido y le asigna el nombre de archivo especificado.</summary>
      <param name="envelopeFileName">Nombre del archivo compuesto OLE.</param>
      <param name="packageStream">Secuencia que representa el paquete no cifrado existente.</param>
      <param name="publishLicense">Licencia de publicación que está incrustada en el archivo compuesto.</param>
      <param name="cryptoProvider">Objeto que determina las operaciones que puede realizar el usuario actual en el contenido cifrado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> o <paramref name="packageStream" /> es <see langword="null" />.</exception>
      <returns>Colección <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> creada recientemente.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>Vacíe la secuencia de <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> y su contenido del paquete.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>Obtiene el paquete cifrado incluido en <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> del sobre.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>Obtiene un valor que especifica si la secuencia indicada es un archivo compuesto OLE con una secuencia del paquete cifrada.</summary>
      <param name="stream">Secuencia que se prueba.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si la secuencia especificada es un archivo compuesto OLE con una secuencia del paquete cifrada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>Obtiene un valor que especifica si la el archivo indicado es un archivo compuesto OLE con una secuencia del paquete cifrada.</summary>
      <param name="fileName">Archivo que se prueba.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> es <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si el archivo especificado es un archivo compuesto OLE con una secuencia del paquete cifrada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>Abre el paquete cifrado en la secuencia especificada.</summary>
      <param name="envelopeStream">Secuencia que contiene el paquete cifrado.</param>
      <returns>El objeto <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que se abre.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>Abre el paquete cifrado en el archivo especificado como sólo lectura y uso no compartido.</summary>
      <param name="envelopeFileName">Archivo que contiene el paquete cifrado.</param>
      <returns>El objeto <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que se abre.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>Abre el paquete cifrado en el archivo especificado como de uso no compartido y con el acceso indicado.</summary>
      <param name="envelopeFileName">Archivo que contiene el paquete cifrado.</param>
      <param name="access">Tipo de acceso.</param>
      <returns>El objeto <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que se abre.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Abre el paquete cifrado en el archivo especificado y le asigna el acceso especificado y un uso compartido.</summary>
      <param name="envelopeFileName">Archivo que contiene el paquete cifrado.</param>
      <param name="access">Tipo de acceso.</param>
      <param name="sharing">Tipo de uso compartido.</param>
      <returns>El objeto <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que se abre.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>Obtiene un valor que especifica si el archivo se abrió con acceso de lectura, escritura o ambos.</summary>
      <returns>El valor de <see cref="T:System.IO.FileAccess" /> que se utilizó al abrir el archivo.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>Obtiene las propiedades básicas del paquete (como Title y Subject) del documento con derechos administrados.</summary>
      <returns>
        <see cref="T:System.IO.Packaging.PackageProperties" /> del paquete.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>Obtiene la información de administración de derechos almacenada en <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />; en concreto, los objetos <see cref="T:System.Security.RightsManagement.PublishLicense" /> y <see cref="T:System.Security.RightsManagement.UseLicense" /> almacenados en el archivo compuesto OLE que contiene el paquete protegido de administración de derechos.</summary>
      <returns>
        <see cref="T:System.IO.Packaging.RightsManagementInformation" /> del paquete.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>Obtiene un objeto que proporciona acceso a las secuencias del archivo compuesto que están fuera del paquete cifrado.</summary>
      <returns>
        <see cref="T:System.IO.Packaging.StorageInfo" /> que representa las secuencias del archivo compuesto de OLE que están fuera del paquete cifrado.</returns>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> que se provoca cuando el método <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> detecta una firma no válida.</summary>
      <param name="sender">El origen de la clase <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> del evento no válido.</param>
      <param name="e">Datos del evento.</param>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>Representa una firma digital que se aplica a un conjunto de relaciones y partes del paquete.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>Devuelve una lista ordenada de las operaciones de <see cref="T:System.Security.Cryptography.Xml.Transform" /> aplicadas a un elemento especificado.</summary>
      <param name="partName">
        <see cref="T:System.Uri" /> de <see cref="T:System.IO.Packaging.PackagePart" /> para el que devolver la lista de transformaciones.</param>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Una lista ordenada de cadenas URI, como <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> o <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />, que representa las transformaciones XML canónicas aplicadas al elemento con el URI <paramref name="partName" /> especificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>Comprueba la firma digital con un certificado X.509 especificado.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> si la comprobación se realizó correctamente; en caso contrario, uno de los valores <see cref="T:System.IO.Packaging.VerifyResult" /> que identifica un problema.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Comprueba la firma digital con un certificado X.509 especificado.</summary>
      <param name="signingCertificate">Certificado X.509 del firmante con el que se comprobará la firma digital.</param>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> si la comprobación se realizó correctamente; en caso contrario, uno de los valores <see cref="T:System.IO.Packaging.VerifyResult" /> que identifica un problema.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>Obtiene la opción de incrustación del certificado X.509.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Uno de los valores de <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> que especifica la opción para la firma digital.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>Obtiene o establece la firma digital XML.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Firma digital XML.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>Obtiene la clase <see cref="T:System.IO.Packaging.PackagePart" /> que contiene la firma.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Elemento del paquete que contiene la firma.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>Obtiene la cadena URI que identifica el tipo de firma.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Cadena URI que identifica el tipo de firma. De manera predeterminada, es <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>Obtiene el valor hash cifrado de la propiedad <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Matriz de bytes que contiene el valor hash cifrado de la propiedad <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>Obtiene una colección de todos los objetos <see cref="T:System.IO.Packaging.PackagePart" /> firmados con la firma.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Colección que contiene todos los elementos del paquete firmados con la firma.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>Obtiene la lista de elementos de <see cref="T:System.IO.Packaging.PackageRelationship" /> firmados con la firma.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Lista de elementos de <see cref="T:System.IO.Packaging.PackageRelationship" /> firmados con la firma.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>Obtiene el certificado X.509 del firmante.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>El certificado digital del firmante, o <see langword="null" /> si el certificado no se almacena en <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>Obtiene la fecha y la hora de creación de la firma.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Fecha y hora de creación de la firma.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>Obtiene el formato de fecha y hora devuelto por la propiedad <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital se ha eliminado.</exception>
      <returns>Formato de fecha y hora devuelto por la propiedad <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>Proporciona una clase de utilidad para la creación y comprobación de firmas digitales en una clase <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>Se produce cuando el método <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> detecta una firma no válida.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> para su uso con una clase <see cref="T:System.IO.Packaging.Package" /> especificada.</summary>
      <param name="package">Paquete asociado a este administrador de firmas.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>Contrafirma todas las firmas del paquete con un certificado X.509 seleccionado por el usuario.</summary>
      <returns>Firma que se agregó como contrafirma o <see langword="null" /> si no se encontró ningún certificado o el usuario canceló el cuadro de diálogo de selección de certificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Contrafirma todas las signaturas del paquete con un certificado X.509 especificado.</summary>
      <param name="certificate">Certificado X.509 que se debe agregar como contrafirma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> es <see langword="null" /></exception>
      <returns>Signatura que se agregó como contrafirma.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Contrafirma una lista de firmas con un certificado X.509 determinado.</summary>
      <param name="certificate">Certificado X.509 que se usará para contrafirmar cada uno de los elementos <paramref name="signatures" /> especificados.</param>
      <param name="signatures">Lista de firmas que se van a contrafirmar.</param>
      <exception cref="T:System.ArgumentNullException">O bien el parámetro <paramref name="certificate" /> o el parámetro <paramref name="signatures" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">El paquete no contiene objetos <see cref="T:System.IO.Packaging.PackagePart" /> firmados.</exception>
      <exception cref="T:System.ArgumentException">El paquete no contiene partes <see cref="T:System.IO.Packaging.PackageDigitalSignature" />.</exception>
      <returns>Firma digital usada para contrafirmar cada uno de los elementos <paramref name="signatures" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>Devuelve la firma digital de un identificador uniforme de recursos (URI) de firma especificado.</summary>
      <param name="signatureUri">URI de la firma digital que se va a devolver.</param>
      <returns>Su valor es la firma digital del <paramref name="signatureUri" /> especificado o <see langword="null" />, si no se puede encontrar una firma para el <paramref name="signatureUri" /> especificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>Quita todas las firmas digitales del paquete.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>Quita la firma digital con un identificador uniforme de recursos (URI) de firma especificado.</summary>
      <param name="signatureUri">URI de <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> que se va a quitar.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Pide al usuario un certificado X.509, que se usa para firmar digitalmente una lista de elementos del paquete especificada.</summary>
      <param name="parts">Lista de identificadores uniformes de recursos (URI) de los elementos <see cref="T:System.IO.Packaging.PackagePart" /> que se van a firmar.</param>
      <returns>Firma digital usada para firmar la lista de <paramref name="parts" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Firma una lista de elementos de paquete con un certificado X.509 especificado.</summary>
      <param name="parts">Lista de identificadores uniformes de recursos (URI) de los elementos <see cref="T:System.IO.Packaging.PackagePart" /> que se van a firmar.</param>
      <param name="certificate">Certificado X.509 que se va a usar para firmar digitalmente cada uno de los <paramref name="parts" /> especificados.</param>
      <returns>Firma digital usada para firmar la lista proporcionada de <paramref name="parts" />; o <see langword="null" /> si no se encontró ningún certificado o el usuario hizo clic en "Cancelar" en el cuadro de diálogo de selección de certificados.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>Firma una lista de partes de paquete y relaciones de paquete con un certificado X.509 especificado.</summary>
      <param name="parts">Lista de identificadores uniformes de recursos (URI) de los objetos <see cref="T:System.IO.Packaging.PackagePart" /> que se van a firmar.</param>
      <param name="certificate">Certificado X.509 que se va a usar para firmar digitalmente cada uno de los elementos y relaciones especificados.</param>
      <param name="relationshipSelectors">Lista de objetos <see cref="T:System.IO.Packaging.PackageRelationship" /> que se van a firmar.</param>
      <exception cref="T:System.ArgumentException">Ni <paramref name="parts" /> ni <paramref name="relationshipSelectors" /> especifican objetos para firmar.</exception>
      <returns>Firma digital que se usa para firmar los elementos especificados en las listas <paramref name="parts" /> y <paramref name="relationshipSelectors" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>Firma una lista de partes de paquete y relaciones de paquete con un certificado X.509 y identificador (id.) especificados.</summary>
      <param name="parts">Lista de identificadores uniformes de recursos (URI) de los objetos <see cref="T:System.IO.Packaging.PackagePart" /> que se van a firmar.</param>
      <param name="certificate">Certificado X.509 que se va a usar para firmar digitalmente cada uno de los elementos y relaciones especificados.</param>
      <param name="relationshipSelectors">Lista de objetos <see cref="T:System.IO.Packaging.PackageRelationship" /> que se van a firmar.</param>
      <param name="signatureId">Cadena de identificación para asociar a la firma.</param>
      <exception cref="T:System.ArgumentException">Ni el parámetro <paramref name="parts" /> ni el <paramref name="relationshipSelectors" /> especifican elementos que se deban firmar.</exception>
      <returns>Firma digital que se usa para firmar los elementos especificados en las listas <paramref name="parts" /> y <paramref name="relationshipSelectors" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>Firma una lista de elementos de paquete, relaciones de paquete u objetos personalizados con un certificado X.509 especificado y un identificador (id.) de firma.</summary>
      <param name="parts">Lista de identificadores uniformes de recursos (URI) de los objetos <see cref="T:System.IO.Packaging.PackagePart" /> que se van a firmar.</param>
      <param name="certificate">Certificado X.509 que se va a usar para firmar digitalmente cada uno de los elementos y relaciones especificados.</param>
      <param name="relationshipSelectors">Lista de objetos <see cref="T:System.IO.Packaging.PackageRelationship" /> que se van a firmar.</param>
      <param name="signatureId">Cadena de identificación para asociar a la firma.</param>
      <param name="signatureObjects">Lista de objetos de datos personalizados que firmar.</param>
      <param name="objectReferences">Lista de referencias a objetos personalizados que firmar.</param>
      <exception cref="T:System.ArgumentException">Ninguno de los parámetros <paramref name="parts" />, <paramref name="relationshipSelectors" />, <paramref name="signatureObjects" /> y <paramref name="objectReferences" /> especifican elementos para firmar.</exception>
      <exception cref="T:System.InvalidOperationException">Una propiedad <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> de un elemento cuya firma está en curso hace referencia a una propiedad <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" /> vacía, no definida o que tiene un valor <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="signatureId" /> no tiene un valor <see langword="null" /> y no es un identificador de esquema XML válido (por ejemplo, empieza con un dígito numérico inicial).</exception>
      <returns>Firma digital que se usa para firmar los elementos especificados en las listas <paramref name="parts" /> y <paramref name="relationshipSelectors" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Comprueba un certificado X.509 especificado.</summary>
      <param name="certificate">Certificado X.509 que se va a comprobar.</param>
      <returns>Devuelve <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" /> (valor 0) si el certificado se comprueba correctamente; de lo contrario, devuelve una enumeración bit a bit de marcas de error.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>Comprueba las firmas de todos los elementos firmados del paquete.</summary>
      <param name="exitOnFailure">Use <see langword="true" /> para salir del primer error; de lo contrario, use <see langword="false" /> para continuar y comprobar todas las firmas.</param>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> (valor 0) si todas las firmas se comprueban correctamente; de lo contrario, una enumeración que identifica el error.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>Obtiene o establece la opción de inserción del certificado X.509 que el método <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> usa para firmar digitalmente las partes del paquete.</summary>
      <returns>Uno de los valores de <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>Obtiene una cadena de URI que identifica el algoritmo hash predeterminado usado para crear y comprobar firmas.</summary>
      <returns>Cadena URI que identifica el algoritmo hash predeterminado usado para crear y comprobar firmas.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>Obtiene o establece el identificador URI de la instancia de <see cref="T:System.Security.Cryptography.HashAlgorithm" /> usada para crear y comprobar firmas.</summary>
      <exception cref="T:System.ArgumentNullException">La cadena del URI que se va a establecer es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La cadena del URI que se va a establecer está vacía.</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.Xml.SignedXml" />Identificador URI de la instancia de <see cref="T:System.Security.Cryptography.HashAlgorithm" /> utilizada para crear y comprobar firmas.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>Obtiene un valor que indica si el paquete contiene firmas.</summary>
      <returns>Es <see langword="true" /> si el paquete contiene firmas; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>Obtiene o establece un identificador en la ventana primaria para mostrar un cuadro de diálogo de selección de certificado.</summary>
      <returns>Identificador de la ventana primaria para usarlo con el fin de mostrar el cuadro de diálogo de selección de certificado.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>Obtiene el identificador uniforme de recursos (URI) del elemento de origen de firma.</summary>
      <returns>URI de la parte de origen de la firma.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>Obtiene el tipo de relación de origen de firma predeterminado.</summary>
      <returns>Tipo de relación de origen de firma predeterminado.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>Obtiene una colección de todas las firmas contenidas en el paquete.</summary>
      <returns>Colección de todos los objetos <see cref="T:System.IO.Packaging.PackageDigitalSignature" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>Obtiene o establece el formato de fecha y hora utilizado para crear la <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />de la firma.</summary>
      <returns>Formato de fecha y hora utilizado para crear la <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />de la firma.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>Obtiene un diccionario que contiene todos los objetos <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> definidos y su identificador <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> de XML asociado.</summary>
      <returns>Diccionario que contiene cada definido <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> y su asociado XML <see cref="T:System.Security.Cryptography.Xml.Transform" /> .<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> asociado.</returns>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>Representa la información de administración de derechos digitales (DRM) que se almacena en un <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Elimina del flujo de datos de administración de derechos cifrada el objeto <see cref="T:System.Security.RightsManagement.UseLicense" /> de un usuario especificado.</summary>
      <param name="userKey">El usuario de <see cref="T:System.Security.RightsManagement.UseLicense" /> que se va a eliminar.</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>Devuelve una colección de diccionarios de usuario y pares clave/valor de <see cref="T:System.Security.RightsManagement.UseLicense" /> del flujo de datos de administración de derechos cifrada.</summary>
      <returns>Una colección de usuarios y pares clave/valor de <see cref="T:System.Security.RightsManagement.UseLicense" /> incluidos en el paquete protegido de administración de derechos.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>Devuelve el objeto <see cref="T:System.Security.RightsManagement.PublishLicense" /> incrustado a partir del flujo de datos de administración de derechos cifrada.</summary>
      <exception cref="T:System.IO.FileFormatException">La información de administración de derechos de este paquete no la puede leer la versión actual de esta clase.</exception>
      <returns>El objeto <see cref="T:System.Security.RightsManagement.PublishLicense" /> incrustado, o <see langword="null" /> si el paquete no contiene ningún objeto <see cref="T:System.Security.RightsManagement.PublishLicense" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Devuelve un objeto <see cref="T:System.Security.RightsManagement.UseLicense" /> incrustado de un usuario especificado a partir del flujo de datos de administración de derechos cifrada.</summary>
      <param name="userKey">Usuario o grupo de usuarios para el que se va a devolver el objeto <see cref="T:System.Security.RightsManagement.UseLicense" />.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="userKey" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">La información de administración de derechos de este paquete no la puede leer la versión actual de esta clase.</exception>
      <returns>
        <see cref="T:System.Security.RightsManagement.UseLicense" /> para el usuario especificado, o <see langword="null" /> si el paquete no contiene ningún objeto <see cref="T:System.Security.RightsManagement.UseLicense" /> que coincide con el valor <paramref name="userKey" /> indicado.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>Guarda un objeto <see cref="T:System.Security.RightsManagement.PublishLicense" /> determinado en el flujo de datos de administración de derechos cifrada.</summary>
      <param name="publishLicense">Licencia de publicación que se va a almacenar e incrustar en el paquete.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="publishLicense" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">La información de administración de derechos de este paquete no la puede leer la versión actual de esta clase.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>Guarda un objeto <see cref="T:System.Security.RightsManagement.UseLicense" /> determinado para un usuario especificado en el flujo de datos de administración de derechos cifrada.</summary>
      <param name="userKey">Usuario de <see cref="T:System.Security.RightsManagement.UseLicense" />.</param>
      <param name="useLicense">Licencia de uso que se va a almacenar e incrustar en el paquete.</param>
      <exception cref="T:System.ArgumentNullException">O bien el parámetro <paramref name="userKey" /> o el parámetro <paramref name="useLicense" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">La información de administración de derechos de este paquete no la puede leer la versión actual de esta clase.</exception>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>Obtiene o establece el objeto <see cref="T:System.Security.RightsManagement.CryptoProvider" /> para obtener acceso al flujo de datos de administración de derechos cifrada del paquete.</summary>
      <returns>El objeto <see cref="T:System.Security.RightsManagement.CryptoProvider" /> para obtener acceso a la información de administración de derechos.</returns>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary>Especifica los argumentos de evento proporcionados a <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary>Obtiene la firma digital que se comprueba.</summary>
      <returns>Firma digital que se comprueba.</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary>Obtiene el error de comprobación de firmas.</summary>
      <returns>Error de comprobación de firmas.</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>Proporciona acceso e información para manipular los almacenes de datos en un <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>Crea una nueva secuencia con un nombre específico.</summary>
      <param name="name">Nombre de la nueva secuencia.</param>
      <returns>Nueva secuencia con el parámetro <paramref name="name" /> especificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>Crea una nueva secuencia con un nombre específico, <see cref="T:System.IO.Packaging.CompressionOption" /> y <see cref="T:System.IO.Packaging.EncryptionOption" />.</summary>
      <param name="name">Nombre de la nueva secuencia.</param>
      <param name="compressionOption">Opción de compresión del flujo de datos.</param>
      <param name="encryptionOption">Opción de cifrado del flujo de datos.</param>
      <returns>Nueva secuencia con el parámetro <paramref name="name" />, <paramref name="compressionOption" /> y <paramref name="encryptionOption" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>Crea un nuevo elemento secundario <see cref="T:System.IO.Packaging.StorageInfo" /> con este objeto <see cref="T:System.IO.Packaging.StorageInfo" /> como elemento principal.</summary>
      <param name="name">Nombre del nuevo almacén de datos secundario.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
      <returns>Nuevo almacén de datos secundario.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>Elimina la secuencia con un nombre especificado.</summary>
      <param name="name">Nombre <see cref="T:System.IO.Packaging.StreamInfo" /> de la secuencia que se va a eliminar.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>Elimina un subalmacén especificado.</summary>
      <param name="name">Nombre del subalmacén que se va a eliminar.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>Devuelve la instancia de <see cref="T:System.IO.Packaging.StreamInfo" /> con el nombre especificado.</summary>
      <param name="name">Nombre de la instancia de <see cref="T:System.IO.Packaging.StreamInfo" /> que se va a devolver.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
      <returns>Secuencia con el parámetro <paramref name="name" /> especificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>Devuelve una matriz de instancias de <see cref="T:System.IO.Packaging.StreamInfo" /> actualmente incluidas en este almacén.</summary>
      <returns>Matriz de los objetos <see cref="T:System.IO.Packaging.StreamInfo" />, cada uno de los cuales señala a una secuencia de E/S definida dentro de este almacén.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>Devuelve el subalmacén secundario con un nombre específico.</summary>
      <param name="name">Nombre del subalmacén que se va a devolver.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
      <returns>Subalmacén secundario con el <paramref name="name" /> especificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>Devuelve una matriz de los subalmacenes secundarios que se encuentran actualmente en este almacén.</summary>
      <returns>Una matriz de los objetos <see cref="T:System.IO.Packaging.StorageInfo" />, cada uno de los cuales apunta a un subalmacén definido dentro de este almacén.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>Devuelve un valor que indica si existe una secuencia determinada.</summary>
      <param name="name">Nombre de <see cref="T:System.IO.Packaging.StreamInfo" /> que se va a comprobar.</param>
      <returns>
        <see langword="true" /> si existe una secuencia con el parámetro <paramref name="name" /> especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>Devuelve un valor que indica si existe un subalmacén secundario determinado.</summary>
      <param name="name">Nombre del objeto <see cref="T:System.IO.Packaging.StorageInfo" /> secundario que se va a comprobar.</param>
      <returns>
        <see langword="true" /> si existe un subalmacén secundario con el parámetro <paramref name="name" /> especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>Obtiene el nombre del almacén.</summary>
      <returns>Nombre del almacén.</returns>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>Proporciona acceso e información para manipular secuencias de E/S dentro de <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>Devuelve una secuencia abierta con un tipo de <see cref="T:System.IO.FileMode" /> y <see cref="T:System.IO.FileAccess" /> predeterminado.</summary>
      <returns>La secuencia de E/S abierta con un tipo de <see cref="T:System.IO.Packaging.Package" /> y <see cref="T:System.IO.FileMode" /> de raíz de <see cref="T:System.IO.FileAccess" /> predeterminado.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>Devuelve una secuencia de E/S abierta con un tipo de <see cref="T:System.IO.FileMode" /> especificado.</summary>
      <param name="mode">El modo de archivo en el que se va a abrir la secuencia.</param>
      <returns>La secuencia abierta en el <paramref name="mode" /> de archivo especificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Devuelve una secuencia de E/S abierta en un tipo de <see cref="T:System.IO.FileMode" /> especificado y con un tipo de <see cref="T:System.IO.FileAccess" /> determinado.</summary>
      <param name="mode">El modo de archivo en el que se va a abrir la secuencia.</param>
      <param name="access">El modo de acceso a archivos con el que se va a leer o escribir en la secuencia.</param>
      <returns>La secuencia de E/S abierta en el tipo de <see cref="T:System.IO.FileMode" /> especificado y con un tipo de <see cref="T:System.IO.FileAccess" /> determinado.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>Obtiene la configuración de <see cref="T:System.IO.Packaging.CompressionOption" /> de la secuencia.</summary>
      <returns>La configuración de la opción de compresión de la secuencia de paquetes.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>Obtiene la configuración de <see cref="T:System.IO.Packaging.EncryptionOption" /> de la secuencia.</summary>
      <returns>La configuración de la opción de cifrado de la secuencia de paquetes.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>Obtiene el nombre de la secuencia.</summary>
      <returns>El nombre de esta secuencia.</returns>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>Especifica el resultado de una comprobación de un certificado o una signatura.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>El certificado X.509 no está disponible para comprobar la signatura.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>El certificado X.509 no es válido.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>La signatura no es válida.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>El paquete o el elemento especificado no tiene ninguna signatura.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>No se encontró ninguna relación de referencia con la signatura.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>La comprobación se realizó correctamente.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>Especifica el método de autenticación de administración de derechos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>Autenticación implícita para cualquier usuario solicitante.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>Autenticación de Windows Live ID.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>Autenticación de Windows en un entorno de dominio corporativo.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>Autenticación de Windows o autenticación de Windows Live ID.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>Representa un derecho concedido a un usuario para acceder a información de un documento con derechos administrados.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.ContentGrant" /> que concede un <see cref="T:System.Security.RightsManagement.ContentUser" /> especificado a un <see cref="T:System.Security.RightsManagement.ContentRight" /> especificado.</summary>
      <param name="user">Usuario al que se concede el derecho de acceso.</param>
      <param name="right">Derecho de acceso que se concede.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.ContentGrant" />, que concede un <see cref="T:System.Security.RightsManagement.ContentUser" /> especificado a un <see cref="T:System.Security.RightsManagement.ContentRight" /> especificado para una duración <see cref="T:System.DateTime" /> especificada.</summary>
      <param name="user">Usuario al que se concede el derecho de acceso.</param>
      <param name="right">Derecho de acceso que se concede.</param>
      <param name="validFrom">Fecha y hora de inicio en la que comienza el derecho.</param>
      <param name="validUntil">Fecha y hora de fin en la que expira el derecho.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>Obtiene la enumeración <see cref="T:System.Security.RightsManagement.ContentRight" /> que se concede.</summary>
      <returns>Derecho de acceso que se concede a <see cref="P:System.Security.RightsManagement.ContentGrant.User" />, tal como se especificó en el constructor <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>Obtiene el usuario al que se concede la propiedad <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> de acceso.</summary>
      <returns>Usuario al que se concede la propiedad <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> de acceso, tal como se especificó en el constructor <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>Obtiene la fecha y hora de inicio en la que comienza la propiedad <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> concedida.</summary>
      <returns>Fecha y hora de inicio en que comienza el concedido <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> , o <see cref="T:System.DateTime" /> .<see cref="F:System.DateTime.MinValue" /> Si no hay ninguna limitación de inicio.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>Obtiene la fecha y hora de fin en la que expira la propiedad <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> concedida.</summary>
      <returns>Fecha y hora de finalización del concedido <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> , o <see cref="T:System.DateTime" /> .<see cref="F:System.DateTime.MaxValue" /> Si no hay ninguna limitación de cierre.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>Especifica los derechos que se pueden conceder a los usuarios para acceder al contenido de un documento con derechos administrados.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>El usuario puede modificar el documento que contiene el contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>El usuario puede modificar y cifrar el contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>El usuario puede exportar el contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>El usuario puede extraer (copiar y pegar) el contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>El usuario puede reenviar el contenido protegido a otro usuario.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>El usuario puede controlar el acceso programado al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>El usuario es el propietario del contenido.  El propietario puede modificar y cifrar el contenido protegido y descifrar el elemento <see cref="T:System.Security.RightsManagement.PublishLicense" /> con firma.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>El usuario puede imprimir el contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>El usuario puede responder al remitente del contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>El usuario puede "responder a todos" los destinatarios del contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>El usuario puede firmar digitalmente el contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>El usuario puede ver el contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>El usuario puede descifrar y ver los derechos especificados en el elemento <see cref="T:System.Security.RightsManagement.PublishLicense" /> con firma.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>Representa un usuario o grupo de usuarios a los que se concede acceso al contenido con derechos administrados.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.ContentUser" />.</summary>
      <param name="name">Nombre del usuario o grupo.</param>
      <param name="authenticationType">Método de autenticación.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>Devuelve un valor que indica si <see cref="T:System.Security.RightsManagement.ContentUser" /> es equivalente a otra instancia dada.</summary>
      <param name="obj">Instancia de usuario cuya igualdad se va a comparar.</param>
      <returns>Es <see langword="true" /> si <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> y <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> son iguales para este usuario y el usuario dado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>Devuelve un código hash calculado basado en los valores <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> y <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> del usuario.</summary>
      <returns>Código hash calculado a partir de los valores <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> y <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> del usuario.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>Devuelve un valor que indica si el usuario está actualmente autenticado.</summary>
      <returns>
        <see langword="true" /> si el usuario está autenticado actualmente; en caso contrario, <see langword="false" />.  El valor predeterminado es <see langword="false" /> hasta que se autentica.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>Obtiene una instancia del rol de <see cref="T:System.Security.RightsManagement.ContentUser" /> "Anyone".</summary>
      <returns>Instancia del rol de <see cref="T:System.Security.RightsManagement.ContentUser" /> "Anyone".</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>Obtiene el objeto <see cref="T:System.Security.RightsManagement.AuthenticationType" /> especificado para el constructor <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />.</summary>
      <returns>
        <see cref="T:System.Security.RightsManagement.AuthenticationType" /> que se ha especificado para el constructor <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>Obtiene el nombre de usuario o grupo especificado para el constructor <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />.</summary>
      <returns>Nombre de usuario o grupo especificado para el constructor <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>Obtiene una instancia del rol de <see cref="T:System.Security.RightsManagement.ContentUser" /> "Owner".</summary>
      <returns>Instancia del rol de <see cref="T:System.Security.RightsManagement.ContentUser" /> "Owner".</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>Proporciona servicios de administración de derechos digitales para cifrar y descifrar contenido protegido.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>Descifra texto cifrado para obtener texto no cifrado.</summary>
      <param name="cryptoText">Texto cifrado que se va a descifrar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cipherText" /> es null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Derecho de descifrado no concedido.</exception>
      <returns>Texto descifrado de <paramref name="cryptoText" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.Security.RightsManagement.CryptoProvider" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.Security.RightsManagement.CryptoProvider" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>Cifra texto no cifrado para obtener texto cifrado.</summary>
      <param name="clearText">Contenido de texto no cifrado que se va a cifrar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clearText" /> es null.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">No se permite el cifrado.</exception>
      <returns>Cifra texto cifrado del <paramref name="clearText" /> proporcionado.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>Libera recursos y realiza la limpieza interna antes de que recopilación de elementos no utilizados reclame la instancia.</summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>Obtiene el tamaño del bloque cifrado, en bytes.</summary>
      <returns>Tamaño del bloque cifrado, en bytes.  El tamaño de bloque predeterminado para Estándar de cifrado avanzado (AES) es 8.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>Obtiene una colección que enumera los derechos que han pasado la comprobación y que se conceden al usuario.</summary>
      <returns>Colección que enumera los derechos que han pasado la comprobación y que se conceden al usuario.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>Obtiene un valor que indica si el usuario tiene derechos para descifrar.</summary>
      <returns>
        <see langword="true" /> Si <see cref="T:System.Security.RightsManagement.UseLicense" /> concede al usuario derechos para descifrar; en caso contrario, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>Obtiene un valor que indica si el usuario tiene derechos para cifrar.</summary>
      <returns>
        <see langword="true" /> Si <see cref="T:System.Security.RightsManagement.UseLicense" /> concede al usuario derechos para cifrar; en caso contrario, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>Obtiene un valor que indica si <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> y <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> pueden aceptar búferes con tamaños de bloque de longitud diferente.</summary>
      <returns>
        <see langword="true" /> es si el búfer pasado a <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> puede tener una longitud diferente a la del búfer pasado a <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> ; de lo contrario, es <see langword="false" /> si los búferes pasados a <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> y <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> deben tener la misma longitud exacta.  Para AES, el valor predeterminado es <see langword="true" /> .</returns>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>Representa un par inmutable (de solo lectura) de cadenas "Name" y "Description".</summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</summary>
      <param name="name">Valor de la propiedad <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> de la configuración regional.</param>
      <param name="description">Valor de la propiedad <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> de la configuración regional.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> o <paramref name="description" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>Indica si las propiedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> y <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> de un objeto dado coinciden con las de este objeto <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</summary>
      <param name="obj">Objeto cuyas propiedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> y <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> se comparan.</param>
      <returns>Es <see langword="true" /> si las propiedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> y <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> del objeto dado coinciden con las de esta instancia; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>Obtiene un código hash calculado basado en las propiedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> y <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />.</summary>
      <returns>Código hash calculado basado en las propiedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> y <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> de este <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>Obtiene la descripción de la configuración regional.</summary>
      <returns>Descripción de la configuración regional.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>Obtiene el nombre de la configuración regional.</summary>
      <returns>El nombre de la configuración regional.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>Representa una licencia de publicación con derechos administrados firmada.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.PublishLicense" /> desde un objeto <see cref="T:System.Security.RightsManagement.PublishLicense" /> concreto serializado y firmado.</summary>
      <param name="signedPublishLicense">Licencia de publicación firmada y serializada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signedPublishLicense" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">La licencia no es válida.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Intenta adquirir <see cref="T:System.Security.RightsManagement.UseLicense" /> para un usuario o grupo de usuarios en un objeto <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> especificado.</summary>
      <param name="secureEnvironment">Entorno seguro para la activación de la licencia y el enlace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Se produjo un error en la autenticación.</exception>
      <returns>Objeto <see cref="T:System.Security.RightsManagement.UseLicense" /> para un usuario o grupo de usuarios en el parámetro <paramref name="secureEnvironment" />especificado.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Intenta adquirir <see cref="T:System.Security.RightsManagement.UseLicense" /> para un usuario o grupo de usuarios en un objeto <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> especificado.</summary>
      <param name="secureEnvironment">Entorno seguro para la activación de la licencia y el enlace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Se produjo un error en la autenticación.</exception>
      <returns>Objeto <see cref="T:System.Security.RightsManagement.UseLicense" /> para un usuario o grupo de usuarios en el parámetro <paramref name="secureEnvironment" />especificado.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>Devuelve una versión de <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> descifrada de este objeto <see cref="T:System.Security.RightsManagement.PublishLicense" /> firmado.</summary>
      <param name="cryptoProvider">Servicio con derechos administrados que se usa para descifrar la licencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cryptoProvider" /> es <see langword="null" />.</exception>
      <returns>Versión descifrada sin firma de esta licencia.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>Devuelve la cadena XrML serializada que se usó para crear esta licencia.</summary>
      <returns>Cadena Lenguaje de marcado con derechos extensible (XrML) serializada que se usó para crear esta licencia.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>Obtiene el identificador de contenido creado por el editor.</summary>
      <returns>Identificador de contenido creado por el editor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>Obtiene el nombre de contacto del autor o editor del contenido.</summary>
      <returns>Nombre de contacto del autor o editor del contenido.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>Obtiene el URI de contacto del autor o publicador del contenido.</summary>
      <returns>Identificador uniforme de recursos (URI) de contacto del autor o editor del contenido.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>Obtiene el URI que se va a usar para adquirir <see cref="T:System.Security.RightsManagement.UseLicense" />.</summary>
      <returns>URI que se va a utilizar para adquirir <see cref="T:System.Security.RightsManagement.UseLicense" /> .</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>Representa una condición de error cuando una operación de administración de derechos no se completa correctamente.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.RightsManagementException" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.RightsManagementException" /> y establece el almacén de <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con información sobre la excepción.</summary>
      <param name="info">Objeto que aloja los datos serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.RightsManagementException" /> con el valor de <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> especificado.</summary>
      <param name="failureCode">Código de error del error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.RightsManagementException" /> con los valores de <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> y <see cref="P:System.Exception.InnerException" /> dados.</summary>
      <param name="failureCode">Código de error del error.</param>
      <param name="innerException">Instancia de excepción que provocó el error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.RightsManagementException" /> con los valores de <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> y <see cref="P:System.Exception.Message" /> dados.</summary>
      <param name="failureCode">Código de error del error.</param>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.RightsManagementException" /> con los valores de <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />, <see cref="P:System.Exception.Message" /> y <see cref="P:System.Exception.InnerException" /> dados.</summary>
      <param name="failureCode">Código de error del error.</param>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Instancia de excepción que provocó el error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.RightsManagementException" /> con un mensaje dado.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.RightsManagementException" /> con los valores de <see cref="P:System.Exception.Message" /> y <see cref="P:System.Exception.InnerException" /> dados.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Instancia de excepción que produjo esta excepción.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Establece el almacén de <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con el nombre del parámetro e información sobre la excepción.</summary>
      <param name="info">Objeto que aloja los datos serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>Obtiene el <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> del error.</summary>
      <returns>Código de error del error.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>Especifica las condiciones de error que se pueden producir al realizar una operación de administración de derechos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>La operación asincrónica se canceló o se produjo un error no recuperable.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>Error de activación de licencia: los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>El usuario actual no se encontró en Active Directory (AD) para su certificación en la autenticación de Windows.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>Ya hay una operación solicitada en curso.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>Posible error de autenticación (error HTTP 401) devuelto por una solicitud de Internet. O bien, el usuario actual no tiene credenciales de dominio válidas en un intento de activación de usuario silenciosa. O bien, el servidor de certificación en la activación de usuario silenciosa no está en la intranet local o en la zona de sitios de confianza.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>Se pasó una constante no válida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>La condición de acceso no coincide con la entidad de seguridad de habilitación que se pasa en el enlace.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>El usuario actual no satisface las condiciones definidas en la licencia de uso final.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>El recurso especificado no está incluido en ningún nodo WORK de la licencia.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>La entidad de seguridad habilitante no coincide con la entidad de seguridad emitida de la licencia de uso final.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>Ha expirado el período de tiempo definido para el contenido protegido; ya no se permite el acceso.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>El equipo actual no está definido en la identidad de grupo administrado con derechos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>El usuario actual no tiene derechos de acceso al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>El grupo de derechos especificado no está incluido en la licencia de uso final.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>El usuario actual no tiene derechos de acceso al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>La licencia requiere que se debe adquirir una nueva lista de revocación.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>El usuario actual no tiene derechos de acceso al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>El usuario actual no tiene derechos de acceso al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>El usuario actual no tiene derechos de acceso al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>El usuario actual no tiene derechos de acceso al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>La licencia de uso final no contiene ningún nodo TRABAJO.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>Ha expirado el período de tiempo definido para el contenido protegido; ya no se permite el acceso.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>La cadena de certificados de administración de derechos se ha interrumpido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>Se ha detectado una reversión de reloj. No se puede acceder al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>No se admite una operación criptográfica solicitada. Por ejemplo, pasar un objeto de cifrado de RMS con fines de descifrado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>No se puede abrir o publicar contenido con permisos restringidos porque se ha detectado un depurador.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>No se puede comprobar la dirección de correo electrónico del usuario.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>No se puede habilitar la entidad de seguridad especificada.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>No se permite el cifrado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> no puede cargar.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> no puede cargar.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>Ha expirado el período de tiempo autorizado definido en la plantilla de licencia de emisión; ya no se permite el acceso.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>Ya se ha establecido la opción especificada.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>No se ha especificado un nombre de usuario para la sesión de cliente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>El identificador de hardware (HID) utilizado en un intento de activación de la máquina tiene un formato incorrecto. Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>El identificador de hardware (HID) utilizado en un intento de activación de la máquina no es válido. Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>El identificador de contenido de la licencia no coincide con el identificador de contenido de la sesión de almacenamiento de licencia.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>Un tipo de objeto pasado no es compatible con esta operación.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>Al crear una licencia enlazada, se especificó una licencia de emisión, no una licencia de usuario final.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>Falta cierta información.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>Error en una operación de instalación.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>El tipo de algoritmo especificado no es válido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>Error de comprobación de dirección de correo electrónico de servidor RMS.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>El tipo de codificación especificado no es válido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>El entorno o el identificador principal de habilitación no es válido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>La plantilla de Rights Management Services contiene uno o más errores.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>La longitud de clave especificada en un par de clave/valor no es válida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>La estructura de licencias en uno de los certificados no es válida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>No se puede validar el certificado digital firmado derechos de administración. (El certificado de firma puede haber sido alterado).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>El valor numérico especificado no es válido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>La ruta de acceso del registro especificada no es válida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>La información de hora especificada no es válida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>La versión de administración de derechos es incorrecta.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>No se admite el tipo de clave especificado en un par de clave/valor.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>Error en la operación de biblioteca.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>No se admite el complemento de biblioteca especificado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>No se pudo adquirir una licencia de uso final desde el servidor de administración de derechos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>Las credenciales del usuario actual no son válidas para adquirir una licencia.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>Una operación supone una infracción de la directiva de manifiesto de administración de derechos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>No se pudieron establecer los metadatos especificados.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>El usuario no está activado, o se envió ningún certificado de cuenta de derechos (RAC) y no se encontró ninguno en el almacén de licencias para que coincida con la licencia asociada a esta sesión.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>El equipo debe activarse antes de poder activar el usuario.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>Rights Management no puede conectarse al URI especificado del servidor de licencias.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>El contenido protegido está dañado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>La licencia necesaria no está disponible.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>No existe ninguna licencia o certificado en el índice especificado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>El contenido con derechos administrados está dañado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>El elemento solicitado para eliminar no existe.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>Se ha alcanzado la cuota máxima del servidor de licencias de uso final.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>El documento no contiene ninguna licencia de propietario.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>No existe ninguna instancia del atributo solicitado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>No se encontró la licencia especificada.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>El servidor de Rights Management no permite la certificación temporal del usuario actual.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>No se estableció la información de revocación de certificados o licencias.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>El usuario actual no tiene derechos de acceso al contenido protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>El derecho solicitado no se ha especificado cuando se publicó el contenido con administración de derechos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>Los servicios de Rights Management no están configurados correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>La operación se ha completado correctamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>El número de certificados ha superado el máximo permitido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>Se han creado demasiadas instancias de <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>Se ha producido un error no especificado.  También se produce cuando una aplicación se ejecuta en modo de depuración.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>Si se realiza una solicitud de activación de equipo o un certificado de cuenta de derechos, la recepción de <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> indica que la aplicación debe pasar <see langword="null" /> en el parámetro ActServInfo.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>Ha expirado el período de tiempo definido para el contenido protegido; ya no se permite el acceso.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>Representa una sesión de cliente segura para la activación de usuario, el enlace de licencias y otras operaciones de administración de derechos.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>Crea una sesión de cliente segura dado un manifiesto de derechos de aplicación, <see cref="T:System.Security.RightsManagement.AuthenticationType" /> y <see cref="T:System.Security.RightsManagement.UserActivationMode" />.</summary>
      <param name="applicationManifest">Manifiesto de derechos de aplicación.</param>
      <param name="authentication">Método de autenticación.</param>
      <param name="userActivationMode">Tipo de certificado de cuenta de derechos de usuario.</param>
      <returns>Una sesión de cliente segura para la activación, el enlace de licencias y otras operaciones de administración de derechos.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>Crea una sesión de cliente segura para un usuario especificado con un determinado manifiesto de derechos.</summary>
      <param name="applicationManifest">Manifiesto de derechos de aplicación.</param>
      <param name="user">Usuario o grupo de usuarios a los que se concede acceso al contenido con derechos administrados.</param>
      <returns>Una sesión de cliente segura para la activación, el enlace de licencias y otras operaciones de administración de derechos.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>Devuelve una lista de los usuarios activados.</summary>
      <returns>Lista de los usuarios activados actualmente.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>Indica si se activó un usuario determinado para tener acceso al contenido con derechos administrados.</summary>
      <param name="user">Usuario o grupo de usuarios a los que se concede acceso al contenido con derechos administrados.</param>
      <returns>
        <see langword="true" /> si se activó el <paramref name="user" /> determinado para tener acceso al contenido con derechos administrados; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>Quita la activación de licencia de un usuario especificado.</summary>
      <param name="user">Usuario al que se quitará la activación de licencia.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="user" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El elemento <paramref name="user" /> dado no está autenticado con la autenticación de Windows o autenticación de Passport.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>Obtiene el valor <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> especificado cuando se creó <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <returns>Manifiesto de aplicación especificado para el método <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> cuando se crea <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>Obtiene el usuario o el grupo de usuarios especificado cuando se creó <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
      <returns>Usuario o grupo de usuarios especificado para el método <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> cuando se creó <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>Representa una <see cref="T:System.Security.RightsManagement.PublishLicense" /> administrada de derechos sin firmar o una plantilla de <see cref="T:System.Security.RightsManagement.PublishLicense" /> sin firmar.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> a partir de una plantilla de licencia de publicación de XrML especificada.</summary>
      <param name="publishLicenseTemplate">Plantilla de licencia de publicación de Lenguaje de marcado con derechos extensible (XrML) usada para crear esta licencia.</param>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>Crea un objeto <see cref="T:System.Security.RightsManagement.PublishLicense" /> firmado y devuelve un objeto <see cref="T:System.Security.RightsManagement.UseLicense" /> para el autor del documento.</summary>
      <param name="secureEnvironment">Entorno seguro para la activación de la licencia y el enlace.</param>
      <param name="authorUseLicense">Objeto <see cref="T:System.Security.RightsManagement.UseLicense" /> devuelto para el autor del documento.</param>
      <returns>Objeto <see cref="T:System.Security.RightsManagement.PublishLicense" /> firmado que se crea al firmar <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>Devuelve una plantilla serializada creada a partir del elemento XrML del objeto <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</summary>
      <returns>Plantilla serializada creada a partir del elemento XrML del objeto <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>Obtiene o establece el identificador de contenido creado por el publicador.</summary>
      <returns>Identificador de contenido con derechos administrados creado por el publicador.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>Obtiene una colección de derechos del usuario asignados.</summary>
      <returns>Colección de derechos de usuario asignados que se proporcionan en esta licencia.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>Obtiene una colección de pares de nombre y descripción.</summary>
      <returns>Colección de pares de nombre y descripción.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>Obtiene o establece el propietario del contenido.</summary>
      <returns>Usuario propietario del contenido publicado.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>Obtiene o establece el nombre de contacto del autor o editor del contenido.</summary>
      <returns>Nombre de contacto del autor o editor del contenido.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>Obtiene o establece el URI de contacto del autor o publicador del contenido.</summary>
      <returns>Identificador uniforme de recursos (URI) de contacto del autor o editor del contenido.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>Representa una licencia que permite el acceso a contenido administrado con derechos protegidos.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.RightsManagement.UseLicense" />.</summary>
      <param name="useLicense">Licencia de uso en formato Lenguaje de marcado con derechos extensible (XrML) serializado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="useLicense" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
        <paramref name="useLicense" /> no es válido.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Enlaza la licencia a un <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> determinado.</summary>
      <param name="secureEnvironment">Entorno al que se va a enlazar la licencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> es <see langword="null" />.</exception>
      <returns>Instancia <see cref="T:System.Security.RightsManagement.CryptoProvider" /> si el enlace de la licencia se realizó correctamente; en caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>Indica si esta licencia es equivalente a otra licencia determinada.</summary>
      <param name="x">Licencia que se va a comparar.</param>
      <returns>
        <see langword="true" /> si ambas licencias son equivalentes; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>Devuelve el código hash asociado con esta licencia.</summary>
      <returns>Código hash para esta licencia.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>Devuelve la cadena XrML serializada utilizada para crear esta licencia.</summary>
      <returns>Cadena Lenguaje de marcado con derechos extensible (XrML) serializada pasada originalmente al constructor <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>Obtiene el diccionario de datos de aplicación que contiene los pares de clave y valor pasados de la aplicación de publicación a la aplicación que los utiliza.</summary>
      <returns>Diccionario de datos de aplicación que contiene los pares de clave y valor pasados de la aplicación de publicación a la aplicación que los utiliza.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>Obtiene el identificador de contenido creado por el editor.</summary>
      <returns>Identificador de contenido creado por el editor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>Obtiene el propietario de la licencia.</summary>
      <returns>Propietario de la licencia.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>Especifica el tipo de Certificado de cuenta de derechos del usuario para solicitar la activación de la administración de derechos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>Certificado de cuenta de derechos permanente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>Certificado de cuenta de derechos temporal.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>Proporciona una clase base para atributos de .NET Framework que indica el ámbito de uso de las propiedades adjuntas.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" />.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>Especifica que una propiedad adjunta es examinable solo para los elementos que se derivan de un tipo especificado.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> con el <paramref name="targetType" /> proporcionado.</summary>
      <param name="targetType">Tipo deseado que establece un ámbito de uso de la propiedad adjunta en la que se aplica este Atributo de .NET Framework.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>Determina si el actual <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> Atributo de .NET Framework es igual a un objeto especificado.</summary>
      <param name="obj">
        <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> que se va a comparar con el <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> especificado es igual al objeto <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>Devuelve el código hash de este objeto <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> Atributo de .NET Framework.</summary>
      <returns>Valor entero de 32 bits sin signo.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>Obtiene el tipo base que abarca el uso de la propiedad adjunta donde se aplica Atributo de .NET Framework.</summary>
      <returns>
        <see cref="T:System.Type" /> solicitado.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>Obtiene un identificador de tipo único para este <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> Atributo de .NET Framework .</summary>
      <returns>Objeto que es un identificador único de <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>Especifica que una propiedad adjunta solo es explorable en un elemento que también tiene otro atributo de .NET Framework específico aplicado a su definición de clase.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />.</summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> del Atributo de .NET Framework que también se tiene que aplicar en una clase para que la propiedad asociada se pueda explorar en la clase donde se aplica <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>Determina si el actual <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> Atributo de .NET Framework es igual a un objeto especificado.</summary>
      <param name="obj">
        <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> que se va a comparar con el <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> especificado es igual al objeto <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>Devuelve el código hash de este objeto <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> Atributo de .NET Framework.</summary>
      <returns>Valor entero de 32 bits sin signo.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>Obtiene el tipo del Atributo de .NET Framework que también se debe aplicar en una clase.</summary>
      <returns>Atributo de .NET FrameworkTipo.</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary>Contiene las propiedades que especifican cómo una aplicación debe comportarse en relación con las nuevas características WPF que están en el ensamblado WindowsBase.</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary>Obtiene o establece un valor que indica si la información acerca de <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> se guarda en <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</summary>
      <returns>
        <see langword="true" /> si la información sobre <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> se guarda en <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />; si no, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailure">
      <summary>Define cómo el distribuidor reacciona ante errores que se producen cuando se solicita el procesamiento.</summary>
      <returns>Valor que define cómo el distribuidor reacciona ante errores.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary>Obtiene o establece un valor que indica si el método <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> coloca los delegados en la cola del distribuidor o si se invoca el delegado directamente.</summary>
      <returns>
        <see langword="true" /> si el método <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> coloca los delegados en la cola del distribuidor o si se invoca el delegado directamente; si no, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary>Obtiene o establece un valor que indica si solo <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> se usa para varias operaciones del distribuidor.</summary>
      <returns>true si se usa un solo <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> para varias operaciones del distribuidor; si no, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions">
      <summary>Proporciona un conjunto de valores que describe la forma en la que el distribuidor responde a los errores que se producen durante la solicitud de procesamiento.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Continue">
      <summary>Continúe después del error.  
  
 Este es el valor predeterminado. Define el comportamiento del distribuidor de Windows Presentation Foundation antes de .NET Framework 4.7.1. Puede que el distribuidor deje de responder cuando se selecciona esta opción.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Reset">
      <summary>Restablezca el estado del distribuidor para intentar otra solicitud la próxima vez que se necesite una.  
  
 Aunque esta opción a veces puede “reparar” errores de este tipo, no puede soportar la sincronización habitual de procesamiento, que puede ser crucial. Si selecciona esta opción puede sufrir un comportamiento inesperado.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Throw">
      <summary>Iniciar una excepción.  
  
 Esta opción indica inmediatamente el problema al desarrollador de la aplicación.</summary>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>Proporciona una plantilla para un método al que se llama cuando se vuelve a evaluar el valor de una propiedad de dependencia o cuando se solicita específicamente la conversión.</summary>
      <param name="d">Objeto en el que existe la propiedad. Cuando se invoca la devolución de llamada, el sistema de propiedades pasará este valor.</param>
      <param name="baseValue">Nuevo valor de la propiedad, antes de cualquier intento de conversión.</param>
      <returns>Valor convertido (con el tipo apropiado).</returns>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>Convierte instancias de <see cref="T:System.String" /> en y desde instancias de <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Converters.Int32RectValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si el <see cref="T:System.String" /> especificado puede convertirse en una instancia de <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="value">Cadena que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la estructura <see cref="T:System.Windows.Int32Rect" /> especificada se puede convertir en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> se puede convertir a <see cref="T:System.String" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte <see cref="T:System.String" /> a <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="value">Cadena que se va a convertir.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Una nueva instancia de <see cref="T:System.Windows.Int32Rect" /> según el parámetro <paramref name="value" /> proporcionado.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte una instancia de <see cref="T:System.Windows.Int32Rect" /> en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a convertir en una cadena.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Representación de cadena del elemento <see cref="T:System.Windows.Int32Rect" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>Convierte instancias de <see cref="T:System.String" /> en y desde instancias de <see cref="T:System.Windows.Point" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Converters.PointValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si el <see cref="T:System.String" /> especificado puede convertirse en una instancia de <see cref="T:System.Windows.Point" />.</summary>
      <param name="value">Cadena que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la estructura <see cref="T:System.Windows.Point" /> especificada se puede convertir en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> se puede convertir a <see cref="T:System.String" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte <see cref="T:System.String" /> a <see cref="T:System.Windows.Point" />.</summary>
      <param name="value">Cadena que se va a convertir.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Una nueva instancia de <see cref="T:System.Windows.Point" /> según el parámetro <paramref name="value" /> proporcionado.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte una instancia de <see cref="T:System.Windows.Point" /> en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a convertir en una cadena.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Representación de cadena del elemento <see cref="T:System.Windows.Point" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>Convierte instancias de <see cref="T:System.String" /> en y desde instancias de <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Converters.RectValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si el <see cref="T:System.String" /> especificado puede convertirse en una instancia de <see cref="T:System.Windows.Rect" />.</summary>
      <param name="value">Cadena que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la estructura <see cref="T:System.Windows.Rect" /> especificada se puede convertir en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> se puede convertir a <see cref="T:System.String" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte <see cref="T:System.String" /> a <see cref="T:System.Windows.Rect" />.</summary>
      <param name="value">Cadena que se va a convertir.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Una nueva instancia de <see cref="T:System.Windows.Rect" /> según el parámetro <paramref name="value" /> proporcionado.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte una instancia de <see cref="T:System.Windows.Rect" /> en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a convertir en una cadena.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Representación de cadena del elemento <see cref="T:System.Windows.Rect" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>Convierte instancias de <see cref="T:System.String" /> en y desde instancias de <see cref="T:System.Windows.Size" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Converters.SizeValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si el <see cref="T:System.String" /> especificado puede convertirse en una instancia de <see cref="T:System.Windows.Size" />.</summary>
      <param name="value">Cadena que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la estructura <see cref="T:System.Windows.Size" /> especificada se puede convertir en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> se puede convertir a <see cref="T:System.String" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte <see cref="T:System.String" /> a <see cref="T:System.Windows.Size" />.</summary>
      <param name="value">Cadena que se va a convertir.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Una nueva instancia de <see cref="T:System.Windows.Size" /> según el parámetro <paramref name="value" /> proporcionado.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte una instancia de <see cref="T:System.Windows.Size" /> en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a convertir en una cadena.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Representación de cadena del elemento <see cref="T:System.Windows.Size" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>Convierte instancias de <see cref="T:System.String" /> en y desde instancias de <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Converters.VectorValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si el <see cref="T:System.String" /> especificado puede convertirse en una instancia de <see cref="T:System.Windows.Vector" />.</summary>
      <param name="value">Cadena que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la estructura <see cref="T:System.Windows.Vector" /> especificada se puede convertir en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> se puede convertir a <see cref="T:System.String" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte <see cref="T:System.String" /> a <see cref="T:System.Windows.Vector" />.</summary>
      <param name="value">Cadena que se va a convertir.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Una nueva instancia de <see cref="T:System.Windows.Vector" /> según el parámetro <paramref name="value" /> proporcionado.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte una instancia de <see cref="T:System.Windows.Vector" /> en <see cref="T:System.String" />.</summary>
      <param name="value">Objeto que se va a convertir en una cadena.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Representación de cadena del elemento <see cref="T:System.Windows.Vector" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>Clase base común y contrato para objetos <see cref="T:System.Windows.Data.DataSourceProvider" />, que son fábricas que ejecutan algunas consultas para generar un objeto único o una lista de objetos que pueda utilizar como objetos de origen de enlace.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>Se produce cuando la propiedad <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> tiene un nuevo valor.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Tiene lugar cuando cambia un valor de propiedad.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Data.DataSourceProvider" />. Se trata de un constructor protegido.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>Indica que la inicialización de este objeto está a punto de comenzar; no se producirá ninguna operación <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> implícita hasta que se llame al método <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> correspondiente.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>Cuando se invalida en una clase derivada, esta clase base llama a este método cuando se ha llamado a <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> o <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />. La clase base retrasa la llamada si se aplaza la actualización o si la carga inicial está deshabilitada.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>Especifica un ciclo de aplazamiento que puede usar para cambiar las propiedades del proveedor y retrasar la actualización automática.</summary>
      <returns>Objeto <see cref="T:System.IDisposable" /> que puede usar para eliminar el objeto que realiza la llamada.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>Indica que se ha completado la inicialización de este objeto; de esta forma tiene lugar <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> si no hay ningún otro método <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> pendiente.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>Inicia la consulta inicial al modelo de datos subyacente. El resultado se devuelve en la propiedad <see cref="P:System.Windows.Data.DataSourceProvider.Data" />.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Genera el evento <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> con los argumentos proporcionados.</summary>
      <param name="e">Argumentos del evento que se está generando.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>Las clases derivadas llaman a este método para indicar que ha finalizado una consulta.</summary>
      <param name="newData">Datos obtenidos como resultado de la consulta.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>Las clases derivadas llaman a este método para indicar que ha finalizado una consulta.</summary>
      <param name="newData">Datos obtenidos como resultado de la consulta.</param>
      <param name="error">Error producido durante la ejecución de la consulta. Este valor es <see langword="null" /> si no hay ningún error.</param>
      <param name="completionWork">Delegado opcional que se utiliza para ejecutar trabajo de finalización en el subproceso de UI, por ejemplo, para establecer propiedades adicionales.</param>
      <param name="callbackArguments">Argumentos opcionales que se envían como parámetro con el delegado <paramref name="completionWork" />.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>Inicia una operación de actualización del modelo de datos subyacente. El resultado se devuelve en la propiedad <see cref="P:System.Windows.Data.DataSourceProvider.Data" />.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>Este miembro es compatible con la infraestructura de Windows Presentation Foundation (WPF) y no está diseñado para utilizarse directamente desde el código.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>Este miembro es compatible con la infraestructura de Windows Presentation Foundation (WPF) y no está diseñado para utilizarse directamente desde el código.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>Obtiene el objeto de datos subyacente.</summary>
      <returns>Valor de tipo <see cref="T:System.Object" /> que es el objeto de datos subyacente.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>Obtiene o establece el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> actual en el subproceso UI que se va a usar.</summary>
      <returns>Objeto actual que se va a <see cref="T:System.Windows.Threading.Dispatcher" /> usar en el UI subproceso. De forma predeterminada, éste es el objeto de <see cref="T:System.Windows.Threading.Dispatcher" /> asociado al subproceso en el que esta instancia se creó.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>Obtiene el error de la última operación de consulta.</summary>
      <returns>Un valor de tipo <see cref="T:System.Exception" /> que representa el error de la última operación de consulta o <see langword="null" /> si no se produjo ningún error.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>Obtiene o establece un valor que indica si debe impedirse o retrasarse la carga automática de datos.</summary>
      <returns>Es <see langword="false" /> para impedir o retrasar la carga automática de datos; de lo contrario, es <see langword="true" />. El valor predeterminado es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>Obtiene un valor que indica si hay un método <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> pendiente en uso.</summary>
      <returns>Es <see langword="true" /> si hay un método <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> pendiente en uso; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>Representa un objeto que forma parte del sistema de propiedades de dependencia.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>Borra el valor local de una propiedad. La propiedad que se va a borrar se especifica mediante un identificador <see cref="T:System.Windows.DependencyProperty" />.</summary>
      <param name="dp">Propiedad de dependencia que se va a borrar, identificada con una referencia de objeto <see cref="T:System.Windows.DependencyProperty" />.</param>
      <exception cref="T:System.InvalidOperationException">Se intentó llamar a <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> en un <see cref="T:System.Windows.DependencyObject" /> sellado.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>Borra el valor local de una propiedad de solo lectura. La propiedad que se va a borrar se especifica mediante un <see cref="T:System.Windows.DependencyPropertyKey" />.</summary>
      <param name="key">Clave de la propiedad de dependencia que se va a borrar.</param>
      <exception cref="T:System.InvalidOperationException">Se intentó llamar a <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> en un <see cref="T:System.Windows.DependencyObject" /> sellado.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>Convierte el valor de la propiedad de dependencia especificada. Esto se logra invocando cualquier función <see cref="T:System.Windows.CoerceValueCallback" /> especificada en los metadatos de la propiedad de dependencia tal como existe en la clase <see cref="T:System.Windows.DependencyObject" /> que llama.</summary>
      <param name="dp">Identificador de la propiedad de dependencia que se va a convertir.</param>
      <exception cref="T:System.InvalidOperationException">El parámetro <paramref name="dp" /> especificado o su valor no eran válidos o no existían.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>Determina si un objeto <see cref="T:System.Windows.DependencyObject" /> proporcionado es equivalente al objeto <see cref="T:System.Windows.DependencyObject" /> actual.</summary>
      <param name="obj">
        <see cref="T:System.Windows.DependencyObject" /> que se va a comparar con la instancia actual.</param>
      <returns>Es <see langword="true" /> si las dos instancias son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>Obtiene un código hash de este objeto <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>Código hash entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>Crea un enumerador especializado para determinar qué propiedades de dependencia han establecido localmente los valores en <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>Enumerador de valor local especializado.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>Devuelve el valor efectivo actual de una propiedad de dependencia en esta instancia de un <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="dp">Identificador <see cref="T:System.Windows.DependencyProperty" /> de la propiedad de la que se debe recuperar el valor.</param>
      <exception cref="T:System.InvalidOperationException">El <paramref name="dp" /> especificado o su valor no eran válidos, o el <paramref name="dp" /> especificado no existe.</exception>
      <returns>Devuelve el valor efectivo actual.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>Vuelve a evaluar el valor efectivo para la propiedad de dependencia especificada.</summary>
      <param name="dp">Identificador de <see cref="T:System.Windows.DependencyProperty" /> de la propiedad que se debe invalidar.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Se invoca cuando se actualiza el valor efectivo de alguna propiedad de dependencia en este <see cref="T:System.Windows.DependencyObject" />. La propiedad de dependencia específica que cambió se notifica en los datos de evento.</summary>
      <param name="e">Datos de evento que contendrán el identificador de propiedad de dependencia de interés, los metadatos del tipo de propiedad, y valores antiguos y nuevos.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>Devuelve el valor local de una propiedad de dependencia, si existe.</summary>
      <param name="dp">Identificador <see cref="T:System.Windows.DependencyProperty" /> de la propiedad de la que se debe recuperar el valor.</param>
      <returns>Devuelve el valor local o devuelve el valor centinela <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> si no se establece ningún valor local.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Establece el valor de una propiedad de dependencia sin cambiar el origen del valor.</summary>
      <param name="dp">Identificador de la propiedad de dependencia que se va a establecer.</param>
      <param name="value">Nuevo valor local.</param>
      <exception cref="T:System.InvalidOperationException">Se intentó modificar una propiedad de dependencia de solo lectura o una propiedad en una clase <see cref="T:System.Windows.DependencyObject" /> sellada.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no era el tipo correcto registrado para la propiedad <paramref name="dp" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Establece el valor local de una propiedad de dependencia, especificado mediante el identificador de la propiedad de dependencia.</summary>
      <param name="dp">Identificador de la propiedad de dependencia que se va a establecer.</param>
      <param name="value">Nuevo valor local.</param>
      <exception cref="T:System.InvalidOperationException">Se intentó modificar una propiedad de dependencia de solo lectura o una propiedad en una clase <see cref="T:System.Windows.DependencyObject" /> sellada.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no era el tipo correcto registrado para la propiedad <paramref name="dp" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>Establece el valor local de una propiedad de dependencia de solo lectura, especificado por el identificador <see cref="T:System.Windows.DependencyPropertyKey" /> de la propiedad de dependencia.</summary>
      <param name="key">Identificador <see cref="T:System.Windows.DependencyPropertyKey" /> de la propiedad que se debe establecer.</param>
      <param name="value">Nuevo valor local.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>Devuelve un valor que indica si los procesos de serialización deben serializar el valor de la propiedad de dependencia especificada.</summary>
      <param name="dp">El identificador de la propiedad de dependencia que se debe serializar.</param>
      <returns>Es <see langword="true" /> si la propiedad de dependencia que se proporciona debe serializarse por valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>Obtiene el objeto <see cref="T:System.Windows.DependencyObjectType" /> que ajusta el tipo CLR de esta instancia.</summary>
      <returns>
        <see cref="T:System.Windows.DependencyObjectType" /> que ajusta el tipo CLR de esta instancia.</returns>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>Obtiene un valor que indica si esta instancia está actualmente sellada (es de solo lectura).</summary>
      <returns>
        <see langword="true" /> si se sella esta instancia; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>Implementa una caché de tipo subyacente para todos los tipos derivados de <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>Devuelve un <see cref="T:System.Windows.DependencyObjectType" /> que representa un tipo (CLR) de un sistema determinado.</summary>
      <param name="systemType">Tipo (CLR) del sistema que se va a convertir.</param>
      <returns>
        <see cref="T:System.Windows.DependencyObjectType" /> que representa el tipo (CLR) del sistema.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>Devuelve el código hash de este objeto <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>Código hash de un entero con signo de 32 bits.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>Determina si el objeto especificado es una instancia del objeto <see cref="T:System.Windows.DependencyObjectType" /> actual.</summary>
      <param name="dependencyObject">Objeto que se va a comparar con el objeto <see cref="T:System.Windows.DependencyObjectType" /> actual.</param>
      <returns>
        <see langword="true" /> si la clase representada por el <see cref="T:System.Windows.DependencyObjectType" /> actual está en la jerarquía de herencia de <see cref="T:System.Windows.DependencyObject" /> pasada como <paramref name="d" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>Determina si el <see cref="T:System.Windows.DependencyObjectType" /> actual se deriva del <see cref="T:System.Windows.DependencyObjectType" /> especificado.</summary>
      <param name="dependencyObjectType">
        <see cref="T:System.Windows.DependencyObjectType" /> que se va comparar.</param>
      <returns>
        <see langword="true" /> si el parámetro <paramref name="dependencyObjectType" /> y el <see cref="T:System.Windows.DependencyObjectType" /> actual representan tipos de clases, y la clase representada por el <see cref="T:System.Windows.DependencyObjectType" /> actual se deriva de la clase representada por <paramref name="dependencyObjectType" />. En caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="dependencyObjectType" /> y el objeto <see cref="T:System.Windows.DependencyObjectType" /> actual representan la misma clase.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>Obtiene el <see cref="T:System.Windows.DependencyObjectType" /> de la clase base inmediata del <see cref="T:System.Windows.DependencyObjectType" /> actual.</summary>
      <returns>Tipo de la clase base.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>Obtiene un identificador único de base cero para operaciones de búsqueda de matrices de tiempo constante.</summary>
      <returns>Identificador interno.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>Obtiene el nombre del tipo de sistema Common Language Runtime (CLR) representado.</summary>
      <returns>Nombre del tipo de sistema CLR representado.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary>Obtiene el tipo de sistema Common Language Runtime (CLR) representado por este <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>Tipo de sistema CLR representado por este <see cref="T:System.Windows.DependencyObjectType" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>Representa una propiedad que se puede establecer a través de métodos como, por ejemplo, el estilo, el enlace de datos, la animación y la herencia.</summary>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>Especifica un valor estático que usa el sistema de propiedades de WPF en vez de <see langword="null" /> para indicar que la propiedad existe, pero el sistema de propiedades no ha establecido su valor.</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>Agrega otro tipo como propietario de una propiedad de dependencia que ya está registrada.</summary>
      <param name="ownerType">Tipo que se va a agregar como propietario de esta propiedad de dependencia.</param>
      <returns>Referencia al identificador <see cref="T:System.Windows.DependencyProperty" /> original que identifica la propiedad de dependencia. Este identificador debe exponerse mediante la adición de la clase como un campo <see langword="public static readonly" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>Agrega otro tipo como propietario de una propiedad de dependencia que ya se ha registrado y ofrece los metadatos de propiedad de dependencia para la propiedad de dependencia como se verá en el tipo de propietario proporcionado.</summary>
      <param name="ownerType">Tipo que se va a agregar como propietario de esta propiedad de dependencia.</param>
      <param name="typeMetadata">Metadatos que califican la propiedad de dependencia tal como existe en el tipo proporcionado.</param>
      <returns>Referencia al identificador <see cref="T:System.Windows.DependencyProperty" /> original que identifica la propiedad de dependencia. Este identificador debe exponerse mediante la adición de la clase como un campo <see langword="public static readonly" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>Devuelve un código hash para esta <see cref="T:System.Windows.DependencyProperty" />.</summary>
      <returns>Código hash de esta <see cref="T:System.Windows.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>Devuelve los metadatos de esta propiedad de dependencia tal como existe en un tipo especificado.</summary>
      <param name="forType">El tipo específico del que se deben recuperar los metadatos de la propiedad de dependencia.</param>
      <returns>Objeto de metadatos de una propiedad.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>Devuelve los metadatos de esta propiedad de dependencia tal como existe en la instancia de objeto especificado.</summary>
      <param name="dependencyObject">Objeto de dependencia que se comprueba para el tipo, para determinar de qué versión específica del tipo de la propiedad de dependencia deben proceder los metadatos.</param>
      <returns>Objeto de metadatos de una propiedad.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary>Devuelve los metadatos de esta propiedad de dependencia tal como existe en un tipo especificado.</summary>
      <param name="dependencyObjectType">Objeto específico que registra el tipo de objeto de dependencia del que se quieren obtener los metadatos de la propiedad de dependencia.</param>
      <returns>Objeto de metadatos de una propiedad.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>Determina si un valor especificado es aceptable para el tipo de esta propiedad de dependencia, como se ha comprobado en el tipo de propiedad proporcionado en el registro de propiedad de dependencia original.</summary>
      <param name="value">El valor que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el valor especificado es el tipo de propiedad registrado o un tipo derivado aceptable; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>Determina si el valor proporcionado se acepta para el tipo de propiedad mediante la comprobación de tipo básico y, potencialmente, si está comprendido en el intervalo permitido de valores de ese tipo.</summary>
      <param name="value">El valor que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el valor es aceptable y es del tipo correcto o un tipo derivado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Especifica los metadatos alternativos para esta propiedad de dependencia cuando se encuentra en instancias de un tipo especificado y reemplaza los metadatos existentes para la propiedad de dependencia tal y como se heredó de los tipos base.</summary>
      <param name="forType">Tipo en el que se hereda esta propiedad de dependencia y donde se aplicarán los metadatos alternativos proporcionados.</param>
      <param name="typeMetadata">Metadatos que se deben aplicar a la propiedad de dependencia en el tipo de reemplazo.</param>
      <exception cref="T:System.InvalidOperationException">Se intentaron reemplazar los metadatos en una propiedad de dependencia de solo lectura (esa operación no se puede realizar con esta signatura).</exception>
      <exception cref="T:System.ArgumentException">Los metadatos ya se establecieron para la propiedad de dependencia tal como existe en el tipo proporcionado.</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>Proporciona los metadatos alternativos para una propiedad de dependencia de solo lectura cuando se encuentra en instancias de un tipo especificado y reemplaza los metadatos que se proporcionaron en el registro inicial de la propiedad de dependencia. Debe pasar la <see cref="T:System.Windows.DependencyPropertyKey" /> para la propiedad de dependencia de solo lectura evitar que se genere una excepción.</summary>
      <param name="forType">Tipo en el que se hereda esta propiedad de dependencia y donde se aplicarán los metadatos alternativos proporcionados.</param>
      <param name="typeMetadata">Metadatos que se deben aplicar a la propiedad de dependencia en el tipo de reemplazo.</param>
      <param name="key">Clave de acceso para una propiedad de dependencia de solo lectura.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>Registra una propiedad de dependencia con el nombre de propiedad, el tipo de propiedad y el tipo de propietario especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar. El nombre debe ser único dentro del espacio de nombres de registro del tipo de propietario.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <returns>Identificador de propiedad de dependencia que se debe usar para establecer el valor de un campo <see langword="public static readonly" /> en su clase. Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registra una propiedad de dependencia con el nombre de la propiedad, el tipo de propiedad, el tipo de propietario y los metadatos de propiedad especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <param name="typeMetadata">Metadatos de propiedad de la propiedad de dependencia.</param>
      <returns>Identificador de propiedad de dependencia que se debe usar para establecer el valor de un campo <see langword="public static readonly" /> en su clase. Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registra una propiedad de dependencia con los valores especificados de nombre de la propiedad, tipo de propiedad, tipo de propietario, metadatos de propiedad y una devolución de llamada de validación de la propiedad.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <param name="typeMetadata">Metadatos de propiedad de la propiedad de dependencia.</param>
      <param name="validateValueCallback">Referencia a una devolución de llamada que debe realizar cualquier validación personalizada del valor de la propiedad de dependencia además de la validación habitual de tipo.</param>
      <returns>Identificador de propiedad de dependencia que se debe usar para establecer el valor de un campo <see langword="public static readonly" /> en su clase. Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>Registra una propiedad adjunta con el nombre de propiedad, el tipo de propiedad y el tipo de propietario especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <returns>Identificador de propiedad de dependencia que se debe usar para establecer el valor de un campo <see langword="public static readonly" /> en su clase. Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registra una propiedad adjunta con el nombre de la propiedad, el tipo de propiedad, el tipo de propietario y los metadatos de propiedad especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <param name="defaultMetadata">Metadatos de propiedad de la propiedad de dependencia. Esto puede incluir el valor predeterminado, así como otras características.</param>
      <returns>Identificador de propiedad de dependencia que se debe usar para establecer el valor de un campo <see langword="public static readonly" /> en su clase. Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registra una propiedad adjunta con el tipo de propiedad, el tipo de propietario, los metadatos de propiedad y una devolución de llamada de validación de valor especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <param name="defaultMetadata">Metadatos de propiedad de la propiedad de dependencia. Esto puede incluir el valor predeterminado, así como otras características.</param>
      <param name="validateValueCallback">Referencia a una devolución de llamada que debe realizar cualquier validación personalizada del valor de la propiedad de dependencia además de la validación habitual de tipo.</param>
      <returns>Identificador de propiedad de dependencia que se debe usar para establecer el valor de un campo <see langword="public static readonly" /> en su clase. Ese identificador se usa posteriormente para hacer referencia a la propiedad de dependencia, en operaciones como el establecimiento de su valor mediante programación o la obtención de metadatos.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registra una propiedad adjunta de solo lectura, con el tipo de propiedad, el tipo de propietario y los metadatos de propiedad especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <param name="defaultMetadata">Metadatos de propiedad de la propiedad de dependencia.</param>
      <returns>Clave de propiedad de dependencia que debe usarse para establecer el valor de un campo estático de solo lectura en la clase, que se usa para hacer referencia a la propiedad de dependencia más tarde.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registra una propiedad adjunta de solo lectura, con el tipo de propiedad, el tipo de propietario, los metadatos de propiedad y una devolución de llamada de validación especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <param name="defaultMetadata">Metadatos de propiedad de la propiedad de dependencia.</param>
      <param name="validateValueCallback">Referencia a una devolución de llamada creada por el usuario que debe realizar cualquier validación personalizada del valor de la propiedad de dependencia además de la validación habitual de tipo.</param>
      <returns>Clave de propiedad de dependencia que debe usarse para establecer el valor de un campo estático de solo lectura en la clase, que se usa para hacer referencia a la propiedad de dependencia.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registra una propiedad de dependencia de solo lectura, con el tipo de propiedad, el tipo de propietario y los metadatos de propiedad especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <param name="typeMetadata">Metadatos de propiedad de la propiedad de dependencia.</param>
      <returns>Clave de propiedad de dependencia que debe usarse para establecer el valor de un campo estático de solo lectura en la clase, que se usa para hacer referencia a la propiedad de dependencia.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registra una propiedad de dependencia de solo lectura, con el tipo de propiedad, el tipo de propietario, los metadatos de propiedad y una devolución de llamada de validación especificados.</summary>
      <param name="name">Nombre de la propiedad de dependencia que se va a registrar.</param>
      <param name="propertyType">Tipo de la propiedad.</param>
      <param name="ownerType">Tipo de propietario que registra la propiedad de dependencia.</param>
      <param name="typeMetadata">Metadatos de propiedad de la propiedad de dependencia.</param>
      <param name="validateValueCallback">Referencia a una devolución de llamada creada por el usuario que debe realizar cualquier validación personalizada del valor de la propiedad de dependencia además de la validación habitual de tipo.</param>
      <returns>Clave de propiedad de dependencia que debe usarse para establecer el valor de un campo estático de solo lectura en la clase, que se usa para hacer referencia a la propiedad de dependencia más tarde.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary>Devuelve la representación de cadena de la propiedad de dependencia.</summary>
      <returns>Representación de cadena de la propiedad de dependencia.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>Obtiene los metadatos predeterminados de la propiedad de dependencia.</summary>
      <returns>Metadatos predeterminados de la propiedad de dependencia.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>Obtiene un valor generado internamente que identifica exclusivamente la propiedad de dependencia.</summary>
      <returns>Identificador numérico único.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>Obtiene el nombre de la propiedad de dependencia.</summary>
      <returns>Nombre de la propiedad.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>Obtiene el tipo del objeto que registró la propiedad de dependencia con el sistema de propiedades o se agregó a sí mismo como su propietario.</summary>
      <returns>Tipo del objeto que registró la propiedad o se agregó a sí mismo como su propietario.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>Obtiene el tipo que usa la propiedad de dependencia para su valor.</summary>
      <returns>Clase <see cref="T:System.Type" /> del valor de propiedad.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>Obtiene un valor que indica si la propiedad de dependencia identificada por esta instancia de <see cref="T:System.Windows.DependencyProperty" /> es una propiedad de dependencia de sólo lectura.</summary>
      <returns>Es <see langword="true" /> si la propiedad de dependencia es de sólo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>Obtiene la devolución de llamada de validación del valor de la propiedad de dependencia.</summary>
      <returns>La devolución de llamada de validación del valor de esta propiedad de dependencia, tal y como se proporciona para el parámetro <paramref name="validateValueCallback" /> del registro de propiedad de dependencia original.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>Proporciona datos de los distintos eventos de cambio de propiedades. Normalmente, estos eventos notifican cambios de valor efectivos en el valor de una propiedad de dependencia de solo lectura. Otro uso es como parte de una implementación de <see cref="T:System.Windows.PropertyChangedCallback" />.</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <param name="property">Identificador de la propiedad de dependencia que ha cambiado.</param>
      <param name="oldValue">Valor de la propiedad antes del cambio notificado por el evento o cambio de estado correspondiente.</param>
      <param name="newValue">Valor de la propiedad después del cambio notificado por el evento o cambio de estado correspondiente.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>Determina si el objeto proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</summary>
      <param name="obj">El objeto que se va a comparar con el objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determina si el <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> proporcionado es equivalente al <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</summary>
      <param name="args">
        <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar con el <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> proporcionado es equivalente a la estructura <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>Obtiene un código hash de este <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <returns>Código hash entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determina si dos objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados tienen el mismo valor.</summary>
      <param name="left">Primer objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</param>
      <param name="right">Segundo objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</param>
      <returns>
        <see langword="true" /> si las dos instancias de <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> son equivalentes; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determina si dos objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados son diferentes.</summary>
      <param name="left">Primer objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</param>
      <param name="right">Segundo objeto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> que se va a comparar.</param>
      <returns>
        <see langword="true" /> si las dos instancias de <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> son diferentes; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>Obtiene el valor de la propiedad después del cambio.</summary>
      <returns>Valor de la propiedad después del cambio.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>Obtiene el valor de la propiedad antes del cambio.</summary>
      <returns>Valor de la propiedad después del cambio.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>Obtiene el identificador para la propiedad de dependencia en la que se produjo el cambio de valor.</summary>
      <returns>Campo del identificador de la propiedad de dependencia en la que se produjo el cambio de valor.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>Representa el método que controlará los eventos generados cuando se cambia una <see cref="T:System.Windows.DependencyProperty" /> en una implementación de <see cref="T:System.Windows.DependencyObject" /> determinada.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Datos del evento.</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>Proporciona un identificador de propiedad de dependencia para un acceso de escritura limitado a una propiedad de dependencia de sólo lectura.</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Invalida los metadatos de una propiedad de dependencia de sólo lectura que está representada por este identificador de propiedad de dependencia.</summary>
      <param name="forType">Se deben invalidar el tipo en el que existe esta propiedad de dependencia y los metadatos.</param>
      <param name="typeMetadata">Metadatos proporcionados para este tipo.</param>
      <exception cref="T:System.InvalidOperationException">Se ha intentado invalidar metadatos en una propiedad de dependencia de lectura y escritura (no se puede hacer utilizando esta firma).</exception>
      <exception cref="T:System.ArgumentException">Los metadatos ya estaban establecidos para la propiedad tal y como existen en el tipo proporcionado.</exception>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>Obtiene el identificador de propiedad de dependencia asociado a este identificador de propiedad de dependencia de sólo lectura especializado.</summary>
      <returns>Identificador de la propiedad de dependencia pertinente.</returns>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>Este tipo admite la infraestructura de Windows Presentation Foundation (WPF) y no está previsto su uso directo desde el código.</summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>Convierte instancias de <see cref="T:System.Windows.Expression" /> a otros tipos y viceversa.</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.ExpressionConverter" />.</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que especifica si este convertidor puede convertir un objeto de origen en un objeto <see cref="T:System.Windows.Expression" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo de origen de la conversión.</param>
      <returns>Siempre es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si este convertidor puede convertir un objeto <see cref="T:System.Windows.Expression" /> en un tipo de destino concreto.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>Siempre es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el valor proporcionado en el tipo <see cref="T:System.Windows.Expression" />.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se va a usar como referencia cultural actual.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <returns>Siempre inicia una excepción y devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto <see cref="T:System.Windows.Expression" /> proporcionado en el tipo especificado.</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que ofrece un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se va a usar como referencia cultural actual.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Clase <see cref="T:System.Type" /> que representa el tipo al que se desea convertir.</param>
      <returns>Siempre inicia una excepción y devuelve <see langword="null" />.</returns>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>Define un objeto que tiene un estado modificable y un estado de solo lectura (inmovilizado). Las clases que derivan de <see cref="T:System.Windows.Freezable" /> proporcionan una notificación de cambios detallada, puede hacerse inmutables y pueden clonarse a sí mismas.</summary>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>Se produce cuando se modifican la clase <see cref="T:System.Windows.Freezable" /> o un objeto que la contiene.</summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>Inicializa una nueva instancia de una clase <see cref="T:System.Windows.Freezable" /> derivada.</summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>Crea un clon modificable del elemento <see cref="T:System.Windows.Freezable" /> y hace copias en profundidad de los valores del objeto. Cuando se copian las propiedades de dependencia del objeto, este método copia las expresiones (que puede que ya no se resuelvan), pero no copia las animaciones ni sus valores actuales.</summary>
      <returns>Clon modificable del objeto actual. La propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del objeto clonado es <see langword="false" /> aunque la propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del origen sea <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>Convierte la instancia en un clon (copia en profundidad) de la clase <see cref="T:System.Windows.Freezable" /> especificada con valores de propiedad base (no animadas).</summary>
      <param name="sourceFreezable">Objeto que se va a clonar.</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>Crea un clon modificable (copia en profundidad) de <see cref="T:System.Windows.Freezable" /> con sus valores actuales.</summary>
      <returns>Clon modificable del objeto actual. La propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del objeto clonado es <see langword="false" /> aunque la propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del origen sea <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Convierte esta instancia en un clon modificable (copia en profundidad) del <see cref="T:System.Windows.Freezable" /> especificado mediante los valores de propiedad actuales.</summary>
      <param name="sourceFreezable">
        <see cref="T:System.Windows.Freezable" /> que se va a clonar.</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Freezable" />.</summary>
      <returns>La nueva instancia.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>Cuando se implementa en una clase derivada, crea una nueva instancia de la clase <see cref="T:System.Windows.Freezable" /> derivada.</summary>
      <returns>La nueva instancia.</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>Convierte el objeto actual en no modificable y establece su propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> en <see langword="true" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Freezable" /> no se puede convertir en no modificable.</exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>Si el valor del parámetro <paramref name="isChecking" /> es <see langword="true" />, este método indica si la clase <see cref="T:System.Windows.Freezable" /> especificada se puede convertir en no modificable. Si el valor del parámetro <paramref name="isChecking" /> es <see langword="false" />, este método intenta convertir la clase <see cref="T:System.Windows.Freezable" /> especificada en no modificable e indica si la operación se realiza correctamente.</summary>
      <param name="freezable">Objeto que se va a comprobar o a convertir en no modificable. Si el valor de <paramref name="isChecking" /> es <see langword="true" />, se comprueba el objeto para determinar si se puede convertir en no modificable. Si el valor de <paramref name="isChecking" /> es <see langword="false" />, el objeto se convierte en no modificable, si es posible.</param>
      <param name="isChecking">Es <see langword="true" /> para devolver una indicación de si se puede inmovilizar el objeto (sin inmovilizarlo realmente); es <see langword="false" /> para inmovilizarlo realmente.</param>
      <exception cref="T:System.InvalidOperationException">Cuando el valor de <paramref name="isChecking" /> es <see langword="false" />, el intento para convertir <paramref name="freezable" /> en no modificable no dio resultado; el estado del objeto es desconocido puede estar parcialmente inmovilizado.</exception>
      <returns>Si el valor de <paramref name="isChecking" /> es <see langword="true" />, este método devuelve <see langword="true" /> si la clase <see cref="T:System.Windows.Freezable" /> especificada se puede convertir en no modificable o <see langword="false" /> si no se puede convertir en no modificable. Si el valor de <paramref name="isChecking" /> es <see langword="false" />, este método devuelve <see langword="true" /> si la clase <see cref="T:System.Windows.Freezable" /> especificada ahora no es modificable o <see langword="false" /> si no se puede convertir en no modificable.</returns>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>Convierte el objeto <see cref="T:System.Windows.Freezable" /> en no modificable o prueba si se puede convertir en no modificable.</summary>
      <param name="isChecking">Es <see langword="true" /> para devolver una indicación de si se puede inmovilizar el objeto (sin inmovilizarlo realmente); es <see langword="false" /> para inmovilizarlo realmente.</param>
      <returns>Si el valor de <paramref name="isChecking" /> es <see langword="true" />, este método devuelve <see langword="true" /> si la clase <see cref="T:System.Windows.Freezable" /> se puede convertir en no modificable o <see langword="false" /> si no se puede convertir en no modificable. Si el valor de <paramref name="isChecking" /> es <see langword="false" />, este método devuelve <see langword="true" /> si la clase <see cref="T:System.Windows.Freezable" /> especificada ahora no es modificable o <see langword="false" /> si no se puede convertir en no modificable.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>Crea una copia inmovilizada de <see cref="T:System.Windows.Freezable" />, con los valores de propiedades base (no animadas). Puesto que se inmoviliza la copia, se copia cualquier subobjeto inmovilizado por referencia.</summary>
      <exception cref="T:System.InvalidOperationException">No se puede inmovilizar <see cref="T:System.Windows.Freezable" /> porque contiene expresiones o propiedades animadas.</exception>
      <returns>Copia inmovilizada de <see cref="T:System.Windows.Freezable" />. La propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> de la copia se establece en <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Convierte la instancia en un clon inmovilizado de la clase <see cref="T:System.Windows.Freezable" /> especificada con los valores de propiedades base (no animadas).</summary>
      <param name="sourceFreezable">Instancia que se va a copiar.</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>Crea una copia inmovilizada de <see cref="T:System.Windows.Freezable" /> con los valores de propiedad actuales. Puesto que se inmoviliza la copia, se copia cualquier subobjeto inmovilizado por referencia.</summary>
      <returns>Copia inmovilizada de <see cref="T:System.Windows.Freezable" />. La propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> de la copia se establece en <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Convierte la instancia actual en un clon inmovilizado del valor de <see cref="T:System.Windows.Freezable" /> especificado. Si el objeto tiene propiedades de dependencia animadas, se copian sus valores animados actuales.</summary>
      <param name="sourceFreezable">Clase <see cref="T:System.Windows.Freezable" /> que se va a copiar e inmovilizar.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>Se le llama cuando el objeto <see cref="T:System.Windows.Freezable" /> actual se modifica.</summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Se asegura de que se establecen los punteros contextuales adecuados para un miembro de datos <see cref="T:System.Windows.DependencyObjectType" /> que se acaba de establecer.</summary>
      <param name="oldValue">Valor previo del miembro de datos.</param>
      <param name="newValue">Valor actual del miembro de datos.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>Este miembro es compatible con la infraestructura de Windows Presentation Foundation (WPF) y no está diseñado para utilizarse directamente desde el código.</summary>
      <param name="oldValue">Valor previo del miembro de datos.</param>
      <param name="newValue">Valor actual del miembro de datos.</param>
      <param name="property">La propiedad que ha cambiado.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Reemplaza la implementación <see cref="T:System.Windows.DependencyObject" /> de <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> para invocar también cualquier controlador <see cref="E:System.Windows.Freezable.Changed" /> en respuesta a una propiedad de dependencia cambiante de tipo <see cref="T:System.Windows.Freezable" />.</summary>
      <param name="e">Datos de evento que contienen información acerca de qué propiedad ha cambiado y de sus valores antiguos y nuevos.</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>Se asegura de que se tiene acceso a <see cref="T:System.Windows.Freezable" /> desde un subproceso válido. Los herederos de <see cref="T:System.Windows.Freezable" /> deben llamar a este método al inicio de las API que leen miembros de datos que no son propiedades de dependencia.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>Genera el evento <see cref="E:System.Windows.Freezable.Changed" /> para <see cref="T:System.Windows.Freezable" /> e invoca su método <see cref="M:System.Windows.Freezable.OnChanged" />. Las clases que derivan de <see cref="T:System.Windows.Freezable" /> deben llamar a este método al final de cualquier API que modifique miembros de clase que no estén almacenados como propiedades de dependencia.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>Comprueba que no se inmovilice <see cref="T:System.Windows.Freezable" /> y que se tiene acceso desde un contexto de subproceso válido. Los herederos de <see cref="T:System.Windows.Freezable" /> deben llamar a este método al inicio de las API que escriben en miembros de datos que no son propiedades de dependencia.</summary>
      <exception cref="T:System.InvalidOperationException">La instancia de <see cref="T:System.Windows.Freezable" /> se inmoviliza y no se puede escribir en sus miembros.</exception>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>Obtiene un valor que indica si el objeto se puede convertir en no modificable.</summary>
      <returns>
        <see langword="true" /> si el objeto actual se puede convertir en no modificable o ya lo es; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>Obtiene un valor que indica si el objeto se puede modificar actualmente.</summary>
      <returns>
        <see langword="true" /> si el objeto se inmoviliza y no se puede modificar; <see langword="false" /> si se puede modificar el objeto.</returns>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>Especifica la dirección dentro de una interfaz de usuario en la que se intenta llevar a cabo una solicitud de cambio de foco. La dirección se basa en el orden de tabulación o la dirección relativa en el diseño.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>Mueve el foco a otro elemento enfocable situado debajo del elemento que tiene actualmente el foco.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>Mueve el foco al primer elemento enfocable en el orden de tabulación. No se admite para <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>Mueve el foco al último elemento enfocable en el orden de tabulación. No se admite para <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>Mueve el foco a otro elemento enfocable situado a la izquierda del elemento que tiene actualmente el foco.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>Mueve el foco al siguiente elemento enfocable en el orden de tabulación. No se admite para <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>Mueve el foco al anterior elemento enfocable en el orden de tabulación. No se admite para <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>Mueve el foco a otro elemento enfocable situado a la derecha del elemento que tiene actualmente el foco.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>Mueve el foco a otro elemento enfocable situado encima del elemento que tiene actualmente el foco.</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>Especifica los valores de tecla posibles en un teclado.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>Tecla A.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>Tecla ABNT_C1 (portugués de Brasil).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>Tecla ABNT_C2 (portugués de Brasil).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>Tecla Agregar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>Tecla de aplicación (Microsoft Natural Keyboard). También conocida como tecla de menú, ya que muestra un menú contextual específico de la aplicación.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>Tecla ATTN.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>Tecla B.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>Tecla Retroceso.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>Tecla Atrás del explorador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>Tecla Favoritos del explorador</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>Tecla Adelante del explorador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>Tecla Inicio del explorador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>Tecla Actualizar del explorador</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>Tecla Buscar del explorador</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>Tecla Detener del explorador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>Tecla C.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>Tecla Cancelar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>Tecla Bloq Mayús.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>Tecla Bloq Mayús.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>Tecla Borrar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>Tecla CRSEL.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>Tecla D.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>Tecla 0 (cero).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>Tecla 1 (uno).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>Tecla 2.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>Tecla 3.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>Tecla 4.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>Tecla 5.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>Tecla 6.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>Tecla 7.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>Tecla 8.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>Tecla 9.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>Tecla DBE_ALPHANUMERIC.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>Tecla DBE_CODEINPUT.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>Tecla DBE_SBCSCHAR.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>Tecla DBE_DETERMINESTRING.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>Tecla DBE_ENTERDLGCONVERSIONMODE.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>Tecla DBE_ENTERIMECONFIGMODE.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>Tecla DBE_ENTERWORDREGISTERMODE.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>Tecla DBE_FLUSHSTRING.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>Tecla DBE_HIRAGANA.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>Tecla DBE_KATAKANA.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>Tecla DBE_NOCODEINPUT.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>Tecla DBE_NOROMAN.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>Tecla DBE_ROMAN.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>Tecla DBE_SBCSCHAR.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>Tecla que se usa con otra tecla para crear un solo carácter combinado.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>Tecla Decimal.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>Tecla Supr.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>Tecla Dividir.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>Tecla Flecha abajo.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>Tecla E.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>Tecla Fin.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>Tecla Entrar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>Tecla ERASE EOF.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>Tecla ESC.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>Tecla Ejecutar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>Tecla EXSEL.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>Tecla F.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>Tecla F1.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>Tecla F10.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>Tecla F11.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>Tecla F12.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>Tecla F13.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>Tecla F14.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>Tecla F15.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>Tecla F16.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>Tecla F17.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>Tecla F18.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>Tecla F19.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>Tecla F2.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>Tecla F20.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>Tecla F21.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>Tecla F22.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>Tecla F23.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>Tecla F24.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>Tecla F3.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>Tecla F4.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>Tecla F5.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>Tecla F6.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>Tecla F7.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>Tecla F8.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>Tecla F9.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>Tecla de modo Final de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>Tecla G.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>Tecla H.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>Tecla de modo Hangul de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>Tecla de modo Hanja de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>Tecla Ayuda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>Tecla Inicio.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>Tecla I.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>Tecla Aceptar de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>Tecla Convertir de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>Solicitud de cambio del modo IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>Tecla No convertir de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>Tecla especial especial que enmascara la tecla real que está procesando un IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>Tecla Insertar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>Tecla J.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>Tecla de modo Junja de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>Tecla K.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>Tecla de modo Kana de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>Tecla de modo Kanji de IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>Tecla L.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>Tecla Iniciar aplicación1.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>Tecla Iniciar aplicación2.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>Tecla Iniciar correo.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>Tecla Flecha izquierda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>Tecla ALT izquierda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>Tecla CTRL izquierda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>Tecla Mayús izquierda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>Tecla Avance de línea.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>Tecla del logotipo de Windows izquierda (Microsoft Natural Keyboard).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>Tecla M.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>Tecla multimedia Pista siguiente.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>Tecla multimedia Pausa de reproducción.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>Tecla multimedia Pista anterior.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>Tecla multimedia Detener.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>Tecla Multiplicar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>Tecla N.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>Tecla Av Pág.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>Constante reservada para un uso futuro.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>Ninguna tecla presionada.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>Tecla Bloq Num.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>Tecla 0 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>Tecla 1 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>Tecla 2 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>Tecla 3 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>Tecla 4 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>Tecla 5 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>Tecla 6 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>Tecla 7 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>Tecla 8 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>Tecla 9 del teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>Tecla O.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>Tecla 1 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>Tecla 102 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>Tecla 2 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>Tecla 3 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>Tecla 4 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>Tecla 5 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>Tecla 6 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>Tecla 7 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>Tecla 8 de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>Tecla ATTN de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>Tecla AUTOMÁTICO de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>Tecla Barra diagonal inversa de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>Tecla TABATRÁS de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>Tecla Borrar de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>Tecla Corchete de cierre de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>Tecla Coma de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>Tecla COPIAR de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>Tecla ENLW de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>Tecla FINALIZAR de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>Tecla Menos de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>Tecla Corchete de apertura de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>Tecla Punto de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>Tecla Barra vertical de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>Tecla Adición de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>Tecla Pregunta de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>Tecla Comillas de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>Tecla Punto y coma de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>Tecla Tilde de OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>Tecla P.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>Tecla PA1.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>Tecla Av Pág.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>Tecla Re Pág.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>Tecla Pausa.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>Tecla PLAY.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>Tecla Imprimir.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>Tecla Impr Pant.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>Tecla Re Pág.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>Tecla Q.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>Tecla R.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>Tecla Return.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>Tecla Flecha derecha.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>Tecla ALT derecha.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>Tecla CTRL derecha.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>Tecla Mayús derecha.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>Tecla del logotipo de Windows derecha (Microsoft Natural Keyboard).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>Tecla S.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>Tecla Bloq Despl.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>Tecla Seleccionar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>Tecla Seleccionar medio.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>Tecla Separador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>Tecla de suspensión del equipo.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>Tecla Impr Pant.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>Tecla Barra espaciadora.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>Tecla Restar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>Tecla especial especial que enmascara la tecla real que se está procesando como una tecla del sistema.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>Tecla T.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>Tecla Tab.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>Tecla U.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>Tecla Flecha arriba.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>Tecla V.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>Tecla Bajar volumen.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>Tecla Silenciar volumen.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>Tecla Subir volumen.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>Tecla W.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>Tecla X.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>Tecla Y.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>Tecla Z.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>Tecla ZOOM.</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>Convierte un objeto <see cref="T:System.Windows.Input.Key" /> en otros tipos y viceversa.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Input.Key" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si un objeto del tipo especificado puede convertirse en una instancia de <see cref="T:System.Windows.Input.Key" /> usando el contexto indicado.</summary>
      <param name="context">Contexto de formato que proporciona información sobre el entorno desde el que se invoca este convertidor.</param>
      <param name="sourceType">Tipo cuya conversión se evalúa.</param>
      <returns>
        <see langword="true" /> si <paramref name="sourceType" /> es de tipo <see cref="T:System.String" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si una instancia de <see cref="T:System.Windows.Input.Key" /> puede convertirse en el tipo especificado usando el contexto indicado.</summary>
      <param name="context">Contexto de formato que proporciona información sobre el entorno desde el que se invoca este convertidor.</param>
      <param name="destinationType">Tipo cuya conversión se evalúa.</param>
      <returns>
        <see langword="true" /> si <paramref name="destinationType" /> es de tipo <see cref="T:System.String" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Intenta convertir el objeto especificado en una instancia de <see cref="T:System.Windows.Input.Key" /> usando el contexto indicado.</summary>
      <param name="context">Contexto de formato que proporciona información sobre el entorno desde el que se invoca este convertidor.</param>
      <param name="culture">Información específica de la referencia cultural.</param>
      <param name="source">Objeto que se va a convertir.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> no se puede convertir.</exception>
      <returns>El objeto convertido.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Intenta convertir una instancia de <see cref="T:System.Windows.Input.Key" /> en el tipo especificado usando el contexto indicado.</summary>
      <param name="context">Contexto de formato que proporciona información sobre el entorno desde el que se invoca este convertidor.</param>
      <param name="culture">Información específica de la referencia cultural.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> no se pueden convertir en <paramref name="destinationType" />.</exception>
      <returns>El objeto convertido.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>Proporciona métodos estáticos para realizar conversiones entre teclas virtuales de Win32 y la enumeración <see cref="T:System.Windows.Input.Key" /> de WPF.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>Convierte una tecla virtual de Win32 en la enumeración <see cref="T:System.Windows.Input.Key" /> de WPF.</summary>
      <param name="virtualKey">Tecla virtual que se va a convertir.</param>
      <returns>La tecla de WPF.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>Convierte una enumeración <see cref="T:System.Windows.Input.Key" /> de WPF en una tecla virtual de Win32.</summary>
      <param name="key">Valor WPF que se va a convertir.</param>
      <returns>La tecla virtual de Win32.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>Convierte instancias de <see cref="T:System.String" /> en y desde instancias de <see cref="T:System.Windows.Input.Key" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Input.KeyValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la <see cref="T:System.String" /> especificada puede convertirse en una instancia de <see cref="T:System.Windows.Input.Key" />.</summary>
      <param name="value">Cadena que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la instancia especificada de <see cref="T:System.Windows.Input.Key" /> puede convertirse en <see cref="T:System.String" />.</summary>
      <param name="value">Tecla que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> se puede convertir a <see cref="T:System.String" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte <see cref="T:System.String" /> a <see cref="T:System.Windows.Input.Key" />.</summary>
      <param name="value">Cadena que se va a convertir a <see cref="T:System.Windows.Input.Key" />.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Una nueva instancia de <see cref="T:System.Windows.Input.Key" /> según el parámetro <paramref name="value" /> proporcionado.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte una instancia de <see cref="T:System.Windows.Input.Key" /> en <see cref="T:System.String" />.</summary>
      <param name="value">Tecla que se va a convertir en una cadena.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Representación de cadena invariable de la instancia especificada de <see cref="T:System.Windows.Input.Key" />.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>Especifica el conjunto de teclas modificadoras.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>Tecla ALT.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>Tecla CTRL.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>No está presionada ninguna tecla modificadora.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>Tecla MAYÚS.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>La tecla con el logotipo de Windows.</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>Convierte un objeto <see cref="T:System.Windows.Input.ModifierKeys" /> en otros tipos y viceversa.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Input.ModifierKeysConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si un objeto del tipo especificado puede convertirse en una instancia de <see cref="T:System.Windows.Input.ModifierKeys" /> usando el contexto indicado.</summary>
      <param name="context">Contexto de formato que proporciona información sobre el entorno desde el que se invoca este convertidor.</param>
      <param name="sourceType">Tipo cuya conversión se evalúa.</param>
      <returns>
        <see langword="true" />, si <paramref name="sourceType" /> es de tipo <see cref="T:System.String" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si una instancia de <see cref="T:System.Windows.Input.ModifierKeys" /> puede convertirse en el tipo especificado usando el contexto indicado.</summary>
      <param name="context">Contexto de formato que proporciona información sobre el entorno desde el que se invoca este convertidor.</param>
      <param name="destinationType">Tipo cuya conversión se evalúa.</param>
      <returns>
        <see langword="true" />, si <paramref name="destinationType" /> es de tipo <see cref="T:System.String" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Intenta convertir el objeto especificado en una instancia de <see cref="T:System.Windows.Input.ModifierKeys" /> usando el contexto indicado.</summary>
      <param name="context">Contexto de formato que proporciona información sobre el entorno desde el que se invoca este convertidor.</param>
      <param name="culture">Información específica de la referencia cultural.</param>
      <param name="source">Objeto que se va a convertir.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> no se puede convertir.</exception>
      <returns>El objeto convertido.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Intenta convertir una instancia de <see cref="T:System.Windows.Input.ModifierKeys" /> en el tipo especificado usando el contexto indicado.</summary>
      <param name="context">Contexto de formato que proporciona información sobre el entorno desde el que se invoca este convertidor.</param>
      <param name="culture">Información específica de la referencia cultural.</param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> no se asigna a una instancia de  <see cref="T:System.Windows.Input.ModifierKeys" /> válida.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> no se puede convertir.</exception>
      <returns>El objeto convertido.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>Determina si el valor especificado es un valor de <see cref="T:System.Windows.Input.ModifierKeys" /> válido.</summary>
      <param name="modifierKeys">Valor cuya validez se va a comprobar.</param>
      <returns>Es <see langword="true" /> si la entrada es un valor de <see cref="T:System.Windows.Input.ModifierKeys" /> válido; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>Convierte instancias de <see cref="T:System.String" /> en y desde instancias de <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la <see cref="T:System.String" /> especificada puede convertirse en una instancia de <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <param name="value">Cadena que se va a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Siempre devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si la instancia especificada de <see cref="T:System.Windows.Input.ModifierKeys" /> puede convertirse en <see cref="T:System.String" />.</summary>
      <param name="value">Teclas modificadoras que se van a evaluar para la conversión.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> se puede convertir a <see cref="T:System.String" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte un tipo <see cref="T:System.String" /> en un valor de <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <param name="value">Cadena que se va a convertir a <see cref="T:System.Windows.Input.ModifierKeys" />.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Una nueva instancia de <see cref="T:System.Windows.Input.ModifierKeys" /> según el parámetro <paramref name="value" /> proporcionado.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte una instancia de <see cref="T:System.Windows.Input.ModifierKeys" /> en <see cref="T:System.String" />.</summary>
      <param name="value">Tecla que se va a convertir en una cadena.</param>
      <param name="context">Información contextual usada para la conversión.</param>
      <returns>Representación de cadena invariable del valor especificado de <see cref="T:System.Windows.Input.ModifierKeys" />.</returns>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>Representa una solicitud para mover el foco a otro control.</summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Input.TraversalRequest" />.</summary>
      <param name="focusNavigationDirection">Dirección del cambio secuencial del foco, como un valor de enumeración.</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>Obtiene la dirección del cambio secuencial.</summary>
      <returns>Uno de los valores de enumeración de la dirección del cambio secuencial.</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary>Obtiene o establece un valor que indica si el cambio secuencial del foco ha llegado al final de los elementos secundarios que pueden tener el foco.</summary>
      <returns>Es <see langword="true" /> si este cambio secuencial ha llegado al final de los elementos secundarios que pueden tener el foco; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>Describe el ancho, el alto y la ubicación de un rectángulo entero.</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Int32Rect" /> con las coordenadas <see cref="P:System.Windows.Int32Rect.X" /> e <see cref="P:System.Windows.Int32Rect.Y" /> especificadas y los valores de <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" /> especificados.</summary>
      <param name="x">Coordenada <see cref="P:System.Windows.Int32Rect.X" /> de la nueva instancia de <see cref="T:System.Windows.Int32Rect" /> que especifica la coordenada X de la esquina superior izquierda del rectángulo.</param>
      <param name="y">Coordenada <see cref="P:System.Windows.Int32Rect.Y" /> de la nueva instancia de <see cref="T:System.Windows.Int32Rect" /> que especifica la coordenada Y de la esquina superior izquierda del rectángulo.</param>
      <param name="width">
        <see cref="P:System.Windows.Int32Rect.Width" /> de la nueva instancia de <see cref="T:System.Windows.Int32Rect" /> que especifica el ancho del rectángulo.</param>
      <param name="height">
        <see cref="P:System.Windows.Int32Rect.Height" /> de la nueva instancia de <see cref="T:System.Windows.Int32Rect" /> que especifica el alto del rectángulo.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>Determina si el rectángulo especificado es igual que este rectángulo.</summary>
      <param name="o">Objeto que se va a comparar con el rectángulo actual.</param>
      <returns>
        <see langword="true" /> si <paramref name="o" /> es <see cref="T:System.Windows.Int32Rect" /> y tiene los mismos valores de <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" /> que este rectángulo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>Determina si el rectángulo especificado es igual que este rectángulo.</summary>
      <param name="value">Rectángulo que se va a comparar con el rectángulo actual.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> tiene los mismos valores de <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" /> que este rectángulo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Determina si los rectángulos especificados son iguales.</summary>
      <param name="int32Rect1">Primer rectángulo que se va a comparar.</param>
      <param name="int32Rect2">Segundo rectángulo que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="int32Rect1" /> y <paramref name="int32Rect2" /> tienen los mismos valores para <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>Crea un código hash a partir de los valores de las propiedades <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" /> de este rectángulo.</summary>
      <returns>Código hash de este rectángulo.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compara dos rectángulos para determinar si son exactamente iguales.</summary>
      <param name="int32Rect1">Primer rectángulo que se va a comparar.</param>
      <param name="int32Rect2">Segundo rectángulo que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="int32Rect1" /> y <paramref name="int32Rect2" /> tienen los mismos valores para <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compara dos rectángulos para determinar si no son iguales.</summary>
      <param name="int32Rect1">Primer rectángulo que se va a comparar.</param>
      <param name="int32Rect2">Segundo rectángulo que se va a comparar.</param>
      <returns>
        <see langword="false" /> si <paramref name="int32Rect1" /> y <paramref name="int32Rect2" /> tienen los mismos valores para <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" />; en caso contrario, si todos estos valores son iguales, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>Crea una estructura <see cref="T:System.Windows.Int32Rect" /> a partir de la representación de tipo <see cref="T:System.String" /> especificada.</summary>
      <param name="source">Representación de cadena de una estructura <see cref="T:System.Windows.Int32Rect" />.</param>
      <returns>Estructura <see cref="T:System.Windows.Int32Rect" /> equivalente.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Da formato al valor de la instancia actual usando el formato especificado.</summary>
      <param name="format">Formato que se usará.</param>
      <param name="provider">Proveedor que se va a usar para formatear el valor.</param>
      <returns>Valor de la instancia actual en el formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>Crea una representación de cadena de este objeto <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>Cadena que contiene los mismos valores de <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" /> que esta estructura <see cref="T:System.Windows.Int32Rect" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>Crea una representación de cadena de este objeto <see cref="T:System.Windows.Int32Rect" /> basándose en la interfaz <see cref="T:System.IFormatProvider" /> proporcionada.</summary>
      <param name="provider">Proveedor de formato que se va a usar. Si el valor del parámetro provider es <see langword="null" />, se utiliza la referencia cultural actual.</param>
      <returns>Representación de cadena de esta instancia de <see cref="T:System.Windows.Int32Rect" />.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>Obtiene el rectángulo vacío, un valor especial que representa un rectángulo sin posición ni área.</summary>
      <returns>Rectángulo vacío sin posición ni área.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary>Obtiene un valor que indica si las propiedades <see cref="P:System.Windows.Int32Rect.Width" /> y <see cref="P:System.Windows.Int32Rect.Height" /> de <see cref="T:System.Windows.Int32Rect" /> son mayores que 0.</summary>
      <returns>
        <see langword="true" /> Si las <see cref="P:System.Windows.Int32Rect.Width" /><see cref="P:System.Windows.Int32Rect.Height" /> propiedades y de <see cref="T:System.Windows.Int32Rect" /> son mayores que 0; en caso contrario, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>Obtiene o establece la altura del rectángulo.</summary>
      <returns>Alto del rectángulo. El valor predeterminado es <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>Obtiene un valor que indica si el rectángulo está vacío.</summary>
      <returns>
        <see langword="true" /> Si el rectángulo está vacío; en caso contrario, <see langword="false" /> . El valor predeterminado es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>Obtiene o establece el ancho del rectángulo.</summary>
      <returns>Ancho del rectángulo. El valor predeterminado es <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>Obtiene o establece la coordenada "x" de la esquina superior izquierda del rectángulo.</summary>
      <returns>Coordenada "x" de la esquina superior izquierda del rectángulo. El valor predeterminado es <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>Obtiene o establece la coordenada Y de la esquina superior izquierda del rectángulo.</summary>
      <returns>Coordenada Y de la esquina superior izquierda del rectángulo. El valor predeterminado es <c>0</c>.</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>Convierte instancias de otros tipos en <see cref="T:System.Windows.Int32Rect" /> y viceversa.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Int32RectConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si un objeto puede convertirse de un tipo especificado en una instancia de <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="context">Describe la información de contexto de un tipo.</param>
      <param name="sourceType">Tipo del origen que se va a evaluar para la conversión.</param>
      <returns>
        <see langword="true" /> si se puede convertir en <see cref="T:System.Windows.Int32Rect" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si una instancia de <see cref="T:System.Windows.Int32Rect" /> puede convertirse en un tipo diferente.</summary>
      <param name="context">Describe la información de contexto de un tipo.</param>
      <param name="destinationType">Tipo deseado de este <see cref="T:System.Windows.Int32Rect" /> que se está evaluando para la conversión.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Windows.Int32Rect" /> puede convertirse en <paramref name="destinationType" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Intenta convertir el tipo especificado en <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="context">Proporciona la información contextual necesaria para la conversión.</param>
      <param name="culture">Información de referencia cultural que se debe respetar durante la conversión.</param>
      <param name="value">Objeto que se convertirá.</param>
      <exception cref="T:System.NotSupportedException">Se inicia si el objeto especificado es NULL o es un tipo que no se puede convertir en <see cref="T:System.Windows.Int32Rect" />.</exception>
      <returns>Objeto <see cref="T:System.Windows.Int32Rect" /> creado a partir de la conversión de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Intenta convertir <see cref="T:System.Windows.Int32Rect" /> en un tipo especificado.</summary>
      <param name="context">Proporciona la información contextual necesaria para la conversión.</param>
      <param name="culture">Información de referencia cultural que se debe respetar durante la conversión.</param>
      <param name="value">Valor <see cref="T:System.Windows.Int32Rect" /> que se va a convertir.</param>
      <param name="destinationType">Tipo en el que convertir <see cref="T:System.Windows.Int32Rect" />.</param>
      <exception cref="T:System.NotSupportedException">Se inicia si <paramref name="value" /> es <see langword="null" /> o no es <see cref="T:System.Windows.Int32Rect" />, o si <paramref name="destinationType" /> no es uno de los tipos válidos para la conversión.</exception>
      <returns>Objeto que se crea a partir de la conversión de esta instancia de <see cref="T:System.Windows.Int32Rect" />.</returns>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>Habilita el control compartido del suministro de mensajes entre Win32 y WPF en escenarios de interoperación.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>Se produce cuando un subproceso se vuelve modal.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>Se produce cuando un subproceso modal se vuelve no modal.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>Se produce cuando el suministro de mensajes recibe un mensaje del teclado.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>Se produce cuando el subproceso está inactivo.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>Se produce cuando el suministro de mensajes recibe un mensaje del teclado.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>Se llama para indicar que un subproceso modal ya no es modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>Se llama para indicar que el subproceso es modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>Se llama para indicar que un subproceso está inactivo.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>Indica que hay un nuevo mensaje disponible para su posible control.</summary>
      <param name="msg">El mensaje y sus datos asociados.</param>
      <returns>
        <see langword="true" />, si uno de los módulos que escuchan el bucle de mensajes ha procesado el mensaje. El propietario del bucle de mensajes debe omitir el mensaje. <see langword="false" /> si no se procesó el mensaje. En este caso, el propietario del suministro de mensajes debe llamar a la función TranslateMessage de Win32 seguida de DispatchMessage.</returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>Obtiene el último mensaje que se ha producido.</summary>
      <returns>El último mensaje.</returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>Obtiene un valor que indica si el subproceso es modal.</summary>
      <returns>
        <see langword="true" /> si el subproceso es modal; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>Proporciona a los componentes un receptor del teclado que administra el desplazamiento mediante tabulación, los aceleradores y las teclas de acceso en los límites de interoperabilidad y entre los identificadores de ventana (HWND). Esta interfaz implementa la administración de los mensajes del teclado en escenarios de interoperación de WPF-Win32.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>Obtiene un valor que indica si el receptor o uno de los componentes que contiene tiene el foco.</summary>
      <returns>
        <see langword="true" /> si el receptor o uno de los componentes que contiene tiene el foco; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Se llama a este método cuando se invoca una de las teclas de acceso de este receptor.</summary>
      <param name="msg">Mensaje de las teclas de acceso y los datos asociados. No modifique esta estructura de mensaje. Se pasa por referencia debido únicamente a razones de rendimiento.</param>
      <param name="modifiers">Teclas modificadoras.</param>
      <returns>Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>Registra la interfaz <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> de un componente contenido.</summary>
      <param name="sink">Receptor <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> del componente contenido.</param>
      <returns>Sitio <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> del componente contenido.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>Establece el foco en la primera o última posición de tabulación del receptor.</summary>
      <param name="request">Especifica si el foco debería establecerse en la primera o última posición de tabulación.</param>
      <returns>
        <see langword="true" /> si el foco se ha establecido tal y como se solicitó; <see langword="false" />, si no hay ninguna posición de tabulación.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Procesa la entrada de teclado en el nivel de mensajes de pulsación de teclas.</summary>
      <param name="msg">El mensaje y los datos asociados. No modifique esta estructura. Se pasa por referencia debido únicamente a razones de rendimiento.</param>
      <param name="modifiers">Teclas modificadoras.</param>
      <returns>
        <see langword="true" /> si el mensaje está controlado por la implementación del método; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Procesa los mensajes de entrada WM_CHAR, WM_SYSCHAR, WM_DEADCHAR y WM_SYSDEADCHAR antes de llamar a <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />.</summary>
      <param name="msg">El mensaje y los datos asociados. No modifique esta estructura. Se pasa por referencia debido únicamente a razones de rendimiento.</param>
      <param name="modifiers">Teclas modificadoras.</param>
      <returns>
        <see langword="true" /> si el mensaje se ha procesado y no debe llamarse a <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>Obtiene o establece una referencia a la interfaz <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> del contenedor del componente.</summary>
      <returns>Una referencia a la interfaz <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> del contenedor.</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>Administra el foco del teclado en el contenedor.  Esta interfaz implementa la administración de los mensajes del teclado en escenarios de interoperación de WPF-Win32.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>Un componente contenido llama a este método cuando alcanza su última posición de tabulación y no tiene más elementos a los que desplazarse con el tabulador.</summary>
      <param name="request">Especifica si el foco debería establecerse en la primera o última posición de tabulación.</param>
      <returns>Si este método devuelve <see langword="true" />, el sitio ha desplazado el foco a otro componente. Si este método devuelve <see langword="false" />, el foco todavía se encuentra en el componente de llamada. El componente debería "plegarse sobre sí mismo" y establecer el foco en la primera posición de tabulación que contenga.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>Elimina del Registro un receptor de entrada de teclado secundario de este sitio.</summary>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>Obtiene el receptor del teclado asociado a este sitio.</summary>
      <returns>La interfaz <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> del sitio actual.</returns>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>Contiene información de mensaje de la cola de mensajes de un subproceso.</summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>Obtiene o establece el identificador de ventana (HWND) en la ventana cuyo procedimiento de ventana recibe el mensaje.</summary>
      <returns>El identificador de ventana (HWND).</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>Obtiene o establece el valor <paramref name="lParam" /> que especifica información adicional sobre el mensaje. El significado exacto depende del valor del miembro de <see cref="P:System.Windows.Interop.MSG.message" />.</summary>
      <returns>El valor de <paramref name="lParam" /> para el mensaje.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>Obtiene o establece el identificador de mensaje.</summary>
      <returns>El identificador de mensaje.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>Obtiene o establece la coordenada x de la posición del cursor en la pantalla, cuando se expuso el mensaje.</summary>
      <returns>La coordenada x de la posición del cursor.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>Obtiene o establece la coordenada y de la posición del cursor en la pantalla, cuando se expuso el mensaje.</summary>
      <returns>La coordenada y de la posición del cursor.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>Obtiene o establece la hora en la que se expuso el mensaje.</summary>
      <returns>La hora en la que se expuso el mensaje.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>Obtiene o establece el valor <paramref name="wParam" /> para el mensaje, que especifica información adicional sobre el mensaje. El significado exacto depende del valor del mensaje.</summary>
      <returns>El valor de <paramref name="wParam" /> para el mensaje.</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>Representa el método que controla los eventos <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> y <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" />.</summary>
      <param name="msg">Estructura con los datos del mensaje.</param>
      <param name="handled">Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</param>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>Proporciona compatibilidad con la escucha de eventos para las clases que esperan recibir eventos a través del modelo WeakEvent y <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Recibe los eventos del administrador de eventos centralizado.</summary>
      <param name="managerType">Tipo de la clase <see cref="T:System.Windows.WeakEventManager" /> que llama a este método.</param>
      <param name="sender">Objeto que originó el evento.</param>
      <param name="e">Datos de evento</param>
      <returns>Es <see langword="true" /> si el agente de escucha controló el evento. La clase <see cref="T:System.Windows.WeakEventManager" /> que controla en WPF considera como un error el registro de un agente de escucha para un evento que el agente de escucha no controla. De todos modos, el método debe devolver <see langword="false" /> si recibe un evento que no reconoce o no controla.</returns>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>Representa un identificador de propiedad y el valor de propiedad para una propiedad de dependencia establecida localmente.</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>Determina si dos instancias de <see cref="T:System.Windows.LocalValueEntry" /> son iguales.</summary>
      <param name="obj">Objeto <see cref="T:System.Windows.LocalValueEntry" /> que se va a comparar con el objeto <see cref="T:System.Windows.LocalValueEntry" /> actual.</param>
      <returns>Esta implementación <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> compara los valores de <see cref="P:System.Windows.LocalValueEntry.Property" /> y compara potencialmente los valores de <see cref="P:System.Windows.LocalValueEntry.Value" />. El componente <see cref="P:System.Windows.LocalValueEntry.Property" /> de <see cref="T:System.Windows.LocalValueEntry" /> es un tipo de valor, por lo que siempre será una comparación bit a bit. Para el componente <see cref="P:System.Windows.LocalValueEntry.Value" />, esta implementación emplea una comparación bit a bit si es un tipo de valor. Para las propiedades establecidas localmente que tienen tipos de referencia, el comportamiento se difiere a los mecanismos de determinación de igualdad de ese tipo, porque simplemente utiliza el operador == en los dos valores de manera interna. De forma predeterminada, ésta sería una igualdad de referencias de los valores, por lo que la igualdad de toda la <see cref="T:System.Windows.LocalValueEntry" /> se volvería una igualdad de referencias.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>Devuelve el código hash de este objeto <see cref="T:System.Windows.LocalValueEntry" />.</summary>
      <returns>Un valor entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compara las instancias de <see cref="T:System.Windows.LocalValueEntry" /> especificadas para determinar si son las mismas.</summary>
      <param name="obj1">Primera instancia que se va a comparar.</param>
      <param name="obj2">Segunda instancia que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEntry" /> es igual que <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEntry" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compara las instancias de <see cref="T:System.Windows.LocalValueEnumerator" /> especificadas para determinar si son distintas.</summary>
      <param name="obj1">Primera instancia que se va a comparar.</param>
      <param name="obj2">Segunda instancia que se va a comparar.</param>
      <returns>Esta implementación compara los valores de <see cref="P:System.Windows.LocalValueEntry.Property" /> y los componentes <see cref="P:System.Windows.LocalValueEntry.Value" /> de <see cref="T:System.Windows.LocalValueEntry" />. El componente <see cref="P:System.Windows.LocalValueEntry.Property" /> de <see cref="T:System.Windows.LocalValueEntry" /> es siempre un tipo de valor, por lo que esta comparación siempre será una comparación bit a bit. Para el componente <see cref="P:System.Windows.LocalValueEntry.Value" />, esta implementación emplea una comparación bit a bit si es un tipo de valor.  
  
Para las propiedades establecidas localmente que tienen tipos de referencia, el comportamiento se difiere a los mecanismos de determinación de igualdad de ese tipo, porque utiliza el operador <see langword="==" /> en los dos valores de manera interna. De forma predeterminada, ésta es una igualdad de referencias de los valores.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>Obtiene el identificador de la propiedad de dependencia establecida localmente que se representa con esta entrada.</summary>
      <returns>Identificador de la propiedad de dependencia establecida localmente.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>Obtiene el valor de la propiedad de dependencia establecida localmente.</summary>
      <returns>Valor de la propiedad de dependencia establecida localmente como un objeto.</returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>Proporciona compatibilidad con la enumeración para los valores locales de las propiedades de dependencia que existen en un <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Windows.LocalValueEnumerator" /> proporcionado es equivalente a este objeto <see cref="T:System.Windows.LocalValueEnumerator" />.</summary>
      <param name="obj">Objeto <see cref="T:System.Windows.LocalValueEnumerator" /> que se va a comparar con el objeto <see cref="T:System.Windows.LocalValueEnumerator" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.Windows.LocalValueEnumerator" /> especificado es igual al objeto <see cref="T:System.Windows.LocalValueEnumerator" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>Devuelve un código hash para el <see cref="T:System.Windows.LocalValueEnumerator" /> actual.</summary>
      <returns>Código hash entero de 32 bits.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección.</summary>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compara si los dos objetos <see cref="T:System.Windows.LocalValueEnumerator" /> especificados son iguales.</summary>
      <param name="obj1">Primer objeto que se va a comparar.</param>
      <param name="obj2">Segundo objeto que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> es igual que <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compara los dos objetos <see cref="T:System.Windows.LocalValueEnumerator" /> especificados para determinar si no son iguales.</summary>
      <param name="obj1">Primer objeto que se va a comparar.</param>
      <param name="obj2">Segundo objeto que se va a comparar.</param>
      <returns>
        <see langword="true" /> si las instancias no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>Obtiene el número de elementos representados en la colección.</summary>
      <returns>Número de elementos de la colección.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>Obtiene el elemento actual de la colección.</summary>
      <returns>
        <see cref="T:System.Windows.LocalValueEntry" /> actual de la colección.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>Para obtener una descripción de este miembro, vea <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>Elemento actual de la colección.</returns>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>Especifica cómo se va a serializar una propiedad.</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>La propiedad debe serializarse como un atributo.</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>Especifica los marcadores de serialización de una propiedad.</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" />.</summary>
      <param name="designerSerializationOptions">Especifica cómo se va a serializar la propiedad.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="designerSerializationOptions" /> no es un valor <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> válido.</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>Obtiene las opciones <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> que se han establecido en el atributo.</summary>
      <returns>Opción de serialización, como un valor de la enumeración.</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>Es una clase abstracta que el compilador XAML de WPF usa internamente para admitir el uso de tipos internos.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Markup.InternalTypeHelper" />.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>Cuando se reemplaza en una clase (generada) derivada, adjunta un delegado del controlador de eventos a un evento interno.</summary>
      <param name="eventInfo">Información del evento (información de reflexión de CLR).</param>
      <param name="target">Destino al que se adjunta el controlador.</param>
      <param name="handler">Controlador de eventos.</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>Cuando se reemplaza en una clase (generada) derivada, crea un delegado de eventos que hace referencia a un método de control no público.</summary>
      <param name="delegateType">
        <see cref="T:System.Type" /> del delegado.</param>
      <param name="target">Destino al que se adjunta el controlador.</param>
      <param name="handler">Nombre de la implementación de controlador.</param>
      <returns>Referencia al delegado.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>Cuando se reemplaza en una clase (generada) derivada, crea una instancia de un tipo interno.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que se va a crear.</param>
      <param name="culture">Información específica de la referencia cultural.</param>
      <returns>Instancia creada.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>Cuando se reemplaza en una clase (generada) derivada, obtiene el valor de una propiedad interna del objeto de destino.</summary>
      <param name="propertyInfo">Información de la propiedad que se va a obtener.</param>
      <param name="target">Objeto que contiene el valor de propiedad deseado.</param>
      <param name="culture">Información específica de la referencia cultural.</param>
      <returns>Valor de la propiedad.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>Cuando se reemplaza en una clase (generada) derivada, establece el valor de una propiedad interna del objeto de destino.</summary>
      <param name="propertyInfo">Información de la propiedad que se va a establecer.</param>
      <param name="target">Objeto que contiene el valor de propiedad deseado.</param>
      <param name="value">Valor que se va a establecer.</param>
      <param name="culture">Información específica de la referencia cultural.</param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>Proporciona un mecanismo mediante el cual los tipos pueden declarar que pueden recibir una expresión (u otra clase) de una extensión de marcado, donde el resultado es un tipo de propiedad diferente que la propiedad de destino. No lo use para implementaciones de .NET Framework 4.</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>Proporciona el control para las extensiones de marcado que proporcionan valores de propiedad. No lo use para las implementaciones de .NET Framework 4; vea <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />.</summary>
      <param name="property">Nombre de la propiedad de destino.</param>
      <param name="markupExtension">Instancia de la extensión de marcado de los datos entrantes.</param>
      <param name="serviceProvider">Puede proporcionar los servicios adicionales que deben realizarse al procesar los datos de extensión de marcado para un valor de propiedad.</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>Clase abstracta que representa un objeto que se puede utilizar para navegar en un árbol de objetos.</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>Cuando se invalida en una clase derivada, asigna un contexto raíz para las clases <see cref="T:System.Windows.Markup.ValueSerializer" />.</summary>
      <param name="context">
        <see cref="T:System.Windows.Markup.IValueSerializerContext" /> para el que se asigna un contexto raíz.</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>Cuando se invalida en una clase derivada, obtiene los atributos asociados a esta <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>Colección de atributos.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>Cuando se invalida en una clase derivada, obtiene la instancia del objeto representado por este <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>Instancia del objeto.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>Cuando se invalida en una clase derivada, obtiene el tipo de la instancia de <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>Tipo del objeto.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>Cuando se invalida en una clase derivada, obtiene las propiedades de esta instancia de <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> que se debe escribir en XAML.</summary>
      <returns>Propiedades.</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>Clase abstracta que proporciona una descripción de propiedad que se utiliza para escribir en el marcado que encapsula el acceso a las propiedades y sus valores.</summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>Cuando se invalida en una clase derivada, obtiene los atributos asociados a esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>Colección de atributos.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el identificador de <see cref="T:System.Windows.DependencyProperty" /> para la propiedad de marcado si la propiedad se implementa como propiedad de dependencia.</summary>
      <returns>Identificador de la propiedad de dependencia.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> es una <see cref="T:System.Windows.DependencyProperty" /> adjunta.</summary>
      <returns>
        <see langword="true" /> si la propiedad es una <see cref="T:System.Windows.DependencyProperty" /> adjunta; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> es una propiedad compuesta.</summary>
      <returns>
        <see langword="true" /> si esta propiedad es una propiedad compuesta; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa un argumento de constructor.</summary>
      <returns>Es <see langword="true" /> si esta propiedad representa un argumento de constructor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa el contenido directo de una colección.</summary>
      <returns>
        <see langword="true" /> si la propiedad representa el contenido directo; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa la clave utilizada por <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> para almacenar el elemento en un diccionario.</summary>
      <returns>
        <see langword="true" /> si esta propiedad representa una clave; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa el texto que se pasa a un convertidor de tipos para crear una instancia de la propiedad o si se debe utilizar un constructor.</summary>
      <returns>
        <see langword="true" />, si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa una cadena; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>Cuando se invalida en una clase derivada, obtiene el elemento que constituye el valor de esta propiedad.</summary>
      <returns>Los elementos que forman el valor de esta propiedad.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>Cuando se invalida en una clase derivada, obtiene un nombre que se utiliza para diagnósticos e informes de errores.</summary>
      <returns>Nombre de la propiedad del identificador.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>Cuando se invalida en una clase derivada, obtiene <see cref="T:System.ComponentModel.PropertyDescriptor" /> para la propiedad de marcado.</summary>
      <returns>El descriptor de la propiedad.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el tipo CLR de la propiedad.</summary>
      <returns>Tipo CLR.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>Cuando se invalida en una clase derivada, obtiene el valor de cadena de esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>El valor de cadena.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el conjunto de tipos a los que esta propiedad <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> hará referencia cuando serialice su valor como una cadena.</summary>
      <returns>Conjunto de tipos.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>Cuando se reemplaza en una clase derivada, obtiene el valor actual de <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>El valor actual.</returns>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>Proporciona a una implementación de la interfaz <see cref="T:System.IServiceProvider" /> con los métodos que habilitan los servicios de la adición.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Markup.ServiceProviders" />.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>Agrega un servicio a la lista.</summary>
      <param name="serviceType">Tipo de servicio del nuevo servicio.</param>
      <param name="service">Clase de implementación del servicio.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> o <paramref name="service" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Se intenta agregar un servicio que ya existe en el diccionario.</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>Obtiene el objeto de servicio del tipo especificado.</summary>
      <param name="serviceType">Objeto del tipo de servicio que se va a obtener.</param>
      <returns>Implementación del servicio para el tipo <paramref name="serviceType" />. Puede ser <see langword="null" /> si no hay ningún servicio almacenado para el tipo <paramref name="serviceType" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>Convierte instancias de <see cref="T:System.String" /> en y desde instancias de <see cref="T:System.Windows.Media.Matrix" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si es posible convertir un valor de tipo <see cref="T:System.String" /> dado en una instancia de <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="value">Cadena que se va a evaluar para la conversión.</param>
      <param name="context">Información de contexto utilizada para la conversión.</param>
      <returns>
        <see langword="true" /> si el valor se puede convertir; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina si una instancia de <see cref="T:System.Windows.Media.Matrix" /> puede convertirse en un valor de tipo <see cref="T:System.String" />.</summary>
      <param name="value">Instancia de <see cref="T:System.Windows.Media.Matrix" /> que se va a evaluar para la conversión.</param>
      <param name="context">Información de contexto utilizada para la conversión.</param>
      <exception cref="T:System.ArgumentException">Se produce cuando <paramref name="value" /> no es un objeto <see cref="T:System.Windows.Media.Int32Collection" />.</exception>
      <returns>Es <see langword="true" /> si <paramref name="value" /> se puede convertir a <see cref="T:System.String" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte <see cref="T:System.String" /> a <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="value">Valor de tipo <see cref="T:System.String" /> que se va a convertir en un objeto <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="context">Información de contexto utilizada para la conversión.</param>
      <returns>Una nueva instancia de <see cref="T:System.Windows.Media.Matrix" /> según el parámetro <paramref name="value" /> proporcionado.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Convierte una instancia de <see cref="T:System.Windows.Media.Matrix" /> en <see cref="T:System.String" />.</summary>
      <param name="value">Instancia de <see cref="T:System.Windows.Media.Matrix" /> que se va a evaluar para la conversión.</param>
      <param name="context">Información de contexto utilizada para la conversión.</param>
      <returns>Representación de tipo <see cref="T:System.String" /> del objeto <see cref="T:System.Windows.Media.Matrix" /> proporcionado.</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>Permite que las aplicaciones de WPF deshabiliten la distinción de puntos por pulgada (ppp) de todos los elementos de la interfaz de usuario.</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" />.</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary>Representa una matriz de transformación afín de 3 x 3 usada para las transformaciones en un espacio bidimensional.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="m11">El coeficiente <see cref="P:System.Windows.Media.Matrix.M11" /> de la nueva <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="m12">El coeficiente <see cref="P:System.Windows.Media.Matrix.M12" /> de la nueva <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="m21">El coeficiente <see cref="P:System.Windows.Media.Matrix.M21" /> de la nueva <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="m22">El coeficiente <see cref="P:System.Windows.Media.Matrix.M22" /> de la nueva <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="offsetX">El coeficiente <see cref="P:System.Windows.Media.Matrix.OffsetX" /> de la nueva <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="offsetY">El coeficiente <see cref="P:System.Windows.Media.Matrix.OffsetY" /> de la nueva <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary>Anexa la estructura <see cref="T:System.Windows.Media.Matrix" /> especificada a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="matrix">La estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a anexar a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>Determina si el <see cref="T:System.Object" /> especificado es una estructura <see cref="T:System.Windows.Media.Matrix" /> idéntica a esta <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="o">
        <see cref="T:System.Object" /> que se va comparar.</param>
      <returns>Es <see langword="true" /> si el parámetro <paramref name="o" /> es una estructura <see cref="T:System.Windows.Media.Matrix" /> idéntica a esta estructura <see cref="T:System.Windows.Media.Matrix" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>Determina si la estructura <see cref="T:System.Windows.Media.Matrix" /> especificada es idéntica a esta instancia.</summary>
      <param name="value">Instancia de <see cref="T:System.Windows.Media.Matrix" /> que se va a comparar con esta instancia.</param>
      <returns>Es <see langword="true" /> si las instancias son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determina si las dos estructuras <see cref="T:System.Windows.Media.Matrix" /> especificadas son idénticas.</summary>
      <param name="matrix1">Primera estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a comparar.</param>
      <param name="matrix2">Segunda estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="matrix1" /> y <paramref name="matrix2" /> son idénticos; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>Devuelve el código hash de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Código hash de esta instancia.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary>Invierte esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <exception cref="T:System.InvalidOperationException">La estructura <see cref="T:System.Windows.Media.Matrix" /> no se puede invertir.</exception>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Multiplica una estructura <see cref="T:System.Windows.Media.Matrix" /> por otra estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="trans1">Primera estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a multiplicar.</param>
      <param name="trans2">Segunda estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a multiplicar.</param>
      <returns>Resultado de multiplicar <paramref name="trans1" /> por <paramref name="trans2" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determina si las dos estructuras <see cref="T:System.Windows.Media.Matrix" /> especificadas son idénticas.</summary>
      <param name="matrix1">Primera estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a comparar.</param>
      <param name="matrix2">Segunda estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="matrix1" /> y <paramref name="matrix2" /> son idénticos; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determina si las dos estructuras <see cref="T:System.Windows.Media.Matrix" /> especificadas no son idénticas.</summary>
      <param name="matrix1">Primera estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a comparar.</param>
      <param name="matrix2">Segunda estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="matrix1" /> y <paramref name="matrix2" /> no son idénticas; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Multiplica una estructura <see cref="T:System.Windows.Media.Matrix" /> por otra estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="trans1">Primera estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a multiplicar.</param>
      <param name="trans2">Segunda estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a multiplicar.</param>
      <returns>Resultado de multiplicar <paramref name="trans1" /> por <paramref name="trans2" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary>Convierte una representación de <see cref="T:System.String" /> de una matriz en la estructura <see cref="T:System.Windows.Media.Matrix" /> equivalente.</summary>
      <param name="source">La representación de <see cref="T:System.String" /> de la matriz.</param>
      <returns>Estructura <see cref="T:System.Windows.Media.Matrix" /> equivalente.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary>Antepone la estructura <see cref="T:System.Windows.Media.Matrix" /> especificada a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="matrix">La estructura <see cref="T:System.Windows.Media.Matrix" /> que se va a anteponer a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary>Aplica un giro del ángulo especificado en torno al origen de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="angle">Ángulo de rotación.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>Gira esta matriz sobre el punto especificado.</summary>
      <param name="angle">El ángulo, en grados, con el que se va a girar esta matriz.</param>
      <param name="centerX">La coordenada X del punto sobre el que se va a girar esta matriz.</param>
      <param name="centerY">La coordenada Y del punto sobre el que se va a girar esta matriz.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>Antepone un giro del ángulo especificado en el punto especificado a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="angle">Ángulo de giro, en grados.</param>
      <param name="centerX">Coordenada x del centro de giro.</param>
      <param name="centerY">Coordenada y del centro de giro.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary>Antepone un giro del ángulo especificado a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="angle">El ángulo de giro que se va a anteponer.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary>Anexa el vector de escala especificado a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">Valor por el que se va a ajustar a escala esta <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje X.</param>
      <param name="scaleY">Valor por el que se va a ajustar a escala esta <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje Y.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>Ajusta a escala esta <see cref="T:System.Windows.Media.Matrix" /> por la cantidad especificada sobre el punto especificado.</summary>
      <param name="scaleX">Cantidad por la que se va a ajustar a escala esta <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje X.</param>
      <param name="scaleY">Cantidad por la que se va a ajustar a escala esta <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje Y.</param>
      <param name="centerX">La coordenada x del punto central de la operación de ajuste de escala.</param>
      <param name="centerY">La coordenada y del punto central de la operación de ajuste de escala.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>Antepone el ajuste de escala especificado sobre el punto especificado de la <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">Factor de escala del eje X.</param>
      <param name="scaleY">Factor de escala del eje Y.</param>
      <param name="centerX">La coordenada x del punto sobre el que se realiza la operación de ajuste de escala.</param>
      <param name="centerY">La coordenada y del punto sobre el que se realiza la operación de ajuste de escala.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary>Antepone el vector de escala especificado a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">Valor por el que se va a ajustar a escala esta estructura <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje X.</param>
      <param name="scaleY">Valor por el que se va a ajustar a escala esta estructura <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje Y.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary>Cambia esta estructura <see cref="T:System.Windows.Media.Matrix" /> a una matriz de identidad.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary>Anexa un sesgado de los grados especificados en las dimensiones X e Y a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="skewX">El ángulo de la dimensión X por el que sesgar esta <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">El ángulo de la dimensión Y por el que sesgar esta <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary>Antepone un sesgado de los grados especificados en las dimensiones X e Y a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="skewX">El ángulo de la dimensión X por el que sesgar esta <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">El ángulo de la dimensión Y por el que sesgar esta <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Da formato al valor de la instancia actual usando el formato especificado.</summary>
      <param name="format">Formato que se usará.  
  
o bien 
Referencia nula (<see langword="Nothing" /> en Visual Basic) para usar el formato predeterminado definido para el tipo de la implementación <see cref="T:System.IFormattable" />.</param>
      <param name="provider">Proveedor que se usa para dar formato al valor.  
  
o bien 
Referencia nula (<see langword="Nothing" /> en Visual Basic) para obtener la información de formato numérico de la configuración regional actual del sistema operativo.</param>
      <returns>Valor de la instancia actual en el formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>Crea una representación de tipo <see cref="T:System.String" /> de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene los valores  <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" /> y <see cref="P:System.Windows.Media.Matrix.OffsetY" /> de esta <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>Crea una representación de tipo <see cref="T:System.String" /> de esta estructura <see cref="T:System.Windows.Media.Matrix" /> con información de formato específica de la referencia cultural.</summary>
      <param name="provider">Información de formato específica de la referencia cultural.</param>
      <returns>
        <see cref="T:System.String" /> que contiene los valores  <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" /> y <see cref="P:System.Windows.Media.Matrix.OffsetY" /> de esta <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>Transforma el punto especificado por <see cref="T:System.Windows.Media.Matrix" /> y devuelve el resultado.</summary>
      <param name="point">El punto que se va a transformar.</param>
      <returns>Resultado de transformar <paramref name="point" /> por esta <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>Transforma los puntos especificados por esta <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="points">Puntos que se van a transformar. Los valores transformados reemplazan los puntos originales de la matriz.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>Transforma el vector especificado por esta <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vector">Vector que se va a transformar.</param>
      <returns>Resultado de transformar <paramref name="vector" /> por esta <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>Transforma los vectores especificados por esta <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vectors">Vectores que se van a transformar. Los valores transformados reemplazan los vectores originales de la matriz.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary>Anexa una traslación de los desplazamientos especificados a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="offsetX">La cantidad que se va a desplazar esta <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje X.</param>
      <param name="offsetY">La cantidad que se va a desplazar esta <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje Y.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary>Antepone una traslación de los desplazamientos especificados a esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="offsetX">La cantidad que se va a desplazar esta <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje X.</param>
      <param name="offsetY">La cantidad que se va a desplazar esta <see cref="T:System.Windows.Media.Matrix" /> a lo largo del eje Y.</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary>Obtiene el determinante de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Determinante de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary>Obtiene un valor que indica si esta estructura <see cref="T:System.Windows.Media.Matrix" /> se puede invertir.</summary>
      <returns>Es <see langword="true" /> si la estructura <see cref="T:System.Windows.Media.Matrix" /> tiene un inverso; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>Obtiene una <see cref="T:System.Windows.Media.Matrix" /> de identidad.</summary>
      <returns>Matriz de identidad.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>Obtiene un valor que indica si esta <see cref="T:System.Windows.Media.Matrix" /> estructuran es una matriz de identidad.</summary>
      <returns>Es <see langword="true" /> si la estructura <see cref="T:System.Windows.Media.Matrix" /> es una matriz de identidad; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>Obtiene o establece el valor de la primera fila y la primera columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Valor de la primera fila y columna de esta <see cref="T:System.Windows.Media.Matrix" />. El valor predeterminado es 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary>Obtiene o establece el valor de la primera fila y la segunda columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Valor de la primera fila y segunda columna de esta <see cref="T:System.Windows.Media.Matrix" />. El valor predeterminado es 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>Obtiene o establece el valor de la segunda fila y la primera columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Valor de la segunda fila y primera columna de esta <see cref="T:System.Windows.Media.Matrix" />. El valor predeterminado es 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>Obtiene o establece el valor de la segunda fila y la segunda columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Valor de la segunda fila y la segunda columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />. El valor predeterminado es 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>Obtiene o establece el valor de la tercera fila y la primera columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Valor de la tercera fila y de la primera columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />. El valor predeterminado es 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>Obtiene o establece el valor de la tercera fila y la segunda columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Valor de la tercera fila y de la segunda columna de esta estructura <see cref="T:System.Windows.Media.Matrix" />. El valor predeterminado es 0.</returns>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>Convierte instancias de otros tipos en una colección <see cref="T:System.Windows.Media.Matrix" /> y viceversa.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.MatrixConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si un objeto puede convertirse de un tipo determinado en una instancia de <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="context">Información de contexto de un tipo.</param>
      <param name="sourceType">Tipo del origen que se va a evaluar para la conversión.</param>
      <returns>Es <see langword="true" /> si se puede convertir en <see cref="T:System.Windows.Media.Matrix" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si una instancia de <see cref="T:System.Windows.Media.Matrix" /> puede convertirse en un tipo diferente.</summary>
      <param name="context">Información de contexto de un tipo.</param>
      <param name="destinationType">Tipo deseado de este <see cref="T:System.Windows.Media.Matrix" /> que se está evaluando para la conversión.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Windows.Media.Matrix" /> puede convertirse en <paramref name="destinationType" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Intenta convertir el objeto especificado en <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="context">Información de contexto de un tipo.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> del tipo que se está convirtiendo.</param>
      <param name="value">Objeto que se convertirá.</param>
      <exception cref="T:System.NotSupportedException">El objeto especificado es nulo o es un tipo que no se puede convertir en <see cref="T:System.Windows.Media.Matrix" />.</exception>
      <returns>Objeto <see cref="T:System.Windows.Media.Matrix" /> creado a partir de la conversión de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Intenta convertir <see cref="T:System.Windows.Media.Matrix" /> en un tipo especificado.</summary>
      <param name="context">Información de contexto de un tipo.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> del tipo que se está convirtiendo.</param>
      <param name="value">Valor <see cref="T:System.Windows.Media.Matrix" /> que se va a convertir.</param>
      <param name="destinationType">Tipo en el que convertir <see cref="T:System.Windows.Media.Matrix" />.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> es nulo o no es una estructura <see cref="T:System.Windows.Media.Matrix" />, o bien, <paramref name="destinationType" /> no es un tipo de conversión válido.</exception>
      <returns>Objeto que se crea a partir de la conversión de esta instancia de <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormattingMode">
      <summary>Define los métodos de formato admitidos por la clase <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Display">
      <summary>Indica que el objeto<see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> define la disposición del texto usando métricas de fuente compatibles con GDI.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Ideal">
      <summary>Indica que el objeto<see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> define la disposición del texto usando métricas de fuente ideales.</summary>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>Implementa compatibilidad base con WPF para los métodos <see cref="T:System.Windows.Markup.INameScope" /> que almacenan o recuperan asignaciones de nombre y objeto en un ámbito de nombres XAML determinado. Agrega compatibilidad con propiedades asociadas para que sea más fácil obtener o establecer nombres de ámbito de nombres XAML dinámicamente en el nivel del elemento.</summary>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>Identifica la propiedad adjunta <see cref="P:System.Windows.NameScope.NameScope" />.</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.NameScope" />.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Agrega un elemento a la colección.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (la clave es <see cref="T:System.String" />, el valor es <see cref="T:System.Object" />) que representa la asignación de nombres que se va a agregar al ámbito de nombres XAML.</param>
      <exception cref="T:System.ArgumentException">Uno o ambos componentes de <paramref name="item" /> son <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>Agrega un elemento a la colección.</summary>
      <param name="key">Clave de cadena, que es el nombre de la asignación del ámbito de nombres XAML que se va a agregar.</param>
      <param name="value">Valor de objeto, que es la referencia al objeto de la asignación del ámbito de nombres XAML que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>Quita todos los elementos de la colección.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determina si la colección contiene el elemento especificado.</summary>
      <param name="item">Elemento que se va a buscar en la colección, especificado como <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (la clave es <see cref="T:System.String" />, el valor es <see cref="T:System.Object" />).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns>Es <see langword="true" /> si el objeto <see cref="T:System.Collections.Generic.KeyValuePair`2" /> especificado identifica una asignación existente en <see cref="T:System.Windows.NameScope" />. Es <see langword="false" /> si el parámetro <see cref="T:System.Collections.Generic.KeyValuePair`2" /> especificado no existe en la clase <see cref="T:System.Windows.NameScope" />.</returns>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>Devuelve un valor que indica si el nombre proporcionado ya existe en esta clase <see cref="T:System.Windows.NameScope" />.</summary>
      <param name="key">Clave de cadena que se va a buscar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <returns>Es <see langword="true" /> si el parámetro <paramref name="key" /> especificado identifica un nombre para una asignación existente en <see cref="T:System.Windows.NameScope" />. Es <see langword="false" /> si el parámetro <paramref name="key" /> especificado no existe en la clase <see cref="T:System.Windows.NameScope" />.</returns>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copia los elementos de la colección en una matriz a partir de un índice de matriz concreto.</summary>
      <param name="array">Matriz unidimensional que es el destino de los elementos copiados de la colección. La indización de la matriz debe ser de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>Devuelve el objeto correspondiente del ámbito de nombres XAML que mantiene este elemento <see cref="T:System.Windows.NameScope" />, según una cadena de nombre proporcionada.</summary>
      <param name="name">Parte del nombre de una asignación existente para recuperar la parte correspondiente al objeto.</param>
      <returns>Objeto solicitado que está asociado con <paramref name="name" />. Puede devolver <see langword="null" /> si <paramref name="name" /> se proporcionó como <see langword="null" /> o una cadena vacía, o si no se encontraron objetos coincidentes.</returns>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>Proporciona el descriptor de acceso get de la propiedad adjunta para la propiedad adjunta <see cref="P:System.Windows.NameScope.NameScope" />.</summary>
      <param name="dependencyObject">Objeto del que se va a obtener el ámbito de nombres XAML.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> es <see langword="null" />.</exception>
      <returns>Ámbito de nombres XAML, como una instancia <see cref="T:System.Windows.Markup.INameScope" />.</returns>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>Registra un nuevo par de nombre y objeto en el ámbito de nombres XAML actual.</summary>
      <param name="name">Nombre que se usará para asignar el objeto especificado.</param>
      <param name="scopedElement">Objeto que se va a asignar al nombre proporcionado.</param>
      <exception cref="T:System.ArgumentNullException">Se proporcionó <paramref name="name" /> o <paramref name="scopedElement" /> como <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Se proporcionó <paramref name="name" /> como cadena vacía. 
o bien 
 El analizador rechazó el <paramref name="name" /> proporcionado porque contenía caracteres que no son válidos para un nombre XAML 
o bien 
 El <paramref name="name" /> proporcionado daría lugar a un registro de nombre duplicado.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Quita el objeto especificado de la colección.</summary>
      <param name="item">Objeto que se va a quitar de la colección, especificado como una estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (la clave es <see cref="T:System.String" />, el valor es <see cref="T:System.Object" />).</param>
      <returns>Es <see langword="true" /> si el elemento se eliminó correctamente de la colección; de lo contrario, es <see langword="false" />. También devuelve <see langword="false" /> si no se encontró el elemento en la colección.</returns>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>Quita de la colección una asignación del nombre especificado.</summary>
      <param name="key">Clave de cadena, que es el nombre de la asignación del ámbito de nombres XAML que se va a quitar.</param>
      <returns>Es <see langword="true" /> si el elemento se eliminó correctamente de la colección; de lo contrario, es <see langword="false" />. También devuelve <see langword="false" /> si no se encontró el elemento en la colección.</returns>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>Proporciona el descriptor de acceso set de la propiedad adjunta para la propiedad adjunta <see cref="P:System.Windows.NameScope.NameScope" />.</summary>
      <param name="dependencyObject">Objeto del que se va a cambiar el ámbito de nombres XAML.</param>
      <param name="value">Nuevo ámbito de nombres XAML, que usa una conversión de interfaz.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Un enumerador que se itera por toda una colección.</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Un enumerador que se itera por toda una colección.</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key">Clave del valor que se va a obtener.</param>
      <param name="value">Cuando este método termina de ejecutarse, contiene el valor asociado a la clave especificada si se encuentra la clave; de lo contrario, devuelve un objeto null. Este parámetro se pasa sin inicializar.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Windows.NameScope" /> contiene una asignación para el nombre proporcionado como <paramref name="key" />. En caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>Quita una asignación del objeto de nombre del ámbito de nombres XAML.</summary>
      <param name="name">El nombre de la asignación que se debe quitar.</param>
      <exception cref="T:System.ArgumentException">Se proporcionó <paramref name="name" /> como cadena vacía.  
  
o bien 
 <paramref name="name" /> proporcionado no se registró.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>Devuelve el número de elementos de la colección de nombres asignados de esta clase <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>Número de elementos de la colección.</returns>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>Siempre devuelve <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key">Nombre de cadena de la asignación de nombres XAML que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> se proporciona como <see langword="null" />.  
  
o bien 
 <paramref name="value" /> se proporciona como <see langword="null" /> para una operación de establecimiento.</exception>
      <returns>Valor del objeto asignado por el nombre XAML que se ha proporcionado como <paramref name="key" />.</returns>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>Obtiene una colección de las claves del diccionario de <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>Colección de las claves del diccionario de <see cref="T:System.Windows.NameScope" />.</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>Obtiene o establece instancias de <see cref="T:System.Windows.NameScope" /> dinámicamente asociadas.</summary>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>Obtiene una colección de los valores del diccionario de <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>Colección de los valores del diccionario de <see cref="T:System.Windows.NameScope" />.</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>Representa un par de coordenadas x e y en un espacio bidimensional.</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>Crea una nueva estructura <see cref="T:System.Windows.Point" /> que contiene las coordenadas especificadas.</summary>
      <param name="x">Coordenada X de la nueva estructura <see cref="T:System.Windows.Point" />.</param>
      <param name="y">Coordenada Y de la nueva estructura <see cref="T:System.Windows.Point" />.</param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>Suma una estructura <see cref="T:System.Windows.Vector" /> a una estructura <see cref="T:System.Windows.Point" /> y devuelve el resultado como una estructura <see cref="T:System.Windows.Point" />.</summary>
      <param name="point">Estructura <see cref="T:System.Windows.Point" /> que se va a sumar.</param>
      <param name="vector">Estructura <see cref="T:System.Windows.Vector" /> que se va a sumar.</param>
      <returns>Devuelve la suma de <paramref name="point" /> y <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>Determina si el <see cref="T:System.Object" /> especificado es una estructura <see cref="T:System.Windows.Point" /> y si contiene las mismas coordenadas que esta estructura <see cref="T:System.Windows.Point" />.</summary>
      <param name="o">
        <see cref="T:System.Object" /> que se va comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="o" /> es una estructura <see cref="T:System.Windows.Point" /> y contiene los mismos valores de <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> que esta estructura <see cref="T:System.Windows.Point" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>Compara dos estructuras <see cref="T:System.Windows.Point" /> para determinar si son iguales.</summary>
      <param name="value">Punto que se va a comparar con esta instancia.</param>
      <returns>Es <see langword="true" /> si ambas estructuras <see cref="T:System.Windows.Point" /> contienen los mismos valores de <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>Compara dos estructuras <see cref="T:System.Windows.Point" /> para determinar si son iguales.</summary>
      <param name="point1">Primer punto que se va a comparar.</param>
      <param name="point2">Segundo punto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="point1" /> y <paramref name="point2" /> contienen los mismos valores de <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>Devuelve el código hash de este objeto <see cref="T:System.Windows.Point" />.</summary>
      <returns>Código hash para esta estructura <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforma la estructura <see cref="T:System.Windows.Point" /> especificada por la estructura <see cref="T:System.Windows.Media.Matrix" /> especificada.</summary>
      <param name="point">El punto que se va a transformar.</param>
      <param name="matrix">Matriz de transformación.</param>
      <returns>Punto transformado.</returns>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>Desplaza las coordenadas <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> de un punto según las magnitudes especificadas.</summary>
      <param name="offsetX">Magnitud según la que se va a desplazar la coordenada <see cref="P:System.Windows.Point.X" /> del punto.</param>
      <param name="offsetY">Magnitud según la que se va a desplazar la coordenada <see cref="P:System.Windows.Point.Y" /> del punto.</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>Traslada la estructura <see cref="T:System.Windows.Point" /> especificada mediante la estructura <see cref="T:System.Windows.Vector" /> especificada y devuelve el resultado.</summary>
      <param name="point">Punto que se va a trasladar.</param>
      <param name="vector">Magnitud según la que se va a trasladar <paramref name="point" />.</param>
      <returns>Resultado de trasladar el punto especificado mediante el vector especificado.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>Compara dos estructuras <see cref="T:System.Windows.Point" /> para determinar si son iguales.</summary>
      <param name="point1">Primera estructura <see cref="T:System.Windows.Point" /> que se va a comparar.</param>
      <param name="point2">Segunda estructura <see cref="T:System.Windows.Point" /> que se va a comparar.</param>
      <returns>Es <see langword="true" /> si las coordenadas <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> de <paramref name="point1" /> y de <paramref name="point2" /> son iguales; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>Crea una estructura <see cref="T:System.Windows.Size" /> con un valor de <see cref="P:System.Windows.Size.Width" /> igual al valor de <see cref="P:System.Windows.Point.X" /> de este punto y con un valor de <see cref="P:System.Windows.Size.Height" /> igual al valor de <see cref="P:System.Windows.Point.Y" /> de este punto.</summary>
      <param name="point">Punto que se va a convertir.</param>
      <returns>Estructura <see cref="T:System.Windows.Size" /> con un valor de <see cref="P:System.Windows.Size.Width" /> igual al valor de <see cref="P:System.Windows.Point.X" /> de este punto y con un valor de <see cref="P:System.Windows.Size.Height" /> igual al valor de <see cref="P:System.Windows.Point.Y" /> de este punto.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>Crea una estructura <see cref="T:System.Windows.Vector" /> con un valor de <see cref="P:System.Windows.Vector.X" /> igual al valor de <see cref="P:System.Windows.Point.X" /> del punto y con un valor de <see cref="P:System.Windows.Vector.Y" /> igual al valor de <see cref="P:System.Windows.Point.Y" /> del punto.</summary>
      <param name="point">Punto que se va a convertir.</param>
      <returns>Vector con un valor de <see cref="P:System.Windows.Vector.X" /> igual al valor de <see cref="P:System.Windows.Point.X" /> del punto y con un valor de <see cref="P:System.Windows.Vector.Y" /> igual al valor de <see cref="P:System.Windows.Point.Y" /> del punto.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>Compara la desigualdad de dos estructuras <see cref="T:System.Windows.Point" />.</summary>
      <param name="point1">Primer punto que se va a comparar.</param>
      <param name="point2">Segundo punto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="point1" /> y <paramref name="point2" /> tienen coordenadas <see cref="P:System.Windows.Point.X" /> o <see cref="P:System.Windows.Point.Y" /> diferentes; es <see langword="false" /> si <paramref name="point1" /> y <paramref name="point2" /> tienen las mismas coordenadas <see cref="P:System.Windows.Point.X" /> y <see cref="P:System.Windows.Point.Y" />.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforma la estructura <see cref="T:System.Windows.Point" /> especificada mediante la estructura <see cref="T:System.Windows.Media.Matrix" /> especificada.</summary>
      <param name="point">El punto que se va a transformar.</param>
      <param name="matrix">Matriz de transformación.</param>
      <returns>Resultado de transformar el punto especificado mediante la matriz especificada.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>Resta la estructura <see cref="T:System.Windows.Point" /> especificada de otra estructura <see cref="T:System.Windows.Point" /> y devuelve la diferencia como una estructura <see cref="T:System.Windows.Vector" />.</summary>
      <param name="point1">Punto del que se resta <paramref name="point2" />.</param>
      <param name="point2">Punto que se va a restar de <paramref name="point1" />.</param>
      <returns>Diferencia entre <paramref name="point1" /> y <paramref name="point2" />.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>Resta la estructura <see cref="T:System.Windows.Vector" /> especificada de la estructura <see cref="T:System.Windows.Point" /> especificada y devuelve la estructura <see cref="T:System.Windows.Point" /> resultante.</summary>
      <param name="point">Punto del que se resta <paramref name="vector" />.</param>
      <param name="vector">Vector que se va a restar de <paramref name="point1" />.</param>
      <returns>Diferencia entre <paramref name="point" /> y <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>Construye un <see cref="T:System.Windows.Point" /> a partir de la <see cref="T:System.String" /> especificada.</summary>
      <param name="source">Representación de cadena de un punto.</param>
      <exception cref="T:System.FormatException">
        <paramref name="source" /> no se compone de dos valores double delimitados por comas o espacios.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> no contiene dos números.  
  
o bien 
 <paramref name="source" /> contiene demasiados delimitadores.</exception>
      <returns>Estructura <see cref="T:System.Windows.Point" /> equivalente.</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>Resta la estructura <see cref="T:System.Windows.Point" /> especificada de otra estructura <see cref="T:System.Windows.Point" /> y devuelve la diferencia como una estructura <see cref="T:System.Windows.Vector" />.</summary>
      <param name="point1">Punto del que se resta <paramref name="point2" />.</param>
      <param name="point2">Punto que se va a restar de <paramref name="point1" />.</param>
      <returns>Diferencia entre <paramref name="point1" /> y <paramref name="point2" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>Resta la estructura <see cref="T:System.Windows.Vector" /> especificada de la estructura <see cref="T:System.Windows.Point" /> especificada y devuelve la estructura <see cref="T:System.Windows.Point" /> resultante.</summary>
      <param name="point">Punto del que se resta <paramref name="vector" />.</param>
      <param name="vector">
        <paramref name="vector" /> que se va a restar de <paramref name="point" />.</param>
      <returns>Diferencia entre <paramref name="point" /> y <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Este miembro es compatible con la infraestructura de Windows Presentation Foundation (WPF) y no está diseñado para utilizarse directamente desde el código. Para obtener una descripción de este miembro, vea <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <param name="format">Cadena que especifica el formato que se va a utilizar.  
  
o bien 
 <see langword="null" /> para utilizar el formato predeterminado que se define para el tipo de la implementación de <see cref="T:System.IFormattable" />.</param>
      <param name="provider">
        <see langword="IFormatProvider" /> que se va a utilizar para dar formato al valor.  
  
o bien 
 <see langword="null" /> para obtener la información de formato para valores numéricos de la configuración regional actual del sistema operativo.</param>
      <returns>Cadena que contiene el valor de la instancia actual con el formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>Crea una representación de tipo <see cref="T:System.String" /> de esta estructura <see cref="T:System.Windows.Point" />.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene los valores de <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> de esta estructura <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>Crea una representación de tipo <see cref="T:System.String" /> de esta estructura <see cref="T:System.Windows.Point" />.</summary>
      <param name="provider">Información de formato específica de la referencia cultural.</param>
      <returns>
        <see cref="T:System.String" /> que contiene los valores de <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> de esta estructura <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>Obtiene o establece el valor de la coordenada <see cref="P:System.Windows.Point.X" /> de esta estructura <see cref="T:System.Windows.Point" />.</summary>
      <returns>Valor de la coordenada <see cref="P:System.Windows.Point.X" /> de esta estructura <see cref="T:System.Windows.Point" />.  El valor predeterminado es <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>Obtiene o establece el valor de la coordenada <see cref="P:System.Windows.Point.Y" /> de esta estructura <see cref="T:System.Windows.Point" />.</summary>
      <returns>Valor de la coordenada <see cref="P:System.Windows.Point.Y" /> de esta estructura <see cref="T:System.Windows.Point" />.  El valor predeterminado es <c>0</c>.</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>Convierte instancias de otros tipos en una colección <see cref="T:System.Windows.Point" /> y viceversa.</summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PointConverter" />.</summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si un objeto puede convertirse de un tipo especificado en una instancia de <see cref="T:System.Windows.Point" />.</summary>
      <param name="context">Describe la información de contexto de un tipo.</param>
      <param name="sourceType">Tipo del origen que se va a evaluar para la conversión.</param>
      <returns>Es <see langword="true" /> si se puede convertir en <see cref="T:System.Windows.Point" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si una instancia de <see cref="T:System.Windows.Point" /> puede convertirse en un tipo diferente.</summary>
      <param name="context">Describe la información de contexto de un tipo.</param>
      <param name="destinationType">Tipo deseado de este <see cref="T:System.Windows.Point" /> que se está evaluando para la conversión.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Windows.Point" /> puede convertirse en <paramref name="destinationType" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Intenta convertir el objeto especificado en <see cref="T:System.Windows.Point" />.</summary>
      <param name="context">Proporciona la información contextual necesaria para la conversión.</param>
      <param name="culture">Información de referencia cultural que se debe respetar durante la conversión.</param>
      <param name="value">Objeto que se convertirá.</param>
      <exception cref="T:System.NotSupportedException">Se inicia si el objeto especificado es NULL o es un tipo que no se puede convertir en <see cref="T:System.Windows.Point" />.</exception>
      <returns>Objeto <see cref="T:System.Windows.Point" /> creado a partir de la conversión de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Intenta convertir <see cref="T:System.Windows.Point" /> en un tipo especificado.</summary>
      <param name="context">Proporciona la información contextual necesaria para la conversión.</param>
      <param name="culture">Información de referencia cultural que se debe respetar durante la conversión.</param>
      <param name="value">Valor <see cref="T:System.Windows.Point" /> que se va a convertir.</param>
      <param name="destinationType">Tipo en el que convertir <see cref="T:System.Windows.Point" />.</param>
      <exception cref="T:System.NotSupportedException">Se inicia si <paramref name="value" /> es <see langword="null" /> o no es <see cref="T:System.Windows.Point" />, o si <paramref name="destinationType" /> no es uno de los tipos válidos para la conversión.</exception>
      <returns>Objeto que se crea a partir de la conversión de esta instancia de <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>Representa la devolución de llamada que se invoca cuando cambia el valor de propiedad efectivo de una propiedad de dependencia.</summary>
      <param name="d">Objeto <see cref="T:System.Windows.DependencyObject" /> en el que ha cambiado el valor de la propiedad.</param>
      <param name="e">Datos de evento que emitió cualquier evento que realiza el seguimiento de cambios en el valor efectivo de esta propiedad.</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>Define ciertos aspectos de comportamiento de una propiedad de dependencia tal como se aplica a un tipo específico, incluidas las condiciones con las que se registró.</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" />.</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" /> con un valor predeterminado especificado para la propiedad de dependencia a la que se aplicarán estos metadatos.</summary>
      <param name="defaultValue">Valor predeterminado que se especifica para una propiedad de dependencia, proporcionado normalmente como un valor de algún tipo específico.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> no se puede establecer en el valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" /> con el valor predeterminado y la referencia de implementación de <see cref="T:System.Windows.PropertyChangedCallback" /> especificados.</summary>
      <param name="defaultValue">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como valor de algún tipo específico.</param>
      <param name="propertyChangedCallback">Referencia a una implementación de controlador a la que va a llamar el sistema de propiedades cada vez que cambie el valor real de la propiedad.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> no se puede establecer en el valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" /> con el valor predeterminado y las devoluciones de llamada especificados.</summary>
      <param name="defaultValue">Valor predeterminado de la propiedad de dependencia, proporcionado normalmente como valor de algún tipo específico.</param>
      <param name="propertyChangedCallback">Referencia a una implementación de controlador a la que va a llamar el sistema de propiedades cada vez que cambie el valor real de la propiedad.</param>
      <param name="coerceValueCallback">Referencia a una implementación del controlador a la que se llamará siempre que el sistema de propiedades llame a <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> en esta propiedad.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> no se puede establecer en el valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.PropertyMetadata" /> con la referencia de implementación de <see cref="T:System.Windows.PropertyChangedCallback" /> especificada.</summary>
      <param name="propertyChangedCallback">Referencia a una implementación de controlador a la que va a llamar el sistema de propiedades cada vez que cambie el valor real de la propiedad.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>Combina estos metadatos con los metadatos base.</summary>
      <param name="baseMetadata">Metadatos base para combinar con los valores de esta instancia.</param>
      <param name="dp">Propiedad de dependencia a la que se aplican estos metadatos.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>Se le llama cuando los metadatos se han aplicado a una propiedad, que indica que se sellan los metadatos.</summary>
      <param name="dp">Propiedad de dependencia a la que se han aplicado los metadatos.</param>
      <param name="targetType">Tipo asociado a estos metadatos si se trata de metadatos específicos de tipo. Si éstos son los metadatos predeterminados, este valor es una referencia null.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>Obtiene o establece una referencia a una implementación de <see cref="T:System.Windows.CoerceValueCallback" /> especificada en estos metadatos.</summary>
      <exception cref="T:System.InvalidOperationException">No se puede establecer una propiedad de metadatos una vez que se aplica a una operación de propiedad de dependencia.</exception>
      <returns>Referencia de implementación de <see cref="T:System.Windows.CoerceValueCallback" />.</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>Obtiene o establece el valor predeterminado de la propiedad de dependencia.</summary>
      <exception cref="T:System.ArgumentException">No se puede establecer en el valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> tras su creación.</exception>
      <exception cref="T:System.InvalidOperationException">No se puede establecer una propiedad de metadatos una vez que se aplica a una operación de propiedad de dependencia.</exception>
      <returns>Valor predeterminado de la propiedad. El valor predeterminado en una <see cref="T:System.Windows.PropertyMetadata" /> instancia creada con el constructor sin parámetros será <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> .</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>Obtiene un valor que determina si se han aplicado los metadatos a una propiedad de alguna manera, lo que ha producido el estado inmutable de esta instancia de metadatos.</summary>
      <returns>
        <see langword="true" /> si la instancia de metadatos es inmutable; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>Obtiene o establece una referencia a una implementación de <see cref="T:System.Windows.PropertyChangedCallback" /> especificada en estos metadatos.</summary>
      <exception cref="T:System.InvalidOperationException">No se puede establecer una propiedad de metadatos una vez que se aplica a una operación de propiedad de dependencia.</exception>
      <returns>Referencia de implementación de <see cref="T:System.Windows.PropertyChangedCallback" />.</returns>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>Describe el ancho, el alto y la ubicación de un rectángulo.</summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Rect" /> que tiene las coordenadas X e Y especificadas, así como el ancho y alto especificados.</summary>
      <param name="x">Coordenada "x" de la esquina superior izquierda del rectángulo.</param>
      <param name="y">Coordenada Y de la esquina superior izquierda del rectángulo.</param>
      <param name="width">Ancho del rectángulo.</param>
      <param name="height">Alto del rectángulo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> es un valor negativo.  
  
o bien 
 <paramref name="height" /> es un valor negativo.</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Rect" /> que tiene el largo exacto para contener los dos puntos especificados.</summary>
      <param name="point1">Primer punto que debe contener el nuevo rectángulo.</param>
      <param name="point2">Segundo punto que debe contener el nuevo rectángulo.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Rect" /> que tiene la ubicación de la esquina superior izquierda especificada, así como el ancho y alto especificados.</summary>
      <param name="location">Punto que especifica la ubicación de la esquina superior izquierda del rectángulo.</param>
      <param name="size">Estructura <see cref="T:System.Windows.Size" /> que especifica el ancho y el alto del rectángulo.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Rect" /> que tiene el largo exacto para contener el punto especificado, la suma del punto y el vector especificados.</summary>
      <param name="point">Primer punto que debe contener el rectángulo.</param>
      <param name="vector">Recorrido que se va a desplazar el punto especificado. El rectángulo resultante tendrá el largo exacto para contener ambos puntos.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Rect" /> que tiene el tamaño especificado y se ubica en (0,0).</summary>
      <param name="size">Estructura <see cref="T:System.Windows.Size" /> que especifica el ancho y el alto del rectángulo.</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>Indica si el rectángulo contiene las coordenadas X e Y especificadas.</summary>
      <param name="x">Coordenada X del punto que se va a comprobar.</param>
      <param name="y">Coordenada Y del punto que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el rectángulo contiene (<paramref name="x" />, <paramref name="y" />); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>Indica si el rectángulo contiene el punto especificado.</summary>
      <param name="point">Punto que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el rectángulo contiene el punto especificado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>Indica si el rectángulo contiene el rectángulo especificado.</summary>
      <param name="rect">Rectángulo que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el rectángulo contiene el <paramref name="rect" /> completo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>Indica si el objeto especificado es igual al rectángulo actual.</summary>
      <param name="o">Objeto que se va a comparar con el rectángulo actual.</param>
      <returns>Es <see langword="true" /> si <paramref name="o" /> es <see cref="T:System.Windows.Rect" /> y tiene los mismo valores en las propiedades <see cref="P:System.Windows.Rect.Location" /> y <see cref="P:System.Windows.Rect.Size" /> que el rectángulo actual; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>Indica si el rectángulo especificado es igual al rectángulo actual.</summary>
      <param name="value">Rectángulo que se va a comparar con el rectángulo actual.</param>
      <returns>Es <see langword="true" /> si el rectángulo especificado tiene los mismos valores en las propiedades <see cref="P:System.Windows.Rect.Location" /> y <see cref="P:System.Windows.Rect.Size" /> que el rectángulo actual; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>Indica si los rectángulos especificados son iguales.</summary>
      <param name="rect1">Primer rectángulo que se va a comparar.</param>
      <param name="rect2">Segundo rectángulo que se va a comparar.</param>
      <returns>Es <see langword="true" /> si el rectángulo tiene los mismos valores en las propiedades <see cref="P:System.Windows.Rect.Location" /> y <see cref="P:System.Windows.Rect.Size" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>Crea un código hash para el rectángulo.</summary>
      <returns>Código hash para la estructura <see cref="T:System.Windows.Rect" /> actual.</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>Se expande o reduce el rectángulo con el ancho y el alto especificados, en todas las direcciones.</summary>
      <param name="width">Cantidad que se expanden o reducen los lados izquierdo y derecho del rectángulo.</param>
      <param name="height">Cantidad que se expanden o reducen los lados superior e inferior del rectángulo.</param>
      <exception cref="T:System.InvalidOperationException">Se llama a este método en el rectángulo de la propiedad <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>Crea un rectángulo que es el resultado de expandir o reducir el rectángulo especificado por el ancho y el alto especificados, en todas las direcciones.</summary>
      <param name="rect">Estructura <see cref="T:System.Windows.Rect" /> que se va a modificar.</param>
      <param name="width">Cantidad que se expanden o reducen los lados izquierdo y derecho del rectángulo.</param>
      <param name="height">Cantidad que se expanden o reducen los lados superior e inferior del rectángulo.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> es un rectángulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Rectángulo resultante.</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>Devuelve el rectángulo que es el resultado de expandir el rectángulo especificado por la estructura <see cref="T:System.Windows.Size" /> especificada, en todas las direcciones.</summary>
      <param name="rect">Estructura <see cref="T:System.Windows.Rect" /> que se va a modificar.</param>
      <param name="size">Especifica la cantidad que se va a expandir el rectángulo. La propiedad <see cref="T:System.Windows.Size" /> de la estructura <see cref="P:System.Windows.Size.Width" /> especifica la cantidad que se van a incrementar las propiedades <see cref="P:System.Windows.Rect.Left" /> y <see cref="P:System.Windows.Rect.Right" /> del rectángulo. La propiedad <see cref="T:System.Windows.Size" /> de la estructura <see cref="P:System.Windows.Size.Height" /> especifica la cantidad que se van a incrementar las propiedades <see cref="P:System.Windows.Rect.Top" /> y <see cref="P:System.Windows.Rect.Bottom" /> del rectángulo.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> es un rectángulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Rectángulo resultante.</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>Expande el rectángulo utilizando la estructura <see cref="T:System.Windows.Size" />especificada, en todas las direcciones.</summary>
      <param name="size">Especifica la cantidad que se va a expandir el rectángulo. La propiedad <see cref="T:System.Windows.Size" /> de la estructura <see cref="P:System.Windows.Size.Width" /> especifica la cantidad que se van a incrementar las propiedades <see cref="P:System.Windows.Rect.Left" /> y <see cref="P:System.Windows.Rect.Right" /> del rectángulo. La propiedad <see cref="T:System.Windows.Size" /> de la estructura <see cref="P:System.Windows.Size.Height" /> especifica la cantidad que se van a incrementar las propiedades <see cref="P:System.Windows.Rect.Top" /> y <see cref="P:System.Windows.Rect.Bottom" /> del rectángulo.</param>
      <exception cref="T:System.InvalidOperationException">Se llama a este método en el rectángulo de la propiedad <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>Encuentra la intersección del rectángulo actual y el rectángulo especificado y almacena el resultado como el rectángulo actual.</summary>
      <param name="rect">Rectángulo que se va a intersecar con el rectángulo actual.</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>Devuelve la intersección de los rectángulos especificados.</summary>
      <param name="rect1">Primer rectángulo que se va a comparar.</param>
      <param name="rect2">Segundo rectángulo que se va a comparar.</param>
      <returns>Intersección de los dos rectángulos o <see cref="P:System.Windows.Rect.Empty" /> si no existe ninguna intersección.</returns>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>Indica si el rectángulo especificado se interseca con el rectángulo actual.</summary>
      <param name="rect">Rectángulo que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el rectángulo especificado se interseca con el rectángulo actual; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>Mueve el rectángulo las cantidades horizontal y vertical especificadas.</summary>
      <param name="offsetX">Cantidad que se va a mover horizontalmente el rectángulo.</param>
      <param name="offsetY">Cantidad que se va a mover verticalmente el rectángulo.</param>
      <exception cref="T:System.InvalidOperationException">Se llama a este método en el rectángulo de la propiedad <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>Devuelve un rectángulo que se desplaza desde el rectángulo especificado usando las cantidades horizontal y vertical especificadas.</summary>
      <param name="rect">Rectángulo que se va a mover.</param>
      <param name="offsetX">Desplazamiento horizontal del nuevo rectángulo.</param>
      <param name="offsetY">Desplazamiento vertical del nuevo rectángulo.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> es <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Rectángulo resultante.</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>Devuelve un rectángulo que se desplaza desde el rectángulo especificado mediante el vector especificado.</summary>
      <param name="rect">Rectángulo original.</param>
      <param name="offsetVector">Vector que especifica los desplazamientos horizontal y vertical del nuevo rectángulo.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> es <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Rectángulo resultante.</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>Mueve el rectángulo el vector especificado.</summary>
      <param name="offsetVector">Vector que especifica las cantidades horizontal y vertical que se va a mover el rectángulo.</param>
      <exception cref="T:System.InvalidOperationException">Se llama a este método en el rectángulo de la propiedad <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compara dos rectángulos para determinar si son exactamente iguales.</summary>
      <param name="rect1">Primer rectángulo que se va a comparar.</param>
      <param name="rect2">Segundo rectángulo que se va a comparar.</param>
      <returns>Es <see langword="true" /> si el rectángulo tiene los mismos valores en las propiedades <see cref="P:System.Windows.Rect.Location" /> y <see cref="P:System.Windows.Rect.Size" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compara dos rectángulos para determinar si no son iguales.</summary>
      <param name="rect1">Primer rectángulo que se va a comparar.</param>
      <param name="rect2">Segundo rectángulo que se va a comparar.</param>
      <returns>Es <see langword="true" /> si el rectángulo no tiene los mismos valores en las propiedades <see cref="P:System.Windows.Rect.Location" /> y <see cref="P:System.Windows.Rect.Size" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>Crea un nuevo rectángulo a partir de la representación de cadena especificada.</summary>
      <param name="source">Representación de cadena del rectángulo, en el formato "x, y, ancho, alto".</param>
      <returns>Rectángulo resultante.</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>Multiplica el tamaño del rectángulo actual por los valores x e y especificados.</summary>
      <param name="scaleX">Factor de escala en la dirección x.</param>
      <param name="scaleY">Factor de escala en la dirección y.</param>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Da formato al valor de la instancia actual usando el formato especificado.</summary>
      <param name="format">Formato que se usará.  
  
o bien 
Referencia nula (<see langword="Nothing" /> en Visual Basic) para usar el formato predeterminado definido para el tipo de la implementación <see cref="T:System.IFormattable" />.</param>
      <param name="provider">Proveedor que se usa para dar formato al valor.  
  
o bien 
Referencia nula (<see langword="Nothing" /> en Visual Basic) para obtener la información de formato numérico de la configuración regional actual del sistema operativo.</param>
      <returns>Representación de cadena del rectángulo.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>Devuelve una representación de cadena del rectángulo.</summary>
      <returns>Representación de cadena del rectángulo actual. La cadena tiene el formato siguiente: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>Devuelve una representación de cadena del rectángulo usando el proveedor de formato especificado.</summary>
      <param name="provider">Información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena del rectángulo actual que determina el proveedor de formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>Transforma el rectángulo aplicando la matriz especificada.</summary>
      <param name="matrix">Matriz que especifica la transformación que se va a aplicar.</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>Devuelve el rectángulo que es el resultado de aplicar la matriz especificada al rectángulo especificado.</summary>
      <param name="rect">Rectángulo que es la base de la transformación.</param>
      <param name="matrix">Matriz que especifica la transformación que se va a aplicar.</param>
      <returns>Rectángulo que es el resultado de la operación.</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>Expande el rectángulo actual lo suficiente para contener el punto especificado.</summary>
      <param name="point">Punto que se va a incluir.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>Expande el rectángulo actual lo suficiente para contener el rectángulo especificado.</summary>
      <param name="rect">Rectángulo se va a incluir.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>Crea un rectángulo que es lo bastante grande como para incluir el rectángulo y el punto especificados.</summary>
      <param name="rect">Rectángulo se va a incluir.</param>
      <param name="point">Punto que se va a incluir.</param>
      <returns>Rectángulo que es lo bastante grande para contener el rectángulo y el punto especificados.</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>Crea un rectángulo que es lo bastante grande como para contener los dos rectángulos especificados.</summary>
      <param name="rect1">Primer rectángulo que se va a incluir.</param>
      <param name="rect2">Segundo rectángulo que se va a incluir.</param>
      <returns>Rectángulo resultante.</returns>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>Obtiene el valor del eje Y de la parte inferior del rectángulo.</summary>
      <returns>Valor del eje Y de la parte inferior del rectángulo. Si el rectángulo está vacío, el valor es <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>Obtiene la posición de la esquina inferior izquierda del rectángulo.</summary>
      <returns>Posición de la esquina inferior izquierda del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>Obtiene la posición de la esquina inferior derecha del rectángulo.</summary>
      <returns>Posición de la esquina inferior derecha del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>Obtiene un valor especial que representa un rectángulo sin posición ni área.</summary>
      <returns>Rectángulo vacío, que tiene los valores de las propiedades <see cref="P:System.Windows.Rect.X" /> y <see cref="P:System.Windows.Rect.Y" /> de <see cref="F:System.Double.PositiveInfinity" />, así como los valores de las propiedades <see cref="P:System.Windows.Rect.Width" /> y <see cref="P:System.Windows.Rect.Height" /> de <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>Obtiene o establece la altura del rectángulo.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Height" /> está establecido en un valor negativo.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Height" /> está establecido en un rectángulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Número positivo que representa el alto del rectángulo. El valor predeterminado es 0.</returns>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>Obtiene un valor que indica si el rectángulo es el rectángulo de la propiedad <see cref="P:System.Windows.Rect.Empty" />.</summary>
      <returns>Es <see langword="true" /> si el rectángulo es el rectángulo de la propiedad <see cref="P:System.Windows.Rect.Empty" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>Obtiene el valor del eje X del lado izquierdo del rectángulo.</summary>
      <returns>Valor del eje X del lado izquierdo del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>Obtiene o establece la posición de la esquina superior izquierda del rectángulo.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Location" /> está establecido en un rectángulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Posición de la esquina superior izquierda del rectángulo. El valor predeterminado es (0, 0).</returns>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>Obtiene el valor del eje X del lado derecho del rectángulo.</summary>
      <returns>Valor del eje X del lado derecho del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>Obtiene o establece el alto y el ancho del rectángulo.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Size" /> está establecido en un rectángulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Estructura <see cref="T:System.Windows.Size" /> que especifica el ancho y el alto del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>Obtiene la posición del eje Y de la parte superior del rectángulo.</summary>
      <returns>Posición del eje Y de la parte superior del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>Obtiene la posición de la esquina superior izquierda del rectángulo.</summary>
      <returns>Posición de la esquina superior izquierda del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>Obtiene la posición de la esquina superior derecha del rectángulo.</summary>
      <returns>Posición de la esquina superior derecha del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>Obtiene o establece el ancho del rectángulo.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Width" /> está establecido en un valor negativo.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Width" /> está establecido en un rectángulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Número positivo que representa el ancho del rectángulo. El valor predeterminado es 0.</returns>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>Obtiene o establece el valor del eje X del lado izquierdo del rectángulo.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.X" /> está establecido en un rectángulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Valor del eje X del lado izquierdo del rectángulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>Obtiene o establece el valor del eje Y del lado superior del rectángulo.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Y" /> está establecido en un rectángulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
      <returns>Valor del eje Y del lado superior del rectángulo.</returns>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>Convierte instancias de otros tipos a y desde instancias de <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.RectConverter" />.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si un objeto puede convertirse de un tipo especificado en una instancia de <see cref="T:System.Windows.Rect" />.</summary>
      <param name="context">Proporciona la información contextual necesaria para la conversión.</param>
      <param name="sourceType">Tipo del origen que se va a evaluar para la conversión.</param>
      <returns>Es <see langword="true" /> si se puede convertir en <see cref="T:System.Windows.Rect" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si <see cref="T:System.Windows.Rect" /> puede convertirse en el tipo especificado.</summary>
      <param name="context">Proporciona la información contextual necesaria para la conversión.</param>
      <param name="destinationType">Tipo deseado de este <see cref="T:System.Windows.Rect" /> que se está evaluando para la conversión.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.Windows.Rect" /> se puede convertir en <paramref name="destinationType" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Intenta convertir el objeto especificado en <see cref="T:System.Windows.Rect" />.</summary>
      <param name="context">Proporciona la información contextual necesaria para la conversión.</param>
      <param name="culture">Información cultural que se respeta en la conversión.</param>
      <param name="value">Objeto que se convertirá.</param>
      <exception cref="T:System.NotSupportedException">Se inicia si el objeto especificado es NULL o es un tipo que no se puede convertir en <see cref="T:System.Windows.Rect" />.</exception>
      <returns>Objeto <see cref="T:System.Windows.Rect" /> creado a partir de la conversión de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Intenta convertir <see cref="T:System.Windows.Rect" /> en el tipo especificado.</summary>
      <param name="context">Proporciona la información contextual necesaria para la conversión.</param>
      <param name="culture">Información de referencia cultural que se respeta durante la conversión.</param>
      <param name="value">Valor <see cref="T:System.Windows.Rect" /> que se va a convertir.</param>
      <param name="destinationType">Tipo en el que convertir <see cref="T:System.Windows.Rect" />.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> es <see langword="null" />.  
  
o bien 
 <paramref name="value" /> no es un <see cref="T:System.Windows.Rect" />.  
  
o bien 
<paramref name="destinationType" /> no es ninguno de los tipos válidos para la conversión.</exception>
      <returns>Objeto que se crea a partir de la conversión de esta instancia de <see cref="T:System.Windows.Rect" />.</returns>
    </member>
    <member name="T:System.Windows.Size">
      <summary>Implementa una estructura que se utiliza para describir el elemento <see cref="T:System.Windows.Size" /> de un objeto.</summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Size" /> y le asigna un valor inicial de <paramref name="width" /> y <paramref name="height" />.</summary>
      <param name="width">Ancho inicial de la instancia de <see cref="T:System.Windows.Size" />.</param>
      <param name="height">Alto inicial de la instancia de <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>Compara un objeto con una instancia de <see cref="T:System.Windows.Size" /> para determinar si son iguales.</summary>
      <param name="o">
        <see cref="T:System.Object" /> que se va comparar.</param>
      <returns>Es <see langword="true" /> si los tamaños son iguales; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>Compara un valor con una instancia de <see cref="T:System.Windows.Size" /> para determinar si son iguales.</summary>
      <param name="value">Tamaño que se va a comparar con la actual instancia de <see cref="T:System.Windows.Size" />.</param>
      <returns>Es <see langword="true" /> si las instancias de <see cref="T:System.Windows.Size" /> son iguales; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>Compara dos instancias de <see cref="T:System.Windows.Size" /> para determinar si son iguales.</summary>
      <param name="size1">Primera instancia de <see cref="T:System.Windows.Size" /> que se va a comparar.</param>
      <param name="size2">Segunda instancia de <see cref="T:System.Windows.Size" /> que se va a comparar.</param>
      <returns>Es <see langword="true" /> si las instancias de <see cref="T:System.Windows.Size" /> son iguales; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>Obtiene el código hash de esta instancia de <see cref="T:System.Windows.Size" />.</summary>
      <returns>Código hash de esta instancia de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>Compara dos instancias de <see cref="T:System.Windows.Size" /> para determinar si son iguales.</summary>
      <param name="size1">Primera instancia de <see cref="T:System.Windows.Size" /> que se va a comparar.</param>
      <param name="size2">Segunda instancia de <see cref="T:System.Windows.Size" /> que se va a comparar.</param>
      <returns>
        <see langword="true" /> si las dos instancias de <see cref="T:System.Windows.Size" /> son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>Convierte explícitamente una instancia de <see cref="T:System.Windows.Size" /> en una instancia de <see cref="T:System.Windows.Point" />.</summary>
      <param name="size">Valor <see cref="T:System.Windows.Size" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Windows.Point" /> cuyo valor es igual al de esta instancia de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>Convierte explícitamente una instancia de <see cref="T:System.Windows.Size" /> en una instancia de <see cref="T:System.Windows.Vector" />.</summary>
      <param name="size">Valor <see cref="T:System.Windows.Size" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Windows.Vector" /> cuyo valor es igual al de esta instancia de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>Compara dos instancias de <see cref="T:System.Windows.Size" /> para determinar si no son iguales.</summary>
      <param name="size1">Primera instancia de <see cref="T:System.Windows.Size" /> que se va a comparar.</param>
      <param name="size2">Segunda instancia de <see cref="T:System.Windows.Size" /> que se va a comparar.</param>
      <returns>Es <see langword="true" /> si las instancias de <see cref="T:System.Windows.Size" /> no son iguales; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>Devuelve una instancia de <see cref="T:System.Windows.Size" /> de un objeto <see cref="T:System.String" /> convertido.</summary>
      <param name="source">Valor de <see cref="T:System.String" /> que se va a analizar como un valor de <see cref="T:System.Windows.Size" />.</param>
      <returns>Instancia de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Este tipo o miembro es compatible con la infraestructura Windows Presentation Foundation (WPF) y no está pensado para ser usado directamente desde su código.</summary>
      <param name="format">Formato que se usará.</param>
      <param name="provider">Proveedor que se usa para dar formato al valor.</param>
      <returns>Valor de la instancia actual en el formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>Devuelve una instancia de <see cref="T:System.String" /> que representa este objeto <see cref="T:System.Windows.Size" />.</summary>
      <returns>
        <see cref="T:System.String" /> que especifica el ancho seguido del alto.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>Devuelve un objeto <see cref="T:System.String" /> que representa esta instancia de <see cref="T:System.Windows.Size" />.</summary>
      <param name="provider">Objeto que permite controlar el formato.</param>
      <returns>
        <see cref="T:System.String" /> que representa este objeto <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>Obtiene un valor que representa una instancia vacía y estática de <see cref="T:System.Windows.Size" />.</summary>
      <returns>Instancia vacía de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>Obtiene o establece la propiedad <see cref="P:System.Windows.Size.Height" /> de esta instancia de <see cref="T:System.Windows.Size" />.</summary>
      <returns>
        <see cref="P:System.Windows.Size.Height" /> de esta instancia de <see cref="T:System.Windows.Size" />. El valor predeterminado es 0. El valor no puede ser negativo.</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>Obtiene un valor que indica si esta instancia de <see cref="T:System.Windows.Size" /> es <see cref="P:System.Windows.Size.Empty" />.</summary>
      <returns>Es <see langword="true" /> si esta instancia del tamaño es <see cref="P:System.Windows.Size.Empty" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>Obtiene o establece la propiedad <see cref="P:System.Windows.Size.Width" /> de esta instancia de <see cref="T:System.Windows.Size" />.</summary>
      <returns>
        <see cref="P:System.Windows.Size.Width" /> de esta instancia de <see cref="T:System.Windows.Size" />. El valor predeterminado es <c>0</c>. El valor no puede ser negativo.</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>Convierte instancias de otros tipos en instancias de la clase <see cref="T:System.Windows.Size" /> y viceversa.</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si una clase puede convertirse de un tipo dado en una instancia de <see cref="T:System.Windows.Size" />.</summary>
      <param name="context">Proporciona la información contextual sobre un componente.</param>
      <param name="sourceType">Identifica el tipo de datos que se van a evaluar para la conversión.</param>
      <returns>
        <see langword="true" /> si el <paramref name="sourceType" /> se puede convertir en una instancia de <see cref="T:System.Windows.Size" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si una instancia de <see cref="T:System.Windows.Size" /> puede convertirse en un tipo diferente.</summary>
      <param name="context">Proporciona la información contextual sobre un componente.</param>
      <param name="destinationType">Identifica el tipo de datos que se van a evaluar para la conversión.</param>
      <returns>
        <see langword="true" /> si esta instancia de <see cref="T:System.Windows.Size" /> se puede convertir en <paramref name="destinationType" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Intenta convertir un objeto especificado en una instancia de <see cref="T:System.Windows.Size" />.</summary>
      <param name="context">Proporciona la información contextual sobre un componente.</param>
      <param name="culture">La información específica de la referencia cultural que se debe respetar durante la conversión.</param>
      <param name="value">Objeto de origen que se está convirtiendo.</param>
      <returns>Instancia de <see cref="T:System.Windows.Size" /> que se crea a partir del elemento <paramref name="source" /> convertido.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Intenta convertir una instancia de <see cref="T:System.Windows.Size" /> en un tipo especificado.</summary>
      <param name="context">Proporciona la información contextual sobre un componente.</param>
      <param name="culture">La información específica de la referencia cultural que se debe respetar durante la conversión.</param>
      <param name="value">Instancia de <see cref="T:System.Windows.Size" /> que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se convierte esta instancia de <see cref="T:System.Windows.Size" />.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> es <see langword="null" /> o no es una instancia de <see cref="T:System.Windows.Size" />o si el <paramref name="destinationType" /> no es uno de los tipos de destino válidos.</exception>
      <returns>Objeto que se crea a partir de la instancia convertida de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>Proporciona una pantalla de inicio para una aplicación de Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.SplashScreen" /> con el ensamblado de recursos especificado.</summary>
      <param name="resourceAssembly">Ensamblado que contiene el recurso incrustado.</param>
      <param name="resourceName">Nombre del recurso insertado.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.SplashScreen" /> con el recurso especificado.</summary>
      <param name="resourceName">Nombre del recurso insertado.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>Cierra la pantalla de presentación.</summary>
      <param name="fadeoutDuration">
        <see cref="T:System.TimeSpan" /> que especifica el tiempo que tardará la pantalla de presentación en desvanecerse después de que se inicie la operación de cierre.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>Muestra la pantalla de presentación.</summary>
      <param name="autoClose">Es <see langword="true" /> para cerrar automáticamente la pantalla de presentación; es <see langword="false" /> para cerrar manualmente la pantalla de presentación.</param>
      <exception cref="T:System.IO.IOException">No se encuentra el recurso especificado en el constructor.</exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>Muestra la pantalla de presentación.</summary>
      <param name="autoClose">Es <see langword="true" /> para cerrar automáticamente la pantalla de presentación; es <see langword="false" /> para cerrar manualmente la pantalla de presentación.</param>
      <param name="topMost">Es <see langword="true" /> si la ventana de la pantalla de presentación debe usar el estilo WS_EX_TOPMOST; de lo contrario, es <see langword="false" />.</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>Proporciona los servicios para administrar la cola de elementos de trabajo de un subproceso.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>Se produce cuando <see cref="T:System.Windows.Threading.Dispatcher" /> termina de cerrarse.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>Se produce cuando <see cref="T:System.Windows.Threading.Dispatcher" /> empieza a cerrarse.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>Se produce cuando se produce y no se detecta una excepción de subproceso durante la ejecución de un delegado mediante los métodos <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> o <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>Se produce cuando se produce y no se detecta una excepción de subproceso durante la ejecución de un delegado mediante los métodos <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> o <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> mientras se está en la fase de filtrado.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>Ejecuta de forma asincrónica el delegado especificado con los argumentos especificados en el subproceso en el que se creó el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="method">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado. Puede ser <see langword="null" />.</param>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Ejecuta de forma asincrónica el delegado especificado, con la prioridad indicada y los argumentos especificados, en el subproceso en el que se creó el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="method">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado. Puede ser <see langword="null" />.</param>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Ejecuta asincrónicamente el delegado especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="method">El delegado a un método que no toma ningún argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es un <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</exception>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Ejecuta asincrónicamente el delegado especificado en la prioridad indicada y con el argumento especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="method">Delegado a un método que toma un argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Objeto que se va a pasar como argumento al método especificado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es un <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</exception>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Ejecuta asincrónicamente el delegado especificado en la prioridad indicada y con la matriz de argumentos indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="method">Delegado de un método que toma varios argumentos y se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Objeto que se va a pasar como argumento al método especificado.</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> no es una prioridad válida.</exception>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de <see cref="T:System.Windows.Threading.Dispatcher" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>Inicia asincrónicamente el cierre de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad en la que empezar a cerrar el distribuidor.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>Determina si el subproceso de la llamada es el subproceso asociado a este objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>Es <see langword="true" /> si el subproceso de la llamada es el subproceso asociado a este objeto <see cref="T:System.Windows.Threading.Dispatcher" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>Deshabilita el procesamiento de la cola de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>Estructura usada para volver a habilitar el procesamiento del distribuidor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>Solicita que todos salgan los fotogramas, incluidos los fotogramas anidados.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> del subproceso especificado.</summary>
      <param name="thread">Subproceso del que se va a obtener <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <returns>Distribuidor de <paramref name="thread" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary>Ejecuta sincrónicamente el <see cref="T:System.Action" /> especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Ejecuta sincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Ejecuta sincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">Un objeto que indica si cancelar la acción.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>Ejecuta sincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado de acción que se va a invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">Un objeto que indica si cancelar la acción.</param>
      <param name="timeout">Cantidad máxima de tiempo de espera para que se inicie la operación. Una vez iniciada la operación, se completará antes de que se devuelva este método. Para especificar una espera infinita, use un valor de-1. En una llamada del mismo subproceso, cualquier otro valor negativo se convierte en-1, lo que produce una espera infinita. En una llamada entre subprocesos, cualquier otro valor negativo produce una excepción <see cref="T:System.ArgumentOutOfRangeException" /> .</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> es un número negativo distinto de-1 y este método se invocó a través de subprocesos.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es una prioridad válida.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>Ejecuta de forma sincrónica el delegado especificado con los argumentos especificados en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="method">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado. Puede ser <see langword="null" />.</param>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>Ejecuta de forma sincrónica el delegado especificado dentro del intervalo de tiempo designado y con la prioridad y los argumentos especificados en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="method">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="timeout">Cantidad máxima de tiempo de espera para que se inicie la operación. Sin embargo, una vez iniciada la operación, se completará antes de que se devuelva este método. Para especificar una espera infinita, use un valor de-1. En una llamada del mismo subproceso, cualquier otro valor negativo se convierte en-1, lo que produce una espera infinita. En una llamada entre subprocesos, cualquier otro valor negativo produce una excepción <see cref="T:System.ArgumentOutOfRangeException" /> .</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado. Puede ser <see langword="null" /> si no se necesita ningún argumento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> es un número negativo distinto de-1 y está invocando a través de subprocesos.</exception>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Ejecuta de forma sincrónica el delegado especificado dentro del intervalo de tiempo designado y con la prioridad y los argumentos especificados en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="method">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="timeout">Cantidad máxima de tiempo de espera para que se inicie la operación. Una vez iniciada la operación, se completará antes de que se devuelva este método. Para especificar una espera infinita, use un valor de-1. En una llamada del mismo subproceso, cualquier otro valor negativo se convierte en-1, lo que produce una espera infinita. En una llamada entre subprocesos, cualquier otro valor negativo produce una excepción <see cref="T:System.ArgumentOutOfRangeException" /> .</param>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado. Puede ser <see langword="null" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> es un número negativo distinto de-1 y este método se invocó a través de subprocesos.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es una prioridad válida.</exception>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Ejecuta el delegado especificado en la prioridad indicada con los argumentos especificados sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="method">Delegado de un método que toma los parámetros especificados en <paramref name="args" />, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="priority">La prioridad con la que se invoca el método especificado, con respecto a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos.</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado. Puede ser <see langword="null" />.</param>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Ejecuta sincrónicamente el delegado especificado en la prioridad indicada en el subproceso al que <see cref="T:System.Windows.Threading.Dispatcher" /> está asociado el objeto.</summary>
      <param name="priority">La prioridad con la que se invoca el método especificado, con respecto a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos.</param>
      <param name="method">Un delegado a un método que no toma ningún argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es una prioridad válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Ejecuta el delegado especificado en la prioridad indicada con el argumento especificado sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="method">Delegado a un método que toma un argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Objeto cuyos valores se pasan como argumento al método especificado.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es una prioridad válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Ejecuta el delegado especificado en la prioridad indicada con los argumentos especificados sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="method">Delegado de un método que toma varios argumentos y se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Objeto cuyos valores se pasan como argumento al método especificado.</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es una prioridad válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>Ejecuta sincrónicamente el delegado especificado en la prioridad indicada y con el valor de tiempo de espera especificado en el subproceso que creó <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="timeout">Cantidad máxima de tiempo de espera para que se inicie la operación. Una vez iniciada la operación, se completará antes de que se devuelva este método. Para especificar una espera infinita, use un valor de-1. En una llamada del mismo subproceso, cualquier otro valor negativo se convierte en-1, lo que produce una espera infinita. En una llamada entre subprocesos, cualquier otro valor negativo produce una excepción <see cref="T:System.ArgumentOutOfRangeException" /> .</param>
      <param name="method">El delegado a un método que no toma ningún argumento, que se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> es un número negativo distinto de-1 y este método se invocó a través de subprocesos.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es una prioridad válida.</exception>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>Ejecuta el delegado especificado en la prioridad indicada con el argumento especificado sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="timeout">Cantidad máxima de tiempo de espera para que se inicie la operación. Una vez iniciada la operación, se completará antes de que se devuelva este método. Para especificar una espera infinita, use un valor de-1. En una llamada del mismo subproceso, cualquier otro valor negativo se convierte en-1, lo que produce una espera infinita. En una llamada entre subprocesos, cualquier otro valor negativo produce una excepción <see cref="T:System.ArgumentOutOfRangeException" /> .</param>
      <param name="method">Delegado de un método que toma varios argumentos y se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Objeto cuyos valores se pasan como argumento al método especificado. Puede ser <see langword="null" /> si no se necesita ningún argumento.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es una prioridad válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>Ejecuta el delegado especificado en la prioridad indicada con los argumentos especificados sincrónicamente en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="priority">Prioridad, relativa a las demás operaciones pendientes en la <see cref="T:System.Windows.Threading.Dispatcher" /> cola de eventos, a la que se invoca el método especificado.</param>
      <param name="timeout">Cantidad máxima de tiempo de espera para que se inicie la operación. Una vez iniciada la operación, se completará antes de que se devuelva este método. Para especificar una espera infinita, use un valor de-1. En una llamada del mismo subproceso, cualquier otro valor negativo se convierte en-1, lo que produce una espera infinita. En una llamada entre subprocesos, cualquier otro valor negativo produce una excepción <see cref="T:System.ArgumentOutOfRangeException" /> .</param>
      <param name="method">Delegado de un método que toma varios argumentos y se inserta en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Objeto que se va a pasar como un argumento al método especificado.</param>
      <param name="args">Matriz de objetos cuyos valores se pasan como argumentos al método especificado.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> es igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es un <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> es un número negativo distinto de-1 y este método se invocó a través de subprocesos.</exception>
      <returns>Es el valor devuelto desde el delegado al que se invoca o es <see langword="null" /> si el delegado no devuelve ningún valor.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary>Ejecuta sincrónicamente el <see cref="T:System.Func`1" /> especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <typeparam name="TResult">Tipo del valor devuelto del delegado especificado.</typeparam>
      <returns>El valor devuelto por <paramref name="callback" /> .</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>Ejecuta sincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <typeparam name="TResult">Tipo del valor devuelto del delegado especificado.</typeparam>
      <returns>El valor devuelto por <paramref name="callback" /> .</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Ejecuta sincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">Un objeto que indica si cancelar la operación.</param>
      <typeparam name="TResult">Tipo del valor devuelto del delegado especificado.</typeparam>
      <returns>El valor devuelto por <paramref name="callback" /> .</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>Ejecuta sincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">Un objeto que indica si cancelar la operación.</param>
      <param name="timeout">Cantidad máxima de tiempo de espera para que se inicie la operación. Una vez iniciada la operación, se completará antes de que se devuelva este método. Para especificar una espera infinita, use un valor de-1. En una llamada del mismo subproceso, cualquier otro valor negativo se convierte en-1, lo que produce una espera infinita. En una llamada entre subprocesos, cualquier otro valor negativo produce una excepción <see cref="T:System.ArgumentOutOfRangeException" /> .</param>
      <typeparam name="TResult">Tipo del valor devuelto del delegado especificado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> es un número negativo distinto de-1 y el método se invocó a través de subprocesos.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es una prioridad válida.</exception>
      <returns>El valor devuelto por <paramref name="callback" /> .</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary>Ejecuta asincrónicamente el <see cref="T:System.Action" /> especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Ejecuta asincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Ejecuta asincrónicamente el <see cref="T:System.Action" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">Un objeto que indica si cancelar la acción.</param>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary>Ejecuta asincrónicamente el <see cref="T:System.Func`1" /> especificado en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <typeparam name="TResult">Tipo del valor devuelto del delegado especificado.</typeparam>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>Ejecuta asincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <typeparam name="TResult">Tipo del valor devuelto del delegado especificado.</typeparam>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Ejecuta asincrónicamente el <see cref="T:System.Func`1" /> especificado en la prioridad indicada en el subproceso al que está asociado el objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <param name="callback">Delegado para invocar a través del distribuidor.</param>
      <param name="priority">Prioridad que determina el orden en que se invoca la devolución de llamada especificada en relación con las demás operaciones pendientes en <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">Un objeto que indica si cancelar la operación.</param>
      <typeparam name="TResult">Tipo del valor devuelto del delegado especificado.</typeparam>
      <returns>Objeto, que se devuelve inmediatamente después de llamar a <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />, que se puede usar para interactuar con el delegado ya que su ejecución está pendiente en la cola de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>Inicia sincrónicamente el proceso de cierre de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>Escribe un bucle de ejecución.</summary>
      <param name="frame">Fotograma del distribuidor que se va a procesar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frame" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> es <see langword="true" />  
  
o bien 
 <paramref name="frame" /> se ejecuta en un objeto <see cref="T:System.Windows.Threading.Dispatcher" /> diferente.  
  
o bien 
Se ha deshabilitado el procesamiento del distribuidor.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>Inserta el fotograma de ejecución principal en la cola de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>Determina si el objeto <see cref="T:System.Windows.Threading.DispatcherPriority" /> especificado tiene una prioridad válida.</summary>
      <param name="priority">Prioridad que se va a comprobar.</param>
      <param name="parameterName">Cadena que devolverá la excepción que se produce si la prioridad no es válida.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> no es un <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>Determina si el subproceso de la llamada tiene acceso a <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <exception cref="T:System.InvalidOperationException">El subproceso de la llamada no tiene acceso a <see cref="T:System.Windows.Threading.Dispatcher" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary>Crea un objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</summary>
      <returns>Objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary>Crea un objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.  El trabajo que se produce cuando el control vuelve al código que espera el resultado de este método se programa con la prioridad especificada.</summary>
      <param name="priority">Prioridad con la que se programa la continuación.</param>
      <returns>Objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>Obtiene <see cref="T:System.Windows.Threading.Dispatcher" /> del subproceso que se ejecuta actualmente y crea un nuevo objeto <see cref="T:System.Windows.Threading.Dispatcher" /> si aún no hay ninguno asociado al subproceso.</summary>
      <returns>Distribuidor asociado al subproceso actual.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>Determina si <see cref="T:System.Windows.Threading.Dispatcher" /> ha terminado de cerrarse.</summary>
      <returns>Es <see langword="true" /> si el distribuidor ha terminado de cerrarse; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>Determina si <see cref="T:System.Windows.Threading.Dispatcher" /> se está cerrando.</summary>
      <returns>Es <see langword="true" /> si <see cref="T:System.Windows.Threading.Dispatcher" /> se ha empezado a cerrar; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>Obtiene la colección de enlaces que proporcionan la información de evento adicional sobre <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>Enlaces asociados a este objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>Obtiene el subproceso al que está asociado este objeto <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>Subproceso.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>Proporciona los datos de los eventos <see cref="T:System.Windows.Threading.Dispatcher" /> relacionados.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>Objeto <see cref="T:System.Windows.Threading.Dispatcher" /> asociado con este evento.</summary>
      <returns>El distribuidor.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>Representa un bucle de ejecución en <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherFrame" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherFrame" /> usando el marcador de solicitud de salida especificado.</summary>
      <param name="exitWhenRequested">Indica si el marco saldrá cuando se solicite que salgan todos los fotogramas.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>Obtiene o establece un valor que indica si este <see cref="T:System.Windows.Threading.DispatcherFrame" /> debería continuar.</summary>
      <returns>
        <see langword="true" /> si el marco debe continuar; en caso contrario, <see langword="false" />.  El valor predeterminado es <see langword="true" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>Proporciona los datos de los eventos <see cref="T:System.Windows.Threading.DispatcherHooks" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" />.</summary>
      <param name="operation">Operación asociada al evento.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> asociado con este evento.</summary>
      <returns>Objeto <see cref="T:System.Windows.Threading.Dispatcher" /> asociado con este evento.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.DispatcherOperation" /> asociado con este evento.</summary>
      <returns>Operación.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>Representa el método que controlará los eventos <see cref="T:System.Windows.Threading.DispatcherHooks" /> relacionados.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Datos del evento.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>Proporciona información de eventos adicional sobre el procesamiento de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>Se produce cuando el distribuidor no tiene más operaciones que procesar.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>Tiene lugar cuando se anula una operación.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>Se produce cuando se completa una operación.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>Se produce cuando se expone una operación en el distribuidor.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>Se produce cuando se cambia la prioridad de una operación.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary>Tiene lugar cuando se invoca una operación.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>Representa un objeto asociado a <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>Determina si el subproceso de la llamada tiene acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <returns>
        <see langword="true" /> si el subproceso de la llamada tiene acceso a este objeto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>Exige que el subproceso de la llamada tenga acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <exception cref="T:System.InvalidOperationException">El subproceso de la llamada no tiene acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> al que está asociado <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <returns>El distribuidor.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>Representa un objeto que se usa para interactuar con una operación expuesta en la cola de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>Tiene lugar cuando se anula la operación.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>Se produce cuando se ha completado la operación.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>Anula la operación.</summary>
      <returns>
        <see langword="true" /> si se anuló la operación; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary>Devuelve un objeto que se notifica al finalizar la operación asincrónica.</summary>
      <returns>Un objeto al que se notifica al finalizar la operación asincrónica.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary>Inicia la operación adjuntada a este <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
      <returns>
        <see langword="null" /> en todos los casos.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>Espera a que se complete la operación.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> es igual a <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  Esto puede ocurrir al esperar a una operación que ya está en ejecución en el mismo subproceso.</exception>
      <returns>Estado de la operación.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>Espera a que la operación se complete en el período de tiempo especificado.</summary>
      <param name="timeout">Período máximo de tiempo que se espera.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> es igual a <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  Esto puede ocurrir al esperar a una operación que ya está en ejecución en el mismo subproceso.</exception>
      <returns>Estado de la operación.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> en el que se expuso la operación.</summary>
      <returns>El distribuidor.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>Obtiene o establece la prioridad de la operación en la cola de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>Prioridad del delegado en la cola.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>Obtiene el resultado de la operación después de haberse completado.</summary>
      <returns>Resultado de la operación o <see langword="null" /> si la operación no se ha completado.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>Obtiene el estado actual de la operación.</summary>
      <returns>Estado de la operación.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary>Obtiene un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa la operación actual.</summary>
      <returns>Objeto que representa la operación actual.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary>Representa un objeto que se usa para interactuar con una operación expuesta en la cola de <see cref="T:System.Windows.Threading.Dispatcher" /> y contiene un <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <typeparam name="TResult">Tipo devuelto por <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary>Devuelve un objeto que espera una operación asincrónica que devuelve un resultado.</summary>
      <returns>Un objeto que espera una operación asincrónica que devuelve un resultado.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary>Inicia la operación adjuntada a este <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
      <returns>Resultado de la operación.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary>Obtiene el resultado de la operación después de haberse completado.</summary>
      <returns>Resultado de la operación.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary>Obtiene un objeto <see cref="T:System.Threading.Tasks.Task`1" /> que representa la operación actual.</summary>
      <returns>Objeto que representa la operación actual.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>Representa un delegado que se utilizará para las operaciones de distribuidor.</summary>
      <param name="arg">Argumento pasado a la devolución de llamada.</param>
      <returns>Objeto devuelto por la devolución de llamada.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>Describe los valores posibles para el estado de <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>La operación se ha anulado.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>La operación se ha completado.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>La operación empezó a ejecutarse, pero no se ha completado.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>La operación está pendiente y todavía está en la cola de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>Describe las prioridades con las que se pueden invocar operaciones por medio de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>El valor de enumeración es 2. Las operaciones se procesan cuando la aplicación está inactiva.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>El valor de enumeración es 4. Las operaciones se procesan una vez completadas todas las demás operaciones no inactivas.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>El valor de enumeración es 3. Las operaciones se procesan cuando las operaciones en segundo plano se han completado.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>El valor de enumeración es 8. Las operaciones se procesan con la misma prioridad que el enlace de datos.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>El valor de enumeración es 0. No se procesan las operaciones.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>El valor de enumeración es 5. Las operaciones se procesan con la misma prioridad que la entrada.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>El valor de enumeración es -1. Ésta es una prioridad no válida.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>El valor de enumeración es 6. Las operaciones se procesan cuando el diseño y la representación han finalizado, pero justo antes de atender a los elementos que tienen la prioridad de entrada. Esto se usa específicamente al provocar el evento Loaded.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>El valor de enumeración es 9. Las operaciones se procesan con la prioridad normal. Ésta es la prioridad de la aplicación típica.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>El valor de enumeración es 7. Las operaciones se procesan con la misma prioridad que la representación.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>El valor de enumeración es 10. Las operaciones se procesan antes que otras operaciones asincrónicas. Ésta es la prioridad máxima.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>El valor de enumeración es 1. Las operaciones se procesan cuando el sistema está inactivo.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary>Representa un objeto que admite await que devuelve el control de forma asincrónica al distribuidor actual y proporciona una oportunidad para que el distribuidor procese otros eventos.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary>Devuelve un objeto que espera la finalización de una tarea asincrónica.</summary>
      <returns>Objeto que espera la finalización de una tarea asincrónica.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary>Representa un objeto que espera la finalización de una tarea asincrónica.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary>Finaliza la espera para la finalización de la tarea asincrónica.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary>Establece la acción que se va a realizar cuando el objeto <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> detiene la espera de la tarea asincrónica a completar.</summary>
      <param name="continuation">La acción para realizar cuando se completa la operación de espera.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary>Obtiene un valor que indica si se ha completado la tarea asincrónica.</summary>
      <returns>
        <see langword="false" /> en todos los casos.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>Representa el distribuidor cuando está en un estado deshabilitado y proporciona un medio para volver a habilitar el procesamiento del distribuidor.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>Vuelve a habilitar el procesamiento del distribuidor.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> especificado es igual a este objeto <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />.</summary>
      <param name="obj">Objeto cuya igualdad se va a evaluar.</param>
      <returns>
        <see langword="true" /> si el objeto especificado es igual a este objeto <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>Obtiene un código hash para esta instancia.</summary>
      <returns>Código hash entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determina si los dos objetos <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> son iguales.</summary>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los objetos <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determina si dos objetos <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> no son iguales.</summary>
      <param name="left">Primer objeto que se va a comparar.</param>
      <param name="right">Segundo objeto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los objetos <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> no son iguales; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>Proporciona un contexto de sincronización de Windows Presentation Foundation (WPF).</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> usando el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> actual.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> utilizando el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> especificado.</summary>
      <param name="dispatcher">
        <see cref="T:System.Windows.Threading.Dispatcher" /> al que se va a asociar <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> utilizando el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> especificado.</summary>
      <param name="dispatcher">
        <see cref="T:System.Windows.Threading.Dispatcher" /> al que se va a asociar <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</param>
      <param name="priority">Prioridad usada para enviar y exponer métodos de devolución de llamada.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>Crea una copia de <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</summary>
      <returns>Copia de este contexto de sincronización.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invoca de forma asincrónica la devolución de llamada en el contexto de sincronización.</summary>
      <param name="d">Delegado al que se va a llamar.</param>
      <param name="state">Objeto que se ha pasado al delegado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invoca de forma sincrónica la devolución de llamada en el contexto de sincronización.</summary>
      <param name="d">Delegado al que se va a llamar.</param>
      <param name="state">Objeto que se ha pasado al delegado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Espera a que cualquiera o la totalidad de los elementos de la matriz especificada reciban una señal.</summary>
      <param name="waitHandles">Matriz que contiene los identificadores del sistema operativo nativo.</param>
      <param name="waitAll">Es <see langword="true" /> para que se espere a todos los identificadores; es <see langword="false" /> para que se espere a cualquiera de ellos.</param>
      <param name="millisecondsTimeout">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</param>
      <returns>Índice de la matriz del objeto que satisfizo la espera.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>Temporizador integrado en la cola de <see cref="T:System.Windows.Threading.Dispatcher" /> que se procesa en un intervalo de tiempo especificado con una prioridad especificada.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>Se produce cuando ha transcurrido el intervalo del temporizador.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" /> que usa el intervalo de tiempo, prioridad, controlador de eventos y <see cref="T:System.Windows.Threading.Dispatcher" /> especificados.</summary>
      <param name="interval">Período de tiempo entre los pasos.</param>
      <param name="priority">Prioridad con la que se invoca el temporizador.</param>
      <param name="callback">Controlador de eventos al que se llama cuando se produce el evento <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" />.</param>
      <param name="dispatcher">Distribuidor al que está asociado el temporizador.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> es <see langword="null" />.

o bien

<paramref name="dispatcher" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> es menor que 0 o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" /> que procesa los eventos del temporizador con la prioridad especificada.</summary>
      <param name="priority">Prioridad con la que se invoca el temporizador.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" /> que se ejecuta en el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> especificado con la prioridad especificada.</summary>
      <param name="priority">Prioridad con la que se invoca el temporizador.</param>
      <param name="dispatcher">Distribuidor al que está asociado el temporizador.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>Inicia <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>Detiene <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> asociado a <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
      <returns>El distribuidor.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>Obtiene o establece el período de tiempo entre los pasos del temporizador.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> es menor que 0 o mayor que <see cref="F:System.Int32.MaxValue" /> milisegundos.</exception>
      <returns>Período de tiempo entre los pasos. El valor predeterminado es 00:00:00.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>Obtiene o establece un valor que indica si el temporizador está en ejecución.</summary>
      <returns>
        <see langword="true" /> si el temporizador está habilitado; en caso contrario, <see langword="false" />.  De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>Obtiene o establece un objeto de datos definido por el usuario.</summary>
      <returns>Los datos definidos por el usuario.  De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>Obtiene la excepción que se provocó al ejecutar el código por medio del distribuidor.</summary>
      <returns>Excepción.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>Obtiene o establece si se ha controlado el evento de la excepción.</summary>
      <returns>
        <see langword="true" /> si se controló la excepción; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Datos del evento.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>Obtiene la excepción que se provocó al ejecutar el código por medio del distribuidor.</summary>
      <returns>Excepción.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>Obtiene o establece si se debe detectar la excepción y se debe llamar a los controladores de eventos.</summary>
      <returns>
        <see langword="true" /> si deben provocarse eventos <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />; en caso contrario, <see langword="false" />.  El valor predeterminado es <see langword="true" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Datos del evento.</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>Representa un método que se utiliza como una devolución de llamada que valida el valor efectivo de una propiedad de dependencia.</summary>
      <param name="value">Valor que se va a validar.</param>
      <returns>Es <see langword="true" /> si se validó el valor; es <see langword="false" /> si el valor enviado no era válido.</returns>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>Representa un desplazamiento en el espacio 2D.</summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Vector" />.</summary>
      <param name="x">Desplazamiento de la propiedad <see cref="P:System.Windows.Vector.X" /> del nuevo objeto <see cref="T:System.Windows.Vector" />.</param>
      <param name="y">Desplazamiento de la propiedad <see cref="P:System.Windows.Vector.Y" /> del nuevo objeto <see cref="T:System.Windows.Vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>Traslada el punto especificado por el vector especificado y devuelve el punto resultante.</summary>
      <param name="vector">Recorrido por el que se va a trasladar el punto especificado.</param>
      <param name="point">Punto que se va a trasladar.</param>
      <returns>Resultado de trasladar <paramref name="point" /> por <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>Suma dos vectores y devuelve el resultado como estructura <see cref="T:System.Windows.Vector" />.</summary>
      <param name="vector1">Primer vector que se va a agregar.</param>
      <param name="vector2">Segundo vector que se va a agregar.</param>
      <returns>La suma de <paramref name="vector1" /> y <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>Recupera el ángulo, expresado en grados, entre los dos vectores especificados.</summary>
      <param name="vector1">Primer vector que se va a evaluar.</param>
      <param name="vector2">Segundo vector que se va a evaluar.</param>
      <returns>El ángulo, en grados, entre <paramref name="vector1" /> y <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calcula el producto vectorial de dos vectores.</summary>
      <param name="vector1">Primer vector que se va a evaluar.</param>
      <param name="vector2">Segundo vector que se va a evaluar.</param>
      <returns>Producto vectorial de <paramref name="vector1" /> y <paramref name="vector2" />. La fórmula siguiente se usa para calcular este producto: 
 <c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calcula el factor determinante de dos vectores.</summary>
      <param name="vector1">Primer vector que se va a evaluar.</param>
      <param name="vector2">Segundo vector que se va a evaluar.</param>
      <returns>Factor determinante de <paramref name="vector1" /> y <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>Divide el vector especificado por el valor escalar especificado y devuelve el resultado como <see cref="T:System.Windows.Vector" />.</summary>
      <param name="vector">Estructura vectorial que se va a dividir.</param>
      <param name="scalar">Cantidad por la que se divide <paramref name="vector" />.</param>
      <returns>Resultado de dividir <paramref name="vector" /> entre <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>Determina si el objeto <see cref="T:System.Object" /> especificado es una estructura <see cref="T:System.Windows.Vector" /> y, en caso de que lo sea, si tiene los mismos valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que este vector.</summary>
      <param name="o">Vector que se va comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="o" /> es <see cref="T:System.Windows.Vector" /> y tiene los mismos valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que este vector; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary>Compara la igualdad de dos vectores.</summary>
      <param name="value">Vector con el que se va a comparar este vector.</param>
      <returns>Es <see langword="true" /> si <paramref name="value" /> tiene los mismos valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que este vector; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compara la igualdad de los dos vectores especificados.</summary>
      <param name="vector1">Primer vector que se va a comparar.</param>
      <param name="vector2">Segundo vector que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los componentes de <see cref="P:System.Windows.Vector.X" /> y <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> y <paramref name="vector2" /> son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>Devuelve el código hash de este vector.</summary>
      <returns>Código hash de esta instancia.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary>Multiplica el valor escalar especificado por el vector especificado y devuelve el objeto <see cref="T:System.Windows.Vector" /> resultante.</summary>
      <param name="scalar">Valor escalar que se va a multiplicar.</param>
      <param name="vector">Vector que se va a multiplicar.</param>
      <returns>Resultado de multiplicar <paramref name="scalar" /> y <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary>Multiplica el vector especificado por el valor escalar especificado y devuelve el objeto <see cref="T:System.Windows.Vector" /> resultante.</summary>
      <param name="vector">Vector que se va a multiplicar.</param>
      <param name="scalar">Valor escalar que se va a multiplicar.</param>
      <returns>Resultado de multiplicar <paramref name="vector" /> y <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>Transforma el espacio de la coordenada del vector especificado mediante el objeto <see cref="T:System.Windows.Media.Matrix" /> especificado.</summary>
      <param name="vector">Estructura vectorial que se va a transformar.</param>
      <param name="matrix">Transformación que se va a aplicar a <paramref name="vector" />.</param>
      <returns>Resultado de transformar <paramref name="vector" /> por <paramref name="matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calcula el producto escalar de los dos vectores especificados y devuelve el resultado como <see cref="T:System.Double" />.</summary>
      <param name="vector1">Primer vector que se va a multiplicar.</param>
      <param name="vector2">Segunda estructura vectorial que se va a multiplicar.</param>
      <returns>
        <see cref="T:System.Double" /> que contiene el producto de los vectores escalares <paramref name="vector1" /> y <paramref name="vector2" />, que se calcula con la fórmula siguiente: 
 <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>Niega este vector. El vector tiene la misma magnitud que antes, pero ahora su dirección es la contraria.</summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary>Normaliza este vector.</summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary>Traslada un punto mediante el vector especificado y devuelve el punto resultante.</summary>
      <param name="vector">Vector usado para trasladar <paramref name="point" />.</param>
      <param name="point">Punto que se va a trasladar.</param>
      <returns>Resultado de trasladar <paramref name="point" /> por <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>Suma dos vectores y devuelve el resultado como vector.</summary>
      <param name="vector1">Primer vector que se va a agregar.</param>
      <param name="vector2">Segundo vector que se va a agregar.</param>
      <returns>La suma de <paramref name="vector1" /> y <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary>Divide el vector escalar especificado por el valor especificado y devuelve el vector resultante.</summary>
      <param name="vector">Vector que se va a dividir.</param>
      <param name="scalar">Valor escalar por el que se dividirá el parámetro <paramref name="vector" />.</param>
      <returns>Resultado de dividir <paramref name="vector" /> entre <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compara la igualdad de dos vectores.</summary>
      <param name="vector1">Primer vector que se va a comparar.</param>
      <param name="vector2">Segundo vector que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los componentes <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> y <paramref name="vector2" /> son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>Crea <see cref="T:System.Windows.Point" /> con los valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de este vector.</summary>
      <param name="vector">Vector que se va a convertir.</param>
      <returns>Punto con los valores de las coordenadas <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> iguales a los valores de desplazamiento de <paramref name="vector" /> de <see cref="P:System.Windows.Vector.X" /> y <see cref="P:System.Windows.Vector.Y" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>Crea <see cref="T:System.Windows.Size" /> a partir de los desplazamientos de este vector.</summary>
      <param name="vector">Vector que se va a convertir.</param>
      <returns>Objeto <see cref="T:System.Windows.Size" /> con una propiedad <see cref="P:System.Windows.Size.Width" /> igual al valor absoluto de la propiedad <see cref="P:System.Windows.Vector.X" /> de este vector y <see cref="P:System.Windows.Size.Height" /> igual al valor absoluto de la propiedad <see cref="P:System.Windows.Vector.Y" /> de este vector.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compara la desigualdad de dos vectores.</summary>
      <param name="vector1">Primer vector que se va a comparar.</param>
      <param name="vector2">Segundo vector que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los componentes de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> y <paramref name="vector2" /> son distintos; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary>Multiplica el valor escalar especificado por el vector especificado y devuelve el vector resultante.</summary>
      <param name="scalar">Valor escalar que se va a multiplicar.</param>
      <param name="vector">Vector que se va a multiplicar.</param>
      <returns>Resultado de multiplicar <paramref name="scalar" /> y <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>Multiplica el vector especificado por el valor escalar especificado y devuelve el vector resultante.</summary>
      <param name="vector">Vector que se va a multiplicar.</param>
      <param name="scalar">Valor escalar que se va a multiplicar.</param>
      <returns>Resultado de multiplicar <paramref name="vector" /> y <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>Transforma el espacio de la coordenada del vector especificado mediante el objeto <see cref="T:System.Windows.Media.Matrix" /> especificado.</summary>
      <param name="vector">Vector que se va a transformar.</param>
      <param name="matrix">Transformación que se va a aplicar a <paramref name="vector" />.</param>
      <returns>Resultado de transformar <paramref name="vector" /> por <paramref name="matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calcula el producto escalar de las dos estructuras vectoriales especificadas y devuelve el resultado como <see cref="T:System.Double" />.</summary>
      <param name="vector1">Primer vector que se va a multiplicar.</param>
      <param name="vector2">Segundo vector que se va a multiplicar.</param>
      <returns>Devuelve <see cref="T:System.Double" /> que contiene el producto de los vectores escalares <paramref name="vector1" /> y <paramref name="vector2" />, que se calcula con la fórmula siguiente: 
 <c>vector1. X * vector2. X + vector1. Y * vector2. Sí</c></returns>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>Resta un vector especificado de otro.</summary>
      <param name="vector1">Vector del que se resta <paramref name="vector2" />.</param>
      <param name="vector2">Vector que se resta de <paramref name="vector1" />.</param>
      <returns>Diferencia entre <paramref name="vector1" /> y <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>Convierte en negativo el vector especificado.</summary>
      <param name="vector">Vector que se va a convertir en negativo.</param>
      <returns>Vector con los valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> opuestos a los valores de <see cref="P:System.Windows.Vector.X" /> y <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>Convierte una representación de cadena en la estructura <see cref="T:System.Windows.Vector" /> equivalente.</summary>
      <param name="source">Representación de cadena del vector.</param>
      <returns>Estructura <see cref="T:System.Windows.Vector" /> equivalente.</returns>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>Resta un vector especificado de otro vector especificado.</summary>
      <param name="vector1">Vector del que se resta <paramref name="vector2" />.</param>
      <param name="vector2">Vector que se resta de <paramref name="vector1" />.</param>
      <returns>Diferencia entre <paramref name="vector1" /> y <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Este miembro es compatible con la infraestructura de Windows Presentation Foundation (WPF) y no está diseñado para utilizarse directamente desde el código. Para obtener una descripción de este miembro, vea <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <param name="format">Cadena que especifica el formato que se va a utilizar.  
  
o bien 
 <see langword="null" /> para utilizar el formato predeterminado que se define para el tipo de la implementación de <see cref="T:System.IFormattable" />.</param>
      <param name="provider">
        <see langword="IFormatProvider" /> que se va a utilizar para dar formato al valor.  
  
o bien 
 <see langword="null" /> para obtener la información de formato para valores numéricos de la configuración regional actual del sistema operativo.</param>
      <returns>Cadena que contiene el valor de la instancia actual con el formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>Devuelve la representación de cadena de esta estructura <see cref="T:System.Windows.Vector" />.</summary>
      <returns>Cadena que representa los valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>Devuelve la representación de cadena de esta estructura <see cref="T:System.Windows.Vector" /> con la información de formato especificada.</summary>
      <param name="provider">Información de formato específica de la referencia cultural.</param>
      <returns>Cadena que representa los valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>Obtiene la longitud de este vector.</summary>
      <returns>Longitud de este vector.</returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>Obtiene el cuadrado de la longitud de este vector.</summary>
      <returns>Cuadrado de <see cref="P:System.Windows.Vector.Length" /> de este vector.</returns>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>Obtiene o establece el componente de <see cref="P:System.Windows.Vector.X" /> de este vector.</summary>
      <returns>Componente de <see cref="P:System.Windows.Vector.X" /> de este vector. El valor predeterminado es 0.</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>Obtiene o establece el componente de <see cref="P:System.Windows.Vector.Y" /> de este vector.</summary>
      <returns>Componente de <see cref="P:System.Windows.Vector.Y" /> de este vector. El valor predeterminado es 0.</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary>Convierte instancias de otros tipos en una colección <see cref="T:System.Windows.Vector" /> y viceversa.</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Indica si un objeto se puede convertir de un tipo especificado en una instancia de <see cref="T:System.Windows.Vector" />.</summary>
      <param name="context">Describe la información de contexto de un tipo.</param>
      <param name="sourceType">Objeto <see cref="T:System.Type" /> de origen que se consulta para la compatibilidad de conversión.</param>
      <returns>Es <see langword="true" /> si los objetos del tipo especificado se puede convertir en un objeto <see cref="T:System.Windows.Vector" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina si las instancias de <see cref="T:System.Windows.Vector" /> se pueden convertir al tipo especificado.</summary>
      <param name="context">Describe la información de contexto de un tipo.</param>
      <param name="destinationType">Tipo deseado de este <see cref="T:System.Windows.Vector" /> que se está evaluando para la conversión.</param>
      <returns>Es <see langword="true" /> si se pueden convertir las instancias de <see cref="T:System.Windows.Vector" /> en <paramref name="destinationType" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto especificado en un tipo de datos <see cref="T:System.Windows.Vector" />.</summary>
      <param name="context">Describe la información de contexto de un tipo.</param>
      <param name="culture">Describe el objeto <see cref="T:System.Globalization.CultureInfo" /> del tipo que se va a convertir.</param>
      <param name="value">Objeto que se convertirá.</param>
      <returns>Objeto <see cref="T:System.Windows.Vector" /> creado a partir de la conversión de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte la instancia especificada de <see cref="T:System.Windows.Vector" /> en el tipo especificado.</summary>
      <param name="context">Describe la información de contexto de un tipo.</param>
      <param name="culture">Describe el objeto <see cref="T:System.Globalization.CultureInfo" /> del tipo que se va a convertir.</param>
      <param name="value">Valor <see cref="T:System.Windows.Vector" /> que se va a convertir.</param>
      <param name="destinationType">Tipo en el que convertir <see cref="T:System.Windows.Vector" />.</param>
      <returns>Objeto que se crea a partir de la conversión de esta instancia de <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>Proporciona una clase base para el administrador de eventos que se usa en el modelo de evento débil. El administrador agrega y quita los agentes de escucha para los eventos (o las devoluciones de llamada) que también usan el modelo.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>Inicializa los valores de la clase base cuando el constructor de una clase derivada los usa como inicializador.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>Entrega el evento que se administra a cada agente de escucha.</summary>
      <param name="sender">Objeto en el que se administra el evento.</param>
      <param name="args">
        <see cref="T:System.EventArgs" /> que contiene los datos que el evento va a entregar.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>Entrega el evento que se administra a cada agente de escucha en la lista proporcionada.</summary>
      <param name="sender">Objeto en el que se administra el evento.</param>
      <param name="args">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
      <param name="list">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> proporcionado.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>Devuelve la implementación de <see cref="T:System.Windows.WeakEventManager" /> que se usa para el tipo proporcionado.</summary>
      <param name="managerType">Tipo para el que se obtiene <see cref="T:System.Windows.WeakEventManager" />.</param>
      <returns>Implementación de <see cref="T:System.Windows.WeakEventManager" /> correspondiente.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary>Devuelve un nuevo objeto para contener agentes de escucha para un evento.</summary>
      <returns>Nuevo objeto para contener agentes de escucha para un evento.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary>Agrega el delegado especificado como controlador de eventos del origen especificado.</summary>
      <param name="source">El objeto de origen al que el delegado de controlador se suscribe.</param>
      <param name="handler">Delegado que controla el evento generado por <paramref name="source" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Agrega el agente de escucha proporcionado al origen proporcionado para el evento que se administra.</summary>
      <param name="source">Origen al que se asocian los agentes de escucha.</param>
      <param name="listener">Clase que realiza las escuchas (que debe implementar <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary>Quita el controlador agregado anteriormente del origen especificado.</summary>
      <param name="source">Origen del que se va a quitar el controlador.</param>
      <param name="handler">Delegado que se va a quitar de <paramref name="source" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Quita un agente de escucha previamente agregado del origen proporcionado.</summary>
      <param name="source">Origen del que se quitan los agentes de escucha.</param>
      <param name="listener">Clase que realiza las escuchas (que debe implementar <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Quita las entradas del agente de escucha inactivas de la lista de datos para el origen proporcionado. Devuelve <see langword="true" /> si se quitaron realmente algunas entradas de la lista.</summary>
      <param name="source">Origen de los eventos que se escuchan.</param>
      <param name="data">Datos que se van a comprobar. Se espera que este objeto sea una implementación de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
      <param name="purgeAll">Es <see langword="true" /> para dejar de escuchar a <paramref name="source" /> y quitar completamente todas las entradas de <paramref name="data" />.</param>
      <returns>
        <see langword="true" /> si se han quitado realmente algunas entradas; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>Quita todos los agentes de escucha del origen especificado.</summary>
      <param name="source">Origen del que se quita la información del agente de escucha.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>Solicita que se realice una purga de entradas no usadas en la lista de agentes de escucha subyacente en un subproceso de menor prioridad.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>Establece el administrador actual para el tipo de administrador especificado.</summary>
      <param name="managerType">Tipo en el que se establece el nuevo administrador de eventos.</param>
      <param name="manager">Nuevo administrador del evento.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>Cuando se invalida en una clase derivada, inicia la escucha para el evento que se administra. Después de llamar al método <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> por primera vez, el administrador debe estar en el estado de llamar a <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> o <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> cada vez que se administre el evento pertinente del origen proporcionado.</summary>
      <param name="source">Origen en el que se empiezan a realizar escuchas.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>Cuando se invalida en una clase derivada, deja de realizar escuchas en el origen proporcionado para el evento que se administra.</summary>
      <param name="source">Origen en el que se dejan de realizar escuchas.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>Obtiene o establece los datos que se almacenan para el origen especificado.</summary>
      <param name="source">Índice de base cero del origen solicitado.</param>
      <returns>Datos que almacena el administrador para este origen.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>Establece un bloqueo de lectura en la tabla de datos subyacente y devuelve <see cref="T:System.IDisposable" />.</summary>
      <returns>Objeto que puede usarse para establecer un bloqueo en los miembros de la tabla de datos y, a continuación, eliminarse correctamente con una construcción <see langword="using" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>Establece un bloqueo de escritura en la tabla de datos subyacente y devuelve <see cref="T:System.IDisposable" />.</summary>
      <returns>Objeto que puede usarse para establecer un bloqueo en los miembros de la tabla de datos y, a continuación, eliminarse correctamente con una construcción <see langword="using" />.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>Proporciona una lista de colecciones integrada para almacenar los agentes de escucha de <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.WeakEventManager.ListenerList" /> con la capacidad inicial especificada.</summary>
      <param name="capacity">Número de elementos que se deben asignar en la lista inicial.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>Agrega un objeto <see cref="T:System.Windows.IWeakEventListener" /> a la clase <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="listener">Elemento del agente de escucha que se agrega a <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary>Agrega un controlador de eventos al <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="handler">Controlador de eventos que se va a agregar al <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>Declara la lista para que esté en uso. Esto evita los cambios directos a la lista durante las iteraciones de los elementos de lista.</summary>
      <returns>
        <see langword="true" /> si se declaró que la lista ya está en uso; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>Crea un clon modificable de esta <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <returns>Clon modificable del objeto actual.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary>Copia el valor <see cref="T:System.Windows.WeakEventManager.ListenerList" /> actual especificado al <see cref="T:System.Windows.WeakEventManager.ListenerList" /> especificado.</summary>
      <param name="newList">El objeto en el que se copia.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>Entrega el evento que se administra a cada agente de escucha en el <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="sender">El objeto que ha generado el evento.</param>
      <param name="args">Objeto que contiene los datos del evento.</param>
      <param name="managerType">Tipo de la clase <see cref="T:System.Windows.WeakEventManager" /> que llama a este método.</param>
      <returns>
        <see langword="true" /> si cualquiera de los agentes de escucha de <see cref="T:System.Windows.WeakEventManager.ListenerList" /> hace referencia a un objeto cuyos elementos no utilizados se han recolectado; si no, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>Desbloquea el estado bloqueado iniciado por <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>Comprueba si la lista proporcionada está en uso y, en tal caso, establece el parámetro de referencia de la lista en una copia de esa lista, no en el original.</summary>
      <param name="list">Lista en la que se comprueba el estado de uso y, posiblemente, la copia.</param>
      <returns>
        <see langword="true" /> si la lista proporcionada estaba en uso en el momento de la llamada y, por consiguiente, la referencia del parámetro <paramref name="list" /> se restableció como una copia. <see langword="false" /> si la lista proporcionada no estaba en uso, en cuyo caso la referencia del parámetro <paramref name="list" /> se mantiene sin cambios.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>Quita todas las entradas de la lista en las que el destino de la referencia subyacente es una referencia nula.</summary>
      <returns>Devuelve <see langword="true" /> si se purgó cualquier entrada; de lo contrario, devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>Quita la primera aparición de un elemento de agente de escucha de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="listener">Elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary>Quita un controlador de eventos de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="handler">Controlador de eventos se va a quitar del <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>Obtiene el número de elementos contenidos en <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <returns>Número de elementos contenidos en <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>Obtiene un valor que representa una lista vacía para fines de comparación.</summary>
      <returns>Representación de la lista vacía.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>Obtiene un valor que declara si este objeto <see cref="T:System.Windows.WeakEventManager.ListenerList" /> está vacío.</summary>
      <returns>
        <see langword="true" /> si la lista está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>Obtiene o establece un elemento de agente de escucha concreto en <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="index">Índice de base cero del agente de escucha en la lista.</param>
      <returns>El elemento que está en ese índice o una referencia nula si no hay ningún elemento en ese índice.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary>Proporciona una lista de colecciones de seguridad de tipos para almacenar los agentes de escucha de <see cref="T:System.Windows.WeakEventManager" />. Esta clase define un parámetro de tipo para los datos de eventos que se usan.</summary>
      <typeparam name="TEventArgs">Tipo que contiene los datos de eventos.</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.WeakEventManager.ListenerList`1" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> con la capacidad inicial especificada.</summary>
      <param name="capacity">Número de elementos que se deben asignar en la lista inicial.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary>Crea un clon modificable de este objeto <see cref="T:System.Windows.WeakEventManager.ListenerList" /> y hace copias en profundidad de los valores.</summary>
      <returns>Clon modificable del objeto actual. La propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del objeto clonado es <see langword="false" /> aunque la propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del origen sea <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>Entrega el evento que se administra a cada agente de escucha en el <see cref="T:System.Windows.WeakEventManager.ListenerList`1" />.</summary>
      <param name="sender">El objeto que ha generado el evento.</param>
      <param name="e">Objeto que contiene los datos del evento.</param>
      <param name="managerType">Tipo de la clase <see cref="T:System.Windows.WeakEventManager" /> que llama a este método.</param>
      <returns>
        <see langword="true" /> si cualquiera de los agentes de escucha de <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> hace referencia a un objeto cuyos elementos no utilizados se han recolectado; si no, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary>Proporciona un <see cref="T:System.Windows.WeakEventManager" /> con seguridad de tipos que permite especificar el controlador de eventos que se va a usar para el modelo de “agente de escucha de evento débil”. Esta clase define un parámetro de tipo para el origen del evento y un parámetro de tipo para los datos de eventos que se usan.</summary>
      <typeparam name="TEventSource">Tipo que genera el evento.</typeparam>
      <typeparam name="TEventArgs">Tipo que contiene los datos de eventos.</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary>Agrega el controlador de eventos especificado al evento especificado.</summary>
      <param name="source">Objeto de origen que provoca el evento especificado.</param>
      <param name="eventName">Nombre del evento para la suscripción.</param>
      <param name="handler">Delegado que controla el evento.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary>Devuelve un nuevo objeto para contener agentes de escucha para un evento.</summary>
      <returns>Nuevo objeto para contener agentes de escucha para un evento.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary>Quita el controlador de eventos especificado del evento indicado.</summary>
      <param name="source">Objeto de origen que provoca el evento especificado.</param>
      <param name="eventName">Nombre del evento que se va a eliminar del controlador.</param>
      <param name="handler">Delegado que se va a quitar.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary>Inicia la escucha del evento en el objeto especificado.</summary>
      <param name="source">Objeto que genera el evento.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary>Detiene la escucha del evento en el objeto especificado.</summary>
      <param name="source">Objeto que genera el evento.</param>
    </member>
  </members>
</doc>
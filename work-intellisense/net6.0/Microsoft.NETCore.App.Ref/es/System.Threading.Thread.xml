<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.LocalDataStoreSlot">
      <summary>Encapsula una ranura de memoria para almacenar datos locales. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>Se asegura de que los recursos se liberan y que se llevan a cabo otras operaciones de limpieza cuando el recolector de elementos no utilizados recupere el objeto <see cref="T:System.LocalDataStoreSlot" />.</summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>Especifica el estado de apartamento de un <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>
        <see cref="T:System.Threading.Thread" /> creará y entrará en un apartamento multiproceso.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>
        <see cref="T:System.Threading.Thread" /> creará y entrará en un contenedor uniproceso.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>No se ha establecido el valor de la propiedad <see cref="P:System.Threading.Thread.ApartmentState" />.</summary>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>Proporciona métodos para la configuración y captura de la pila comprimida en el subproceso actual. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>Captura la pila comprimida del subproceso actual.</summary>
      <returns>Un objeto <see cref="T:System.Threading.CompressedStack" />.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>Crea una copia de la pila comprimida actual.</summary>
      <returns>Objeto <see cref="T:System.Threading.CompressedStack" /> que representa la pila comprimida actual.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>Obtiene la pila comprimida del subproceso actual.</summary>
      <exception cref="T:System.Security.SecurityException">Un llamador de la cadena de llamadas no tiene permiso para obtener acceso al código no administrado.  
  
o bien 
La solicitud de <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> no se ha realizado correctamente.</exception>
      <returns>
        <see cref="T:System.Threading.CompressedStack" /> del subproceso actual.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Establece el objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con la información de contexto lógica que se necesita para volver a crear una instancia de este contexto de ejecución.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se debe llenar con información de serialización.</param>
      <param name="context">Estructura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que representa el contexto de destino de la serialización.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>Ejecuta un método en la pila comprimida especificada del subproceso actual.</summary>
      <param name="compressedStack">Objeto <see cref="T:System.Threading.CompressedStack" /> que se va a establecer.</param>
      <param name="callback">
        <see cref="T:System.Threading.ContextCallback" /> que representa el método que se va a ejecutar en el contexto de seguridad especificado.</param>
      <param name="state">Objeto que se pasa al método de devolución de llamada.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>Representa el método que se ejecuta en <see cref="T:System.Threading.Thread" />.</summary>
      <param name="obj">Objeto que contiene datos para el procedimiento de subproceso.</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>Crea y controla un subproceso, establece su prioridad y obtiene su estado.</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" />, especificando un delegado que permite pasar un objeto al subproceso cuando este último se inicia.</summary>
      <param name="start">Delegado que representa los métodos que deben invocarse cuando empieza a ejecutarse este subproceso.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" /> y, para ello, especifica un delegado que permite pasar un objeto al subproceso cuando este último se inicia; además, especifica el tamaño de pila máximo para el subproceso.</summary>
      <param name="start">Delegado <see cref="T:System.Threading.ParameterizedThreadStart" /> que representa los métodos que deben invocarse cuando empieza a ejecutarse este subproceso.</param>
      <param name="maxStackSize">Tamaño de pila máximo, en bytes, que va a usar el subproceso, o 0 para usar el tamaño de pila máximo predeterminado especificado en el encabezado del ejecutable.  
  
Importante   En el caso de código de confianza parcial, se pasa por alto <paramref name="maxStackSize" /> si es mayor que el tamaño de pila predeterminado. No se inicia ninguna excepción.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" />.</summary>
      <param name="start">Delegado <see cref="T:System.Threading.ThreadStart" /> que representa los métodos que deben invocarse cuando empieza a ejecutarse este subproceso.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="start" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Thread" />, especificando el tamaño de pila máximo para el subproceso.</summary>
      <param name="start">Delegado <see cref="T:System.Threading.ThreadStart" /> que representa los métodos que deben invocarse cuando empieza a ejecutarse este subproceso.</param>
      <param name="maxStackSize">Tamaño de pila máximo, en bytes, que va a usar el subproceso, o 0 para usar el tamaño de pila máximo predeterminado especificado en el encabezado del ejecutable.  
  
Importante   En el caso de código de confianza parcial, se pasa por alto <paramref name="maxStackSize" /> si es mayor que el tamaño de pila predeterminado. No se inicia ninguna excepción.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>Produce una excepción <see cref="T:System.Threading.ThreadAbortException" /> en el subproceso en el que se invoca, para iniciar el proceso de finalización del subproceso. Normalmente, una llamada a este método finaliza el subproceso.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 y versiones posteriores y .NET Core: en todos los casos.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Actualmente se suspende el subproceso que se está anulando.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>Produce una excepción <see cref="T:System.Threading.ThreadAbortException" /> en el subproceso en el que se invoca, para iniciar el proceso de finalización del subproceso, proporcionando al mismo tiempo información sobre excepciones relativa a la terminación del subproceso. Normalmente, una llamada a este método finaliza el subproceso.</summary>
      <param name="stateInfo">Objeto que contiene información específica de la aplicación como, por ejemplo, su estado, y que el subproceso anulado puede utilizar.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 y versiones posteriores y .NET Core: en todos los casos.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Actualmente se suspende el subproceso que se está anulando.</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>Asigna una ranura de datos sin nombre en todos los subprocesos. Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <returns>Ranura de datos con nombre asignada en todos los subprocesos.</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>Asigna una ranura de datos con nombre en todos los subprocesos. Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nombre de la ranura de datos que se va a asignar.</param>
      <exception cref="T:System.ArgumentException">Ya existe una ranura para datos con el nombre especificado</exception>
      <returns>Ranura de datos con nombre asignada en todos los subprocesos.</returns>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>Notifica a un host que la ejecución está a punto de entrar en una región del código donde los efectos de una anulación del subproceso o de una excepción no controlada podrían constituir un riesgo para otras tareas del dominio de aplicaciones.</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>Notifica a un host que el código administrado está a punto de ejecutar instrucciones que dependen de la identidad del subproceso del sistema operativo físico actual.</summary>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>Desactiva la limpieza automática de contenedores RCW (Runtime Callable Wrappers) para el subproceso actual.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>Notifica a un host que la ejecución está a punto de entrar en una región de código donde los efectos de una anulación del subproceso o de una excepción no controlada se limitan a la tarea actual.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>Notifica a un host que el código administrado ha terminado de ejecutar instrucciones que dependen de la identidad del subproceso del sistema operativo físico actual.</summary>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>Se asegura de que los recursos se liberan y que se llevan a cabo otras operaciones de limpieza cuando el recolector de elementos no utilizados recupere el objeto <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>Elimina la asociación entre un nombre y una ranura en todos los subprocesos del proceso. Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nombre de la ranura de datos que se va a liberar.</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>Devuelve un valor <see cref="T:System.Threading.ApartmentState" /> que indica el estado del apartamento.</summary>
      <returns>Uno de los valores de <see cref="T:System.Threading.ApartmentState" /> que indica el estado del apartamento del subproceso administrado. De manera predeterminada, es <see cref="F:System.Threading.ApartmentState.Unknown" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>Devuelve un objeto <see cref="T:System.Threading.CompressedStack" /> que se puede utilizar para capturar la pila correspondiente al subproceso actual.</summary>
      <exception cref="T:System.InvalidOperationException">En todos los casos.</exception>
      <returns>Ninguno.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCurrentProcessorId">
      <summary>Obtiene un identificador que se usa para indicar en qué procesador se ejecuta el subproceso actual.</summary>
      <returns>Entero que representa el identificador del procesador almacenado en caché.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>Recupera el valor de la ranura especificada en el subproceso actual, dentro del dominio actual del subproceso. Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="slot">La <see cref="T:System.LocalDataStoreSlot" /> de donde se va a obtener el valor.</param>
      <returns>El valor recuperado.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>Devuelve el dominio en el que se está ejecutando el subproceso actual.</summary>
      <returns>Un <see cref="T:System.AppDomain" /> que representa el dominio de la aplicación actual del subproceso en ejecución.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>Devuelve un identificador único del dominio de la aplicación.</summary>
      <returns>Entero de 32 bits con signo que identifica de forma unívoca el dominio de la aplicación.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>Devuelve un código hash para el subproceso actual.</summary>
      <returns>Valor de código hash entero.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>Busca una ranura de datos con nombre. Para mejorar el rendimiento, en su lugar use campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nombre de la ranura de datos local.</param>
      <returns>Una <see cref="T:System.LocalDataStoreSlot" /> asignada para este subproceso.</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>Interrumpe un subproceso que se encuentra en estado de subproceso <see cref="F:System.Threading.ThreadState.WaitSleepJoin" />.</summary>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no dispone del <see cref="T:System.Security.Permissions.SecurityPermission" /> adecuado</exception>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>Bloquea el subproceso de llamada hasta que el subproceso representado por esta instancia finaliza, pero continúa bombeando <see langword="SendMessage" /> y COM estándar.</summary>
      <exception cref="T:System.Threading.ThreadStateException">El autor de la llamada ha intentado combinar un subproceso que se encuentra en el estado <see cref="F:System.Threading.ThreadState.Unstarted" />.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">El subproceso se interrumpe mientras espera.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>Bloquea el subproceso de llamada hasta que el subproceso representado por esta instancia finaliza o transcurre el tiempo especificado, pero continúa bombeando SendMessage y COM estándar.</summary>
      <param name="millisecondsTimeout">Número de milisegundos durante los que se va a esperar a que el subproceso finalice.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="millisecondsTimeout" /> es negativo y no es igual a <see cref="F:System.Threading.Timeout.Infinite" /> en milisegundos.</exception>
      <exception cref="T:System.Threading.ThreadStateException">No se ha iniciado el subproceso.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="millisecondsTimeout" /> es menor que -1 (Timeout.Infinite).</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">El subproceso se ha interrumpido mientras se esperaba.</exception>
      <returns>
        <see langword="true" /> si el subproceso ha terminado; <see langword="false" /> si el subproceso no ha terminado una vez transcurrido el período de tiempo especificado por el parámetro <paramref name="millisecondsTimeout" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>Bloquea el subproceso de llamada hasta que el subproceso representado por esta instancia finaliza o transcurre el tiempo especificado, pero continúa bombeando SendMessage y COM estándar.</summary>
      <param name="timeout">Un <see cref="T:System.TimeSpan" /> establecido en el período de tiempo durante el que se esperará a que espere el subproceso.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="timeout" /> es negativo y no es igual a <see cref="F:System.Threading.Timeout.Infinite" /> en milisegundos, o es superior a <see cref="F:System.Int32.MaxValue" /> milisegundos.</exception>
      <exception cref="T:System.Threading.ThreadStateException">El autor de la llamada ha intentado combinar un subproceso que se encuentra en el estado <see cref="F:System.Threading.ThreadState.Unstarted" />.</exception>
      <returns>
        <see langword="true" /> si el subproceso ha terminado; <see langword="false" /> si el subproceso no ha terminado una vez transcurrido el período de tiempo especificado por el parámetro <paramref name="timeout" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>Sincroniza el acceso a la memoria de la siguiente forma: el procesador que ejecuta el subproceso actual no puede reordenar las instrucciones de forma que los accesos a la memoria anteriores a la llamada a <see cref="M:System.Threading.Thread.MemoryBarrier" /> se ejecuten después de los accesos a memoria que siguen a la llamada a <see cref="M:System.Threading.Thread.MemoryBarrier" />.</summary>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>Cancela un método <see cref="M:System.Threading.Thread.Abort(System.Object)" /> solicitado para el subproceso actual.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 y versiones posteriores y .NET Core: en todos los casos.</exception>
      <exception cref="T:System.Threading.ThreadStateException">
        <see langword="Abort" /> no se invocó en el subproceso actual.</exception>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no tiene el permiso de seguridad necesario para el subproceso actual.</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>Reanuda un subproceso que se ha suspendido.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 y versiones posteriores, y .NET Core: en todos los casos.</exception>
      <exception cref="T:System.Threading.ThreadStateException">El subproceso no se ha iniciado, está inactivo o no está en estado suspendido.</exception>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no dispone del <see cref="T:System.Security.Permissions.SecurityPermission" /> adecuado</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>Establece el estado del apartamento de un subproceso antes de iniciarse.</summary>
      <param name="state">Nuevo estado del apartamento.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 y versiones posteriores, y .NET Core: en todos los casos en macOS y Linux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> no es un estado del apartamento válido.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Ya se inició el subproceso.</exception>
      <exception cref="T:System.InvalidOperationException">El estado de apartamento ya se inicializó.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>Aplica un objeto <see cref="T:System.Threading.CompressedStack" /> capturado al subproceso actual.</summary>
      <param name="stack">Objeto <see cref="T:System.Threading.CompressedStack" /> que va a aplicarse al subproceso actual.</param>
      <exception cref="T:System.InvalidOperationException">En todos los casos.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>Establece los datos de la ranura especificada en el subproceso actualmente en ejecución, para el dominio actual de dicho subproceso. Para obtener un mejor rendimiento, utilice en su lugar los campos marcados con el atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="slot">La <see cref="T:System.LocalDataStoreSlot" /> donde se va a establecer el valor.</param>
      <param name="data">Valor que se va a establecer.</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>Suspende el subproceso actual durante el número de milisegundos especificado.</summary>
      <param name="millisecondsTimeout">Número de milisegundos durante los que el subproceso está suspendido. Si el valor del argumento <paramref name="millisecondsTimeout" /> es cero, el subproceso cede el resto de su porción de tiempo a cualquier subproceso de idéntica prioridad que está listo para ejecutarse. Si no hay ningún otro subproceso de igual prioridad que está listo para ejecutarse, no se suspende la ejecución del subproceso actual.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de tiempo de espera es negativo y no es igual a <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>Suspende el subproceso actual durante la cantidad de tiempo especificada.</summary>
      <param name="timeout">Cantidad de tiempo durante la que el subproceso está suspendido. Si el valor del argumento <paramref name="timeout" /> es <see cref="F:System.TimeSpan.Zero" />, el subproceso cede el resto de su porción de tiempo a cualquier subproceso de idéntica prioridad que está listo para ejecutarse. Si no hay ningún otro subproceso de igual prioridad que está listo para ejecutarse, no se suspende la ejecución del subproceso actual.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="timeout" /> es negativo y no es igual a <see cref="F:System.Threading.Timeout.Infinite" /> en milisegundos, o es superior a <see cref="F:System.Int32.MaxValue" /> milisegundos.</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>Hace que un subproceso espere el número de veces definido por el parámetro <paramref name="iterations" />.</summary>
      <param name="iterations">Entero de 32 bits con signo que define la cantidad de tiempo de espera de un subproceso.</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>Hace que el sistema operativo cambie el estado de la instancia actual a <see cref="F:System.Threading.ThreadState.Running" />.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Ya se inició el subproceso.</exception>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente iniciar este subproceso.</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>Hace que el sistema operativo cambie el estado de la instancia actual a <see cref="F:System.Threading.ThreadState.Running" />; también puede proporcionar un objeto que contiene datos para que los use el método ejecutado por el subproceso.</summary>
      <param name="parameter">Objeto que contiene datos para que los use el método ejecutado por el subproceso.</param>
      <exception cref="T:System.Threading.ThreadStateException">Ya se inició el subproceso.</exception>
      <exception cref="T:System.OutOfMemoryException">No hay memoria suficiente iniciar este subproceso.</exception>
      <exception cref="T:System.InvalidOperationException">Este subproceso se creó mediante un delegado <see cref="T:System.Threading.ThreadStart" /> en lugar de un delegado <see cref="T:System.Threading.ParameterizedThreadStart" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>Suspende el subproceso o, si este ya se ha suspendido, no tiene efecto alguno.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 y versiones posteriores, y .NET Core: en todos los casos.</exception>
      <exception cref="T:System.Threading.ThreadStateException">No se ha iniciado el subproceso o está inactivo</exception>
      <exception cref="T:System.Security.SecurityException">El autor de la llamada no dispone del <see cref="T:System.Security.Permissions.SecurityPermission" /> adecuado</exception>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>Establece el estado del apartamento de un subproceso antes de iniciarse.</summary>
      <param name="state">Nuevo estado del apartamento.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 y versiones posteriores, y .NET Core: en todos los casos en macOS y Linux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> no es un estado del apartamento válido.</exception>
      <exception cref="T:System.Threading.ThreadStateException">El subproceso se ha iniciado y se ha terminado, o bien la llamada no se está realizando desde el contexto del subproceso mientras se está ejecutando el subproceso.</exception>
      <returns>
        <see langword="true" /> si se ha establecido el estado del apartamento; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>Lee el valor de un campo. El valor es el último que haya escrito cualquier procesador de un equipo, independientemente del número de procesadores y del estado de la caché del procesador.</summary>
      <param name="address">Campo que se va a leer.</param>
      <returns>Último valor que ha escrito en el campo un procesador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>Escribe inmediatamente un valor en un campo, de manera que el valor sea visible para todos los procesadores del equipo.</summary>
      <param name="address">Campo en el que se escribirá el valor.</param>
      <param name="value">Valor que se va a escribir.</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>Hace que el subproceso que realiza la llamada ceda la ejecución a otro subproceso que está listo para ejecutarse en el procesador actual. El sistema operativo selecciona el subproceso al que se va a ceder la ejecución.</summary>
      <returns>Es <see langword="true" /> si el sistema operativo cambió la ejecución a otro subproceso; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>Obtiene o establece el estado de apartamento de este subproceso.</summary>
      <exception cref="T:System.ArgumentException">Se realiza un intento de establecer esta propiedad en un estado que no es un estado de contenedor válido (un estado distinto de contenedor uniproceso (<see langword="STA" />) o contenedor multiproceso (<see langword="MTA" />)).</exception>
      <returns>Uno de los valores de <see cref="T:System.Threading.ApartmentState" />. El valor inicial es <see langword="Unknown" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>Obtiene o establece la referencia cultural del subproceso actual.</summary>
      <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Solo .NET Core: no se admite la lectura o escritura de la referencia cultural de un subproceso desde otro subproceso.</exception>
      <returns>Objeto que representa la referencia cultural del subproceso actual.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>Obtiene o establece la entidad de seguridad actual del subproceso (de la seguridad basada en roles).</summary>
      <exception cref="T:System.Security.SecurityException">El autor de llamada no tiene el permiso necesario para establecer la entidad de seguridad.</exception>
      <returns>Valor de <see cref="T:System.Security.Principal.IPrincipal" /> que representa el contexto de seguridad.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>Obtiene el subproceso actualmente en ejecución.</summary>
      <returns>
        <see cref="T:System.Threading.Thread" /> que representa el subproceso actualmente en ejecución.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>Obtiene o establece la referencia cultural actual utilizada por el administrador de recursos para buscar recursos específicos de la referencia cultural en tiempo de ejecución.</summary>
      <exception cref="T:System.ArgumentNullException">La propiedad se establece en <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La propiedad se establece en un nombre de referencia cultural que no se puede usar para buscar un archivo de recursos. Los nombres de archivo de recursos deben incluir solo letras, números, guiones o caracteres de subrayado.</exception>
      <exception cref="T:System.InvalidOperationException">Solo .NET Core: no se admite la lectura o escritura de la referencia cultural de un subproceso desde otro subproceso.</exception>
      <returns>Objeto que representa la referencia cultural actual.</returns>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>Obtiene un objeto <see cref="T:System.Threading.ExecutionContext" /> que contiene información sobre los distintos contextos del subproceso actual.</summary>
      <returns>Objeto <see cref="T:System.Threading.ExecutionContext" /> que consolida la información de contexto del subproceso actual.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>Obtiene un valor que indica el estado de ejecución del subproceso actual.</summary>
      <returns>
        <see langword="true" /> si el subproceso se ha iniciado y no ha terminado con normalidad o se ha anulado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>Obtiene o establece un valor que indica si un subproceso es o no un subproceso en segundo plano.</summary>
      <exception cref="T:System.Threading.ThreadStateException">El proceso está inactivo.</exception>
      <returns>
        <see langword="true" /> si el subproceso es un subproceso en segundo plano o va a convertirse en un subproceso en segundo plano; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>Obtiene un valor que indica si un subproceso pertenece al grupo de subprocesos administrados o no.</summary>
      <returns>
        <see langword="true" /> si el subproceso pertenece al grupo de subprocesos administrados; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>Obtiene un identificador único para el actual subproceso administrado.</summary>
      <returns>Entero que representa un identificador único para este subproceso administrado.</returns>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>Obtiene o establece el nombre del subproceso.</summary>
      <exception cref="T:System.InvalidOperationException">Se solicitó una operación Set, pero ya se ha establecido la propiedad <see langword="Name" />.</exception>
      <returns>Cadena que contiene el nombre del subproceso o <see langword="null" /> si no se ha establecido ningún nombre.</returns>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>Obtiene o establece un valor que indica la prioridad de programación de un subproceso.</summary>
      <exception cref="T:System.Threading.ThreadStateException">El subproceso ha alcanzado un estado final, como <see cref="F:System.Threading.ThreadState.Aborted" />.</exception>
      <exception cref="T:System.ArgumentException">El valor especificado para un operación set no es un valor <see cref="T:System.Threading.ThreadPriority" /> válido.</exception>
      <returns>Uno de los valores de <see cref="T:System.Threading.ThreadPriority" />. El valor predeterminado es <see cref="F:System.Threading.ThreadPriority.Normal" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>Obtiene un valor que contiene los estados del subproceso actual.</summary>
      <returns>Uno de los valores de <see cref="T:System.Threading.ThreadState" /> que indica el estado del subproceso actual. El valor inicial es <see cref="F:System.Threading.ThreadState.Unstarted" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>Excepción que se produce cuando se realiza una llamada al método <see cref="M:System.Threading.Thread.Abort(System.Object)" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>Obtiene un objeto que contiene la información específica de la aplicación relacionada con la anulación del subproceso.</summary>
      <returns>Objeto que contiene la información específica de la aplicación.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.Windows.Forms.Application.ThreadException" />.</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadExceptionEventArgs" />.</summary>
      <param name="t">
        <see cref="T:System.Exception" /> que se ha producido.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>Obtiene la propiedad <see cref="T:System.Exception" /> que se ha producido.</summary>
      <returns>
        <see cref="T:System.Exception" /> que se ha producido.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.Windows.Forms.Application.ThreadException" /> de <see cref="T:System.Windows.Forms.Application" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.Threading.ThreadExceptionEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>Excepción que se produce cuando <see cref="T:System.Threading.Thread" /> se interrumpe mientras se encuentra en estado de espera.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadInterruptedException" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadInterruptedException" /> con datos serializados.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene los datos serializados del objeto que hacen referencia a la excepción que se va a producir.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene información contextual sobre el origen o el destino.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadInterruptedException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadInterruptedException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>Especifica la prioridad de programación de <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>
        <see cref="T:System.Threading.Thread" /> puede programarse después de los subprocesos con prioridad <see langword="Highest" /> y antes que los subprocesos con prioridad <see langword="Normal" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>
        <see cref="T:System.Threading.Thread" /> puede programarse después de los subprocesos con prioridad <see langword="Normal" /> y antes que los subprocesos con prioridad <see langword="Lowest" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>
        <see cref="T:System.Threading.Thread" /> puede programarse antes que los subprocesos que tengan cualquier otra prioridad.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>
        <see cref="T:System.Threading.Thread" /> puede programarse después de los subprocesos que tengan cualquier otra prioridad.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>
        <see cref="T:System.Threading.Thread" /> puede programarse después de los subprocesos con prioridad <see langword="AboveNormal" /> y antes que los subprocesos con prioridad <see langword="BelowNormal" />. Los subprocesos tienen prioridad <see langword="Normal" /> de forma predeterminada.</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>Representa el método que se ejecuta en <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>Excepción que se produce cuando se produce un error en un subproceso administrado después de que se haya iniciado el subproceso del sistema operativo subyacente, pero antes de que el subproceso esté listo para ejecutar el código de usuario.</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>Especifica los estados de ejecución de <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>El estado del subproceso incluye <see cref="F:System.Threading.ThreadState.AbortRequested" /> y el subproceso está ahora inactivo, pero su estado no ha cambiado todavía a <see cref="F:System.Threading.ThreadState.Stopped" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>Se ha invocado al método <see cref="M:System.Threading.Thread.Abort(System.Object)" /> en el subproceso, pero el subproceso aún no ha recibido la excepción <see cref="T:System.Threading.ThreadAbortException" /> pendiente que intentará finalizarlo.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>El subproceso está ejecutándose como subproceso en segundo plano, por oposición a un subproceso en primer plano. Para controlar este estado, hay que establecer la propiedad <see cref="P:System.Threading.Thread.IsBackground" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>El subproceso se ha iniciado y aún no se ha detenido.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>El subproceso se ha detenido.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>Se ha solicitado que el subproceso se detenga. Esto último sólo se refiere al uso interno.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>El subproceso se ha suspendido.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>Se ha solicitado que el subproceso se suspenda.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>No se ha invocado al método <see cref="M:System.Threading.Thread.Start" /> en el subproceso.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>Subproceso bloqueado. Este podría ser el resultado de llamar a <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> o <see cref="M:System.Threading.Thread.Join" />, de solicitar un bloqueo (por ejemplo, llamando a <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> o <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />) o de esperar en un objeto de sincronización de subprocesos como <see cref="T:System.Threading.ManualResetEvent" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>Excepción que se produce cuando un <see cref="T:System.Threading.Thread" /> es un <see cref="P:System.Threading.Thread.ThreadState" /> que no es válido para la llamada de método.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadStateException" /> con propiedades predeterminadas.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadStateException" /> con datos serializados.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene los datos serializados del objeto que hacen referencia a la excepción que se va a producir.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene información contextual sobre el origen o el destino.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadStateException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ThreadStateException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
  </members>
</doc>
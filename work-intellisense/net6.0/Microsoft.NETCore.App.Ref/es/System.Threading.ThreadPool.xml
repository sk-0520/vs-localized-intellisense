<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary vsli:raw="Represents a work item that can be executed by the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">Representa un elemento de trabajo que <see cref="T:System.Threading.ThreadPool" /> puede ejecutar.</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary vsli:raw="Executes the work item on the thread pool.">Ejecuta el elemento de trabajo en el grupo de subprocesos.</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary vsli:raw="Represents a handle that has been registered when calling &lt;see cref=&quot;M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)&quot; /&gt;. This class cannot be inherited.">Representa un identificador que se registró al llamar a <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary vsli:raw="Cancels a registered wait operation issued by the &lt;see cref=&quot;M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)&quot; /&gt; method.">Cancela una operación de espera registrada y emitida por el método <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to be signaled.">
        <see cref="T:System.Threading.WaitHandle" /> que hay que marcar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the function succeeds; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la función se realiza correctamente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary vsli:raw="Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.">Proporciona un grupo de subprocesos que pueden usarse para ejecutar tareas, exponer elementos de trabajo, procesar la E/S asincrónica, esperar en nombre de otros subprocesos y procesar temporizadores.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary vsli:raw="Binds an operating system handle to the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">Enlaza un identificador del sistema operativo a <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that holds the handle. The handle must have been opened for overlapped I/O on the unmanaged side.">
        <see cref="T:System.IntPtr" /> que contiene el controlador. El identificador debe haberse abierto para la E/S superpuesta en la parte no administrada.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the handle is bound; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el identificador está enlazado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary vsli:raw="Binds an operating system handle to the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">Enlaza un identificador del sistema operativo a <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeHandle&quot; /&gt; that holds the operating system handle. The handle must have been opened for overlapped I/O on the unmanaged side.">Propiedad <see cref="T:System.Runtime.InteropServices.SafeHandle" /> que contiene el identificador del sistema operativo. El identificador debe haberse abierto para la E/S superpuesta en la parte no administrada.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;osHandle&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="osHandle" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the handle is bound; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el identificador está enlazado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the difference between the maximum number of thread pool threads returned by the &lt;see cref=&quot;M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)&quot; /&gt; method, and the number currently active.">Recupera la diferencia entre el número máximo de subprocesos de grupo de subprocesos devuelto por el método <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> y el número activo actualmente.</summary>
      <param name="workerThreads" vsli:raw="The number of available worker threads.">Número de subprocesos de trabajo disponibles.</param>
      <param name="completionPortThreads" vsli:raw="The number of available asynchronous I/O threads.">Número de subprocesos de E/S asincrónicos disponibles.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.">Recupera el número de solicitudes al grupo de subprocesos que pueden estar activas al mismo tiempo. Todas las solicitudes que pasen de ese número permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</summary>
      <param name="workerThreads" vsli:raw="The maximum number of worker threads in the thread pool.">Número máximo de subprocesos de trabajo en el grupo de subprocesos.</param>
      <param name="completionPortThreads" vsli:raw="The maximum number of asynchronous I/O threads in the thread pool.">Número máximo de subprocesos de E/S asincrónicos en el grupo de subprocesos.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.">Recupera el número mínimo de subprocesos que el grupo de subprocesos crea a petición, según se realizan nuevas solicitudes, antes de conmutar a un algoritmo para administrar la creación y destrucción de subprocesos.</summary>
      <param name="workerThreads" vsli:raw="When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.">Cuando este método vuelve, contiene el número mínimo de subprocesos de trabajo que el grupo de subprocesos crea a petición.</param>
      <param name="completionPortThreads" vsli:raw="When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.">Cuando este método vuelve, contiene el número mínimo de subprocesos de E/S asincrónicos que el grupo de subprocesos crea a petición.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary vsli:raw="Queues a method for execution. The method executes when a thread pool thread becomes available.">Pone en cola un método para su ejecución. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; that represents the method to be executed.">
        <see cref="T:System.Threading.WaitCallback" /> que representa el método que se va a ejecutar.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="callBack" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The common language runtime (CLR) is hosted, and the host does not support this action.">Common Language Runtime (CLR) está en un host y el host no admite esta acción.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary vsli:raw="Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.">Pone un método en cola para su ejecución y especifica un objeto que contiene los datos que debe usar el método. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; representing the method to execute.">
        <see cref="T:System.Threading.WaitCallback" /> que representa el método que se va a ejecutar.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">Objeto que contiene los datos que va a usar el método.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The common language runtime (CLR) is hosted, and the host does not support this action.">Common Language Runtime (CLR) está en un host y el host no admite esta acción.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="callBack" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary vsli:raw="Queues a method specified by an &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for execution, and provides data to be used by the method. The method executes when a thread pool thread becomes available.">Pone un método en cola para su ejecución especificado por un delegado de <see cref="T:System.Action`1" /> y proporciona los datos que debe usar el método. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      <param name="callBack" vsli:raw="An &lt;see cref=&quot;T:System.Action`1&quot; /&gt; representing the method to execute.">
        <see cref="T:System.Action`1" /> que representa el método que se va a ejecutar.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">Objeto que contiene los datos que va a usar el método.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> si se prefiere poner en cola el elemento de trabajo en una cola junto al subproceso actual; <see langword="false" /> si se prefiere poner en cola el elemento de trabajo en la cola compartida del grupo de subprocesos.</param>
      <typeparam name="TState" vsli:raw="The type of elements of &lt;paramref name=&quot;state&quot; /&gt;.">Tipo de elementos de <paramref name="state" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit signed integer for the time-out in milliseconds.">Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits con signo como tiempo de espera, en milisegundos.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Objeto que se pasa al delegado.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.">Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 64 bits con signo como tiempo de espera, en milisegundos.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">Objeto que se ha pasado al delegado.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value for the time-out.">Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un valor <see cref="T:System.TimeSpan" /> como tiempo de espera.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">Objeto que se ha pasado al delegado.</param>
      <param name="timeout" vsli:raw="The time-out represented by a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;. If &lt;paramref name=&quot;timeout&quot; /&gt; is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;timeout&quot; /&gt; is -1, the function's time-out interval never elapses.">Tiempo de espera representado por <see cref="T:System.TimeSpan" />. Si <paramref name="timeout" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="timeout" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is less than -1.">El parámetro <paramref name="timeout" /> es menor que -1.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">El valor del parámetro <paramref name="timeout" /> es mayor que el valor de la propiedad <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.">Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits sin signo como tiempo de espera, en milisegundos.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">Objeto que se ha pasado al delegado.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that can be used to cancel the registered wait operation.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary vsli:raw="Sets the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.">Establece el número de solicitudes al grupo de subprocesos que pueden estar activas al mismo tiempo. Todas las solicitudes que pasen de ese número permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</summary>
      <param name="workerThreads" vsli:raw="The maximum number of worker threads in the thread pool.">Número máximo de subprocesos de trabajo en el grupo de subprocesos.</param>
      <param name="completionPortThreads" vsli:raw="The maximum number of asynchronous I/O threads in the thread pool.">Número máximo de subprocesos de E/S asincrónicos en el grupo de subprocesos.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the change is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el cambio se realiza correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary vsli:raw="Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.">Establece el número mínimo de subprocesos que el grupo de subprocesos crea a petición, según se realizan nuevas solicitudes, antes de conmutar a un algoritmo para administrar la creación y destrucción de subprocesos.</summary>
      <param name="workerThreads" vsli:raw="The minimum number of worker threads that the thread pool creates on demand.">Número mínimo de subprocesos de trabajo que el grupo de subprocesos crea a petición.</param>
      <param name="completionPortThreads" vsli:raw="The minimum number of asynchronous I/O threads that the thread pool creates on demand.">Número mínimo de subprocesos de E/S asincrónicos que el grupo de subprocesos crea a petición.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the change is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si el cambio se realiza correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary vsli:raw="Queues an overlapped I/O operation for execution.">Pone en cola una operación de E/S superpuesta para que se ejecute.</summary>
      <param name="overlapped" vsli:raw="The &lt;see cref=&quot;T:System.Threading.NativeOverlapped&quot; /&gt; structure to queue.">Estructura <see cref="T:System.Threading.NativeOverlapped" /> que se va a poner en cola.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation was successfully queued to an I/O completion port; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Es <see langword="true" /> si la operación se puso correctamente en la cola de un puerto de finalización de E/S; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary vsli:raw="Queues the specified work item object to the thread pool.">Pone en cola el objeto del elemento de trabajo especificado en el grupo de subprocesos.</summary>
      <param name="callBack" vsli:raw="The work item to invoke when a thread in the thread pool picks up the work item.">Elemento de trabajo que se va a invocar cuando un subproceso del grupo de subprocesos elige el elemento de trabajo.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> si se prefiere poner en cola el elemento de trabajo en una cola junto al subproceso actual; <see langword="false" /> si se prefiere poner en cola el elemento de trabajo en la cola compartida del grupo de subprocesos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="callback" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The work item is a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt;.">El elemento de trabajo es <see cref="T:System.Threading.Tasks.Task" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The work item could not be queued.">No se pudo poner en la cola el elemento de trabajo.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds; &lt;see cref=&quot;T:System.OutOfMemoryException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> si el método se ejecuta correctamente; se produce la excepción <see cref="T:System.OutOfMemoryException" /> si el elemento de trabajo no se puede poner en la cola.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary vsli:raw="Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.">Pone en cola el delegado especificado en el grupo de subprocesos, pero no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; that represents the delegate to invoke when a thread in the thread pool picks up the work item.">
        <see cref="T:System.Threading.WaitCallback" /> que representa el delegado al que se va a invocar cuando un subproceso del grupo de subprocesos seleccione el elemento de trabajo.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate when serviced from the thread pool.">Objeto que se pasa al delegado cuando se atiende desde el grupo de subprocesos.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
      <exception cref="T:System.ApplicationException" vsli:raw="An out-of-memory condition was encountered.">Se ha encontrado una condición de falta de memoria.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The work item could not be queued.">No se pudo poner en la cola el elemento de trabajo.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="callBack" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds; &lt;see cref=&quot;T:System.OutOfMemoryException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> si el método se ejecuta correctamente; se produce la excepción <see cref="T:System.OutOfMemoryException" /> si el elemento de trabajo no se puede poner en la cola.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary vsli:raw="Queues a method specified by an &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.">Pone un método en cola para su ejecución especificado por un delegado de <see cref="T:System.Action`1" /> y especifica un objeto que contiene los datos que debe usar el método. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      <param name="callBack" vsli:raw="A delegate representing the method to execute.">Un delegado que representa el método que se va a ejecutar.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">Objeto que contiene los datos que va a usar el método.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> si se prefiere poner en cola el elemento de trabajo en una cola junto al subproceso actual; <see langword="false" /> si se prefiere poner en cola el elemento de trabajo en la cola compartida del grupo de subprocesos.</param>
      <typeparam name="TState" vsli:raw="The type of elements of &lt;paramref name=&quot;state&quot; /&gt;.">Tipo de elementos de <paramref name="state" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">El valor de <paramref name="callback" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The work item could not be queued.">No se pudo poner en la cola el elemento de trabajo.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, using a 32-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y usa un entero de 32 bits con signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegado al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Objeto que se pasa al delegado.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 64-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 64 bits con signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegado al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Objeto que se pasa al delegado.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value for the time-out. This method does not propagate the calling stack to the worker thread.">Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un valor <see cref="T:System.TimeSpan" /> como tiempo de espera. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegado al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Objeto que se pasa al delegado.</param>
      <param name="timeout" vsli:raw="The time-out represented by a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;. If &lt;paramref name=&quot;timeout&quot; /&gt; is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;timeout&quot; /&gt; is -1, the function's time-out interval never elapses.">Tiempo de espera representado por <see cref="T:System.TimeSpan" />. Si <paramref name="timeout" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="timeout" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is less than -1.">El parámetro <paramref name="timeout" /> es menor que -1.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">El valor del parámetro <paramref name="timeout" /> es mayor que el valor de la propiedad <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits sin signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegado al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Objeto que se pasa al delegado.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">El llamador no dispone del permiso requerido.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary vsli:raw="Gets the number of work items that have been processed so far.">Obtiene el número de elementos de trabajo que se han procesado hasta ahora.</summary>
      <returns vsli:raw="The number of work items that have been processed so far.">El número de elementos de trabajo que se han procesado hasta el momento.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary vsli:raw="Gets the number of work items that are currently queued to be processed.">Obtiene el número de elementos de trabajo que se encuentran actualmente en cola para procesarse.</summary>
      <returns vsli:raw="The number of work items that are currently queued to be processed.">El número de elementos de trabajo actualmente en cola para ser procesados.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary vsli:raw="Gets the number of thread pool threads that currently exist.">Obtiene el número de subprocesos del grupo de subprocesos que existen actualmente.</summary>
      <returns vsli:raw="The number of thread pool threads that currently exist.">Número de subprocesos del grupo de subprocesos que existen actualmente.</returns>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary vsli:raw="Represents a callback method to be executed by a thread pool thread.">Representa un método de devolución de llamada que debe ejecutar un subproceso del grupo de subprocesos.</summary>
      <param name="state" vsli:raw="An object containing information to be used by the callback method.">Objeto que contiene la información que va a usar el método de devolución de llamada.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary vsli:raw="Represents a method to be called when a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; is signaled or times out.">Representa un método al que se debe llamar cuando un <see cref="T:System.Threading.WaitHandle" /> está señalado o se agota su tiempo de espera.</summary>
      <param name="state" vsli:raw="An object containing information to be used by the callback method each time it executes.">Objeto que contiene la información que va a utilizar el método de devolución de llamadas cada vez que se ejecute.</param>
      <param name="timedOut" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; timed out; &lt;see langword=&quot;false&quot; /&gt; if it was signaled.">
        <see langword="true" /> si <see cref="T:System.Threading.WaitHandle" /> ha agotado el tiempo de espera; <see langword="false" /> si estaba señalado.</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq.Queryable</name>
  </assembly>
  <members>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary vsli:raw="Represents an expression tree and provides functionality to execute the expression tree after rewriting it.">Representa un árbol de expresión y proporciona características para ejecutarlo después de que se lo reescribe.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary vsli:raw="Represents an expression tree and provides functionality to execute the expression tree after rewriting it.">Representa un árbol de expresión y proporciona características para ejecutarlo después de que se lo reescribe.</summary>
      <typeparam name="T" vsli:raw="The data type of the value that results from executing the expression tree.">Tipo de datos del valor que es el resultado de ejecutar el árbol de expresión.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableExecutor`1&quot; /&gt; class.">Inicializa una nueva instancia de la clase <see cref="T:System.Linq.EnumerableExecutor`1" />.</summary>
      <param name="expression" vsli:raw="An expression tree to associate with the new instance.">Un árbol de expresión para asociar a la nueva instancia.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary vsli:raw="Represents an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; as an &lt;see cref=&quot;T:System.Linq.EnumerableQuery&quot; /&gt; data source.">Representa una clase <see cref="T:System.Collections.IEnumerable" /> como origen de datos de <see cref="T:System.Linq.EnumerableQuery" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary vsli:raw="Represents an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection as an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; data source.">Representa una colección <see cref="T:System.Collections.Generic.IEnumerable`1" /> como un origen de datos <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of the data in the collection.">Tipo de datos de la colección.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; class and associates it with an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection.">Inicializa una nueva instancia de la clase <see cref="T:System.Linq.EnumerableQuery`1" /> y la asocia con una colección <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="enumerable" vsli:raw="A collection to associate with the new instance.">Una colección para asociar a la nueva instancia.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; class and associates the instance with an expression tree.">Inicializa una nueva instancia de la clase <see cref="T:System.Linq.EnumerableQuery`1" /> y la asocia con un árbol de expresión especificado.</summary>
      <param name="expression" vsli:raw="An expression tree to associate with the new instance.">Un árbol de expresión para asociar a la nueva instancia.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the associated &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; data source and executing it.">Devuelve un enumerador que puede recorrer en iteración la colección <see cref="T:System.Collections.Generic.IEnumerable`1" /> asociada o, si es nulo, la colección que es el resultado de rescribir el árbol de expresión asociado como consulta en un origen de datos <see cref="T:System.Collections.Generic.IEnumerable`1" /> y de ejecutarlo.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the associated data source.">Un enumerador que se puede utilizar para recorrer en iteración el origen de datos asociado.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the associated &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; data source and executing it.">Devuelve un enumerador que puede recorrer en iteración la colección <see cref="T:System.Collections.Generic.IEnumerable`1" /> asociada o, si es nulo, la colección que es el resultado de rescribir el árbol de expresión asociado como consulta en un origen de datos <see cref="T:System.Collections.Generic.IEnumerable`1" /> y de ejecutarlo.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the associated data source.">Un enumerador que se puede utilizar para recorrer en iteración el origen de datos asociado.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object and associates it with a specified expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; collection of data.">Construye un nuevo objeto <see cref="T:System.Linq.EnumerableQuery`1" /> y lo asocia a un árbol de expresión especificado que representa una colección <see cref="T:System.Linq.IQueryable" /> de datos.</summary>
      <param name="expression" vsli:raw="An expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; collection of data.">Un árbol de expresión que representa una colección <see cref="T:System.Linq.IQueryable" /> de datos.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object that is associated with &lt;paramref name=&quot;expression&quot; /&gt;.">Un objeto <see cref="T:System.Linq.EnumerableQuery`1" /> asociado a <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``2(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object and associates it with a specified expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; collection of data.">Construye un nuevo objeto <see cref="T:System.Linq.EnumerableQuery`1" /> y lo asocia a un árbol de expresión especificado que representa una colección <see cref="T:System.Linq.IQueryable`1" /> de datos.</summary>
      <param name="expression" vsli:raw="An expression tree to execute.">Un árbol de expresión que se va a ejecutar.</param>
      <typeparam name="S" vsli:raw="The type of the data in the collection that &lt;paramref name=&quot;expression&quot; /&gt; represents.">Tipo de datos de la colección que <paramref name="expression" /> representa.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements of the &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that is returned." />
      <returns vsli:raw="An EnumerableQuery object that is associated with &lt;paramref name=&quot;expression&quot; /&gt;.">Un objeto EnumerableQuery asociado a <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes an expression after rewriting it to call &lt;see cref=&quot;T:System.Linq.Enumerable&quot; /&gt; methods instead of &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods on any enumerable data sources that cannot be queried by &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods.">Ejecuta una expresión después de reescribirla para llamar a los métodos <see cref="T:System.Linq.Enumerable" /> en lugar de a los métodos <see cref="T:System.Linq.Queryable" /> en cualquier origen de datos enumerable que no pueda ser consultado por los métodos <see cref="T:System.Linq.Queryable" />.</summary>
      <param name="expression" vsli:raw="An expression tree to execute.">Un árbol de expresión que se va a ejecutar.</param>
      <returns vsli:raw="The value that results from executing &lt;paramref name=&quot;expression&quot; /&gt;.">El valor que es el resultado de ejecutar <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``2(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes an expression after rewriting it to call &lt;see cref=&quot;T:System.Linq.Enumerable&quot; /&gt; methods instead of &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods on any enumerable data sources that cannot be queried by &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods.">Ejecuta una expresión después de reescribirla para llamar a los métodos <see cref="T:System.Linq.Enumerable" /> en lugar de a los métodos <see cref="T:System.Linq.Queryable" /> en cualquier origen de datos enumerable que no pueda ser consultado por los métodos <see cref="T:System.Linq.Queryable" />.</summary>
      <param name="expression" vsli:raw="An expression tree to execute.">Un árbol de expresión que se va a ejecutar.</param>
      <typeparam name="S" vsli:raw="The type of the data in the collection that &lt;paramref name=&quot;expression&quot; /&gt; represents.">Tipo de datos de la colección que <paramref name="expression" /> representa.</typeparam>
      <typeparam name="TElement" vsli:raw="" />
      <returns vsli:raw="The value that results from executing &lt;paramref name=&quot;expression&quot; /&gt;.">El valor que es el resultado de ejecutar <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary vsli:raw="Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.">Devuelve una representación textual de la colección enumerable o, si es null, del árbol de expresión asociado a esta instancia.</summary>
      <returns vsli:raw="A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.">Representación textual de la colección enumerable o, si es null, del árbol de expresión asociado a esta instancia.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary vsli:raw="Gets the type of the data in the collection that this instance represents.">Obtiene el tipo de datos de la colección que esta instancia representa.</summary>
      <returns vsli:raw="The type of the data in the collection that this instance represents.">Tipo de datos de la colección que esta instancia representa.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary vsli:raw="Gets the expression tree that is associated with or that represents this instance.">Obtiene el árbol de expresión que está asociado o que representa esta instancia.</summary>
      <returns vsli:raw="The expression tree that is associated with or that represents this instance.">Árbol de expresión que está asociado o que representa esta instancia.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary vsli:raw="Gets the query provider that is associated with this instance.">Obtiene el proveedor de consultas que está asociado a esta instancia.</summary>
      <returns vsli:raw="The query provider that is associated with this instance.">Proveedor de consultas que está asociado a esta instancia.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary vsli:raw="Provides a set of &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) methods for querying data structures that implement &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Proporciona un conjunto de métodos <see langword="static" /> (<see langword="Shared" /> en Visual Basic) para consultar estructuras de datos que implementan <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary vsli:raw="Applies an accumulator function over a sequence.">Aplica una función de acumulador a una secuencia.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Secuencia a la que se va a agregar.</param>
      <param name="func" vsli:raw="An accumulator function to apply to each element.">Función de acumulador que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="func" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The final accumulator value.">Valor final del acumulador.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.">Aplica una función de acumulador a una secuencia. El valor de inicialización especificado se utiliza como valor de inicio del acumulador.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Secuencia a la que se va a agregar.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valor de inicio del acumulador.</param>
      <param name="func" vsli:raw="An accumulator function to invoke on each element.">Función de acumulador que se va a invocar en cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Tipo del valor del acumulador.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="func" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The final accumulator value.">Valor final del acumulador.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.">Aplica una función de acumulador a una secuencia. El valor de inicialización especificado se utiliza como valor inicial del acumulador y la función especificada se utiliza para seleccionar el valor resultante.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Secuencia a la que se va a agregar.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valor de inicio del acumulador.</param>
      <param name="func" vsli:raw="An accumulator function to invoke on each element.">Función de acumulador que se va a invocar en cada elemento.</param>
      <param name="selector" vsli:raw="A function to transform the final accumulator value into the result value.">Función que va a transformar el valor final del acumulador en el valor del resultado.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Tipo del valor del acumulador.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the resulting value.">Tipo del valor resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="func" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The transformed final accumulator value.">El valor final del acumulador transformado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Determines whether all the elements of a sequence satisfy a condition.">Determina si todos los elementos de una secuencia satisfacen una condición.</summary>
      <param name="source" vsli:raw="A sequence whose elements to test for a condition.">Secuencia en cuyos elementos se va a comprobar una condición.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si todos los elementos de la secuencia de origen pasan la prueba del predicado especificado o si la secuencia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Determines whether a sequence contains any elements.">Determina si una secuencia contiene elementos.</summary>
      <param name="source" vsli:raw="A sequence to check for being empty.">Secuencia que se va a comprobar si está vacía.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la secuencia de origen contiene elementos; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Determines whether any element of a sequence satisfies a condition.">Determina si algún elemento de una secuencia satisface una condición.</summary>
      <param name="source" vsli:raw="A sequence whose elements to test for a condition.">Secuencia en cuyos elementos se va a comprobar una condición.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any elements in the source sequence pass the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si algún elemento de la secuencia de origen pasa la prueba del predicado especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Returns a new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; plus the specified &lt;paramref name=&quot;element&quot; /&gt; appended at the end.">Devuelve una nueva secuencia consultable que contiene los elementos de <paramref name="source" /> más el <paramref name="element" /> especificado que se anexa al final.</summary>
      <param name="source" vsli:raw="A queryable sequence.">Secuencia consultable.</param>
      <param name="element" vsli:raw="An element of type &lt;typeparamref name=&quot;TSource&quot; /&gt; to append to &lt;paramref name=&quot;source&quot; /&gt;.">Elemento de tipo <typeparamref name="TSource" /> que se va a anexar a <paramref name="source" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence.">Tipo de los elementos de la secuencia consultable.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; plus the specified &lt;paramref name=&quot;element&quot; /&gt; appended at the end.">Nueva secuencia consultable que contiene los elementos de <paramref name="source" /> más el <paramref name="element" /> especificado que se anexa al final.</returns>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary vsli:raw="Converts an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; to an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">Convierte una interfaz <see cref="T:System.Collections.IEnumerable" /> en <see cref="T:System.Linq.IQueryable" />.</summary>
      <param name="source" vsli:raw="A sequence to convert.">Secuencia que se va a convertir.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; does not implement &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for some &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="source" /> no implementa <see cref="T:System.Collections.Generic.IEnumerable`1" /> para algunos parámetros <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that represents the input sequence.">
        <see cref="T:System.Linq.IQueryable" /> que representa la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Converts a generic &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Convierte un parámetro <see cref="T:System.Collections.Generic.IEnumerable`1" /> genérico en un parámetro <see cref="T:System.Linq.IQueryable`1" /> genérico.</summary>
      <param name="source" vsli:raw="A sequence to convert.">Secuencia que se va a convertir.</param>
      <typeparam name="TElement" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that represents the input sequence.">
        <see cref="T:System.Linq.IQueryable`1" /> que representa la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Decimal" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Double" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Int32" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Int64" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Decimal" /> que admiten valores NULL para calcular el promedio.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Double" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Double" /> que admiten valores NULL para calcular el promedio.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int32" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Int32" /> que admiten valores NULL para calcular el promedio.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int64" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Int64" /> que admiten valores NULL para calcular el promedio.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Single" /> que admiten valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Single" /> que admiten valores NULL para calcular el promedio.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia de origen está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula el promedio de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Secuencia de valores <see cref="T:System.Single" /> cuyo promedio se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate an average.">Secuencia de valores que se utilizan para calcular un promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Double" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int32" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int64" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia <paramref name="source" /> está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia <paramref name="source" /> está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia <paramref name="source" /> está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia <paramref name="source" /> está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Promedio de la secuencia de valores o <see langword="null" /> si la secuencia <paramref name="source" /> está vacía o contiene solo valores <see langword="null" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula el promedio de una secuencia de valores <see cref="T:System.Single" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Una secuencia de valores de la que se calculará el promedio.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> no contiene ningún elemento.</exception>
      <returns vsli:raw="The average of the sequence of values.">El promedio de la secuencia de valores.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary vsli:raw="Converts the elements of an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; to the specified type.">Convierte los elementos de <see cref="T:System.Linq.IQueryable" /> en el tipo especificado.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that contains the elements to be converted.">
        <see cref="T:System.Linq.IQueryable" /> que contiene los elementos que se van a convertir.</param>
      <typeparam name="TResult" vsli:raw="The type to convert the elements of &lt;paramref name=&quot;source&quot; /&gt; to.">Tipo al que se convierten los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="An element in the sequence cannot be cast to type &lt;paramref name=&quot;TResult&quot; /&gt;.">Un elemento de la secuencia no se puede convertir al tipo <paramref name="TResult" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains each element of the source sequence converted to the specified type.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene cada elemento de la secuencia de origen convertido en el tipo especificado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Concatenates two sequences.">Concatena dos secuencias.</summary>
      <param name="source1" vsli:raw="The first sequence to concatenate.">Primera secuencia que se va a concatenar.</param>
      <param name="source2" vsli:raw="The sequence to concatenate to the first sequence.">Secuencia que se va a concatenar con la primera secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the concatenated elements of the two input sequences.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos concatenados de las dos secuencias de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using the default equality comparer.">Determina si una secuencia contiene un elemento especificado utilizando el comparador de igualdad predeterminado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; in which to locate &lt;paramref name=&quot;item&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> en el que se va a buscar <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to locate in the sequence.">Objeto que se va a buscar en la secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la secuencia de entrada contiene un elemento que tiene el valor especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Determina si una secuencia contiene un elemento especificado utilizando un objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> determinado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; in which to locate &lt;paramref name=&quot;item&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> en el que se va a buscar <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to locate in the sequence.">Objeto que se va a buscar en la secuencia.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si la secuencia de entrada contiene un elemento que tiene el valor especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the number of elements in a sequence.">Devuelve el número de elementos de una secuencia.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in the input sequence.">El número de elementos de la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the number of elements in the specified sequence that satisfies a condition.">Devuelve el número de elementos de la secuencia especificada que satisfacen una condición.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">El número de elementos de <paramref name="source" /> es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in the sequence that satisfies the condition in the predicate function.">El número de elementos de la secuencia que satisfacen la condición de la función de predicado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.">Devuelve los elementos de la secuencia especificada o el valor predeterminado del parámetro de tipo en una colección singleton si la secuencia está vacía.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a default value for if empty.">
        <see cref="T:System.Linq.IQueryable`1" /> para el que se va a devolver un valor predeterminado si está vacío.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains &lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene <see langword="default" />(<paramref name="TSource" />) si <paramref name="source" /> está vacío; de lo contrario, <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.">Devuelve los elementos de la secuencia especificada o el valor especificado en una colección singleton si la secuencia está vacía.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the specified value for if empty.">
        <see cref="T:System.Linq.IQueryable`1" /> para el que se va a devolver el valor especificado si está vacío.</param>
      <param name="defaultValue" vsli:raw="The value to return if the sequence is empty.">Valor que se va a devolver si la secuencia está vacía.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains &lt;paramref name=&quot;defaultValue&quot; /&gt; if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene <paramref name="defaultValue" /> si <paramref name="source" /> está vacío; de lo contrario, <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using the default equality comparer to compare values.">Devuelve diversos elementos de una secuencia utilizando el comparador de igualdad predeterminado para comparar los valores.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to remove duplicates from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se van a quitar los elementos duplicados.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains distinct elements from &lt;paramref name=&quot;source&quot; /&gt;.">Una interfaz <see cref="T:System.Linq.IQueryable`1" /> que contiene diversos elementos de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Devuelve diversos elementos de una secuencia utilizando un objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar los valores.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to remove duplicates from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se van a quitar los elementos duplicados.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains distinct elements from &lt;paramref name=&quot;source&quot; /&gt;.">Una interfaz <see cref="T:System.Linq.IQueryable`1" /> que contiene diversos elementos de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence.">Devuelve el elemento situado en un índice especificado de una secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver un elemento.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Índice de base cero del elemento que se debe recuperar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> es menor que cero.</exception>
      <returns vsli:raw="The element at the specified position in &lt;paramref name=&quot;source&quot; /&gt;.">El elemento situado en la posición especificada de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Devuelve el elemento situado en un índice especificado de una secuencia o un valor predeterminado si el índice está fuera del intervalo.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver un elemento.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Índice de base cero del elemento que se debe recuperar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;index&quot; /&gt; is outside the bounds of &lt;paramref name=&quot;source&quot; /&gt;; otherwise, the element at the specified position in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) si <paramref name="index" /> está fuera de los límites de <paramref name="source" />; de lo contrario, el elemento situado en la posición especificada de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the default equality comparer to compare values.">Proporciona la diferencia de conjuntos de dos secuencias utilizando el comparador de igualdad predeterminado para comparar los valores.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;source2&quot; /&gt; will be returned.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos que no se encuentren en  <paramref name="source2" /> se van a devolver.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will not appear in the returned sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos que se encuentren también en la primera secuencia no aparecerán en la secuencia devuelta.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set difference of the two sequences.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene la diferencia de conjuntos de las dos secuencias.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Proporciona la diferencia de conjuntos de dos secuencias utilizando el objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar los valores.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;source2&quot; /&gt; will be returned.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos que no se encuentren en  <paramref name="source2" /> se van a devolver.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will not appear in the returned sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos que se encuentren también en la primera secuencia no aparecerán en la secuencia devuelta.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set difference of the two sequences.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene la diferencia de conjuntos de las dos secuencias.</returns>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the first element of a sequence.">Devuelve el primer elemento de una secuencia.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the first element of.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver el primer elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">La secuencia de origen está vacía.</exception>
      <returns vsli:raw="The first element in &lt;paramref name=&quot;source&quot; /&gt;.">El primer elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the first element of a sequence that satisfies a specified condition.">Devuelve el primer elemento de una secuencia que satisface una condición especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ningún elemento satisface la condición de <paramref name="predicate" />.  
  
o bien 
La secuencia de origen está vacía.</exception>
      <returns vsli:raw="The first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test in &lt;paramref name=&quot;predicate&quot; /&gt;.">El primer elemento de <paramref name="source" /> que pasa la prueba de <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Devuelve el primer elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the first element of.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver el primer elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) si <paramref name="source" /> está vacío; de lo contrario, el primer elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.">Devuelve el primer elemento de una secuencia que satisface una condición especificada o un valor predeterminado si no se encuentra ningún elemento.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no element passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) si <paramref name="source" /> está vacío o si ningún elemento pasa la prueba especificada en <paramref name="predicate" />; de lo contrario, el primer elemento de <paramref name="source" /> que pasa la prueba especificada en <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function.">Agrupa los elementos de una secuencia según una función del selector de claves especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a sequence of objects and a key.">
        <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> en C# o <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> en Visual Basic, en que cada objeto <see cref="T:System.Linq.IGrouping`2" /> contiene una secuencia de objetos y una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y compara las claves utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects and a key.">
        <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> en C# o <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> en Visual Basic, en que cada objeto <see cref="T:System.Linq.IGrouping`2" /> contiene una secuencia de objetos y una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y proyecta los elementos de cada grupo utilizando una función determinada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los elementos de cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">
        <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> en C# o <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> en Visual Basic, en que cada <see cref="T:System.Linq.IGrouping`2" /> contiene una secuencia de objetos del tipo <paramref name="TElement" /> y una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.">Agrupa los elementos de una secuencia y proyecta los elementos de cada grupo utilizando una función especificada. Los valores de clave se comparan utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los elementos de cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">
        <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> en C# o <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> en Visual Basic, en que cada <see cref="T:System.Linq.IGrouping`2" /> contiene una secuencia de objetos del tipo <paramref name="TElement" /> y una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Objeto <c>T:System.Linq.IQueryable`1</c> que tiene un argumento de tipo <paramref name="TResult" /> y en el que cada elemento representa una proyección sobre un grupo y su clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave. Las claves se comparan utilizando un comparador determinado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="resultSelector" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Objeto <c>T:System.Linq.IQueryable`1</c> que tiene un argumento de tipo <paramref name="TResult" /> y en el que cada elemento representa una proyección sobre un grupo y su clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave. Los elementos de cada grupo se proyectan utilizando una función determinada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los elementos de cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Objeto <c>T:System.Linq.IQueryable`1</c> que tiene un argumento de tipo <paramref name="TResult" /> y en el que cada elemento representa una proyección sobre un grupo y su clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.">Agrupa los elementos de una secuencia según una función del selector de claves especificada y crea un valor de resultado a partir de cada grupo y su clave. Las claves se comparan utilizando un comparador especificado y los elementos de cada grupo se proyectan utilizando una función determinada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a agrupar.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Función para extraer la clave de cada elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Función que asigna cada elemento de origen a un elemento de <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Función que va a crear un valor de resultado a partir de cada grupo.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo de los elementos de cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valor de resultado devuelto por <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> o <paramref name="resultSelector" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Objeto <c>T:System.Linq.IQueryable`1</c> que tiene un argumento de tipo <paramref name="TResult" /> y en el que cada elemento representa una proyección sobre un grupo y su clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.">Establece una correlación entre los elementos de dos secuencias basándose en la igualdad de clave y agrupa los resultados. El comparador de igualdad predeterminado se usa para comparar claves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Primera secuencia que se va a combinar.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Función para crear un elemento de resultado a partir de un elemento de la primera secuencia y una colección de elementos coincidentes de la segunda.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo de los elementos del resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing a grouped join on two sequences.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación agrupada de dos secuencias.</returns>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Establece una correlación entre los elementos de dos secuencias basándose en la igualdad de clave y agrupa los resultados. Se usa un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar claves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Primera secuencia que se va a combinar.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Función para crear un elemento de resultado a partir de un elemento de la primera secuencia y una colección de elementos coincidentes de la segunda.</param>
      <param name="comparer" vsli:raw="A comparer to hash and compare keys.">Comparador que va a aplicar un algoritmo hash y a comparar las claves.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo de los elementos del resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing a grouped join on two sequences.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación agrupada de dos secuencias.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the default equality comparer to compare values.">Proporciona la intersección de conjuntos de dos secuencias utilizando el comparador de igualdad predeterminado para comparar los valores.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements that also appear in &lt;paramref name=&quot;source2&quot; /&gt; are returned.">Secuencia de la que se devuelven los elementos que también aparecen en <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements that also appear in the first sequence are returned.">Secuencia de la que se devuelven los elementos que también aparecen en la primera secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A sequence that contains the set intersection of the two sequences.">Una secuencia que contiene la intersección de conjuntos de las dos secuencias.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Proporciona la intersección de conjuntos de dos secuencias utilizando el objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar los valores.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose distinct elements that also appear in &lt;paramref name=&quot;source2&quot; /&gt; are returned.">Una interfaz <see cref="T:System.Linq.IQueryable`1" /> de la que se devuelven los elementos que también aparecen en <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in the first sequence are returned.">Una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> de la que se devuelven los elementos que también aparecen en la primera secuencia.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set intersection of the two sequences.">Una interfaz <see cref="T:System.Linq.IQueryable`1" /> que contiene la intersección de conjuntos de las dos secuencias.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.">Establece la correlación de dos secuencias basándose en claves coincidentes. El comparador de igualdad predeterminado se usa para comparar claves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Primera secuencia que se va a combinar.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Función que va a crear un elemento de resultado a partir de dos elementos coincidentes.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo de los elementos del resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing an inner join on two sequences.">Una interfaz <see cref="T:System.Linq.IQueryable`1" /> que tiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación interna de dos secuencias.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Establece la correlación de dos secuencias basándose en claves coincidentes. Se usa un <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar claves.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Primera secuencia que se va a combinar.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Secuencia que se va a combinar con la primera secuencia.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Función para extraer la clave de combinación a partir de cada elemento de la primera secuencia.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Función para extraer la clave de combinación a partir de cada elemento de la segunda secuencia.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Función que va a crear un elemento de resultado a partir de dos elementos coincidentes.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to hash and compare keys.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que va a aplicar un algoritmo hash y a comparar las claves.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo de los elementos de la primera secuencia.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo de los elementos de la segunda secuencia.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo de las claves devueltas por las funciones del selector de claves.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo de los elementos del resultado.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing an inner join on two sequences.">Una interfaz <see cref="T:System.Linq.IQueryable`1" /> que tiene elementos de tipo <paramref name="TResult" /> que se han obtenido al realizar una combinación interna de dos secuencias.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the last element in a sequence.">Devuelve el último elemento de una secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the last element of.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver el último elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">La secuencia de origen está vacía.</exception>
      <returns vsli:raw="The value at the last position in &lt;paramref name=&quot;source&quot; /&gt;.">El valor de la última posición de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Devuelve el último elemento de una secuencia que satisface una condición especificada.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ningún elemento satisface la condición de <paramref name="predicate" />.  
  
o bien 
La secuencia de origen está vacía.</exception>
      <returns vsli:raw="The last element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">El último elemento de <paramref name="source" /> que pasa la prueba especificada en <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the last element in a sequence, or a default value if the sequence contains no elements.">Devuelve el último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the last element of.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver el último elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the last element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) si <paramref name="source" /> está vacío; de lo contrario, el último elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Devuelve el último elemento de una secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no elements pass the test in the predicate function; otherwise, the last element of &lt;paramref name=&quot;source&quot; /&gt; that passes the test in the predicate function.">
        <c>default</c>(<paramref name="TSource" />) si <paramref name="source" /> está vacío o si ningún elemento pasa la prueba de la función de predicado; de lo contrario, el último elemento de <paramref name="source" /> que pasa la prueba de la función de predicado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the total number of elements in a sequence.">Devuelve un valor <see cref="T:System.Int64" /> que representa el número total de elementos de una secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">El número de elementos es superior a <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt;.">Número de elementos de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the number of elements in a sequence that satisfy a condition.">Devuelve un valor <see cref="T:System.Int64" /> que representa el número de elementos de una secuencia que satisfacen una condición.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que se van a contar.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of matching elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">El número de elementos que coinciden es superior a <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; that satisfy the condition in the predicate function.">El número de elementos de <paramref name="source" /> que satisfacen la condición de la función de predicado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the maximum value in a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Devuelve el valor máximo de una interfaz <see cref="T:System.Linq.IQueryable`1" /> genérica.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Invokes a projection function on each element of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; and returns the maximum resulting value.">Invoca una función de proyección en cada elemento de una interfaz <see cref="T:System.Linq.IQueryable`1" /> genérica y devuelve el valor máximo resultante.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum of.">Secuencia de valores cuyo valor máximo se va a determinar.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo del valor devuelto por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The maximum value in the sequence.">El valor máximo de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the minimum value of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Devuelve el valor mínimo de una interfaz <see cref="T:System.Linq.IQueryable`1" /> genérica.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Invokes a projection function on each element of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; and returns the minimum resulting value.">Invoca una función de proyección en cada elemento de una interfaz <see cref="T:System.Linq.IQueryable`1" /> genérica y devuelve el valor mínimo resultante.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum of.">Secuencia de valores cuyo valor mínimo se va a determinar.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo del valor devuelto por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The minimum value in the sequence.">El valor mínimo de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary vsli:raw="Filters the elements of an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; based on a specified type.">Filtra los elementos de <see cref="T:System.Linq.IQueryable" /> en función de un tipo especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; whose elements to filter.">
        <see cref="T:System.Linq.IQueryable" /> cuyos elementos se van a filtrar.</param>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">El tipo según el cual se van a filtrar los elementos de la secuencia.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A collection that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; that have type &lt;paramref name=&quot;TResult&quot; /&gt;.">Colección que contiene los elementos de <paramref name="source" /> que son de tipo <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order according to a key.">Ordena de manera ascendente los elementos de una secuencia en función de una clave.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelto por la función representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedQueryable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order by using a specified comparer.">Ordena de manera ascendente los elementos de una secuencia utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelto por la función representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedQueryable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order according to a key.">Ordena de manera descendente los elementos de una secuencia en función de una clave.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Función para extraer una clave a partir de un elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelto por la función representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedQueryable`1" /> cuyos elementos se ordenan de manera descendente con arreglo a una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order by using a specified comparer.">Ordena de manera descendente los elementos de una secuencia utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Secuencia de valores que se va a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Función para extraer una clave a partir de un elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelto por la función representada por <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedQueryable`1" /> cuyos elementos se ordenan de manera descendente con arreglo a una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Returns a new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; plus the specified &lt;paramref name=&quot;element&quot; /&gt; prepended at the beginning.">Devuelve una nueva secuencia consultable que contiene los elementos de <paramref name="source" /> más el <paramref name="element" /> antepuesto al principio.</summary>
      <param name="source" vsli:raw="A queryable sequence.">Secuencia consultable.</param>
      <param name="element" vsli:raw="An element of type &lt;typeparamref name=&quot;TSource&quot; /&gt; to prepend to &lt;paramref name=&quot;source&quot; /&gt;.">Elemento de tipo <typeparamref name="TSource" /> que se va a anteponer a <paramref name="source" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence.">Tipo de los elementos de la secuencia consultable.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; plus the specified &lt;paramref name=&quot;element&quot; /&gt; prepended at the beginning.">Nueva secuencia consultable que contiene los elementos de <paramref name="source" /> más el <paramref name="element" /> antepuesto al principio.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Inverts the order of the elements in a sequence.">Invierte el orden de los elementos de una secuencia.</summary>
      <param name="source" vsli:raw="A sequence of values to reverse.">Secuencia de valores que se va a invertir.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements correspond to those of the input sequence in reverse order.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se corresponden en orden inverso con los de la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Proyecta cada elemento de una secuencia a un nuevo formulario.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo del valor devuelto por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a projection function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos son el resultado de invocar una función de proyección en cada elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary vsli:raw="Projects each element of a sequence into a new form by incorporating the element's index.">Proyecta cada elemento de una secuencia en un nuevo formulario incorporando el índice del elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo del valor devuelto por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a projection function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos son el resultado de invocar una función de proyección en cada elemento de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and combines the resulting sequences into one sequence.">Proyecta cada elemento de una secuencia en una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> y combina las secuencias resultantes en una secuencia.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo de los elementos de la secuencia devuelta por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos son el resultado de invocar una función de proyección uno a varios en cada elemento de la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.">Proyecta cada elemento de una secuencia en una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> y combina las secuencias resultantes en una secuencia. El índice de cada elemento de origen se utiliza en el formulario proyectado de ese elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element; the second parameter of this function represents the index of the source element.">Función de proyección que se va a aplicar a cada elemento; el segundo parámetro de esta función representa el índice del elemento de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo de los elementos de la secuencia devuelta por la función representada por <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos son el resultado de invocar una función de proyección uno a varios en cada elemento de la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.">Proyecta cada elemento de una secuencia en <see cref="T:System.Collections.Generic.IEnumerable`1" /> e invoca una función del selector de resultados en cada elemento. Los valores resultantes de cada secuencia intermedia se combinan en una única secuencia unidimensional y se devuelven.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="collectionSelector" vsli:raw="A projection function to apply to each element of the input sequence.">Función de proyección que se va a aplicar a cada elemento de la secuencia de entrada.</param>
      <param name="resultSelector" vsli:raw="A projection function to apply to each element of each intermediate sequence.">Función de proyección que se va a aplicar a cada elemento de la secuencia intermedia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by the function represented by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">El tipo de los elementos intermedios recopilados por la función representada por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Tipo de los elementos de la secuencia resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="collectionSelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking the one-to-many projection function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding &lt;paramref name=&quot;source&quot; /&gt; element to a result element.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos son el resultado de invocar la función de proyección uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="source" /> y de asignar a continuación cada uno de los elementos de la secuencia y sus elementos de <paramref name="source" /> correspondientes a un elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.">Proyecta cada elemento de una secuencia en una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> que incorpora el índice del elemento de origen que lo generó. Una función del selector de resultados se invoca en cada elemento de todas las secuencias intermedias y luego los valores resultantes se combinan en una única secuencia unidimensional y se devuelven.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Secuencia de valores que se va a proyectar.</param>
      <param name="collectionSelector" vsli:raw="A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.">Función de proyección que se va a aplicar a cada elemento de la secuencia de entrada; el segundo parámetro de esta función representa el índice del elemento de origen.</param>
      <param name="resultSelector" vsli:raw="A projection function to apply to each element of each intermediate sequence.">Función de proyección que se va a aplicar a cada elemento de la secuencia intermedia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by the function represented by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">El tipo de los elementos intermedios recopilados por la función representada por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Tipo de los elementos de la secuencia resultante.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="collectionSelector" /> o <paramref name="resultSelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking the one-to-many projection function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding &lt;paramref name=&quot;source&quot; /&gt; element to a result element.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos son el resultado de invocar la función de proyección uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="source" /> y de asignar a continuación cada uno de los elementos de la secuencia y sus elementos de <paramref name="source" /> correspondientes a un elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by using the default equality comparer to compare elements.">Determina si dos secuencias son iguales utilizando el comparador de igualdad predeterminado para comparar los elementos.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to compare to those of &lt;paramref name=&quot;source2&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a comparar con los de <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to compare to those of the first sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a comparar con los de la primera secuencia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las dos secuencias de origen tienen la misma longitud y sus elementos correspondientes son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare elements.">Determina si dos secuencias son iguales utilizando una interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificada para comparar los elementos.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to compare to those of &lt;paramref name=&quot;source2&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyos elementos se van a comparar con los de <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to compare to those of the first sequence.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos se van a comparar con los de la primera secuencia.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to use to compare elements.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se va a utilizar para comparar elementos.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> si las dos secuencias de origen tienen la misma longitud y sus elementos correspondientes son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Devuelve el único elemento de una secuencia y produce una excepción si no hay exactamente un elemento en la secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the single element of.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; has more than one element.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">
        <paramref name="source" /> tiene más de un elemento.</exception>
      <returns vsli:raw="The single element of the input sequence.">El único elemento de la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Devuelve el único elemento de una secuencia que cumpla una condición especificada y produce una excepción si existe más de un elemento de este tipo.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a single element from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver un único elemento.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Función que va a probar si un elemento satisface una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Ningún elemento satisface la condición de <paramref name="predicate" />.  
  
o bien 
Varios elementos satisfacen la condición de <paramref name="predicate" />.  
  
o bien 
La secuencia de origen está vacía.</exception>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">El único elemento de la secuencia de entrada que satisface la condición de <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Devuelve el único elemento de una secuencia o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the single element of.">
        <see cref="T:System.Linq.IQueryable`1" /> cuyo único elemento se va a devolver.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; has more than one element.">
        <paramref name="source" /> tiene más de un elemento.</exception>
      <returns vsli:raw="The single element of the input sequence, or &lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the sequence contains no elements.">Único elemento de la secuencia de entrada o <c>default</c>(<paramref name="TSource" />) si la secuencia no contiene ningún elemento.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Devuelve el único elemento de una secuencia que cumpla la condición especificada, o bien, un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a single element from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se va a devolver un único elemento.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Función que va a probar si un elemento satisface una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Varios elementos satisfacen la condición de <paramref name="predicate" />.</exception>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;, or &lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if no such element is found.">Único elemento de la secuencia de entrada que satisface la condición en <paramref name="predicate" /> o <c>default</c>(<paramref name="TSource" />) si no se encuentra dicho elemento.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Bypasses a specified number of elements in a sequence and then returns the remaining elements.">Omite un número especificado de elementos en una secuencia y luego devuelve los elementos restantes.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se van a devolver los elementos.</param>
      <param name="count" vsli:raw="The number of elements to skip before returning the remaining elements.">Número de elementos que se van a omitir antes de devolver los elementos restantes.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements that occur after the specified index in the input sequence.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos que hay después del índice especificado en la secuencia de entrada.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns a new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; with the last &lt;paramref name=&quot;count&quot; /&gt; elements of the source queryable sequence omitted.">Devuelve una nueva secuencia consultable que contiene los elementos de <paramref name="source" /> con los últimos elementos de <paramref name="count" /> de la secuencia consultable de origen omitida.</summary>
      <param name="source" vsli:raw="A queryable sequence.">Secuencia consultable.</param>
      <param name="count" vsli:raw="The number of elements to omit from the end of the queryable sequence.">Número de elementos que se van a omitir desde el final de la secuencia consultable.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence.">Tipo de los elementos de la secuencia consultable.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A new queryable sequence that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; minus &lt;paramref name=&quot;count&quot; /&gt; elements from the end of the queryable sequence.">Nueva secuencia consultable que contiene los elementos de <paramref name="source" /> menos los elementos de <paramref name="count" /> de la secuencia consultable de origen.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.">Omite los elementos de una secuencia en tanto que el valor de una condición especificada sea true y luego devuelve los elementos restantes.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se van a devolver los elementos.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from &lt;paramref name=&quot;source&quot; /&gt; starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de <paramref name="source" /> comenzando por el primer elemento de la serie lineal que no pasa la prueba especificada por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.">Omite los elementos de una secuencia en tanto que el valor de una condición especificada sea true y luego devuelve los elementos restantes. El índice del elemento se usa en la lógica de la función de predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">
        <see cref="T:System.Linq.IQueryable`1" /> del que se van a devolver los elementos.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of this function represents the index of the source element.">Función que va a probar cada elemento para determinar si satisface una condición; el segundo parámetro de esta función representa el índice del elemento de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from &lt;paramref name=&quot;source&quot; /&gt; starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de <paramref name="source" /> comenzando por el primer elemento de la serie lineal que no pasa la prueba especificada por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Decimal" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Double" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Int32" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Int64" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcula la suma de una secuencia de valores <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Secuencia de valores <see cref="T:System.Single" /> cuya suma se va a calcular.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the values in the sequence.">Suma de los valores de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Decimal" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Double" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Int32" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Int64" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Decimal" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Double" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Int32" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Int64" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La suma es mayor que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Single" /> que aceptan valores NULL que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcula la suma de la secuencia de valores <see cref="T:System.Single" /> que se obtiene al invocar una función de proyección en cada elemento de la secuencia de entrada.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Secuencia de valores de tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Función de proyección que se va a aplicar a cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="The sum of the projected values.">Suma de los valores proyectados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns a specified number of contiguous elements from the start of a sequence.">Devuelve un número especificado de elementos contiguos desde el principio de una secuencia.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Secuencia cuyos elementos se van a devolver.</param>
      <param name="count" vsli:raw="The number of elements to return.">Número de elementos que se van a devolver.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the specified number of elements from the start of &lt;paramref name=&quot;source&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene el número especificado de elementos desde el comienzo de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns a new queryable sequence that contains the last &lt;paramref name=&quot;count&quot; /&gt; elements from &lt;paramref name=&quot;source&quot; /&gt;.">Devuelve una nueva secuencia consultable que contiene los últimos elementos <paramref name="count" /> de <paramref name="source" />.</summary>
      <param name="source" vsli:raw="A queryable sequence instance.">Instancia de secuencia consultable.</param>
      <param name="count" vsli:raw="The number of elements to take from the end of the queryable sequence.">Número de elementos que se van a tomar desde el final de la secuencia consultable.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence.">Tipo de los elementos de la secuencia consultable.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A new queryable sequence that contains the last &lt;paramref name=&quot;count&quot; /&gt; elements from &lt;paramref name=&quot;source&quot; /&gt;.">Nueva secuencia consultable que contiene los últimos elementos <paramref name="count" /> de <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true.">Devuelve los elementos de una secuencia en tanto que el valor de una condición especificada sea true.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Secuencia cuyos elementos se van a devolver.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence occurring before the element at which the test specified by &lt;paramref name=&quot;predicate&quot; /&gt; no longer passes.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de la secuencia de entrada que se encuentran antes del elemento en el que la prueba especificada <paramref name="predicate" /> no se realiza correctamente.</returns>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.">Devuelve los elementos de una secuencia en tanto que el valor de una condición especificada sea true. El índice del elemento se usa en la lógica de la función de predicado.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Secuencia cuyos elementos se van a devolver.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.">Función que va a probar cada elemento para determinar si satisface una condición; el segundo parámetro de la función representa el índice del elemento de la secuencia de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence occurring before the element at which the test specified by &lt;paramref name=&quot;predicate&quot; /&gt; no longer passes.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de la secuencia de entrada que se encuentran antes del elemento en el que la prueba especificada <paramref name="predicate" /> no se realiza correctamente.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.">Realiza una clasificación posterior de los elementos de una secuencia en orden ascendentes con arreglo a una clave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">
        <see cref="T:System.Linq.IOrderedQueryable`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedQueryable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.">Realiza una clasificación posterior de los elementos de una secuencia en orden ascendente utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">
        <see cref="T:System.Linq.IOrderedQueryable`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedQueryable`1" /> cuyos elementos se ordenan con arreglo a una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.">Realiza una clasificación posterior de los elementos de una secuencia en orden descendente con arreglo a una clave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">
        <see cref="T:System.Linq.IOrderedQueryable`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo de la clave devuelta por la función representada en <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Una interfaz <see cref="T:System.Linq.IOrderedQueryable`1" /> cuyos elementos se ordenan de manera descendente con arreglo a una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.">Realiza una clasificación posterior de los elementos de una secuencia en orden descendente utilizando un comparador especificado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">
        <see cref="T:System.Linq.IOrderedQueryable`1" /> que contiene los elementos que se van a ordenar.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Función para extraer una clave a partir de cada elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar claves.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key that is returned by the &lt;paramref name=&quot;keySelector&quot; /&gt; function.">Tipo de la clave que la función <paramref name="keySelector" /> devuelve.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="comparer" /> es <see langword="null" />.</exception>
      <returns vsli:raw="A collection whose elements are sorted in descending order according to a key.">Colección cuyos elementos están ordenados de manera descendente de acuerdo con una clave.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using the default equality comparer.">Proporciona la unión de conjuntos de dos secuencias utilizando el comparador de igualdad predeterminado.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements form the first set for the union operation.">Secuencia cuyos elementos forman el primer conjunto de la operación de unión.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements form the second set for the union operation.">Secuencia cuyos elementos forman el segundo conjunto de la operación de unión.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de las dos secuencias de entrada, excepto los duplicados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Proporciona la unión de conjuntos de dos secuencias a través de un objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements form the first set for the union operation.">Secuencia cuyos elementos forman el primer conjunto de la operación de unión.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements form the second set for the union operation.">Secuencia cuyos elementos forman el segundo conjunto de la operación de unión.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo de los elementos de las secuencias de entrada.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de las dos secuencias de entrada, excepto los duplicados.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtra una secuencia de valores en función de un predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to filter.">
        <see cref="T:System.Linq.IQueryable`1" /> que se va a filtrar.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Función para probar cada elemento de una condición.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de la secuencia de entrada que satisfacen la condición especificada en <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.">Filtra una secuencia de valores en función de un predicado. El índice de cada elemento se usa en la lógica de la función de predicado.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to filter.">
        <see cref="T:System.Linq.IQueryable`1" /> que se va a filtrar.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.">Función que va a probar cada elemento para determinar si satisface una condición; el segundo parámetro de la función representa el índice del elemento de la secuencia de origen.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo de los elementos de <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene los elementos de la secuencia de entrada que satisfacen la condición especificada en <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Zip``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary vsli:raw="Produces a sequence of tuples with elements from the two specified sequences.">Genera una secuencia de tuplas con elementos a partir de las dos secuencias especificadas.</summary>
      <param name="source1" vsli:raw="The first sequence to merge.">Primera secuencia que se va a combinar.</param>
      <param name="source2" vsli:raw="The second sequence to merge.">Segunda secuencia que se va a combinar.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Tipo de los elementos de la primera secuencia de entrada.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Tipo de los elementos de la segunda secuencia de entrada.</typeparam>
      <returns vsli:raw="A sequence of tuples with elements taken from the first and second sequences, in that order.">Secuencia de tuplas con elementos tomados de la primera y la segunda secuencia, en ese orden.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Merges two sequences by using the specified predicate function.">Combina dos secuencias utilizando la función de predicado especificada.</summary>
      <param name="source1" vsli:raw="The first sequence to merge.">Primera secuencia que se va a combinar.</param>
      <param name="source2" vsli:raw="The second sequence to merge.">Segunda secuencia que se va a combinar.</param>
      <param name="resultSelector" vsli:raw="A function that specifies how to merge the elements from the two sequences.">Función que especifica cómo combinar los elementos de las dos secuencias.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Tipo de los elementos de la primera secuencia de entrada.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Tipo de los elementos de la segunda secuencia de entrada.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the result sequence.">Tipo de los elementos de la secuencia de resultados.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> es <see langword="null" />.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains merged elements of two input sequences.">
        <see cref="T:System.Linq.IQueryable`1" /> que contiene elementos combinados de las dos secuencias de entrada.</returns>
    </member>
  </members>
</doc>